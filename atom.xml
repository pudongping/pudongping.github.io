<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>热浪编程</title>
  
  <subtitle>蒲东平的博客</subtitle>
  <link href="https://pudongping.github.io/atom.xml" rel="self"/>
  
  <link href="https://pudongping.github.io/"/>
  <updated>2025-06-09T07:08:18.169Z</updated>
  <id>https://pudongping.github.io/</id>
  
  <author>
    <name>Alex</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>告别数据库瓶颈！用这个技巧让你的程序跑得飞快！</title>
    <link href="https://pudongping.github.io/posts/231318cc.html"/>
    <id>https://pudongping.github.io/posts/231318cc.html</id>
    <published>2025-06-09T07:07:28.000Z</published>
    <updated>2025-06-09T07:08:18.169Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在日常开发中，数据库连接的管理是一个非常重要的环节。为了避免频繁地创建和销毁数据库连接，我们可以通过&lt;strong&gt;连接池&lt;/strong&gt;来提高系统的性能和响应速度。连接池能够有效地重用已有的连接，避免重复的连接创建和销毁过程。&lt;/p&gt;
&lt;p&gt;今天，我们将通过一个简单的例</summary>
        
      
    
    
    
    <category term="Python" scheme="https://pudongping.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://pudongping.github.io/tags/Python/"/>
    
    <category term="数据库" scheme="https://pudongping.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="连接池" scheme="https://pudongping.github.io/tags/%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>HTTP2.0 从原理到实践，保证把你治得服服帖帖！</title>
    <link href="https://pudongping.github.io/posts/96db3e15.html"/>
    <id>https://pudongping.github.io/posts/96db3e15.html</id>
    <published>2025-06-06T01:59:34.000Z</published>
    <updated>2025-06-09T07:04:32.799Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;HTTP 是 Web 传输的基础协议，随着互联网的发展，它不断演进，从最初的 HTTP/1.0 到 HTTP/1.1，再到如今的 HTTP/2，每个版本都带来了显著的改进。&lt;/p&gt;
&lt;p&gt;本篇文章将深入浅出地讲解</summary>
        
      
    
    
    
    <category term="科普" scheme="https://pudongping.github.io/categories/%E7%A7%91%E6%99%AE/"/>
    
    
    <category term="HTTP" scheme="https://pudongping.github.io/tags/HTTP/"/>
    
    <category term="HTTP2.0" scheme="https://pudongping.github.io/tags/HTTP2-0/"/>
    
  </entry>
  
  <entry>
    <title>还在用 Jmeter 做压测？试试 oha 吧！你会毫不犹豫的爱上它！</title>
    <link href="https://pudongping.github.io/posts/869fb74d.html"/>
    <id>https://pudongping.github.io/posts/869fb74d.html</id>
    <published>2025-06-05T02:44:44.000Z</published>
    <updated>2025-06-09T07:04:32.800Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在进行 Web 服务和 API 性能测试时，选择合适的工具至关重要。市面上有很多工具可以帮助开发者进行负载测试，其中 &lt;strong&gt;OHA&lt;/strong&gt; 和 &lt;strong&gt;JMeter&lt;/strong&gt; 是两个常见的选择。&lt;/p&gt;
&lt;p&gt;今天，我们将一起探讨</summary>
        
      
    
    
    
    <category term="科普" scheme="https://pudongping.github.io/categories/%E7%A7%91%E6%99%AE/"/>
    
    
    <category term="Jmeter" scheme="https://pudongping.github.io/tags/Jmeter/"/>
    
    <category term="oha" scheme="https://pudongping.github.io/tags/oha/"/>
    
    <category term="压力测试" scheme="https://pudongping.github.io/tags/%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/"/>
    
    <category term="压测" scheme="https://pudongping.github.io/tags/%E5%8E%8B%E6%B5%8B/"/>
    
  </entry>
  
  <entry>
    <title>localhost 和 127.0.0.1 到底有啥区别？</title>
    <link href="https://pudongping.github.io/posts/a9aab3a3.html"/>
    <id>https://pudongping.github.io/posts/a9aab3a3.html</id>
    <published>2025-06-04T02:32:08.000Z</published>
    <updated>2025-06-09T07:04:32.799Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在开发中，我们经常会接触到 &lt;code&gt;localhost&lt;/code&gt; 和</summary>
        
      
    
    
    
    <category term="科普" scheme="https://pudongping.github.io/categories/%E7%A7%91%E6%99%AE/"/>
    
    
    <category term="科普" scheme="https://pudongping.github.io/tags/%E7%A7%91%E6%99%AE/"/>
    
  </entry>
  
  <entry>
    <title>又双叒叕出来了一款船新Copilot！腾讯终于发大招了！码农们又可以丝滑摸鱼啦～</title>
    <link href="https://pudongping.github.io/posts/bd2219d.html"/>
    <id>https://pudongping.github.io/posts/bd2219d.html</id>
    <published>2024-12-11T16:00:58.000Z</published>
    <updated>2024-12-13T02:55:52.624Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;这几天在腾讯云开发者社区写文章时，老是给我下面这个弹窗提示，要我去体验一下这款 &lt;strong&gt;AI 代码助手&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/medias/loading.gif&quot;</summary>
        
      
    
    
    
    <category term="AI" scheme="https://pudongping.github.io/categories/AI/"/>
    
    
    <category term="AI" scheme="https://pudongping.github.io/tags/AI/"/>
    
    <category term="Copilot" scheme="https://pudongping.github.io/tags/Copilot/"/>
    
    <category term="编程助手" scheme="https://pudongping.github.io/tags/%E7%BC%96%E7%A8%8B%E5%8A%A9%E6%89%8B/"/>
    
  </entry>
  
  <entry>
    <title>Grequests，非常 Nice 的 Python 异步 HTTP 请求神器</title>
    <link href="https://pudongping.github.io/posts/22d60526.html"/>
    <id>https://pudongping.github.io/posts/22d60526.html</id>
    <published>2024-12-03T03:51:16.000Z</published>
    <updated>2024-12-03T03:52:24.028Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在 Python 开发中，处理 HTTP 请求是一项基础而重要的任务。我们经常需要从网络获取数据，或者向服务器发送数据。&lt;/p&gt;
&lt;p&gt;我们已知的 &lt;code&gt;requests&lt;/code&gt; 库已经是相当的牛掰了，但是比较遗憾的是</summary>
        
      
    
    
    
    <category term="Python" scheme="https://pudongping.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://pudongping.github.io/tags/Python/"/>
    
    <category term="异步编程" scheme="https://pudongping.github.io/tags/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>通过标签清理微信好友：Python自动化脚本解析</title>
    <link href="https://pudongping.github.io/posts/5e38f4b6.html"/>
    <id>https://pudongping.github.io/posts/5e38f4b6.html</id>
    <published>2024-12-02T02:08:03.000Z</published>
    <updated>2024-12-02T02:09:06.168Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;微信已经成为我们日常生活中不可或缺的社交工具。随着使用时间的增长，我们的微信好友列表可能会变得越来越臃肿。&lt;/p&gt;
&lt;p&gt;在上一篇文章中，我写了一个自动根据用户状态（好友将我们删除了还是拉黑了）将用户打上不同标签的工具。那么，已经将用户打好了标签之后，我们就可以&lt;stron</summary>
        
      
    
    
    
    <category term="Python" scheme="https://pudongping.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://pudongping.github.io/tags/Python/"/>
    
    <category term="自动化" scheme="https://pudongping.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>手撸了一个全自动微信清粉小工具（源码详解）</title>
    <link href="https://pudongping.github.io/posts/59c080d8.html"/>
    <id>https://pudongping.github.io/posts/59c080d8.html</id>
    <published>2024-12-01T09:23:36.000Z</published>
    <updated>2024-12-02T02:11:34.738Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在当今社交软件中，微信是最常用的通讯工具之一。然而，随着时间的推移，我们的好友列表中可能会出现一些不再活跃的账号，也就是我们俗称的“僵尸粉”。&lt;/p&gt;
&lt;p&gt;这些账号可能是由于长时间不使用、账号被封禁或者故意将我们删除或拉黑。为了保持好友列表的清洁和有效沟通，同时也为了帮助</summary>
        
      
    
    
    
    <category term="Python" scheme="https://pudongping.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://pudongping.github.io/tags/Python/"/>
    
    <category term="自动化" scheme="https://pudongping.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
    <category term="微信" scheme="https://pudongping.github.io/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>hyperf-throttle-requests，一个超牛的 PHP 限流神器</title>
    <link href="https://pudongping.github.io/posts/5ecf8336.html"/>
    <id>https://pudongping.github.io/posts/5ecf8336.html</id>
    <published>2024-11-30T05:24:52.000Z</published>
    <updated>2024-12-02T02:11:34.737Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在分布式系统和微服务架构中，API 的稳定性和可用性至关重要。为了保护后端服务不受恶意攻击和流量高峰的影响，请求频率限制（Rate Limiting）成为了一种常见的策略。&lt;/p&gt;
&lt;p&gt;Hyperf 框架作为一款高性能的 PHP</summary>
        
      
    
    
    
    <category term="PHP" scheme="https://pudongping.github.io/categories/PHP/"/>
    
    
    <category term="Hyperf" scheme="https://pudongping.github.io/tags/Hyperf/"/>
    
    <category term="PHP" scheme="https://pudongping.github.io/tags/PHP/"/>
    
    <category term="限流" scheme="https://pudongping.github.io/tags/%E9%99%90%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>hyperf-alarm-clock，一个自动计算代码执行时间，超时并发送通知的小工具</title>
    <link href="https://pudongping.github.io/posts/982b031b.html"/>
    <id>https://pudongping.github.io/posts/982b031b.html</id>
    <published>2024-11-29T02:07:09.000Z</published>
    <updated>2024-11-29T02:08:46.146Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在软件开发中，我们经常需要对代码执行时间进行监控，以确保系统的性能和稳定性。在 PHP 的世界里，Hyperf 框架以其高性能和丰富的组件生态而闻名，而今天我要介绍的是 Hyperf 生态中的一个小巧的插件包 ——</summary>
        
      
    
    
    
    <category term="PHP" scheme="https://pudongping.github.io/categories/PHP/"/>
    
    
    <category term="Hyperf" scheme="https://pudongping.github.io/tags/Hyperf/"/>
    
    <category term="PHP" scheme="https://pudongping.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>hyperf-wise-locksmith，一个高效的PHP分布式锁方案</title>
    <link href="https://pudongping.github.io/posts/a3ff01d2.html"/>
    <id>https://pudongping.github.io/posts/a3ff01d2.html</id>
    <published>2024-11-28T02:24:57.000Z</published>
    <updated>2024-11-28T02:25:50.784Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在分布式系统中，如何确保多台机器之间不会产生竞争条件，是一个常见且重要的问题。&lt;code&gt;hyperf-wise-locksmith&lt;/code&gt; 库作为 &lt;code&gt;Hyperf&lt;/code&gt;</summary>
        
      
    
    
    
    <category term="PHP" scheme="https://pudongping.github.io/categories/PHP/"/>
    
    
    <category term="锁" scheme="https://pudongping.github.io/tags/%E9%94%81/"/>
    
    <category term="Hyperf" scheme="https://pudongping.github.io/tags/Hyperf/"/>
    
    <category term="PHP" scheme="https://pudongping.github.io/tags/PHP/"/>
    
    <category term="分布式锁" scheme="https://pudongping.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>PHP 互斥锁：如何确保代码的线程安全？</title>
    <link href="https://pudongping.github.io/posts/f387a51d.html"/>
    <id>https://pudongping.github.io/posts/f387a51d.html</id>
    <published>2024-11-27T02:05:29.000Z</published>
    <updated>2024-11-27T02:17:27.803Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在多线程和高并发的环境下，我们经常会遇到需要确保代码段互斥执行的场景。比如，在电商平台中，当多个用户同时购买同一件商品时，如何确保库存的扣减是线程安全的？&lt;/p&gt;
&lt;p&gt;今天，我们将一起探讨这个问题，并介绍一个名为 &lt;code&gt;wise-locksmith&lt;/code&gt;</summary>
        
      
    
    
    
    <category term="PHP" scheme="https://pudongping.github.io/categories/PHP/"/>
    
    
    <category term="互斥锁" scheme="https://pudongping.github.io/tags/%E4%BA%92%E6%96%A5%E9%94%81/"/>
    
    <category term="锁" scheme="https://pudongping.github.io/tags/%E9%94%81/"/>
    
    <category term="PHP" scheme="https://pudongping.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>你可能不知道 xz 也是一种压缩格式，并且还相当惊艳</title>
    <link href="https://pudongping.github.io/posts/28e0065f.html"/>
    <id>https://pudongping.github.io/posts/28e0065f.html</id>
    <published>2024-11-26T02:51:24.000Z</published>
    <updated>2024-11-26T02:52:24.489Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在现代计算中，数据存储和传输的效率至关重要。为了节省存储空间和提高传输效率，文件压缩已成为一种普遍的需求。&lt;/p&gt;
&lt;p&gt;Linux 系统中有多种工具和格式可以实现文件压缩，最常见的包括</summary>
        
      
    
    
    
    <category term="Linux" scheme="https://pudongping.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://pudongping.github.io/tags/Linux/"/>
    
    <category term="XZ" scheme="https://pudongping.github.io/tags/XZ/"/>
    
    <category term="解压缩" scheme="https://pudongping.github.io/tags/%E8%A7%A3%E5%8E%8B%E7%BC%A9/"/>
    
  </entry>
  
  <entry>
    <title>Go语言中的加解密利器：go-crypto库全解析</title>
    <link href="https://pudongping.github.io/posts/4f904664.html"/>
    <id>https://pudongping.github.io/posts/4f904664.html</id>
    <published>2024-11-25T02:31:50.000Z</published>
    <updated>2024-11-25T02:32:42.149Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在软件开发中，数据安全和隐私保护越来越受到重视。Go 语言以其简洁高效的特性，成为了许多开发者的首选。然而，在实际项目中使用加解密时，还是需要在标准库的基础上做一些封装。&lt;code&gt;go-crypto&lt;/code&gt; 库应运而生，它是一个专为 Golang</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Go语言中json序列化的一个小坑，建议多留意一下</title>
    <link href="https://pudongping.github.io/posts/5fc86d1c.html"/>
    <id>https://pudongping.github.io/posts/5fc86d1c.html</id>
    <published>2024-11-24T14:27:52.000Z</published>
    <updated>2024-11-25T02:30:05.233Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在 Go 语言开发中，JSON（JavaScript Object Notation）因其简洁和广泛的兼容性，通常被用作数据交换的主要序列化格式。然而，当你深入使用 JSON 时，&lt;strong&gt;可能会发现它并不总是最佳选择&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;本文将探讨</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>如何在 Go 项目中隐藏敏感信息，比如避免暴露用户密码？</title>
    <link href="https://pudongping.github.io/posts/9d35cfe9.html"/>
    <id>https://pudongping.github.io/posts/9d35cfe9.html</id>
    <published>2024-11-23T04:19:35.000Z</published>
    <updated>2024-11-25T02:30:05.233Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在我们日常开发的 Go 项目中，用户信息管理是一个非常常见的场景。特别是当我们需要存储和处理用户密码等敏感信息时，如何确保这些信息不暴露给客户端就显得尤为重要。&lt;/p&gt;
&lt;p&gt;今天我们来讨论一个简单而实用的技巧——如何在返回用户数据时，隐藏密码字段。&lt;/p&gt;
&lt;h2</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>探索 Go 语言中的内存对齐：为什么结构体大小会有所不同？</title>
    <link href="https://pudongping.github.io/posts/8f8634cd.html"/>
    <id>https://pudongping.github.io/posts/8f8634cd.html</id>
    <published>2024-11-22T03:00:10.000Z</published>
    <updated>2024-11-22T03:00:53.310Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在 Go 语言中，内存对齐是一个经常被忽略但非常重要的概念。理解内存对齐不仅可以帮助我们写出更高效的代码，还能避免一些潜在的性能陷阱。&lt;/p&gt;
&lt;p&gt;在这篇文章中，我们将通过一个简单的例子来探讨 Go</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>聊聊 Go 语言中的 JSON 序列化与 js 前端交互类型失真问题</title>
    <link href="https://pudongping.github.io/posts/a370ff67.html"/>
    <id>https://pudongping.github.io/posts/a370ff67.html</id>
    <published>2024-11-21T02:40:21.000Z</published>
    <updated>2024-11-21T02:40:58.803Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在 Web 开发中，后端与前端之间的数据交换通常通过 JSON 格式进行。&lt;/p&gt;
&lt;p&gt;然而，在处理数字，尤其是大整数时，我们可能会遇到精度丢失的问题。这是因为 JavaScript 中的数字类型只能安全地处理一定范围内的整数。其数字类型是基于 64 位双精度浮点数的</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>如何在Go语言中实现表单验证？整一个validator吧！</title>
    <link href="https://pudongping.github.io/posts/59486883.html"/>
    <id>https://pudongping.github.io/posts/59486883.html</id>
    <published>2024-11-20T03:19:49.000Z</published>
    <updated>2024-11-20T03:20:59.771Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在现代 Web 开发中，表单验证和错误处理是至关重要的环节，尤其是在多语言环境下。&lt;/p&gt;
&lt;p&gt;本文将通过一个实际的示例，演示如何使用 Go 语言的 Gin 框架结合 &lt;code&gt;validator&lt;/code&gt;</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>使用漏桶和令牌桶实现API速率限制</title>
    <link href="https://pudongping.github.io/posts/ea016854.html"/>
    <id>https://pudongping.github.io/posts/ea016854.html</id>
    <published>2024-11-19T07:06:58.000Z</published>
    <updated>2024-11-19T07:08:32.605Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在现代 Web 应用程序中，流量的突增是不可避免的。为防止服务器被过多的请求压垮，&lt;strong&gt;限流（Rate Limiting）&lt;/strong&gt; 是一个至关重要的技术手段。&lt;/p&gt;
&lt;p&gt;本文将通过 Go 语言的 Gin</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
    <category term="限流" scheme="https://pudongping.github.io/tags/%E9%99%90%E6%B5%81/"/>
    
    <category term="漏桶" scheme="https://pudongping.github.io/tags/%E6%BC%8F%E6%A1%B6/"/>
    
    <category term="令牌桶" scheme="https://pudongping.github.io/tags/%E4%BB%A4%E7%89%8C%E6%A1%B6/"/>
    
  </entry>
  
</feed>
