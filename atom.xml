<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>热浪编程</title>
  
  <subtitle>蒲东平的博客</subtitle>
  <link href="https://pudongping.github.io/atom.xml" rel="self"/>
  
  <link href="https://pudongping.github.io/"/>
  <updated>2024-11-22T03:00:48.342Z</updated>
  <id>https://pudongping.github.io/</id>
  
  <author>
    <name>Alex</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>探索 Go 语言中的内存对齐：为什么结构体大小会有所不同？</title>
    <link href="https://pudongping.github.io/posts/8f8634cd.html"/>
    <id>https://pudongping.github.io/posts/8f8634cd.html</id>
    <published>2024-11-22T03:00:10.000Z</published>
    <updated>2024-11-22T03:00:48.342Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在 Go 语言中，内存对齐是一个经常被忽略但非常重要的概念。理解内存对齐不仅可以帮助我们写出更高效的代码，还能避免一些潜在的性能陷阱。&lt;/p&gt;
&lt;p&gt;在这篇文章中，我们将通过一个简单的例子来探讨 Go</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>聊聊 Go 语言中的 JSON 序列化与 js 前端交互类型失真问题</title>
    <link href="https://pudongping.github.io/posts/a370ff67.html"/>
    <id>https://pudongping.github.io/posts/a370ff67.html</id>
    <published>2024-11-21T02:40:21.000Z</published>
    <updated>2024-11-21T02:40:58.803Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在 Web 开发中，后端与前端之间的数据交换通常通过 JSON 格式进行。&lt;/p&gt;
&lt;p&gt;然而，在处理数字，尤其是大整数时，我们可能会遇到精度丢失的问题。这是因为 JavaScript 中的数字类型只能安全地处理一定范围内的整数。其数字类型是基于 64 位双精度浮点数的</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>如何在Go语言中实现表单验证？整一个validator吧！</title>
    <link href="https://pudongping.github.io/posts/59486883.html"/>
    <id>https://pudongping.github.io/posts/59486883.html</id>
    <published>2024-11-20T03:19:49.000Z</published>
    <updated>2024-11-20T03:20:59.771Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在现代 Web 开发中，表单验证和错误处理是至关重要的环节，尤其是在多语言环境下。&lt;/p&gt;
&lt;p&gt;本文将通过一个实际的示例，演示如何使用 Go 语言的 Gin 框架结合 &lt;code&gt;validator&lt;/code&gt;</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>使用漏桶和令牌桶实现API速率限制</title>
    <link href="https://pudongping.github.io/posts/ea016854.html"/>
    <id>https://pudongping.github.io/posts/ea016854.html</id>
    <published>2024-11-19T07:06:58.000Z</published>
    <updated>2024-11-19T07:08:32.605Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在现代 Web 应用程序中，流量的突增是不可避免的。为防止服务器被过多的请求压垮，&lt;strong&gt;限流（Rate Limiting）&lt;/strong&gt; 是一个至关重要的技术手段。&lt;/p&gt;
&lt;p&gt;本文将通过 Go 语言的 Gin</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
    <category term="漏桶" scheme="https://pudongping.github.io/tags/%E6%BC%8F%E6%A1%B6/"/>
    
    <category term="令牌桶" scheme="https://pudongping.github.io/tags/%E4%BB%A4%E7%89%8C%E6%A1%B6/"/>
    
    <category term="限流" scheme="https://pudongping.github.io/tags/%E9%99%90%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>Go语言中使用JWT鉴权、Token刷新完整示例，拿去直接用！</title>
    <link href="https://pudongping.github.io/posts/9e517530.html"/>
    <id>https://pudongping.github.io/posts/9e517530.html</id>
    <published>2024-11-18T03:44:41.000Z</published>
    <updated>2024-11-18T03:45:47.526Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在现代 Web 应用中，JWT（JSON Web Token）已经成为了主流的认证与授权解决方案。它轻量、高效、易于实现，并且非常适合于微服务架构。&lt;/p&gt;
&lt;p&gt;在本文中，我们将通过 Go 语言及其流行的 Gin 框架，来深入探讨如何使用 JWT</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
    <category term="JWT" scheme="https://pudongping.github.io/tags/JWT/"/>
    
  </entry>
  
  <entry>
    <title>分布式唯一ID生成：深入理解Snowflake算法在Go中的实现</title>
    <link href="https://pudongping.github.io/posts/821f69.html"/>
    <id>https://pudongping.github.io/posts/821f69.html</id>
    <published>2024-11-17T07:15:59.000Z</published>
    <updated>2024-11-18T03:43:20.144Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在分布式系统中，为了确保每个节点生成的 ID 在整个系统中是唯一的，我们需要一种高效且可靠的 ID 生成机制。&lt;/p&gt;
&lt;h2 id=&quot;分布式-ID-的特点&quot;&gt;&lt;a href=&quot;#分布式-ID-的特点&quot; class=&quot;headerlink&quot; title=&quot;分布式 ID</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Viper，一个Go语言配置管理神器！</title>
    <link href="https://pudongping.github.io/posts/8026d3b4.html"/>
    <id>https://pudongping.github.io/posts/8026d3b4.html</id>
    <published>2024-11-16T08:36:36.000Z</published>
    <updated>2024-11-18T03:43:20.144Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在现代软件开发中，良好的配置管理可以极大地提升应用的灵活性和可维护性。&lt;/p&gt;
&lt;p&gt;在 Go 语言中，Viper 是一个功能强大且广泛使用的配置管理库，它支持从多个来源读取配置，包括文件、环境变量、远程配置中心等。本文将详细介绍如何使用 Viper</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="微服务" scheme="https://pudongping.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Go Web服务中如何优雅平滑重启？</title>
    <link href="https://pudongping.github.io/posts/cf5ac086.html"/>
    <id>https://pudongping.github.io/posts/cf5ac086.html</id>
    <published>2024-11-15T02:30:01.000Z</published>
    <updated>2024-11-15T02:30:57.395Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在生产环境中，当我们需要对正在运行的服务进行升级时，如何确保不影响当前未处理完的请求，同时又能应用新的代码，是个极具挑战性的问题。&lt;/p&gt;
&lt;p&gt;传统的做法通常是停止当前服务，部署新代码后再重启服务，但这种方式会导致正在处理的请求被强制中断，用户体验会受到很大的影响。&lt;/p</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Go Web服务中如何优雅关机？</title>
    <link href="https://pudongping.github.io/posts/2e2c4d21.html"/>
    <id>https://pudongping.github.io/posts/2e2c4d21.html</id>
    <published>2024-11-14T03:54:11.000Z</published>
    <updated>2024-11-14T03:54:59.166Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在构建 Web 服务时，我们往往会遇到一个棘手的问题：&lt;strong&gt;当我们想要停止服务时，如何确保正在处理的请求能够顺利完成，而不是突然中断？&lt;/strong&gt;</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>用 Zap 轻松搞定 Go 语言中的结构化日志</title>
    <link href="https://pudongping.github.io/posts/b16382e2.html"/>
    <id>https://pudongping.github.io/posts/b16382e2.html</id>
    <published>2024-11-13T09:29:13.000Z</published>
    <updated>2024-11-13T09:31:18.945Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在开发现代应用程序时，日志记录是一个不可或缺的部分。它不仅能帮助我们跟踪程序的运行状态，还能在出现问题时提供宝贵的调试信息。&lt;/p&gt;
&lt;p&gt;在 Go 语言中，有许多日志库可供选择，但在性能和灵活性方面，Zap 是其中的佼佼者。&lt;/p&gt;
&lt;p&gt;今天，我将带你深入了解如何在</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
    <category term="Zap" scheme="https://pudongping.github.io/tags/Zap/"/>
    
  </entry>
  
  <entry>
    <title>Redis 实现高效任务队列：异步队列与延迟队列详解</title>
    <link href="https://pudongping.github.io/posts/204a3169.html"/>
    <id>https://pudongping.github.io/posts/204a3169.html</id>
    <published>2024-11-12T03:58:39.000Z</published>
    <updated>2024-11-12T04:00:42.323Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在现代开发中，任务队列是一种非常常见的设计模式。它允许我们将需要耗时的操作放到后台执行，从而提高系统的响应速度和并发能力。而在众多的技术选型中，Redis 凭借其高性能和简单易用性，成为了任务队列的理想选择。&lt;/p&gt;
&lt;p&gt;本文将从零开始，带大家了解如何使用 Redis</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
    <category term="Redis" scheme="https://pudongping.github.io/tags/Redis/"/>
    
    <category term="队列" scheme="https://pudongping.github.io/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>如何用Redis高效实现点赞功能？用Set？还是Bitmap？</title>
    <link href="https://pudongping.github.io/posts/3adceb1d.html"/>
    <id>https://pudongping.github.io/posts/3adceb1d.html</id>
    <published>2024-11-12T02:51:06.000Z</published>
    <updated>2024-11-12T02:52:15.214Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在众多软件应用中，&lt;strong&gt;点赞&lt;/strong&gt;功能几乎成了所有应用中的“标配”。但实现一个高效的点赞功能并不简单，尤其是在面对大规模的用户量和高并发场景时。&lt;/p&gt;
&lt;p&gt;今天，我们就从实际需求出发，探索如何利用 Redis</summary>
        
      
    
    
    
    <category term="Redis" scheme="https://pudongping.github.io/categories/Redis/"/>
    
    
    <category term="Redis" scheme="https://pudongping.github.io/tags/Redis/"/>
    
    <category term="Cache" scheme="https://pudongping.github.io/tags/Cache/"/>
    
  </entry>
  
  <entry>
    <title>Go语言中高效使用Redis的Pipeline</title>
    <link href="https://pudongping.github.io/posts/9af95445.html"/>
    <id>https://pudongping.github.io/posts/9af95445.html</id>
    <published>2024-08-19T07:04:17.000Z</published>
    <updated>2024-08-19T07:04:59.363Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在构建高性能应用时，Redis 经常成为开发者的首选工具。作为一个内存数据库，Redis 可以处理大量的数据操作，但如果每个命令都单独发送，网络延迟会成为瓶颈，影响性能。&lt;/p&gt;
&lt;p&gt;这时，Redis 的 &lt;strong&gt;Pipeline&lt;/strong&gt; 和</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
    <category term="Redis" scheme="https://pudongping.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Go语言中如何扫描Redis中大量的key</title>
    <link href="https://pudongping.github.io/posts/9b127c3.html"/>
    <id>https://pudongping.github.io/posts/9b127c3.html</id>
    <published>2024-08-16T14:16:56.000Z</published>
    <updated>2024-08-16T14:17:42.674Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在 Redis 中，当我们需要遍历大量的键时，直接使用 &lt;code&gt;KEYS&lt;/code&gt; 命令会面临性能瓶颈，尤其是在键数量非常多的情况下。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;KEYS&lt;/code&gt; 命令会一次性返回所有匹配的键，这可能导致 Redis</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
    <category term="Redis" scheme="https://pudongping.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Go语言中使用sqlx来操作事务</title>
    <link href="https://pudongping.github.io/posts/1ffc0233.html"/>
    <id>https://pudongping.github.io/posts/1ffc0233.html</id>
    <published>2024-08-15T07:10:30.000Z</published>
    <updated>2024-08-15T07:11:21.968Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在应用程序中，数据库事务的使用至关重要。它可以确保操作的原子性、一致性、隔离性和持久性（ACID）。&lt;code&gt;github.com/jmoiron/sqlx&lt;/code&gt; 包提供了一个便利的方法来简化对数据库的操作。&lt;/p&gt;
&lt;p&gt;本文将介绍如何使用</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
    <category term="MySQL" scheme="https://pudongping.github.io/tags/MySQL/"/>
    
    <category term="sqlx" scheme="https://pudongping.github.io/tags/sqlx/"/>
    
  </entry>
  
  <entry>
    <title>Go语言中使用 sqlx 来操作 MySQL</title>
    <link href="https://pudongping.github.io/posts/4390abbe.html"/>
    <id>https://pudongping.github.io/posts/4390abbe.html</id>
    <published>2024-08-14T06:04:14.000Z</published>
    <updated>2024-08-14T06:05:13.277Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Go 语言以其高效和简洁的语法逐渐受到开发者的青睐。在实际开发中，数据库操作是不可避免的任务之一。虽然标准库提供了 &lt;code&gt;database/sql&lt;/code&gt; 包来支持数据库操作，但使用起来略显繁琐。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sqlx&lt;/code&gt;</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
    <category term="MySQL" scheme="https://pudongping.github.io/tags/MySQL/"/>
    
    <category term="sqlx" scheme="https://pudongping.github.io/tags/sqlx/"/>
    
  </entry>
  
  <entry>
    <title>Go 语言中的 MySQL 事务操作</title>
    <link href="https://pudongping.github.io/posts/50c9af33.html"/>
    <id>https://pudongping.github.io/posts/50c9af33.html</id>
    <published>2024-08-13T08:33:53.000Z</published>
    <updated>2024-08-13T08:34:35.269Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在现代应用程序中，数据的完整性和一致性至关重要。MySQL 的事务功能提供了一种确保操作安全且可靠的机制。&lt;/p&gt;
&lt;p&gt;在这篇文章中，我将介绍什么是事务，如何在 Go 语言中进行 MySQL 事务操作。&lt;/p&gt;
&lt;h2 id=&quot;一、什么是事务？&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
    <category term="MySQL" scheme="https://pudongping.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Go语言中进行MySQL预处理和SQL注入防护</title>
    <link href="https://pudongping.github.io/posts/cd962b5b.html"/>
    <id>https://pudongping.github.io/posts/cd962b5b.html</id>
    <published>2024-08-12T14:37:32.000Z</published>
    <updated>2024-08-12T14:38:15.682Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在现代 web 应用开发中，安全性是我们必须重视的一个方面。SQL 注入是常见的攻击手法之一，它允许攻击者通过构造特殊的 SQL 查询来访问、修改数据库中的数据。&lt;/p&gt;
&lt;p&gt;在这篇文章中，我们将探讨如何在 Go 语言中进行 MySQL 数据库的预处理操作，以有效防止</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
    <category term="MySQL" scheme="https://pudongping.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>手摸手教你，从0到1开发一个Chrome浏览器插件</title>
    <link href="https://pudongping.github.io/posts/2980e851.html"/>
    <id>https://pudongping.github.io/posts/2980e851.html</id>
    <published>2024-08-09T04:13:02.000Z</published>
    <updated>2024-08-09T04:15:31.195Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;开发 Chrome 浏览器插件（也称为扩展）是一段有趣且有成就感的过程。在本教程中，我将引导你从零开始，逐步创建一个简单的 Chrome 插件。无论你是编程新手还是有一定基础的用户，我们都将以简单易懂的方式介绍整个过程。&lt;/p&gt;
&lt;h2</summary>
        
      
    
    
    
    <category term="前端" scheme="https://pudongping.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://pudongping.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Chrome" scheme="https://pudongping.github.io/tags/Chrome/"/>
    
  </entry>
  
  <entry>
    <title>Go语言中如何连接 MySQL，基础必备！</title>
    <link href="https://pudongping.github.io/posts/48b3e862.html"/>
    <id>https://pudongping.github.io/posts/48b3e862.html</id>
    <published>2024-08-08T17:10:47.000Z</published>
    <updated>2024-08-08T17:11:34.804Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在现代应用中，数据库操作是必不可少的一部分，而 Go 语言凭借其高效性和并发处理能力，成为了越来越多开发者的选择。&lt;/p&gt;
&lt;p&gt;在本教程中，我们将学习如何使用 Go 语言与 MySQL 数据库进行基本的 CRUD（创建、读取、更新、删除）操作。我们将使用</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
  </entry>
  
</feed>
