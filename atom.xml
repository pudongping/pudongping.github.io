<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>热浪编程</title>
  
  <subtitle>蒲东平的博客</subtitle>
  <link href="https://pudongping.github.io/atom.xml" rel="self"/>
  
  <link href="https://pudongping.github.io/"/>
  <updated>2024-11-15T02:30:45.386Z</updated>
  <id>https://pudongping.github.io/</id>
  
  <author>
    <name>Alex</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go Web服务中如何优雅平滑重启？</title>
    <link href="https://pudongping.github.io/posts/cf5ac086.html"/>
    <id>https://pudongping.github.io/posts/cf5ac086.html</id>
    <published>2024-11-15T02:30:01.000Z</published>
    <updated>2024-11-15T02:30:45.386Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在生产环境中，当我们需要对正在运行的服务进行升级时，如何确保不影响当前未处理完的请求，同时又能应用新的代码，是个极具挑战性的问题。&lt;/p&gt;
&lt;p&gt;传统的做法通常是停止当前服务，部署新代码后再重启服务，但这种方式会导致正在处理的请求被强制中断，用户体验会受到很大的影响。&lt;/p</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Go Web服务中如何优雅关机？</title>
    <link href="https://pudongping.github.io/posts/2e2c4d21.html"/>
    <id>https://pudongping.github.io/posts/2e2c4d21.html</id>
    <published>2024-11-14T03:54:11.000Z</published>
    <updated>2024-11-14T03:54:59.166Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在构建 Web 服务时，我们往往会遇到一个棘手的问题：&lt;strong&gt;当我们想要停止服务时，如何确保正在处理的请求能够顺利完成，而不是突然中断？&lt;/strong&gt;</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>用 Zap 轻松搞定 Go 语言中的结构化日志</title>
    <link href="https://pudongping.github.io/posts/b16382e2.html"/>
    <id>https://pudongping.github.io/posts/b16382e2.html</id>
    <published>2024-11-13T09:29:13.000Z</published>
    <updated>2024-11-13T09:31:18.945Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在开发现代应用程序时，日志记录是一个不可或缺的部分。它不仅能帮助我们跟踪程序的运行状态，还能在出现问题时提供宝贵的调试信息。&lt;/p&gt;
&lt;p&gt;在 Go 语言中，有许多日志库可供选择，但在性能和灵活性方面，Zap 是其中的佼佼者。&lt;/p&gt;
&lt;p&gt;今天，我将带你深入了解如何在</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
    <category term="Zap" scheme="https://pudongping.github.io/tags/Zap/"/>
    
  </entry>
  
  <entry>
    <title>Redis 实现高效任务队列：异步队列与延迟队列详解</title>
    <link href="https://pudongping.github.io/posts/204a3169.html"/>
    <id>https://pudongping.github.io/posts/204a3169.html</id>
    <published>2024-11-12T03:58:39.000Z</published>
    <updated>2024-11-12T04:00:42.323Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在现代开发中，任务队列是一种非常常见的设计模式。它允许我们将需要耗时的操作放到后台执行，从而提高系统的响应速度和并发能力。而在众多的技术选型中，Redis 凭借其高性能和简单易用性，成为了任务队列的理想选择。&lt;/p&gt;
&lt;p&gt;本文将从零开始，带大家了解如何使用 Redis</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
    <category term="Redis" scheme="https://pudongping.github.io/tags/Redis/"/>
    
    <category term="队列" scheme="https://pudongping.github.io/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>如何用Redis高效实现点赞功能？用Set？还是Bitmap？</title>
    <link href="https://pudongping.github.io/posts/3adceb1d.html"/>
    <id>https://pudongping.github.io/posts/3adceb1d.html</id>
    <published>2024-11-12T02:51:06.000Z</published>
    <updated>2024-11-12T02:52:15.214Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在众多软件应用中，&lt;strong&gt;点赞&lt;/strong&gt;功能几乎成了所有应用中的“标配”。但实现一个高效的点赞功能并不简单，尤其是在面对大规模的用户量和高并发场景时。&lt;/p&gt;
&lt;p&gt;今天，我们就从实际需求出发，探索如何利用 Redis</summary>
        
      
    
    
    
    <category term="Redis" scheme="https://pudongping.github.io/categories/Redis/"/>
    
    
    <category term="Redis" scheme="https://pudongping.github.io/tags/Redis/"/>
    
    <category term="Cache" scheme="https://pudongping.github.io/tags/Cache/"/>
    
  </entry>
  
  <entry>
    <title>Go语言中高效使用Redis的Pipeline</title>
    <link href="https://pudongping.github.io/posts/9af95445.html"/>
    <id>https://pudongping.github.io/posts/9af95445.html</id>
    <published>2024-08-19T07:04:17.000Z</published>
    <updated>2024-08-19T07:04:59.363Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在构建高性能应用时，Redis 经常成为开发者的首选工具。作为一个内存数据库，Redis 可以处理大量的数据操作，但如果每个命令都单独发送，网络延迟会成为瓶颈，影响性能。&lt;/p&gt;
&lt;p&gt;这时，Redis 的 &lt;strong&gt;Pipeline&lt;/strong&gt; 和</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
    <category term="Redis" scheme="https://pudongping.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Go语言中如何扫描Redis中大量的key</title>
    <link href="https://pudongping.github.io/posts/9b127c3.html"/>
    <id>https://pudongping.github.io/posts/9b127c3.html</id>
    <published>2024-08-16T14:16:56.000Z</published>
    <updated>2024-08-16T14:17:42.674Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在 Redis 中，当我们需要遍历大量的键时，直接使用 &lt;code&gt;KEYS&lt;/code&gt; 命令会面临性能瓶颈，尤其是在键数量非常多的情况下。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;KEYS&lt;/code&gt; 命令会一次性返回所有匹配的键，这可能导致 Redis</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
    <category term="Redis" scheme="https://pudongping.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Go语言中使用sqlx来操作事务</title>
    <link href="https://pudongping.github.io/posts/1ffc0233.html"/>
    <id>https://pudongping.github.io/posts/1ffc0233.html</id>
    <published>2024-08-15T07:10:30.000Z</published>
    <updated>2024-08-15T07:11:21.968Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在应用程序中，数据库事务的使用至关重要。它可以确保操作的原子性、一致性、隔离性和持久性（ACID）。&lt;code&gt;github.com/jmoiron/sqlx&lt;/code&gt; 包提供了一个便利的方法来简化对数据库的操作。&lt;/p&gt;
&lt;p&gt;本文将介绍如何使用</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
    <category term="MySQL" scheme="https://pudongping.github.io/tags/MySQL/"/>
    
    <category term="sqlx" scheme="https://pudongping.github.io/tags/sqlx/"/>
    
  </entry>
  
  <entry>
    <title>Go语言中使用 sqlx 来操作 MySQL</title>
    <link href="https://pudongping.github.io/posts/4390abbe.html"/>
    <id>https://pudongping.github.io/posts/4390abbe.html</id>
    <published>2024-08-14T06:04:14.000Z</published>
    <updated>2024-08-14T06:05:13.277Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;Go 语言以其高效和简洁的语法逐渐受到开发者的青睐。在实际开发中，数据库操作是不可避免的任务之一。虽然标准库提供了 &lt;code&gt;database/sql&lt;/code&gt; 包来支持数据库操作，但使用起来略显繁琐。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sqlx&lt;/code&gt;</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
    <category term="MySQL" scheme="https://pudongping.github.io/tags/MySQL/"/>
    
    <category term="sqlx" scheme="https://pudongping.github.io/tags/sqlx/"/>
    
  </entry>
  
  <entry>
    <title>Go 语言中的 MySQL 事务操作</title>
    <link href="https://pudongping.github.io/posts/50c9af33.html"/>
    <id>https://pudongping.github.io/posts/50c9af33.html</id>
    <published>2024-08-13T08:33:53.000Z</published>
    <updated>2024-08-13T08:34:35.269Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在现代应用程序中，数据的完整性和一致性至关重要。MySQL 的事务功能提供了一种确保操作安全且可靠的机制。&lt;/p&gt;
&lt;p&gt;在这篇文章中，我将介绍什么是事务，如何在 Go 语言中进行 MySQL 事务操作。&lt;/p&gt;
&lt;h2 id=&quot;一、什么是事务？&quot;&gt;&lt;a</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
    <category term="MySQL" scheme="https://pudongping.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Go语言中进行MySQL预处理和SQL注入防护</title>
    <link href="https://pudongping.github.io/posts/cd962b5b.html"/>
    <id>https://pudongping.github.io/posts/cd962b5b.html</id>
    <published>2024-08-12T14:37:32.000Z</published>
    <updated>2024-08-12T14:38:15.682Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在现代 web 应用开发中，安全性是我们必须重视的一个方面。SQL 注入是常见的攻击手法之一，它允许攻击者通过构造特殊的 SQL 查询来访问、修改数据库中的数据。&lt;/p&gt;
&lt;p&gt;在这篇文章中，我们将探讨如何在 Go 语言中进行 MySQL 数据库的预处理操作，以有效防止</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
    <category term="MySQL" scheme="https://pudongping.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>手摸手教你，从0到1开发一个Chrome浏览器插件</title>
    <link href="https://pudongping.github.io/posts/2980e851.html"/>
    <id>https://pudongping.github.io/posts/2980e851.html</id>
    <published>2024-08-09T04:13:02.000Z</published>
    <updated>2024-08-09T04:15:31.195Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;开发 Chrome 浏览器插件（也称为扩展）是一段有趣且有成就感的过程。在本教程中，我将引导你从零开始，逐步创建一个简单的 Chrome 插件。无论你是编程新手还是有一定基础的用户，我们都将以简单易懂的方式介绍整个过程。&lt;/p&gt;
&lt;h2</summary>
        
      
    
    
    
    <category term="前端" scheme="https://pudongping.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://pudongping.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Chrome" scheme="https://pudongping.github.io/tags/Chrome/"/>
    
  </entry>
  
  <entry>
    <title>Go语言中如何连接 MySQL，基础必备！</title>
    <link href="https://pudongping.github.io/posts/48b3e862.html"/>
    <id>https://pudongping.github.io/posts/48b3e862.html</id>
    <published>2024-08-08T17:10:47.000Z</published>
    <updated>2024-08-08T17:11:34.804Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在现代应用中，数据库操作是必不可少的一部分，而 Go 语言凭借其高效性和并发处理能力，成为了越来越多开发者的选择。&lt;/p&gt;
&lt;p&gt;在本教程中，我们将学习如何使用 Go 语言与 MySQL 数据库进行基本的 CRUD（创建、读取、更新、删除）操作。我们将使用</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>一文弄懂Go语言的Context包，值得收藏！</title>
    <link href="https://pudongping.github.io/posts/f5eba23a.html"/>
    <id>https://pudongping.github.io/posts/f5eba23a.html</id>
    <published>2024-08-02T08:44:26.000Z</published>
    <updated>2024-08-02T08:45:20.149Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在开发高效且可维护的 Go 应用程序时，处理超时、取消操作和传递请求范围的数据变得至关重要。&lt;/p&gt;
&lt;p&gt;这时，Go 标准库中的 &lt;code&gt;context&lt;/code&gt; 包就显得尤其重要了，它提供了在不同 API</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
    <category term="Context" scheme="https://pudongping.github.io/tags/Context/"/>
    
  </entry>
  
  <entry>
    <title>通过IMAP协议使用Go语言解析邮件</title>
    <link href="https://pudongping.github.io/posts/60016311.html"/>
    <id>https://pudongping.github.io/posts/60016311.html</id>
    <published>2024-08-02T06:18:46.000Z</published>
    <updated>2024-08-02T06:20:18.906Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;电子邮件在现代通信中依然扮演着重要的角色。为了提升邮件处理的效率，使用编程语言进行自动化处理变得尤为重要。&lt;/p&gt;
&lt;p&gt;本文将详细介绍如何使用 Go 语言从 IMAP</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
    <category term="IMAP" scheme="https://pudongping.github.io/tags/IMAP/"/>
    
  </entry>
  
  <entry>
    <title>如何借助Redis巧妙的管理用户签到？——Bitmap篇</title>
    <link href="https://pudongping.github.io/posts/fe86d4b2.html"/>
    <id>https://pudongping.github.io/posts/fe86d4b2.html</id>
    <published>2024-07-18T10:23:06.000Z</published>
    <updated>2024-07-18T10:25:01.550Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;数据管理和分析是任何大小项目的重要组成部分。在管理如用户签到数据这类信息时，我们通常追求的是高效性和存储节省。&lt;/p&gt;
&lt;p&gt;今天，让我们一起探索一种既节省空间又高效的数据管理方法——Redis 的位操作（Bit operations）。&lt;/p&gt;
&lt;h2</summary>
        
      
    
    
    
    <category term="Redis" scheme="https://pudongping.github.io/categories/Redis/"/>
    
    
    <category term="Redis" scheme="https://pudongping.github.io/tags/Redis/"/>
    
    <category term="Cache" scheme="https://pudongping.github.io/tags/Cache/"/>
    
    <category term="缓存" scheme="https://pudongping.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>如何借助Redis更高效统计UV？——Hyperloglog篇</title>
    <link href="https://pudongping.github.io/posts/ceb09f0b.html"/>
    <id>https://pudongping.github.io/posts/ceb09f0b.html</id>
    <published>2024-07-18T10:22:51.000Z</published>
    <updated>2024-07-18T10:25:01.552Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;在今天的互联网时代，数据如潮水般汹涌而来。从用户行为数据、系统日志到实时交互数据，如何高效、准确地统计这海量数据中的唯一元素数量，成为了一个不小的挑战。&lt;/p&gt;
&lt;p&gt;今天，我们要一起探索的是 Redis</summary>
        
      
    
    
    
    <category term="Redis" scheme="https://pudongping.github.io/categories/Redis/"/>
    
    
    <category term="Redis" scheme="https://pudongping.github.io/tags/Redis/"/>
    
    <category term="Cache" scheme="https://pudongping.github.io/tags/Cache/"/>
    
    <category term="缓存" scheme="https://pudongping.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>如何在Redis中快速推算两地之间的距离？——Geo篇</title>
    <link href="https://pudongping.github.io/posts/9c96a9d2.html"/>
    <id>https://pudongping.github.io/posts/9c96a9d2.html</id>
    <published>2024-07-18T10:22:22.000Z</published>
    <updated>2024-07-18T10:25:01.555Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;处理地理位置数据已成为许多应用程序的核心需求。无论是推送附近的餐馆还是对全国范围内的服务点进行分析，快速而准确地处理和检索地理位置信息都至关重要。Redis，作为一种高性能的内存数据库，为我们提供了这样的解决方案。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Redis 在</summary>
        
      
    
    
    
    <category term="Redis" scheme="https://pudongping.github.io/categories/Redis/"/>
    
    
    <category term="Redis" scheme="https://pudongping.github.io/tags/Redis/"/>
    
    <category term="Cache" scheme="https://pudongping.github.io/tags/Cache/"/>
    
    <category term="缓存" scheme="https://pudongping.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>Go语言中的map为什么默认不是并发安全的？</title>
    <link href="https://pudongping.github.io/posts/3761f660.html"/>
    <id>https://pudongping.github.io/posts/3761f660.html</id>
    <published>2024-07-11T16:51:29.000Z</published>
    <updated>2024-07-11T16:53:57.141Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;今天我们聊一个 Go 语言中的 “热门” 话题——为什么 &lt;strong&gt;Go 语言中的 map 默认不是并发安全&lt;/strong&gt;的呢？&lt;/p&gt;
&lt;p&gt;对于广大 Go 程序员来说，尤其是那些刚跨入 Go</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="Golang" scheme="https://pudongping.github.io/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Go语言map并发安全，互斥锁和读写锁谁更优？</title>
    <link href="https://pudongping.github.io/posts/35885ddd.html"/>
    <id>https://pudongping.github.io/posts/35885ddd.html</id>
    <published>2024-07-11T15:17:32.000Z</published>
    <updated>2024-07-11T16:53:57.140Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;并发编程是 Go 语言的一大特色，合理地使用锁对于保证数据一致性和提高程序性能至关重要。&lt;/p&gt;
&lt;p&gt;在处理并发控制时，&lt;code&gt;sync.Mutex&lt;/code&gt;（互斥锁）和</summary>
        
      
    
    
    
    <category term="Go" scheme="https://pudongping.github.io/categories/Go/"/>
    
    
    <category term="Go" scheme="https://pudongping.github.io/tags/Go/"/>
    
    <category term="互斥锁" scheme="https://pudongping.github.io/tags/%E4%BA%92%E6%96%A5%E9%94%81/"/>
    
    <category term="锁" scheme="https://pudongping.github.io/tags/%E9%94%81/"/>
    
  </entry>
  
</feed>
