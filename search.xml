<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redis 实现高效任务队列：异步队列与延迟队列详解</title>
      <link href="posts/204a3169.html"/>
      <url>posts/204a3169.html</url>
      
        <content type="html"><![CDATA[<p>在现代开发中，任务队列是一种非常常见的设计模式。它允许我们将需要耗时的操作放到后台执行，从而提高系统的响应速度和并发能力。而在众多的技术选型中，Redis 凭借其高性能和简单易用性，成为了任务队列的理想选择。</p><p>本文将从零开始，带大家了解如何使用 Redis 实现<strong>异步队列</strong>和<strong>延迟队列</strong>，并通过一些实战代码，帮助大家更好地理解和应用这些概念。</p><p>本文以 Go 语言的 Redis 客户端 <code>github.com/go-redis/redis</code> 包做讲解。</p><h2 id="1-Redis-客户端的初始化"><a href="#1-Redis-客户端的初始化" class="headerlink" title="1. Redis 客户端的初始化"></a>1. Redis 客户端的初始化</h2><p>在开始使用 Redis 之前，我们需要先建立一个与 Redis 服务器的连接。通过 <code>redis.NewClient</code>，我们可以轻松地创建一个 Redis 客户端，并设置连接池的大小，确保在高并发场景下也能高效运行。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">NewRedisClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>redis<span class="token punctuation">.</span>Client <span class="token punctuation">{</span>client <span class="token operator">:=</span> redis<span class="token punctuation">.</span><span class="token function">NewClient</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>redis<span class="token punctuation">.</span>Options<span class="token punctuation">{</span>Addr<span class="token punctuation">:</span>     <span class="token string">"localhost:6379"</span><span class="token punctuation">,</span> <span class="token comment">// Redis 服务器地址</span>Password<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>               <span class="token comment">// Redis 密码</span>DB<span class="token punctuation">:</span>       <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token comment">// 使用的数据库</span>PoolSize<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span>               <span class="token comment">// 连接池大小</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 测试连接</span><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"连接Redis失败，错误原因：%v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> client<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码展示了如何创建一个 Redis 客户端。值得注意的是，<code>PoolSize</code> 参数用来控制连接池的大小，确保在高并发情况下 Redis 仍然能高效响应。</p><h2 id="2-异步队列的实现"><a href="#2-异步队列的实现" class="headerlink" title="2. 异步队列的实现"></a>2. 异步队列的实现</h2><h3 id="什么是异步队列？"><a href="#什么是异步队列？" class="headerlink" title="什么是异步队列？"></a>什么是异步队列？</h3><p>异步队列是一种将任务放入队列中，然后由后台进程逐一取出执行的机制。这样可以避免在主流程中执行耗时任务，从而提高系统的响应速度。</p><p>我们通过 Redis 的 <code>LPUSH</code> 和 <code>RPOP</code> 操作来实现一个简单的异步队列。<code>LPUSH</code> 用于将任务添加到队列的左侧，而 <code>RPOP</code> 则用于从队列的右侧取出任务。</p><h3 id="异步队列代码实现"><a href="#异步队列代码实现" class="headerlink" title="异步队列代码实现"></a>异步队列代码实现</h3><p>首先，我们定义一个 <code>AsyncQueue</code> 结构体，并实现了 <code>Enqueue</code> 和 <code>Dequeue</code> 方法。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// AsyncQueue 异步队列</span><span class="token keyword">type</span> AsyncQueue <span class="token keyword">struct</span> <span class="token punctuation">{</span>RedisClient <span class="token operator">*</span>redis<span class="token punctuation">.</span>ClientQueueName   <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">NewAsyncQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>AsyncQueue <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>AsyncQueue<span class="token punctuation">{</span>RedisClient<span class="token punctuation">:</span> <span class="token function">NewRedisClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>QueueName<span class="token punctuation">:</span>   <span class="token string">"async_queue_{channel}"</span><span class="token punctuation">,</span> <span class="token comment">// 队列名称</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>a <span class="token operator">*</span>AsyncQueue<span class="token punctuation">)</span> <span class="token function">Enqueue</span><span class="token punctuation">(</span>jobPayload <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>RedisClient<span class="token punctuation">.</span><span class="token function">LPush</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>QueueName<span class="token punctuation">,</span> jobPayload<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>a <span class="token operator">*</span>AsyncQueue<span class="token punctuation">)</span> <span class="token function">Dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>RedisClient<span class="token punctuation">.</span><span class="token function">RPop</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>QueueName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个实现中，<code>Enqueue</code> 方法将任务放入队列，而 <code>Dequeue</code> 方法则从队列中取出任务。</p><h3 id="测试异步队列"><a href="#测试异步队列" class="headerlink" title="测试异步队列"></a>测试异步队列</h3><p>为了更好地理解异步队列的工作方式，我们通过简单的测试代码来演示如何将任务放入队列，并从队列中取出任务。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestAsyncQueueProducer</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>payload <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">`{"task": "send_email", "email": "test@example.com", "content": "hello world"}`</span><span class="token punctuation">)</span><span class="token comment">// 模拟将任务放入队列</span>err <span class="token operator">:=</span> <span class="token function">NewAsyncQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"错误为："</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"任务投递成功"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestAsyncQueueConsumer</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>asyncQueueObj <span class="token operator">:=</span> <span class="token function">NewAsyncQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">{</span>val<span class="token punctuation">,</span> err <span class="token operator">:=</span> asyncQueueObj<span class="token punctuation">.</span><span class="token function">Dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">==</span> redis<span class="token punctuation">.</span>Nil <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"队列已经消费完毕，跳过本次循环"</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"出错啦，错误原因："</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">}</span><span class="token comment">// 反序列化任务</span><span class="token keyword">var</span> task <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">if</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> <span class="token operator">&amp;</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"反序列化失败："</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"取出的任务信息为："</span><span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token comment">// 后面可以执行对应的任务</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在生产者测试中，我们将一个模拟的任务添加到队列中。而在消费者测试中，我们从队列中取出任务，并对其进行处理。在实际应用中，消费者代码可以放入后台服务中，持续监听队列并处理任务。</p><h2 id="3-异步延迟队列的实现"><a href="#3-异步延迟队列的实现" class="headerlink" title="3. 异步延迟队列的实现"></a>3. 异步延迟队列的实现</h2><h3 id="什么是延迟队列？"><a href="#什么是延迟队列？" class="headerlink" title="什么是延迟队列？"></a>什么是延迟队列？</h3><p>延迟队列是一种允许任务在指定的时间后才被处理的队列。这在某些场景下非常有用，例如，在用户注册后，我们希望在几分钟后发送一封欢迎邮件，而不是立即发送。</p><p>Redis 提供了有序集合（<code>Sorted Set</code>）的数据结构，非常适合实现延迟队列。我们可以将任务的执行时间作为 <code>Sorted Set</code> 的分数，当任务被取出时，只处理那些分数小于当前时间的任务。</p><h3 id="延迟队列代码实现"><a href="#延迟队列代码实现" class="headerlink" title="延迟队列代码实现"></a>延迟队列代码实现</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// AsyncDelayQueue 异步延迟队列</span><span class="token keyword">type</span> AsyncDelayQueue <span class="token keyword">struct</span> <span class="token punctuation">{</span>RedisClient <span class="token operator">*</span>redis<span class="token punctuation">.</span>ClientQueueName   <span class="token builtin">string</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">NewAsyncDelayQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>AsyncDelayQueue <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>AsyncDelayQueue<span class="token punctuation">{</span>RedisClient<span class="token punctuation">:</span> <span class="token function">NewRedisClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>QueueName<span class="token punctuation">:</span>   <span class="token string">"async_delay_queue_{channel}"</span><span class="token punctuation">,</span> <span class="token comment">// 延迟队列名称</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// Enqueue 加入异步延迟队列</span><span class="token comment">// jobPayload 任务载荷</span><span class="token comment">// delay 延迟时间（单位：秒）</span><span class="token keyword">func</span> <span class="token punctuation">(</span>a <span class="token operator">*</span>AsyncDelayQueue<span class="token punctuation">)</span> <span class="token function">Enqueue</span><span class="token punctuation">(</span>jobPayload <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> delay <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>RedisClient<span class="token punctuation">.</span><span class="token function">ZAdd</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>QueueName<span class="token punctuation">,</span> redis<span class="token punctuation">.</span>Z<span class="token punctuation">{</span>Score<span class="token punctuation">:</span>  <span class="token function">float64</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> delay<span class="token punctuation">)</span><span class="token punctuation">,</span>Member<span class="token punctuation">:</span> jobPayload<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个实现中，<code>Enqueue</code> 方法将任务放入延迟队列中，并指定一个延迟时间。Redis 会根据这个时间戳来排序任务，确保任务在正确的时间被取出。</p><h3 id="测试延迟队列"><a href="#测试延迟队列" class="headerlink" title="测试延迟队列"></a>测试延迟队列</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">TestAsyncDelayQueueProducer</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>asyncDelayQueueObj <span class="token operator">:=</span> <span class="token function">NewAsyncDelayQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>payload <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"task"</span><span class="token punctuation">:</span>    <span class="token string">"send_email"</span><span class="token punctuation">,</span><span class="token string">"email"</span><span class="token punctuation">:</span>   <span class="token string">"test@example.com"</span><span class="token punctuation">,</span><span class="token string">"content"</span><span class="token punctuation">:</span> <span class="token string">"hello worlds"</span><span class="token punctuation">,</span><span class="token string">"times"</span><span class="token punctuation">:</span>   i<span class="token punctuation">,</span><span class="token string">"now"</span><span class="token punctuation">:</span>     time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span>payloadByte<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"有错误："</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">}</span><span class="token comment">// 加入异步延迟队列</span>err <span class="token operator">=</span> asyncDelayQueueObj<span class="token punctuation">.</span><span class="token function">Enqueue</span><span class="token punctuation">(</span>payloadByte<span class="token punctuation">,</span> <span class="token function">int64</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"加入异步延迟队列时，有错误："</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestAsyncDelayQueueConsumer</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>asyncDelayQueueObj <span class="token operator">:=</span> <span class="token function">NewAsyncDelayQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">{</span>res<span class="token punctuation">,</span> err <span class="token operator">:=</span> asyncDelayQueueObj<span class="token punctuation">.</span>RedisClient<span class="token punctuation">.</span><span class="token function">ZRangeWithScores</span><span class="token punctuation">(</span>asyncDelayQueueObj<span class="token punctuation">.</span>QueueName<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">==</span> redis<span class="token punctuation">.</span>Nil <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"队列已经消费完毕，跳过本次循环"</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"出错啦，错误原因："</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Score <span class="token operator">&gt;</span> <span class="token function">float64</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"取不到数据，或者现在还没有到执行时间"</span><span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">}</span><span class="token comment">// 取出分数最小的任务</span>val<span class="token punctuation">,</span> err <span class="token operator">:=</span> asyncDelayQueueObj<span class="token punctuation">.</span>RedisClient<span class="token punctuation">.</span><span class="token function">ZPopMin</span><span class="token punctuation">(</span>asyncDelayQueueObj<span class="token punctuation">.</span>QueueName<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"取出任务失败："</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">}</span><span class="token comment">// 反序列化任务</span><span class="token keyword">var</span> task <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">if</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>val<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Member<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"反序列化失败："</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"取出的任务信息为："</span><span class="token punctuation">,</span> task<span class="token punctuation">)</span><span class="token comment">// 后面可以执行对应的任务</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在生产者测试中，我们将一系列任务添加到延迟队列中，并指定不同的延迟时间。而在消费者测试中，我们循环检查队列，只有当任务的时间戳小于当前时间时，才会取出任务并执行。</p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>通过本文的讲解，我们从 <code>Redis</code> 的基础连接开始，逐步构建了<strong>异步队列</strong>和<strong>延迟队列</strong>的实现。无论是简单的任务处理，还是需要在指定时间执行的任务，这些队列都能帮助我们更好地管理后台任务，提升系统的响应速度和性能。</p><p>对于初学者来说，理解并掌握这些概念和代码实现，是进入分布式系统开发的重要一步。而对于有经验的开发者，这些实现可以作为进一步优化和扩展的基础，应用到更加复杂的场景中。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> Redis </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何用Redis高效实现点赞功能？用Set？还是Bitmap？</title>
      <link href="posts/3adceb1d.html"/>
      <url>posts/3adceb1d.html</url>
      
        <content type="html"><![CDATA[<p>在众多软件应用中，<strong>点赞</strong>功能几乎成了所有应用中的“标配”。但实现一个高效的点赞功能并不简单，尤其是在面对大规模的用户量和高并发场景时。</p><p>今天，我们就从实际需求出发，探索如何利用 Redis 的数据结构来设计一个点赞系统，从而理解 <code>Set</code> 和 <code>Bitmap</code> 数据结构的优缺点。</p><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>我们设定这样一个需求场景：在一篇文章的评论下实现点赞功能，每位用户只能对同一条评论点赞一次，再次点赞则视为“取消点赞”。此外，我们还需要统计每条评论的总点赞数。</p><p>这听上去不复杂，但当需求量级提升，比如用户量达到千万级别，系统会需要承担巨大的数据存储和高频的读写压力。为了满足高性能和低延迟的需求，我们可以选择 Redis 来管理点赞数据。</p><h2 id="方案一：使用-Redis-的-Set-数据结构"><a href="#方案一：使用-Redis-的-Set-数据结构" class="headerlink" title="方案一：使用 Redis 的 Set 数据结构"></a>方案一：使用 Redis 的 <code>Set</code> 数据结构</h2><p>首先考虑使用 Redis 的 <code>Set</code> 数据结构。<code>Set</code> 非常适合存储一组不重复的元素，因此可以用来记录每条评论下点赞的用户 ID。方案设计如下：</p><ol><li><strong>存储设计</strong>：每条评论的点赞数据可以存储为一个 Redis <code>Set</code>，键格式为 <code>comment:likes:{comment_id}</code>，其中 <code>{comment_id}</code> 是评论的唯一标识。</li><li><strong>点赞操作</strong>：当用户点赞时，将用户 ID 添加到该评论对应的 <code>Set</code> 中。</li><li><strong>取消点赞</strong>：如果用户再次点击，则从 <code>Set</code> 中移除用户 ID。</li><li><strong>统计总点赞数</strong>：直接获取 <code>Set</code> 的元素数量，即为当前评论的点赞总数。</li><li><strong>检查用户是否点赞过</strong>：可以通过 <code>SISMEMBER</code> 指令快速检查某个用户 ID 是否存在于该评论的点赞 <code>Set</code> 中。</li></ol><h3 id="Set-方案的代码实现"><a href="#Set-方案的代码实现" class="headerlink" title="Set 方案的代码实现"></a>Set 方案的代码实现</h3><p>以下是 PHP 实现点赞、取消点赞和统计点赞数的代码示例：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// 点赞接口</span><span class="token keyword">function</span> <span class="token function-definition function">likeComment</span><span class="token punctuation">(</span><span class="token variable">$userId</span><span class="token punctuation">,</span> <span class="token variable">$commentId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$redis</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Redis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$redis</span><span class="token operator">-&gt;</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 生成唯一键</span>    <span class="token variable">$likeSetKey</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"comment:likes:<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$commentId</span><span class="token punctuation">}</span></span>"</span><span class="token punctuation">;</span>    <span class="token comment">// 判断用户是否已点赞</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$redis</span><span class="token operator">-&gt;</span><span class="token function">sIsMember</span><span class="token punctuation">(</span><span class="token variable">$likeSetKey</span><span class="token punctuation">,</span> <span class="token variable">$userId</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 已点赞，取消点赞</span>        <span class="token variable">$redis</span><span class="token operator">-&gt;</span><span class="token function">sRem</span><span class="token punctuation">(</span><span class="token variable">$likeSetKey</span><span class="token punctuation">,</span> <span class="token variable">$userId</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$liked</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">// 未点赞，添加点赞</span>        <span class="token variable">$redis</span><span class="token operator">-&gt;</span><span class="token function">sAdd</span><span class="token punctuation">(</span><span class="token variable">$likeSetKey</span><span class="token punctuation">,</span> <span class="token variable">$userId</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$liked</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 获取当前总点赞数</span>    <span class="token variable">$totalLikes</span> <span class="token operator">=</span> <span class="token variable">$redis</span><span class="token operator">-&gt;</span><span class="token function">sCard</span><span class="token punctuation">(</span><span class="token variable">$likeSetKey</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 返回点赞状态</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>        <span class="token string single-quoted-string">'status'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'success'</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'liked'</span> <span class="token operator">=&gt;</span> <span class="token variable">$liked</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'totalLikes'</span> <span class="token operator">=&gt;</span> <span class="token variable">$totalLikes</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用-Set-方案的优缺点"><a href="#使用-Set-方案的优缺点" class="headerlink" title="使用 Set 方案的优缺点"></a>使用 Set 方案的优缺点</h3><p><strong>优点</strong>：</p><ul><li><strong>灵活性高</strong>：支持不连续的用户 ID，适合大多数应用场景。</li><li><strong>操作简单</strong>：Redis 原生支持集合操作，查询、添加、删除等操作性能较高。</li></ul><p><strong>缺点</strong>：</p><ul><li><strong>存储空间较大</strong>：<code>Set</code> 中每个用户 ID 都会占用存储空间，随着点赞用户增多，<code>Set</code> 的存储开销也会增长。</li></ul><h2 id="方案二：使用-Redis-的-Bitmap-数据结构"><a href="#方案二：使用-Redis-的-Bitmap-数据结构" class="headerlink" title="方案二：使用 Redis 的 Bitmap 数据结构"></a>方案二：使用 Redis 的 <code>Bitmap</code> 数据结构</h2><p>如果用户 ID 是连续的，比如从 <code>0</code> 开始顺序增长，那么可以使用 Redis 的 <code>Bitmap</code> 数据结构来进一步提升存储效率。<code>Bitmap</code> 以每个用户的 ID 作为位（bit）位置，只需 1 位就可以表示每个用户的点赞状态，大大节省存储空间。</p><ol><li><strong>存储设计</strong>：每条评论的点赞数据可以存储为一个 <code>Bitmap</code>，键的格式为 <code>comment:likes:{comment_id}</code>。</li><li><strong>点赞操作</strong>：使用 <code>SETBIT</code> 将用户的位设置为 <code>1</code>。</li><li><strong>取消点赞</strong>：再次点击则用 <code>SETBIT</code> 将该位设置为 <code>0</code>。</li><li><strong>统计总点赞数</strong>：通过 <code>BITCOUNT</code> 指令统计 <code>Bitmap</code> 中位为 <code>1</code> 的数量，即为点赞总数。</li><li><strong>检查用户是否点赞过</strong>：可以用 <code>GETBIT</code> 查询指定用户的点赞状态。</li></ol><h3 id="Bitmap-方案的代码实现"><a href="#Bitmap-方案的代码实现" class="headerlink" title="Bitmap 方案的代码实现"></a>Bitmap 方案的代码实现</h3><p>以下是使用 <code>Bitmap</code> 实现的 PHP 代码示例：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">likeComment</span><span class="token punctuation">(</span><span class="token variable">$userId</span><span class="token punctuation">,</span> <span class="token variable">$commentId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$redis</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Redis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$redis</span><span class="token operator">-&gt;</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 生成唯一键</span>    <span class="token variable">$likeBitmapKey</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"comment:likes:<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$commentId</span><span class="token punctuation">}</span></span>"</span><span class="token punctuation">;</span>    <span class="token comment">// 获取用户当前的点赞状态</span>    <span class="token variable">$isLiked</span> <span class="token operator">=</span> <span class="token variable">$redis</span><span class="token operator">-&gt;</span><span class="token function">getBit</span><span class="token punctuation">(</span><span class="token variable">$likeBitmapKey</span><span class="token punctuation">,</span> <span class="token variable">$userId</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$isLiked</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 已点赞，取消点赞</span>        <span class="token variable">$redis</span><span class="token operator">-&gt;</span><span class="token function">setBit</span><span class="token punctuation">(</span><span class="token variable">$likeBitmapKey</span><span class="token punctuation">,</span> <span class="token variable">$userId</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$liked</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment">// 未点赞，设置为点赞</span>        <span class="token variable">$redis</span><span class="token operator">-&gt;</span><span class="token function">setBit</span><span class="token punctuation">(</span><span class="token variable">$likeBitmapKey</span><span class="token punctuation">,</span> <span class="token variable">$userId</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$liked</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 获取当前点赞总数</span>    <span class="token variable">$totalLikes</span> <span class="token operator">=</span> <span class="token variable">$redis</span><span class="token operator">-&gt;</span><span class="token function">bitCount</span><span class="token punctuation">(</span><span class="token variable">$likeBitmapKey</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span>        <span class="token string single-quoted-string">'status'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'success'</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'liked'</span> <span class="token operator">=&gt;</span> <span class="token variable">$liked</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'totalLikes'</span> <span class="token operator">=&gt;</span> <span class="token variable">$totalLikes</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用-Bitmap-方案的优缺点"><a href="#使用-Bitmap-方案的优缺点" class="headerlink" title="使用 Bitmap 方案的优缺点"></a>使用 Bitmap 方案的优缺点</h3><p><strong>优点</strong>：</p><ul><li><strong>存储效率高</strong>：每位只占 1 bit，适合大量用户数据的二元状态存储，极大节省内存。</li><li><strong>适合批量统计</strong>：通过 <code>BITCOUNT</code> 等命令可以快速统计点赞数量，性能极佳。</li></ul><p><strong>缺点</strong>：</p><ul><li><strong>用户 ID 需连续</strong>：<code>Bitmap</code> 适合连续的 ID（如从 <code>0</code> 到某个上限），对于离散的 ID 或存在大量空位的 ID，不适用。</li><li><strong>操作复杂性较高</strong>：当用户 ID 离散或不连续时，使用 <code>Bitmap</code> 不仅不节省空间，操作复杂性也会增加。</li></ul><h2 id="选择合适的数据结构"><a href="#选择合适的数据结构" class="headerlink" title="选择合适的数据结构"></a>选择合适的数据结构</h2><table><thead><tr><th>特点</th><th>Redis <code>Set</code></th><th>Redis <code>Bitmap</code></th></tr></thead><tbody><tr><td><strong>用户 ID 分布</strong></td><td>适合不连续的 ID</td><td>适合连续的、紧凑的 ID</td></tr><tr><td><strong>存储空间</strong></td><td>随点赞数增长而增大</td><td>每个用户点赞状态占 1 bit，空间占用小</td></tr><tr><td><strong>统计点赞数</strong></td><td>通过 <code>SCARD</code> 精确统计</td><td>通过 <code>BITCOUNT</code> 高效统计</td></tr><tr><td><strong>查询用户状态</strong></td><td>支持任意用户 ID 查询点赞状态</td><td>支持按位查询连续 ID 的状态</td></tr><tr><td><strong>适用场景</strong></td><td>离散用户 ID，点赞、关注等集合操作</td><td>连续 ID，批量二元状态的快速统计</td></tr></tbody></table><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在实际项目中，选择合适的数据结构至关重要。对于点赞功能，如果用户 ID 是不连续的且规模不大，<code>Set</code> 更灵活、易于使用；而对于用户 ID 连续的大规模应用，<code>Bitmap</code> 则能极大提升存储和统计效率。在实际应用中，我们可以根据用户 ID 分布、存储需求和性能要求来选择最优方案。</p><p>其实 <code>Bitmap</code> 这种数据结构更加适合于用作<strong>用户签到、打卡</strong>等场景。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Cache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言中高效使用Redis的Pipeline</title>
      <link href="posts/9af95445.html"/>
      <url>posts/9af95445.html</url>
      
        <content type="html"><![CDATA[<p>在构建高性能应用时，Redis 经常成为开发者的首选工具。作为一个内存数据库，Redis 可以处理大量的数据操作，但如果每个命令都单独发送，网络延迟会成为瓶颈，影响性能。</p><p>这时，Redis 的 <strong>Pipeline</strong> 和 <strong>Watch</strong> 机制应运而生，帮助我们批量执行命令，并在并发环境中保障数据的安全性。</p><h2 id="什么是-Pipeline？"><a href="#什么是-Pipeline？" class="headerlink" title="什么是 Pipeline？"></a>什么是 Pipeline？</h2><p>在 Redis 中，Pipeline 就像一条流水线，它允许我们将多个命令一次性发送到服务器。这种操作能大幅减少客户端与服务器之间的网络交互时间，从而提升执行效率。</p><p>想象一下，你去超市购物，拿了几件商品，每件商品都要单独结账——这样既浪费时间，又容易出错。Pipeline 的作用就类似于让你可以把所有商品放在购物车里，一次性结账。这样做不仅更快，还避免了频繁的等待。</p><p>在实际操作中，Pipeline 通常用来处理需要连续执行的多个 Redis 命令，例如增加一个计数器，同时为它设置一个过期时间。</p><p>我们先建立一个 redis 链接</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"github.com/go-redis/redis"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">RDBClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>redis<span class="token punctuation">.</span>Client<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 创建一个 Redis 客户端</span><span class="token comment">// 也可以使用数据源名称（DSN）来创建</span><span class="token comment">// redis://&lt;user&gt;:&lt;pass&gt;@localhost:6379/&lt;db&gt;</span>opt<span class="token punctuation">,</span> err <span class="token operator">:=</span> redis<span class="token punctuation">.</span><span class="token function">ParseURL</span><span class="token punctuation">(</span><span class="token string">"redis://localhost:6379/0"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span>client <span class="token operator">:=</span> redis<span class="token punctuation">.</span><span class="token function">NewClient</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token comment">// 通过 cient.Ping() 来检查是否成功连接到了 redis 服务器</span><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token keyword">return</span> client<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用-Pipeline-提升效率"><a href="#使用-Pipeline-提升效率" class="headerlink" title="使用 Pipeline 提升效率"></a>使用 Pipeline 提升效率</h2><p>我们先来看看一个简单的例子，如何在 Go 语言中使用 Pipeline 批量执行命令。</p><p>假设我们有一个名为 <code>pipeline_counter</code> 的键，我们想在 Redis 中增加它的值，并设置一个 10 秒的过期时间。通常情况下，你可能会写两个独立的命令来完成这项工作。但如果我们使用 Pipeline，就可以把这两个命令打包成一个请求，发送给 Redis。这样不仅减少了请求的次数，还提升了整体性能。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">pipeline1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>rdb<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">RDBClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span>pipe <span class="token operator">:=</span> rdb<span class="token punctuation">.</span><span class="token function">Pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>incr <span class="token operator">:=</span> pipe<span class="token punctuation">.</span><span class="token function">Incr</span><span class="token punctuation">(</span><span class="token string">"pipeline_counter"</span><span class="token punctuation">)</span>pipe<span class="token punctuation">.</span><span class="token function">Expire</span><span class="token punctuation">(</span><span class="token string">"pipeline_counter"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>cmds<span class="token punctuation">,</span> err <span class="token operator">:=</span> pipe<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"pipeline_counter:"</span><span class="token punctuation">,</span> incr<span class="token punctuation">.</span><span class="token function">Val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> cmd <span class="token operator">:=</span> <span class="token keyword">range</span> cmds <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"cmd: %#v \n"</span><span class="token punctuation">,</span> cmd<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，我们通过 <code>Pipeline()</code> 方法创建了一个流水线，并在流水线中添加了两个命令：<code>INCR</code> 和 <code>EXPIRE</code>。最后，通过 <code>Exec()</code> 方法一次性执行这些命令，并输出结果。</p><h2 id="让代码更简洁：使用-Pipelined-方法"><a href="#让代码更简洁：使用-Pipelined-方法" class="headerlink" title="让代码更简洁：使用 Pipelined 方法"></a>让代码更简洁：使用 Pipelined 方法</h2><p>虽然手动使用 Pipeline 已经简化了代码，但 <code>go-redis</code> 提供的 <code>Pipelined()</code> 方法让我们可以更优雅地处理这一过程，让你只需关注命令的逻辑部分。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">pipeline2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>rdb<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">RDBClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> incr <span class="token operator">*</span>redis<span class="token punctuation">.</span>IntCmdcmds<span class="token punctuation">,</span> err <span class="token operator">:=</span> rdb<span class="token punctuation">.</span><span class="token function">Pipelined</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>pipe redis<span class="token punctuation">.</span>Pipeliner<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>incr <span class="token operator">=</span> pipe<span class="token punctuation">.</span><span class="token function">Incr</span><span class="token punctuation">(</span><span class="token string">"pipeline_counter"</span><span class="token punctuation">)</span>pipe<span class="token punctuation">.</span><span class="token function">Expire</span><span class="token punctuation">(</span><span class="token string">"pipeline_counter"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"pipeline_counter:"</span><span class="token punctuation">,</span> incr<span class="token punctuation">.</span><span class="token function">Val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> cmd <span class="token operator">:=</span> <span class="token keyword">range</span> cmds <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"cmd: %#v \n"</span><span class="token punctuation">,</span> cmd<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过 <code>Pipelined()</code> 方法，我们不再需要手动管理 Pipeline 的创建和执行，只需专注于添加需要执行的命令。这不仅减少了代码量，还让代码的逻辑更加清晰。</p><h2 id="保证操作原子性：TxPipeline"><a href="#保证操作原子性：TxPipeline" class="headerlink" title="保证操作原子性：TxPipeline"></a>保证操作原子性：TxPipeline</h2><p>有时，我们不仅希望批量执行命令，还希望确保这些命令作为一个整体被执行。这种需求在并发环境中尤为常见，特别是当多个客户端可能同时修改同一个键时。为了实现这一点，<code>go-redis</code> 提供了 <strong>TxPipeline</strong>，它类似于 Pipeline，但具有事务性，确保操作的原子性。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">pipeline3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>rdb<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">RDBClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span>pipe <span class="token operator">:=</span> rdb<span class="token punctuation">.</span><span class="token function">TxPipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>incr <span class="token operator">:=</span> pipe<span class="token punctuation">.</span><span class="token function">Incr</span><span class="token punctuation">(</span><span class="token string">"pipeline_counter"</span><span class="token punctuation">)</span>pipe<span class="token punctuation">.</span><span class="token function">Expire</span><span class="token punctuation">(</span><span class="token string">"pipeline_counter"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> pipe<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"pipeline_counter:"</span><span class="token punctuation">,</span> incr<span class="token punctuation">.</span><span class="token function">Val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，我们使用 <code>TxPipeline()</code> 方法确保 <code>INCR</code> 和 <code>EXPIRE</code> 命令一起打包执行。</p><p>当然我们也可以使用下面的代码，逻辑是一致的：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">pipeline4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>rdb<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">RDBClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> incr <span class="token operator">*</span>redis<span class="token punctuation">.</span>IntCmd<span class="token comment">// 以下代码就相当于执行了</span><span class="token comment">// MULTI</span><span class="token comment">// INCR pipeline_counter</span><span class="token comment">// EXPIRE pipeline_counter 10</span><span class="token comment">// EXEC</span><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> rdb<span class="token punctuation">.</span><span class="token function">TxPipelined</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>pipe redis<span class="token punctuation">.</span>Pipeliner<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>incr <span class="token operator">=</span> pipe<span class="token punctuation">.</span><span class="token function">Incr</span><span class="token punctuation">(</span><span class="token string">"pipeline_counter"</span><span class="token punctuation">)</span>pipe<span class="token punctuation">.</span><span class="token function">Expire</span><span class="token punctuation">(</span><span class="token string">"pipeline_counter"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 获取 incr 命令的执行结果</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"pipeline_counter:"</span><span class="token punctuation">,</span> incr<span class="token punctuation">.</span><span class="token function">Val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="预防并发问题：Watch-机制"><a href="#预防并发问题：Watch-机制" class="headerlink" title="预防并发问题：Watch 机制"></a>预防并发问题：Watch 机制</h2><p>在并发编程中，一个典型的问题是多个客户端同时修改同一个键，导致数据不一致。Redis 的 <strong>Watch</strong> 机制通过监控键的变化，确保只有在键没有被其他客户端修改的情况下才会执行事务，从而实现乐观锁。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">watchDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>rdb<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">RDBClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span>key <span class="token operator">:=</span> <span class="token string">"watch_key"</span>err <span class="token operator">=</span> rdb<span class="token punctuation">.</span><span class="token function">Watch</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>tx <span class="token operator">*</span>redis<span class="token punctuation">.</span>Tx<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>num<span class="token punctuation">,</span> err <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>errors<span class="token punctuation">.</span><span class="token function">Is</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> redis<span class="token punctuation">.</span>Nil<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> err<span class="token punctuation">}</span><span class="token comment">// 模拟并发情况下的数据变更</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">TxPipelined</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>pipe redis<span class="token punctuation">.</span>Pipeliner<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>pipe<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> num<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>Second<span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token keyword">if</span> errors<span class="token punctuation">.</span><span class="token function">Is</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> redis<span class="token punctuation">.</span>TxFailedErr<span class="token punctuation">)</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"事务执行失败"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中，<code>Watch()</code> 方法会监控 <code>watch_key</code>，并在事务开始前获取它的值。如果在事务执行期间，<code>watch_key</code> 被其他客户端修改，整个事务将不会执行，这样就避免了数据的不一致性。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过以上的讲解，我们可以看到 Redis 的 Pipeline 和 Watch 机制如何帮助我们更高效地处理数据，并在并发环境中确保数据的安全性。这些机制不仅提升了性能，还简化了代码逻辑，让开发者可以专注于业务逻辑，而不是为细节操心。</p><p>如果你觉得这篇文章对你有帮助，欢迎点赞、转发，让更多的小伙伴也能轻松掌握 Redis 的这些强大功能！😊</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Golang </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言中如何扫描Redis中大量的key</title>
      <link href="posts/9b127c3.html"/>
      <url>posts/9b127c3.html</url>
      
        <content type="html"><![CDATA[<p>在 Redis 中，当我们需要遍历大量的键时，直接使用 <code>KEYS</code> 命令会面临性能瓶颈，尤其是在键数量非常多的情况下。</p><p><code>KEYS</code> 命令会一次性返回所有匹配的键，这可能导致 Redis 阻塞，严重影响线上服务的稳定性。为了解决这个问题，Redis 提供了 <code>SCAN</code> 命令，用于分批次迭代键，避免一次性返回所有数据。</p><p>今天，我们将通过两个示例代码，详细讲解如何在 Go 语言中使用 <code>SCAN</code> 命令遍历 Redis 键。</p><p>这里我们用到的是 <code>github.com/go-redis/redis</code> 包，先创建一个 redis 链接</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> redis_demo<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"github.com/go-redis/redis"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">RDBClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>redis<span class="token punctuation">.</span>Client<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 创建一个 Redis 客户端</span><span class="token comment">// 也可以使用数据源名称（DSN）来创建</span><span class="token comment">// redis://&lt;user&gt;:&lt;pass&gt;@localhost:6379/&lt;db&gt;</span>opt<span class="token punctuation">,</span> err <span class="token operator">:=</span> redis<span class="token punctuation">.</span><span class="token function">ParseURL</span><span class="token punctuation">(</span><span class="token string">"redis://localhost:6379/0"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span>client <span class="token operator">:=</span> redis<span class="token punctuation">.</span><span class="token function">NewClient</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token comment">// 通过 cient.Ping() 来检查是否成功连接到了 redis 服务器</span><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token keyword">return</span> client<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代码示例-1：使用-SCAN-命令的基本迭代方式"><a href="#代码示例-1：使用-SCAN-命令的基本迭代方式" class="headerlink" title="代码示例 1：使用 SCAN 命令的基本迭代方式"></a>代码示例 1：使用 <code>SCAN</code> 命令的基本迭代方式</h2><p>首先来看第一个示例代码，这段代码展示了如何通过 <code>SCAN</code> 命令遍历 Redis 数据库中的所有键。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> redis_demo<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">scanKeysDemo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> cursor <span class="token builtin">uint64</span>rdb<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">RDBClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">{</span><span class="token keyword">var</span> keys <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token keyword">var</span> err <span class="token builtin">error</span><span class="token comment">// Scan 命令用于迭代数据库中的数据库键。</span>keys<span class="token punctuation">,</span> cursor<span class="token punctuation">,</span> err <span class="token operator">=</span> rdb<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span>cursor<span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 处理 keys</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> key <span class="token operator">:=</span> <span class="token keyword">range</span> keys <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"key: %s\n"</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 如果 cursor 为 0，说明已经遍历完成，退出循环</span><span class="token keyword">if</span> cursor <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码详解："><a href="#代码详解：" class="headerlink" title="代码详解："></a>代码详解：</h3><ol><li><p><strong>RDBClient() 函数</strong>: 这段代码假设 <code>RDBClient()</code> 是一个返回 Redis 客户端实例的函数，用于连接 Redis 数据库。如果连接失败，程序会直接 panic 终止。</p></li><li><p><strong>Scan 命令</strong>: <code>rdb.Scan(cursor, "*", 0).Result()</code> 是 <code>SCAN</code> 命令的核心部分。这里的 <code>cursor</code> 用于记录当前扫描的游标位置，<code>*</code> 表示匹配所有键，<code>0</code> 表示每次扫描返回所有匹配键。在第一次调用时，<code>cursor</code> 必须为 <code>0</code>，之后 Redis 会返回新的 <code>cursor</code>，直到 <code>cursor</code> 再次为 <code>0</code> 表示迭代结束。</p></li><li><p><strong>循环扫描</strong>: 使用 <code>for</code> 循环不断调用 <code>SCAN</code> 命令，每次返回一批键并更新 <code>cursor</code>。当 <code>cursor</code> 为 <code>0</code> 时，退出循环。</p></li><li><p><strong>键处理</strong>: <code>for _, key := range keys</code> 用于遍历当前批次的所有键，并对每个键进行处理（如打印出来）。</p></li></ol><p>这个方法相对直观，但如果 Redis 中的键数量巨大，手动处理游标的方式可能显得繁琐。这时候，可以考虑使用更简便的 <code>Iterator</code> 方法。</p><h2 id="代码示例-2：使用-Iterator-简化迭代过程"><a href="#代码示例-2：使用-Iterator-简化迭代过程" class="headerlink" title="代码示例 2：使用 Iterator 简化迭代过程"></a>代码示例 2：使用 <code>Iterator</code> 简化迭代过程</h2><p>接下来是第二个示例代码，它展示了如何使用 <code>Iterator</code> 方法简化键的遍历过程。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> redis_demo<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">scanKeysDemo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>rdb<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">RDBClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 针对这种需要遍历大量 key 的场景，go-redis 提供了一个更简单的方法 Iterator</span>iter <span class="token operator">:=</span> rdb<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> iter<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"key: %s\n"</span><span class="token punctuation">,</span> iter<span class="token punctuation">.</span><span class="token function">Val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> err <span class="token operator">:=</span> iter<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 此外，对于 redis 中的 set、hash、zset 等类型，也可以使用 Iterator 进行遍历</span><span class="token comment">// 例如：</span><span class="token comment">// iter := rdb.SScan("set_key", 0, "*", 50).Iterator()</span><span class="token comment">// iter := rdb.HScan("hash_key", 0, "*", 50).Iterator()</span><span class="token comment">// iter := rdb.ZScan("zset_key", 0, "*", 50).Iterator()</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码详解：-1"><a href="#代码详解：-1" class="headerlink" title="代码详解："></a>代码详解：</h3><ol><li><p><strong>使用 Iterator</strong>: 与前一个示例不同，这里使用了 <code>Iterator</code> 迭代器。<code>rdb.Scan(0, "*", 50).Iterator()</code> 创建了一个迭代器，每次返回 50 个匹配的键。这样无需手动处理 <code>cursor</code>，简化了遍历过程。</p></li><li><p><strong>迭代与处理</strong>: <code>for iter.Next()</code> 是一个简洁的循环，用于遍历所有匹配的键。当 <code>iter.Next()</code> 返回 <code>false</code> 时，表示遍历结束。<code>iter.Val()</code> 返回当前键的值。</p></li><li><p><strong>错误处理</strong>: 在循环结束后，检查 <code>iter.Err()</code> 是否为 <code>nil</code>，以确保遍历过程中没有出现错误。</p></li><li><p><strong>扩展功能</strong>: 此外，<code>Iterator</code> 方法不仅适用于遍历键，也可用于遍历 Redis 中的集合（<code>Set</code>）、哈希（<code>Hash</code>）、有序集合（<code>ZSet</code>）等数据结构。通过将 <code>Scan</code> 换成 <code>SScan</code>、<code>HScan</code> 或 <code>ZScan</code>，就能遍历对应的数据结构。</p></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这篇文章介绍了如何在 Go 语言中使用 <code>SCAN</code> 命令遍历 Redis 键，并比较了手动处理 <code>cursor</code> 和使用 <code>Iterator</code> 的两种方式。对于 Redis 新手来说，了解 <code>SCAN</code> 命令的用法非常重要，它不仅帮助你避免了使用 <code>KEYS</code> 命令可能带来的性能问题，还让你能够更高效地遍历 Redis 数据。</p><p>如果你觉得文章有帮助，欢迎点赞、转发，让更多人掌握 Redis 的这些实用技巧！😊</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Golang </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言中使用sqlx来操作事务</title>
      <link href="posts/1ffc0233.html"/>
      <url>posts/1ffc0233.html</url>
      
        <content type="html"><![CDATA[<p>在应用程序中，数据库事务的使用至关重要。它可以确保操作的原子性、一致性、隔离性和持久性（ACID）。<code>github.com/jmoiron/sqlx</code> 包提供了一个便利的方法来简化对数据库的操作。</p><p>本文将介绍如何使用 <code>sqlx</code> 包来管理 MySQL 数据库事务。</p><h2 id="1-安装-SQLX-包和-MySQL-驱动"><a href="#1-安装-SQLX-包和-MySQL-驱动" class="headerlink" title="1. 安装 SQLX 包和 MySQL 驱动"></a>1. 安装 SQLX 包和 MySQL 驱动</h2><p>首先，确保我们安装了 <code>sqlx</code> 和 MySQL 驱动。使用以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go get github.com/jmoiron/sqlxgo get github.com/go-sql-driver/mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-导入-SQLX-和-MySQL-驱动"><a href="#2-导入-SQLX-和-MySQL-驱动" class="headerlink" title="2. 导入 SQLX 和 MySQL 驱动"></a>2. 导入 SQLX 和 MySQL 驱动</h2><p>在你的 Go 文件中，导入 <code>sqlx</code> 和 MySQL 驱动：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"github.com/jmoiron/sqlx"</span>    <span class="token boolean">_</span> <span class="token string">"github.com/go-sql-driver/mysql"</span> <span class="token comment">// MySQL 驱动</span>    <span class="token string">"log"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-创建数据库连接"><a href="#3-创建数据库连接" class="headerlink" title="3. 创建数据库连接"></a>3. 创建数据库连接</h2><p>接下来，我们需要创建数据库的连接。以下是一个示例：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">createDBConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>sqlx<span class="token punctuation">.</span>DB<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    dsn <span class="token operator">:=</span> <span class="token string">"username:password@tcp(127.0.0.1:3306)/mydb?parseTime=true"</span>    db<span class="token punctuation">,</span> err <span class="token operator">:=</span> sqlx<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span><span class="token string">"mysql"</span><span class="token punctuation">,</span> dsn<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err    <span class="token punctuation">}</span>    <span class="token keyword">return</span> db<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请根据你的数据库配置调整 DSN（数据源名称）。</p><h2 id="4-使用事务"><a href="#4-使用事务" class="headerlink" title="4. 使用事务"></a>4. 使用事务</h2><p>以下是完整的示例代码，展示了如何使用 <code>sqlx</code> 进行 MySQL 的事务处理：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"github.com/jmoiron/sqlx"</span>    <span class="token boolean">_</span> <span class="token string">"github.com/go-sql-driver/mysql"</span> <span class="token comment">// MySQL driver</span>    <span class="token string">"log"</span><span class="token punctuation">)</span><span class="token comment">// createDBConnection 创建并返回一个数据库连接</span><span class="token keyword">func</span> <span class="token function">createDBConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>sqlx<span class="token punctuation">.</span>DB<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 数据库连接字符串</span>    dsn <span class="token operator">:=</span> <span class="token string">"username:password@tcp(127.0.0.1:3306)/mydb?parseTime=true"</span>    <span class="token keyword">return</span> sqlx<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span><span class="token string">"mysql"</span><span class="token punctuation">,</span> dsn<span class="token punctuation">)</span> <span class="token comment">// 使用 sqlx 连接到 MySQL 数据库</span><span class="token punctuation">}</span><span class="token comment">// performTransaction 执行一个数据库事务</span><span class="token keyword">func</span> <span class="token function">performTransaction</span><span class="token punctuation">(</span>db <span class="token operator">*</span>sqlx<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token comment">// 开始一个新的事务</span>    tx<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Beginx</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> err <span class="token comment">// 如果开始事务失败，返回错误</span>    <span class="token punctuation">}</span>    <span class="token comment">// 使用 defer 确保在结束时正确处理事务</span>    <span class="token keyword">defer</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> p <span class="token operator">:=</span> <span class="token function">recover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> p <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token comment">// 如果发生 panic，则回滚事务</span>            tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token function">panic</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token comment">// 重新抛出 panic，以便上层调用处理</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token comment">// 如果发生错误，回滚事务</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Rollback due to error:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>            tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment">// 如果没有错误，提交事务</span>            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Committing transaction"</span><span class="token punctuation">)</span>            err <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 示例：插入用户</span>    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO users(name) VALUES(?)"</span><span class="token punctuation">,</span> <span class="token string">"John Doe"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> err <span class="token comment">// 记录插入失败，返回错误</span>    <span class="token punctuation">}</span>    <span class="token comment">// 示例：插入订单</span>    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO orders(user_id, amount) VALUES(?, ?)"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100.0</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> err <span class="token comment">// 记录插入失败，返回错误</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span> <span class="token comment">// 如果没有错误，返回 nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 创建数据库连接</span>    db<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">createDBConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"Failed to connect to database: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span> <span class="token comment">// 连接失败，日志记录并退出</span>    <span class="token punctuation">}</span>    <span class="token keyword">defer</span> db<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 确保在主函数结束时关闭数据库连接</span>    <span class="token comment">// 执行事务并处理结果</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">performTransaction</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Transaction failed: %v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span> <span class="token comment">// 事务失败，记录错误</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Transaction succeeded!"</span><span class="token punctuation">)</span> <span class="token comment">// 事务成功，日志记录</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过使用 <code>github.com/jmoiron/sqlx</code>，我们可以轻松地在 Go 应用程序中管理 MySQL 数据库的事务。良好的事务控制可以确保数据的完整性和一致性。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Golang </tag>
            
            <tag> MySQL </tag>
            
            <tag> sqlx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言中使用 sqlx 来操作 MySQL</title>
      <link href="posts/4390abbe.html"/>
      <url>posts/4390abbe.html</url>
      
        <content type="html"><![CDATA[<p>Go 语言以其高效和简洁的语法逐渐受到开发者的青睐。在实际开发中，数据库操作是不可避免的任务之一。虽然标准库提供了 <code>database/sql</code> 包来支持数据库操作，但使用起来略显繁琐。</p><p><code>sqlx</code> 包作为一个扩展库，它在 <code>database/sql</code> 的基础上，提供了更高级别的便利，极大地简化了数据库操作。本文章将介绍如何通过 <code>github.com/jmoiron/sqlx</code> 包来操作 MySQL 数据库。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先，确保你的 Go 环境已经搭建完毕，并且 MySQL 数据库已安装并正在运行。接下来，安装 <code>sqlx</code> 包及 MySQL 驱动：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go get github.com/jmoiron/sqlxgo get github.com/go-sql-driver/mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="连接-MySQL-数据库"><a href="#连接-MySQL-数据库" class="headerlink" title="连接 MySQL 数据库"></a>连接 MySQL 数据库</h2><p>在使用数据库之前，我们需要建立与 MySQL 的连接。在 Go 语言中，通常使用一个连接字符串来指定数据库的一些信息。以下是一个示例代码，演示如何连接 MySQL 数据库：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token boolean">_</span> <span class="token string">"github.com/go-sql-driver/mysql"</span> <span class="token comment">// 一定不能忘记导入数据库驱动</span><span class="token string">"github.com/jmoiron/sqlx"</span><span class="token punctuation">)</span><span class="token keyword">var</span> db <span class="token operator">*</span>sqlx<span class="token punctuation">.</span>DB<span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">{</span>ID   <span class="token builtin">int64</span>  <span class="token string">`db:"id"`</span>Name <span class="token builtin">string</span> <span class="token string">`db:"name"`</span>Age  <span class="token builtin">int</span>    <span class="token string">`db:"age"`</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">initDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>dsn <span class="token operator">:=</span> <span class="token string">"root:123456@tcp(127.0.0.1:3306)/sql_test?charset=utf8mb4&amp;parseTime=True"</span><span class="token comment">// 也可以使用 MustConnect 连接不成功就直接 panic</span><span class="token comment">// db = sqlx.MustConnect("mysql", dsn)</span>db<span class="token punctuation">,</span> err <span class="token operator">=</span> sqlx<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span><span class="token string">"mysql"</span><span class="token punctuation">,</span> dsn<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"connect DB failed, err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>db<span class="token punctuation">.</span><span class="token function">SetMaxOpenConns</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment">// 设置数据库连接池的最大连接数</span>db<span class="token punctuation">.</span><span class="token function">SetMaxIdleConns</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// 设置数据库连接池的最大空闲连接数</span><span class="token keyword">return</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，请替换为你自己的MySQL 配置。</p><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><h3 id="1-创建表"><a href="#1-创建表" class="headerlink" title="1. 创建表"></a>1. 创建表</h3><p>接下来，让我们创建一个示例表。我们可以使用 <code>Exec</code> 方法执行 SQL 语句来创建表。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">CreateTable</span><span class="token punctuation">(</span>db <span class="token operator">*</span>sqlx<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token punctuation">(</span>err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 写SQL语句</span>sqlStr <span class="token operator">:=</span> <span class="token string">`create table if not exists users (id bigint primary key auto_increment,name varchar(20),age int default 1);`</span><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>sqlStr<span class="token punctuation">)</span><span class="token keyword">return</span> err<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>main</code> 函数中调用 <code>CreateTable(db)</code>，以确保在连接后创建表。</p><h3 id="2-插入数据"><a href="#2-插入数据" class="headerlink" title="2. 插入数据"></a>2. 插入数据</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 插入用户并获取 ID</span><span class="token keyword">func</span> <span class="token function">insertUser</span><span class="token punctuation">(</span>db <span class="token operator">*</span>sqlx<span class="token punctuation">.</span>DB<span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">,</span> age <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>result<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO users(name, age) VALUES(?, ?)"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span>id<span class="token punctuation">,</span> err <span class="token operator">:=</span> result<span class="token punctuation">.</span><span class="token function">LastInsertId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token keyword">return</span> id<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-查询数据"><a href="#3-查询数据" class="headerlink" title="3. 查询数据"></a>3. 查询数据</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 查询单条用户记录</span><span class="token keyword">func</span> <span class="token function">getUser</span><span class="token punctuation">(</span>db <span class="token operator">*</span>sqlx<span class="token punctuation">.</span>DB<span class="token punctuation">,</span> id <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>User<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> user Usererr <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">,</span> <span class="token string">"SELECT * FROM users WHERE id=?"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token operator">&amp;</span>user<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment">// 查询所有用户记录</span><span class="token keyword">func</span> <span class="token function">getAllUsers</span><span class="token punctuation">(</span>db <span class="token operator">*</span>sqlx<span class="token punctuation">.</span>DB<span class="token punctuation">,</span> id <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>User<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> users <span class="token punctuation">[</span><span class="token punctuation">]</span>Usererr <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">,</span> <span class="token string">"SELECT * FROM users where id &gt; ?"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token keyword">return</span> users<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-更新数据"><a href="#4-更新数据" class="headerlink" title="4. 更新数据"></a>4. 更新数据</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 更新用户信息</span><span class="token keyword">func</span> <span class="token function">updateUser</span><span class="token punctuation">(</span>db <span class="token operator">*</span>sqlx<span class="token punctuation">.</span>DB<span class="token punctuation">,</span> id <span class="token builtin">int64</span><span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">,</span> age <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>result<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token string">"UPDATE users SET name=?, age=? WHERE id=?"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span>rowsAffected<span class="token punctuation">,</span> err <span class="token operator">:=</span> result<span class="token punctuation">.</span><span class="token function">RowsAffected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token keyword">return</span> rowsAffected<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-删除数据"><a href="#5-删除数据" class="headerlink" title="5. 删除数据"></a>5. 删除数据</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 删除用户记录</span><span class="token keyword">func</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span>db <span class="token operator">*</span>sqlx<span class="token punctuation">.</span>DB<span class="token punctuation">,</span> id <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>result<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token string">"DELETE FROM users WHERE id=?"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span>rowsAffected<span class="token punctuation">,</span> err <span class="token operator">:=</span> result<span class="token punctuation">.</span><span class="token function">RowsAffected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token keyword">return</span> rowsAffected<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-使用命名参数来操作"><a href="#6-使用命名参数来操作" class="headerlink" title="6. 使用命名参数来操作"></a>6. 使用命名参数来操作</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 使用命名参数插入用户</span><span class="token keyword">func</span> <span class="token function">insertUserNamed</span><span class="token punctuation">(</span>db <span class="token operator">*</span>sqlx<span class="token punctuation">.</span>DB<span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">,</span> age <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>query <span class="token operator">:=</span> <span class="token string">`INSERT INTO users(name, age) VALUES(:name, :age)`</span>result<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">NamedExec</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">:</span>  age<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span>id<span class="token punctuation">,</span> err <span class="token operator">:=</span> result<span class="token punctuation">.</span><span class="token function">LastInsertId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token keyword">return</span> id<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token comment">// 使用命名参数查询用户</span><span class="token keyword">func</span> <span class="token function">getUsersNamed</span><span class="token punctuation">(</span>db <span class="token operator">*</span>sqlx<span class="token punctuation">.</span>DB<span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>User<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>query <span class="token operator">:=</span> <span class="token string">`SELECT * FROM users WHERE name = :name`</span><span class="token keyword">var</span> users <span class="token punctuation">[</span><span class="token punctuation">]</span>Userrows<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">NamedQuery</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span> name<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token keyword">defer</span> rows<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> rows<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> user Usererr <span class="token operator">:=</span> rows<span class="token punctuation">.</span><span class="token function">StructScan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"scan failed, err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">continue</span><span class="token punctuation">}</span>users <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>users<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> users<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-测试一下代码"><a href="#7-测试一下代码" class="headerlink" title="7. 测试一下代码"></a>7. 测试一下代码</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 初始化数据库</span>err <span class="token operator">:=</span> <span class="token function">initDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"init DB failed, err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">defer</span> db<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 注意这行代码要写在上面err判断的下面</span><span class="token comment">// 创建表</span>err <span class="token operator">=</span> <span class="token function">CreateTable</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"create table failed, err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token comment">// 插入数据</span>id<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">insertUser</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">"Alex"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"insert user failed, err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"insert success, the id is:"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token comment">// 查询单条数据</span>user<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">getUser</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"get user failed, err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"user:%#v\n"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token comment">// 查询多条数据</span>users<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">getAllUsers</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"get all users failed, err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"users:%#v\n"</span><span class="token punctuation">,</span> users<span class="token punctuation">)</span><span class="token comment">// 更新数据</span>rowsAffected<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">updateUser</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> id<span class="token punctuation">,</span> <span class="token string">"Alex"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"update user failed, err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"update success, affected rows:"</span><span class="token punctuation">,</span> rowsAffected<span class="token punctuation">)</span><span class="token comment">// 删除数据</span>rowsAffected<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"delete user failed, err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"delete success, affected rows:"</span><span class="token punctuation">,</span> rowsAffected<span class="token punctuation">)</span><span class="token comment">// 使用命名参数插入数据</span>id<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">insertUserNamed</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">"Alex"</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"insert user named failed, err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"insert named success, the id is:"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token comment">// 使用命名参数查询数据</span>users<span class="token punctuation">,</span> err <span class="token operator">=</span> <span class="token function">getUsersNamed</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">"Alex"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"get users named failed, err:%v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"users named:%#v\n"</span><span class="token punctuation">,</span> users<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"exec SQL success"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以看到，使用 <code>sqlx</code> 还是要比 <code>database/sql</code> 要简洁许多。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过 <code>sqlx</code> 包，我们可以更简单地在 Go 中与 MySQL 数据库进行交互，减少了样板代码并提高了代码的可读性。</p><p>希望这篇文章能帮助你更好地理解如何在 Go 中使用 <code>sqlx</code> 操作 MySQL 数据库！</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Golang </tag>
            
            <tag> MySQL </tag>
            
            <tag> sqlx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 语言中的 MySQL 事务操作</title>
      <link href="posts/50c9af33.html"/>
      <url>posts/50c9af33.html</url>
      
        <content type="html"><![CDATA[<p>在现代应用程序中，数据的完整性和一致性至关重要。MySQL 的事务功能提供了一种确保操作安全且可靠的机制。</p><p>在这篇文章中，我将介绍什么是事务，如何在 Go 语言中进行 MySQL 事务操作。</p><h2 id="一、什么是事务？"><a href="#一、什么是事务？" class="headerlink" title="一、什么是事务？"></a>一、什么是事务？</h2><p>事务是一个包含一个或多个 SQL 操作的逻辑单元。在 MySQL 中，事务确保了这些操作要么全部成功执行，要么在发生错误时全部回滚，保持数据的一致性。事务的主要特性包括：</p><ul><li><strong>原子性（Atomicity）</strong>：事务中所有操作要么全部完成，要么完全不执行。</li><li><strong>一致性（Consistency）</strong>：事务执行前后，数据的完整性必须保持一致。</li><li><strong>隔离性（Isolation）</strong>：多个事务的执行互不影响，各自独立。</li><li><strong>持久性（Durability）</strong>：一旦事务提交，其结果是永久性的，即使系统故障也不会丢失。</li></ul><h2 id="二、MySQL-事务操作"><a href="#二、MySQL-事务操作" class="headerlink" title="二、MySQL 事务操作"></a>二、MySQL 事务操作</h2><p>在 Go 语言中，可以使用 <code>database/sql</code> 包来处理 MySQL 的事务操作。首先，请确保通过 <code>go get</code> 安装了 <code>github.com/go-sql-driver/mysql</code> 驱动：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go get <span class="token parameter variable">-u</span> github.com/go-sql-driver/mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-开始一个事务"><a href="#1-开始一个事务" class="headerlink" title="1. 开始一个事务"></a>1. 开始一个事务</h3><p>使用 <code>db.Begin()</code> 方法可以开启一个事务。接下来，我们将通过一个银行转账的示例来演示事务如何确保数据的一致性。</p><h3 id="2-银行转账示例"><a href="#2-银行转账示例" class="headerlink" title="2. 银行转账示例"></a>2. 银行转账示例</h3><p>假设我们有两个用户 A 和 B，A 想把 100 元转账给 B。这个操作需要保证以下两个步骤：</p><ol><li>从用户 A 的账户中扣除 100 元。</li><li>向用户 B 的账户中增加 100 元。</li></ol><p>这两个操作必须在一个事务中执行，以确保如果其中一步失败，则不会产生不一致的数据。以下是实现的代码示例：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"database/sql"</span>    <span class="token string">"fmt"</span>    <span class="token string">"log"</span>    <span class="token boolean">_</span> <span class="token string">"github.com/go-sql-driver/mysql"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">transfer</span><span class="token punctuation">(</span>db <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB<span class="token punctuation">,</span> fromUserID <span class="token builtin">int</span><span class="token punctuation">,</span> toUserID <span class="token builtin">int</span><span class="token punctuation">,</span> amount <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token comment">// 开始一个事务</span>    tx<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> err    <span class="token punctuation">}</span>    <span class="token comment">// 步骤 1: 检查用户 A 的余额</span>    <span class="token keyword">var</span> balance <span class="token builtin">float64</span>    err <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">QueryRow</span><span class="token punctuation">(</span><span class="token string">"SELECT balance FROM accounts WHERE user_id = ?"</span><span class="token punctuation">,</span> fromUserID<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>balance<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 如果查询用户余额出错，回滚事务</span>        <span class="token keyword">return</span> err    <span class="token punctuation">}</span>    <span class="token keyword">if</span> balance <span class="token operator">&lt;</span> amount <span class="token punctuation">{</span>        tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 如果余额不足，回滚事务</span>        <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"用户 %d 余额不足，无法进行转账"</span><span class="token punctuation">,</span> fromUserID<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">// 步骤 2: 从用户 A 扣款</span>    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token string">"UPDATE accounts SET balance = balance - ? WHERE user_id = ?"</span><span class="token punctuation">,</span> amount<span class="token punctuation">,</span> fromUserID<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 如果出错，回滚事务</span>        <span class="token keyword">return</span> err    <span class="token punctuation">}</span>    <span class="token comment">// 步骤 3: 向用户 B 充值</span>    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token string">"UPDATE accounts SET balance = balance + ? WHERE user_id = ?"</span><span class="token punctuation">,</span> amount<span class="token punctuation">,</span> toUserID<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        tx<span class="token punctuation">.</span><span class="token function">Rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 如果出错，回滚事务</span>        <span class="token keyword">return</span> err    <span class="token punctuation">}</span>    <span class="token comment">// 提交事务</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> err    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    dsn <span class="token operator">:=</span> <span class="token string">"user:password@tcp(127.0.0.1:3306)/dbname"</span>    db<span class="token punctuation">,</span> err <span class="token operator">:=</span> sql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"mysql"</span><span class="token punctuation">,</span> dsn<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">defer</span> db<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 执行转账操作</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">transfer</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">100.00</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"Transaction failed:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Transfer completed successfully!"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个示例中，我们定义了一个 <code>transfer</code> 函数，使用事务确保从用户 A 的账户扣款和向用户 B 的账户充值这两个操作要么同时成功，要么同时失败。如果在任意步骤出错，事务将回滚，确保账户余额的一致性。</p><h2 id="三、事务的隔离级别"><a href="#三、事务的隔离级别" class="headerlink" title="三、事务的隔离级别"></a>三、事务的隔离级别</h2><p>事务的隔离级别定义了多个事务并发执行时的相互影响程度。MySQL 支持以下四种隔离级别：</p><table><thead><tr><th>隔离级别</th><th>含义</th><th>说明</th><th>特点</th></tr></thead><tbody><tr><td>Read Uncommitted</td><td>读未提交</td><td>允许一个事务读取另一个事务未提交的数据。这会导致“脏读”，即一个事务可能读取到另一个事务尚未提交的更改。</td><td>最低的隔离级别，性能最高，但数据一致性最差。</td></tr><tr><td>Read Committed</td><td>读已提交</td><td>一个事务只能读取到其他事务已提交的更改。这避免了脏读，但仍然不能防止“不可重复读”，即在同一事务中两次读取相同的数据可能得到不同的结果。</td><td>避免脏读，但同一事务中读取相同数据可能结果不同。</td></tr><tr><td>Repeatable Read</td><td>可重复读</td><td>在一个事务内，多次读取相同的数据将得到一致的结果。这避免了脏读和不可重复读，但仍然可能导致“幻读”，即在同一事务中插入新行的操作可能使读取结果发生变化。</td><td>读取一致性较好，但可能导致幻读。</td></tr><tr><td>Serializable</td><td>序列化</td><td>这是最高的隔离级别，事务完全序列化执行，现在的事务在执行时不会受到其他事务的影响。这避免了脏读、不可重复读和幻读，但性能较低，因为在这种级别下，事务的并发性大大降低。</td><td>最强的隔离级别，数据一致性和安全性最佳，但性能最低。</td></tr></tbody></table><h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3><ul><li><strong>脏读</strong>：一个事务读取到另一个事务未提交的数据。</li><li><strong>不可重复读</strong>：同一个事务在多次读取中，得到不同的结果。</li><li><strong>幻读</strong>：一个事务在读取过程中，另一事务插入了新的数据，导致第一次和第二次读取结果不同。</li></ul><h2 id="四、设置事务隔离级别"><a href="#四、设置事务隔离级别" class="headerlink" title="四、设置事务隔离级别"></a>四、设置事务隔离级别</h2><p>在 Go 语言中，可以通过 SQL 语句设置事务的隔离级别。例如：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> db<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token string">"SET TRANSACTION ISOLATION LEVEL REPEATABLE READ"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在开启事务之前设置隔离级别，从而决定事务之间的隔离程度。</p><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>在 Go 语言中通过 <code>github.com/go-sql-driver/mysql</code> 驱动进行 MySQL 事务操作非常简单。通过明确的事务控制，我们可以确保数据的安全性和一致性。银行转账的示例清楚地展示了事务在防止数据不一致方面的重要性。了解并合理设置事务的隔离级别是提升应用程序数据安全性的重要环节。</p><p>希望本篇文章能够帮助你更好地理解和使用 MySQL 的事务机制。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Golang </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言中进行MySQL预处理和SQL注入防护</title>
      <link href="posts/cd962b5b.html"/>
      <url>posts/cd962b5b.html</url>
      
        <content type="html"><![CDATA[<p>在现代 web 应用开发中，安全性是我们必须重视的一个方面。SQL 注入是常见的攻击手法之一，它允许攻击者通过构造特殊的 SQL 查询来访问、修改数据库中的数据。</p><p>在这篇文章中，我们将探讨如何在 Go 语言中进行 MySQL 数据库的预处理操作，以有效防止 SQL 注入攻击。</p><h2 id="一、SQL-注入是什么？"><a href="#一、SQL-注入是什么？" class="headerlink" title="一、SQL 注入是什么？"></a>一、SQL 注入是什么？</h2><p>SQL 注入是一种安全漏洞，攻击者能够通过输入恶意 SQL 代码，使得应用执行非预期的数据库操作。例如，考虑以下代码片段：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$query</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SELECT * FROM users WHERE username = '<span class="token interpolation"><span class="token variable">$username</span></span>'"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果用户输入 <code>admin' OR 1=1 --</code>，则查询将变为：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> users <span class="token keyword">WHERE</span> username <span class="token operator">=</span> <span class="token string">'admin'</span> <span class="token operator">OR</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span> <span class="token comment">--';</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将导致数据库返回所有用户的记录，从而让攻击者访问敏感数据。</p><h2 id="二、预处理-SQL-语句"><a href="#二、预处理-SQL-语句" class="headerlink" title="二、预处理 SQL 语句"></a>二、预处理 SQL 语句</h2><h3 id="1-什么是预处理-SQL-语句？"><a href="#1-什么是预处理-SQL-语句？" class="headerlink" title="1. 什么是预处理 SQL 语句？"></a>1. 什么是预处理 SQL 语句？</h3><p>预处理 SQL 语句是一种提前编译的 SQL 语句，使用占位符（如 <code>?</code>）来代替实际值。预处理可以在编译时检查语法错误，执行时将输入值传入。这种机制不仅提高了性能，还有助于防止 SQL 注入。</p><h3 id="2-预处理-SQL-语句的优缺点"><a href="#2-预处理-SQL-语句的优缺点" class="headerlink" title="2. 预处理 SQL 语句的优缺点"></a>2. 预处理 SQL 语句的优缺点</h3><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><ul><li><strong>安全性</strong>：通过使用占位符，确保用户输入不会直接嵌入 SQL 查询中，从而避免 SQL 注入攻击。</li><li><strong>性能</strong>：对于经常执行相同查询的情况，数据库可以重用已编译的查询计划，减少了编译开销。</li><li><strong>简洁性</strong>：代码更易读，逻辑清晰，避免了字符串拼接导致的复杂性。</li></ul><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><ul><li><strong>复杂的查询</strong>：在处理动态的复杂查询时，使用预处理语句会增加代码复杂度。</li><li><strong>占位符限制</strong>：某些数据库系统对占位符的使用有特定限制，比如不能用于表名、列名等。</li></ul><h2 id="三、使用-Go-连接-MySQL-数据库"><a href="#三、使用-Go-连接-MySQL-数据库" class="headerlink" title="三、使用 Go 连接 MySQL 数据库"></a>三、使用 Go 连接 MySQL 数据库</h2><p>在 Go 中，我们可以使用 <code>github.com/go-sql-driver/mysql</code> 驱动连接到 MySQL 数据库。首先，安装这个驱动：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go get <span class="token parameter variable">-u</span> github.com/go-sql-driver/mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-基本连接"><a href="#1-基本连接" class="headerlink" title="1. 基本连接"></a>1. 基本连接</h3><p>以下是连接到 MySQL 数据库的基本示例：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"database/sql"</span>    <span class="token string">"fmt"</span>    <span class="token string">"log"</span>    <span class="token boolean">_</span> <span class="token string">"github.com/go-sql-driver/mysql"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    dsn <span class="token operator">:=</span> <span class="token string">"user:password@tcp(127.0.0.1:3306)/dbname"</span>    db<span class="token punctuation">,</span> err <span class="token operator">:=</span> sql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"mysql"</span><span class="token punctuation">,</span> dsn<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token comment">// 处理连接错误</span>    <span class="token punctuation">}</span>    <span class="token keyword">defer</span> db<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 确保在最后关闭数据库连接</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Successfully connected to the database!"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>请将 <code>user</code>, <code>password</code>, <code>localhost</code>, 和 <code>dbname</code> 替换为你的数据库信息。</p><h2 id="四、预处理-SQL-语句的使用"><a href="#四、预处理-SQL-语句的使用" class="headerlink" title="四、预处理 SQL 语句的使用"></a>四、预处理 SQL 语句的使用</h2><h3 id="1-创建预处理语句"><a href="#1-创建预处理语句" class="headerlink" title="1. 创建预处理语句"></a>1. 创建预处理语句</h3><p>以下是如何创建并执行预处理语句的示例：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">getUserByUsername</span><span class="token punctuation">(</span>db <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB<span class="token punctuation">,</span> username <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>User<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 创建预处理语句</span>    stmt<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Prepare</span><span class="token punctuation">(</span><span class="token string">"SELECT id, username, email FROM users WHERE username = ?"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err <span class="token comment">// 处理创建错误</span>    <span class="token punctuation">}</span>    <span class="token keyword">defer</span> stmt<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 确保在最后关闭预处理语句</span>    <span class="token keyword">var</span> user User    <span class="token comment">// 执行查询并将结果扫描到 user 对象中</span>    err <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">QueryRow</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token operator">&amp;</span>user<span class="token punctuation">.</span>Username<span class="token punctuation">,</span> <span class="token operator">&amp;</span>user<span class="token punctuation">.</span>Email<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err <span class="token comment">// 处理查询错误</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>user<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，<code>?</code> 是一个占位符，Go 会自动处理参数 <code>username</code> 的转义，从而防止 SQL 注入。</p><h3 id="2-执行多条预处理语句"><a href="#2-执行多条预处理语句" class="headerlink" title="2. 执行多条预处理语句"></a>2. 执行多条预处理语句</h3><p>以下是一个插入多个用户的示例：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">insertUser</span><span class="token punctuation">(</span>db <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB<span class="token punctuation">,</span> username <span class="token builtin">string</span><span class="token punctuation">,</span> email <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    <span class="token comment">// 创建插入用户的预处理语句</span>    stmt<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Prepare</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO users (username, email) VALUES (?, ?)"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> err <span class="token comment">// 处理创建错误</span>    <span class="token punctuation">}</span>    <span class="token keyword">defer</span> stmt<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 确保在最后关闭预处理语句</span>    <span class="token comment">// 执行插入操作</span>    <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> email<span class="token punctuation">)</span>    <span class="token keyword">return</span> err <span class="token comment">// 返回插入结果的错误</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在此示例中，我们定义了一个插入用户的函数，同样使用了占位符，确保用户输入不会导致 SQL 调用的异常。</p><h3 id="3-执行批量插入"><a href="#3-执行批量插入" class="headerlink" title="3. 执行批量插入"></a>3. 执行批量插入</h3><p>在需要插入多个记录的场景中，可以使用一个循环来执行预处理语句：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">insertMultipleUsers</span><span class="token punctuation">(</span>db <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB<span class="token punctuation">,</span> users <span class="token punctuation">[</span><span class="token punctuation">]</span>User<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    stmt<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Prepare</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO users (username, email) VALUES (?, ?)"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> err    <span class="token punctuation">}</span>    <span class="token keyword">defer</span> stmt<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> user <span class="token operator">:=</span> <span class="token keyword">range</span> users <span class="token punctuation">{</span>        <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> stmt<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>Username<span class="token punctuation">,</span> user<span class="token punctuation">.</span>Email<span class="token punctuation">)</span>        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> err <span class="token comment">// 如果插入失败，则返回错误</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、安全性最佳实践"><a href="#五、安全性最佳实践" class="headerlink" title="五、安全性最佳实践"></a>五、安全性最佳实践</h2><p>除了使用预处理语句，开发者还应遵循以下最佳实践以增强安全性：</p><ol><li><strong>使用 ORM</strong>：使用 Go 的 ORM 框架（如 GORM）可以进一步简化 SQL 操作，同时自动处理 SQL 注入问题。</li><li><strong>限制数据库用户权限</strong>：避免给应用程序数据库用户过高的权限。确保应用程序仅能执行其所需的操作。</li><li><strong>输入验证</strong>：始终对用户输入进行验证，确保其符合预期格式。</li><li><strong>定期审计代码</strong>：定期检查和审计代码，确保没有潜在的 SQL 注入漏洞。</li></ol><h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><p>在 Go 语言中使用 <code>github.com/go-sql-driver/mysql</code> 驱动进行 MySQL 数据库操作时，预处理语句是防止 SQL 注入攻击的有效手段。通过使用占位符，Go 语言能够自动处理输入数据的转义，减少了安全隐患。同时，务必要结合其他最佳实践，确保数据库和应用程序的安全性。</p><p>总之一定要切记：<strong>永远不要相信用户的输入！</strong></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Golang </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手摸手教你，从0到1开发一个Chrome浏览器插件</title>
      <link href="posts/2980e851.html"/>
      <url>posts/2980e851.html</url>
      
        <content type="html"><![CDATA[<p>开发 Chrome 浏览器插件（也称为扩展）是一段有趣且有成就感的过程。在本教程中，我将引导你从零开始，逐步创建一个简单的 Chrome 插件。无论你是编程新手还是有一定基础的用户，我们都将以简单易懂的方式介绍整个过程。</p><h2 id="1-什么是-Chrome-插件？"><a href="#1-什么是-Chrome-插件？" class="headerlink" title="1. 什么是 Chrome 插件？"></a>1. 什么是 Chrome 插件？</h2><p>Chrome 插件是可以添加到 Google Chrome 浏览器中的小程序，旨在增强浏览器的功能。它们可以改变网页的外观、增加新的功能、与用户交互等。</p><p>我们先从一个最简单的 Chrome 扩展开始，你也可以参照我写的这个微信公众号小助手插件 <code>https://github.com/pudongping/mp-vx-insight</code> 来学习，好了，话不多说，直接开撸。</p><h2 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2. 准备工作"></a>2. 准备工作</h2><p>在开始之前，你需要确保：</p><ul><li>已安装 Google Chrome 浏览器。</li><li>有一个简单的文本编辑器（如 Notepad、VS Code、Sublime Text）。</li><li>对 HTML、CSS 和 JavaScript 有基本了解。</li></ul><h2 id="3-插件的基本结构"><a href="#3-插件的基本结构" class="headerlink" title="3. 插件的基本结构"></a>3. 插件的基本结构</h2><p>一个 Chrome 插件通常由以下几个基本文件组成：</p><ul><li><code>manifest.json</code>：插件的配置文件，定义插件的基本信息和权限。</li><li><code>background.js</code>：插件的后台脚本，负责执行后台任务。</li><li><code>popup.html</code>：用户点击插件图标时显示的界面。</li><li><code>style.css</code>：用于美化插件界面的样式表。</li></ul><h2 id="4-创建你的第一个插件"><a href="#4-创建你的第一个插件" class="headerlink" title="4. 创建你的第一个插件"></a>4. 创建你的第一个插件</h2><h3 id="步骤-1：创建项目文件夹"><a href="#步骤-1：创建项目文件夹" class="headerlink" title="步骤 1：创建项目文件夹"></a>步骤 1：创建项目文件夹</h3><p>在你的计算机上创建一个新的文件夹，例如 <code>my_first_extension</code>。</p><h3 id="步骤-2：创建-manifest-json-文件"><a href="#步骤-2：创建-manifest-json-文件" class="headerlink" title="步骤 2：创建 manifest.json 文件"></a>步骤 2：创建 manifest.json 文件</h3><p>在项目文件夹中创建一个文件 <code>manifest.json</code>，并复制以下内容：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"manifest_version"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"My First Extension"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0"</span><span class="token punctuation">,</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"This is my first Chrome extension!"</span><span class="token punctuation">,</span>  <span class="token property">"action"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"default_popup"</span><span class="token operator">:</span> <span class="token string">"popup.html"</span><span class="token punctuation">,</span>    <span class="token property">"default_icon"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"16"</span><span class="token operator">:</span> <span class="token string">"icon16.png"</span><span class="token punctuation">,</span>      <span class="token property">"48"</span><span class="token operator">:</span> <span class="token string">"icon48.png"</span><span class="token punctuation">,</span>      <span class="token property">"128"</span><span class="token operator">:</span> <span class="token string">"icon128.png"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"background"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"service_worker"</span><span class="token operator">:</span> <span class="token string">"background.js"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"permissions"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"activeTab"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="步骤-3：添加-Popup-界面"><a href="#步骤-3：添加-Popup-界面" class="headerlink" title="步骤 3：添加 Popup 界面"></a>步骤 3：添加 Popup 界面</h3><p>在同一文件夹中，创建 <code>popup.html</code> 文件并添加以下代码：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>My First Extension<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>style.css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Hello, Chrome!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>clickMe<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Click Me!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>popup.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="步骤-4：创建样式文件"><a href="#步骤-4：创建样式文件" class="headerlink" title="步骤 4：创建样式文件"></a>步骤 4：创建样式文件</h3><p>在同一文件夹中，创建 <code>style.css</code> 文件，添加如下内容：</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">body</span> <span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">h1</span> <span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #333<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">button</span> <span class="token punctuation">{</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 10px 15px<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="步骤-5：添加-JavaScript-功能"><a href="#步骤-5：添加-JavaScript-功能" class="headerlink" title="步骤 5：添加 JavaScript 功能"></a>步骤 5：添加 JavaScript 功能</h3><p>接下来，创建 <code>popup.js</code> 文件，实现按钮的点击事件：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'clickMe'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Button clicked!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="步骤-6：添加后台脚本"><a href="#步骤-6：添加后台脚本" class="headerlink" title="步骤 6：添加后台脚本"></a>步骤 6：添加后台脚本</h3><p>为了展示后台功能，创建一个 <code>background.js</code> 文件，内容可以是简单的 console.log：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Background service worker running!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="步骤-7：添加图标"><a href="#步骤-7：添加图标" class="headerlink" title="步骤 7：添加图标"></a>步骤 7：添加图标</h3><p>为了使你的插件更美观，我们需要为其添加图标。在项目文件夹中添加三种不同尺寸的图标：<code>icon16.png</code>、<code>icon48.png</code> 和 <code>icon128.png</code>。你可以使用在线图标生成器生成图标，或从网络下载适合的图标。</p><h2 id="5-在-Chrome-中加载扩展"><a href="#5-在-Chrome-中加载扩展" class="headerlink" title="5. 在 Chrome 中加载扩展"></a>5. 在 Chrome 中加载扩展</h2><ol><li>打开 Chrome 浏览器，输入 <code>chrome://extensions/</code> 并按回车。</li><li>在右上角启用开发者模式。<strong>一定要开启</strong></li><li>点击 “加载已解压的扩展”，选择你的项目文件夹（<code>my_first_extension</code>）。</li><li>你会在扩展列表中看到你的插件。</li></ol><h2 id="6-测试插件"><a href="#6-测试插件" class="headerlink" title="6. 测试插件"></a>6. 测试插件</h2><p>点击浏览器工具栏中的插件图标，会弹出你定义的 Popup 界面。点击按钮，你应该会看到提示框弹出，显示 “Button clicked!”。</p><p>现在，你已经成功创建了一个简单的 Chrome 插件！是不是非常简单呢？当然还有更多的一些特性由于篇幅的原因就不细讲了，强烈建议你可以直接找一个 Chrome 插件源码看看，比如我写的这个微信公众号小助手 Chrome 扩展 <code>https://github.com/pudongping/mp-vx-insight</code> 这样可以学得更快！</p><h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7. 总结"></a>7. 总结</h2><p>通过这个简单的教程，你已经了解了如何从零开始开发一个基本的 Chrome 插件。插件的开发不仅能提升你的编程技能，更能让你在日常浏览中享受到便利。希望你在这个过程中感受到乐趣。</p><p>如需进一步学习，可以参考 <a href="https://developer.chrome.com/docs/extensions/mv3/getstarted/">Chrome 扩展文档</a>，深入了解不同的 API 和功能。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言中如何连接 MySQL，基础必备！</title>
      <link href="posts/48b3e862.html"/>
      <url>posts/48b3e862.html</url>
      
        <content type="html"><![CDATA[<p>在现代应用中，数据库操作是必不可少的一部分，而 Go 语言凭借其高效性和并发处理能力，成为了越来越多开发者的选择。</p><p>在本教程中，我们将学习如何使用 Go 语言与 MySQL 数据库进行基本的 CRUD（创建、读取、更新、删除）操作。我们将使用 <code>database/sql</code> 标准库以及 <code>github.com/go-sql-driver/mysql</code> 驱动来实现这些功能。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h3><ul><li>创建一个名为 <code>test_db</code> 的数据库。</li><li>创建一个 <code>users</code> 表，表结构如下：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">CREATE DATABASE test_db<span class="token punctuation">;</span>USE test_db<span class="token punctuation">;</span>CREATE TABLE <span class="token function">users</span> <span class="token punctuation">(</span>    <span class="token function">id</span> INT AUTO_INCREMENT PRIMARY KEY,    name VARCHAR<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> NOT NULL,    age INT NOT NULL<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装-MySQL-驱动"><a href="#安装-MySQL-驱动" class="headerlink" title="安装 MySQL 驱动"></a>安装 MySQL 驱动</h3><p>使用以下命令安装 MySQL 驱动：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go get <span class="token parameter variable">-u</span> github.com/go-sql-driver/mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>下面是一个完整的 Go 程序，展示如何进行基本的 CRUD 操作：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"database/sql"</span>    <span class="token string">"fmt"</span>    <span class="token string">"log"</span>    <span class="token boolean">_</span> <span class="token string">"github.com/go-sql-driver/mysql"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 数据库连接字符串</span>    dsn <span class="token operator">:=</span> <span class="token string">"user:password@tcp(127.0.0.1:3306)/test_db"</span>    db<span class="token punctuation">,</span> err <span class="token operator">:=</span> sql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"mysql"</span><span class="token punctuation">,</span> dsn<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">// 防止 db 为 nil，因此需要先判断 err 之后才能调用 Close 方法去释放 db</span>    <span class="token keyword">defer</span> db<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 测试连接</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"成功连接到 MySQL 数据库！"</span><span class="token punctuation">)</span>    <span class="token comment">// 创建用户</span>    id <span class="token operator">:=</span> <span class="token function">createUser</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token string">"Alice"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"新创建的用户 ID: %d\n"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span>    <span class="token comment">// 查询所有用户</span>    <span class="token function">getUsers</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span>    <span class="token comment">// 查询单个用户</span>    userId <span class="token operator">:=</span> <span class="token number">1</span>    <span class="token function">getUser</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> userId<span class="token punctuation">)</span>    <span class="token comment">// 更新用户</span>    affectedRows <span class="token operator">:=</span> <span class="token function">updateUser</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Alice Smith"</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"受影响的行数: %d\n"</span><span class="token punctuation">,</span> affectedRows<span class="token punctuation">)</span>    <span class="token comment">// 删除用户</span>    affectedRows <span class="token operator">=</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span>db<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"受影响的行数: %d\n"</span><span class="token punctuation">,</span> affectedRows<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建（Insert）"><a href="#创建（Insert）" class="headerlink" title="创建（Insert）"></a>创建（Insert）</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 创建用户，返回新创建用户的 ID</span><span class="token keyword">func</span> <span class="token function">createUser</span><span class="token punctuation">(</span>db <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB<span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">,</span> age <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    query <span class="token operator">:=</span> <span class="token string">"INSERT INTO users (name, age) VALUES (?, ?)"</span>    result<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">// 获取最后插入的 ID</span>    lastInsertId<span class="token punctuation">,</span> err <span class="token operator">:=</span> result<span class="token punctuation">.</span><span class="token function">LastInsertId</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">int</span><span class="token punctuation">(</span>lastInsertId<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查询（Select）"><a href="#查询（Select）" class="headerlink" title="查询（Select）"></a>查询（Select）</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 查询所有用户</span><span class="token keyword">func</span> <span class="token function">getUsers</span><span class="token punctuation">(</span>db <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB<span class="token punctuation">)</span> <span class="token punctuation">{</span>    query <span class="token operator">:=</span> <span class="token string">"SELECT id, name, age FROM users"</span>    rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">// 一定要记得关闭资源</span>    <span class="token keyword">defer</span> rows<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"所有用户:"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> rows<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> id <span class="token builtin">int</span>        <span class="token keyword">var</span> name <span class="token builtin">string</span>        <span class="token keyword">var</span> age <span class="token builtin">int</span>        <span class="token keyword">if</span> err <span class="token operator">:=</span> rows<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>id<span class="token punctuation">,</span> <span class="token operator">&amp;</span>name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"ID: %d, Name: %s, Age: %d\n"</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 查询单个用户</span><span class="token keyword">func</span> <span class="token function">getUser</span><span class="token punctuation">(</span>db <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB<span class="token punctuation">,</span> id <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    query <span class="token operator">:=</span> <span class="token string">"SELECT id, name, age FROM users WHERE id = ?"</span>    row <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">QueryRow</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> id<span class="token punctuation">)</span>    <span class="token keyword">var</span> name <span class="token builtin">string</span>    <span class="token keyword">var</span> age <span class="token builtin">int</span>    <span class="token comment">// 调用完了 QueryRow 方法之后，一定要记得调用 Scan 方法，否则持有的数据库连接不会被释放</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> row<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>id<span class="token punctuation">,</span> <span class="token operator">&amp;</span>name<span class="token punctuation">,</span> <span class="token operator">&amp;</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> err <span class="token operator">==</span> sql<span class="token punctuation">.</span>ErrNoRows <span class="token punctuation">{</span>            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"用户 ID %d 不存在\n"</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"用户 ID: %d, Name: %s, Age: %d\n"</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="更新（Update）"><a href="#更新（Update）" class="headerlink" title="更新（Update）"></a>更新（Update）</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 更新用户，返回受影响的行数</span><span class="token keyword">func</span> <span class="token function">updateUser</span><span class="token punctuation">(</span>db <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB<span class="token punctuation">,</span> id <span class="token builtin">int</span><span class="token punctuation">,</span> name <span class="token builtin">string</span><span class="token punctuation">,</span> age <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    query <span class="token operator">:=</span> <span class="token string">"UPDATE users SET name = ?, age = ? WHERE id = ?"</span>    result<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> id<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">// 获取受影响的行数</span>    affectedRows<span class="token punctuation">,</span> err <span class="token operator">:=</span> result<span class="token punctuation">.</span><span class="token function">RowsAffected</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">int</span><span class="token punctuation">(</span>affectedRows<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除（Delete）"><a href="#删除（Delete）" class="headerlink" title="删除（Delete）"></a>删除（Delete）</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 删除用户，返回受影响的行数</span><span class="token keyword">func</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span>db <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB<span class="token punctuation">,</span> id <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    query <span class="token operator">:=</span> <span class="token string">"DELETE FROM users WHERE id = ?"</span>    result<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> id<span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment">// 获取受影响的行数</span>    affectedRows<span class="token punctuation">,</span> err <span class="token operator">:=</span> result<span class="token punctuation">.</span><span class="token function">RowsAffected</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">int</span><span class="token punctuation">(</span>affectedRows<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h2><h3 id="1-数据库连接"><a href="#1-数据库连接" class="headerlink" title="1. 数据库连接"></a>1. 数据库连接</h3><p>我们使用 <code>sql.Open</code> 方法连接到 MySQL 数据库，连接字符串格式为 <code>user:password@tcp(host:port)/dbname</code>。在连接后，我们调用 <code>db.Ping()</code> 测试数据库连接是否成功。</p><h3 id="2-创建用户"><a href="#2-创建用户" class="headerlink" title="2. 创建用户"></a>2. 创建用户</h3><p><code>createUser</code> 函数通过 <code>INSERT</code> 语句向 <code>users</code> 表中添加新用户，并返回新创建用户的 ID。</p><h3 id="3-查询用户"><a href="#3-查询用户" class="headerlink" title="3. 查询用户"></a>3. 查询用户</h3><ul><li><code>getUsers</code> 函数查询所有用户并打印每个用户的 ID、姓名和年龄。</li><li><code>getUser</code> 函数通过用户 ID 查询单个用户，并处理用户不存在的情况。</li></ul><h3 id="4-更新用户"><a href="#4-更新用户" class="headerlink" title="4. 更新用户"></a>4. 更新用户</h3><p><code>updateUser</code> 函数用于更新用户信息，并返回受影响的行数，以确认操作是否成功。</p><h3 id="5-删除用户"><a href="#5-删除用户" class="headerlink" title="5. 删除用户"></a>5. 删除用户</h3><p><code>deleteUser</code> 函数用于删除指定 ID 的用户，并同样返回受影响的行数。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在本文中，我们展示了如何使用 Go 语言与 MySQL 数据库进行基本的 CRUD 操作。通过本教程，您可以创建、查询、更新和删除用户数据，这为您在开发基于数据库的应用程序时打下了基础。</p><p>用这个库还是比较累赘的，代码写起来比较累，并且一般在实际应用中很少会直接拼接 sql 语句，会遇到 SQL 注入的风险，后面会介绍 sqlx 或者 gorm 的使用，这里先了解个基础知识，为后期做做准备。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一文弄懂Go语言的Context包，值得收藏！</title>
      <link href="posts/f5eba23a.html"/>
      <url>posts/f5eba23a.html</url>
      
        <content type="html"><![CDATA[<p>在开发高效且可维护的 Go 应用程序时，处理超时、取消操作和传递请求范围的数据变得至关重要。</p><p>这时，Go 标准库中的 <code>context</code> 包就显得尤其重要了，它提供了在不同 API 层级之间传递取消信号、超时时间、截止日期，以及其他特定请求的值的能力。</p><p>这篇文章就介绍 <code>context</code> 包的基本概念和应用示例，帮助你理解和使用这一强大的工具。</p><h2 id="Context-包的概述"><a href="#Context-包的概述" class="headerlink" title="Context 包的概述"></a>Context 包的概述</h2><p><code>context</code> 包允许你传递可取消的信号、超时时间、截止日期，以及跨 API 边界的请求范围的数据。在并发编程中，它非常有用，尤其是处理那些可能需要提前停止的长时间运行操作。</p><h2 id="关键特性"><a href="#关键特性" class="headerlink" title="关键特性"></a>关键特性</h2><p>Go 语言的 <code>context</code> 包提供了一系列方法，用于创建上下文（Context），这些上下文可以帮助我们管理请求的生命周期、取消信号、超时、截止日期和传递请求范围的数据。以下是 <code>context</code> 包中的主要方法及其用途：</p><h3 id="1-Background"><a href="#1-Background" class="headerlink" title="1. Background()"></a>1. <code>Background()</code></h3><p><strong>用途</strong>：返回一个空的上下文，通常用于程序的顶层（例如 <code>main</code> 函数）。</p><p><strong>应用场景</strong>：适用于初始化时没有特定上下文的情况，例如在 HTTP 服务器启动时。</p><h3 id="2-TODO"><a href="#2-TODO" class="headerlink" title="2. TODO()"></a>2. <code>TODO()</code></h3><p><strong>用途</strong>：返回一个空的上下文，通常在我们不确定使用哪个上下文时使用。</p><p><strong>应用场景</strong>：在编写代码时未完成上下文定义，作为占位符。</p><h3 id="3-WithCancel-parent-Context"><a href="#3-WithCancel-parent-Context" class="headerlink" title="3. WithCancel(parent Context)"></a>3. <code>WithCancel(parent Context)</code></h3><p><strong>用途</strong>：创建一个新的上下文和取消函数。当调用取消函数时，所有派生自这个上下文的操作将被通知取消。</p><p><strong>应用场景</strong>：当一个长时间运行的操作需要能够被取消时。例如，用户在网页中点击“取消”按钮时，相关的数据库或 HTTP 请求应立即停止。</p><h3 id="4-WithDeadline-parent-Context-d-time-Time"><a href="#4-WithDeadline-parent-Context-d-time-Time" class="headerlink" title="4. WithDeadline(parent Context, d time.Time)"></a>4. <code>WithDeadline(parent Context, d time.Time)</code></h3><p><strong>用途</strong>：创建一个新的上下文，该上下文在指定的<strong>时间点</strong>自动取消。</p><p><strong>应用场景</strong>：在请求处理时设置最大执行时间。例如，调用外部 API 时，如果响应时间超过预期，将自动取消请求，以避免无效的等待。</p><h3 id="5-WithTimeout-parent-Context-timeout-time-Duration"><a href="#5-WithTimeout-parent-Context-timeout-time-Duration" class="headerlink" title="5. WithTimeout(parent Context, timeout time.Duration)"></a>5. <code>WithTimeout(parent Context, timeout time.Duration)</code></h3><p><strong>用途</strong>：创建一个新的上下文，它会在<strong>指定的持续时间内</strong>自动取消。</p><p><strong>应用场景</strong>：适用于设置操作的超时时间，确保系统不会在某个操作上无休止地等待。常用于网络请求或长时间运行的任务。</p><h3 id="6-WithValue-parent-Context-key-val-interface"><a href="#6-WithValue-parent-Context-key-val-interface" class="headerlink" title="6. WithValue(parent Context, key, val interface{})"></a>6. <code>WithValue(parent Context, key, val interface{})</code></h3><p><strong>用途</strong>：创建一个新的上下文，并将键值对存储在该上下文中。</p><p><strong>应用场景</strong>：在处理请求时，将特定的数据（如用户身份信息、RequestID）在处理链中传递，而不需要在每个函数参数中显式传递。</p><h3 id="7-context-Done"><a href="#7-context-Done" class="headerlink" title="7. context.Done()"></a>7. <code>context.Done()</code></h3><p><strong>用途</strong>：通常与 <code>context.WithDeadline</code> 和 <code>context.WithTimeout</code> 一起使用。<code>context.Done()</code> 方法返回一个通道 (<code>&lt;-chan struct{}</code>)，这个通道在上下文被取消时会被关闭。它通常用于 Goroutine 中，让任务能够在上下文取消时及时响应，从而避免不必要的资源消耗。</p><p><strong>应用场景</strong>：</p><ul><li>任务控制：可以用来让 goroutine 知道何时应该停止执行，特别是在处理长时间运行的操作时。</li><li>取消信号：当调用 <code>CancelFunc</code>（来自 <code>WithCancel</code>, <code>WithTimeout</code> 或 <code>WithDeadline</code> 方法）来手动取消上下文时，所有通过 <code>context.Done()</code> 监听的 goroutines 都会收到通知，并相应地做出反应。</li></ul><h2 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h2><h3 id="创建-Context"><a href="#创建-Context" class="headerlink" title="创建 Context"></a>创建 Context</h3><p>首先，我们需要理解两个最基本的 <code>context</code> 创建函数：<code>context.Background()</code> 和 <code>context.TODO()</code>。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 根 Context，通常在 main 函数、初始化过程中使用</span>ctx <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 当不确定使用哪种 Context 或未来会添加 Context 时使用</span>ctxTodo <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="派生-Context"><a href="#派生-Context" class="headerlink" title="派生 Context"></a>派生 Context</h3><p>更实用的场景是创建子 Context，这可以通过 <code>context.WithCancel</code>、<code>context.WithDeadline</code>、<code>context.WithTimeout</code> 和 <code>context.WithValue</code> 方法完成。</p><h4 id="取消操作"><a href="#取消操作" class="headerlink" title="取消操作"></a>取消操作</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go">ctx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithCancel</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 调用 cancel 时，该 ctx 以及所有从它派生的子 context 都会被取消</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 模拟一个会被取消的操作</span>    <span class="token keyword">select</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Operation canceled"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">:</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Finished operation"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 主动发送取消信号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设置超时"><a href="#设置超时" class="headerlink" title="设置超时"></a>设置超时</h4><p><code>context.WithTimeout</code> 方法和 <code>context.WithDeadline</code> 方法都可以设置超时，这两个方法之间的主要区别在于它们设置的超时类型的不同。</p><p><code>context.WithTimeout</code> 方法用于设置<strong>相对的超时时间</strong>。它接受一个 context 和一个时间间隔作为参数。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">ctx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 保证以清理资源的方式结束 context</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token operator">&lt;-</span>ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> ctx<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> context<span class="token punctuation">.</span>DeadlineExceeded <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Operation timed out"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>context.WithDeadline</code> 方法用于设置<strong>绝对的超时时间点</strong>。它接受一个 context 和一个时间点作为参数。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 设置截止时间并执行任务</span>deadline <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>ctx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithDeadline</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> deadline<span class="token punctuation">)</span><span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 确保资源释放</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">select</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>time<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">// 模拟长时间任务</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Task completed"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> <span class="token operator">&lt;-</span>ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">// 响应超时导致被取消</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Task canceled:"</span><span class="token punctuation">,</span> ctx<span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span> <span class="token comment">// 等待一段时间</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Finished main function"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="上下文传值"><a href="#上下文传值" class="headerlink" title="上下文传值"></a>上下文传值</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go">ctx <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithValue</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"key"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span>value <span class="token operator">:=</span> ctx<span class="token punctuation">.</span><span class="token function">Value</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="实际项目中的应用场景"><a href="#实际项目中的应用场景" class="headerlink" title="实际项目中的应用场景"></a>实际项目中的应用场景</h2><h3 id="1-HTTP-处理"><a href="#1-HTTP-处理" class="headerlink" title="1. HTTP 处理"></a>1. HTTP 处理</h3><p>在 Web 应用中，每当接收到一个 HTTP 请求，通常会创建一个新的上下文，将其传递给所有的处理函数，可以通过超时或取消信号来控制请求的生命周期。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">handler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ctx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    <span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">// 在 ctx 中执行数据库查询或其他操作</span>    <span class="token comment">// 如果操作超时，则自动取消和处理</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-数据库操作"><a href="#2-数据库操作" class="headerlink" title="2. 数据库操作"></a>2. 数据库操作</h3><p>许多数据库驱动（如 <code>database/sql</code>）支持 <code>context</code>，可以在执行查询时设置超时。这有助于避免因为数据库响应缓慢而导致的无休止等待。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">fetchData</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>    ctx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    <span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 假设 db 是一个数据库连接</span>    rows<span class="token punctuation">,</span> err <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">QueryContext</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"SELECT ..."</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>        <span class="token comment">// 处理错误</span>    <span class="token punctuation">}</span>    <span class="token keyword">defer</span> rows<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 处理查询结果 ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-外部服务调用"><a href="#3-外部服务调用" class="headerlink" title="3. 外部服务调用"></a>3. 外部服务调用</h3><p>在与外部 API 通信时，可以设置超时，以防服务无法及时响应。利用 <code>WithTimeout</code>，可以确保程序不会永久等待响应。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">callExternalAPI</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ctx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">*</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>    <span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 进行外部 API 调用</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-Goroutine-管理"><a href="#4-Goroutine-管理" class="headerlink" title="4. Goroutine 管理"></a>4. Goroutine 管理</h3><p>在多个 Goroutine 中并发执行任务时，通过 <code>WithCancel</code> 来协调各个 Goroutine 的取消操作，提高系统的可控制性。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">concurrentTasks</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ctx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithCancel</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>    <span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 执行一些长时间工作</span>        <span class="token keyword">select</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token operator">&lt;-</span>ctx<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment">// 响应取消</span>            <span class="token keyword">return</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li><strong>避免把频繁变化的值存入 Context</strong>：虽然 <code>context</code> 支持通过 <code>WithValue</code> 方法传值，但应该尽量避免将<strong>频繁变化</strong>的数据通过 context 传递。</li><li><strong>Context 是线程安全的</strong>：可以放心地在多个 Goroutine 中使用。</li><li><strong>正确使用取消函数</strong>：当你通过 <code>context.WithCancel</code> 创建 context 时，一定要调用返回的取消函数，避免资源泄露。</li><li><strong>性能</strong>：<code>context.Done()</code> 是一个非阻塞的通道，使用它来监听取消信号不会引入显著的性能负担。</li><li><strong>错误处理</strong>：可以使用 <code>ctx.Err()</code> 来获取取消的原因，通常是在 goroutine 中处理这些信息时非常有用。</li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p><code>context</code> 包是 Go 语言为处理并发编程提供的强大工具，适用于处理超时、取消信号以及数据传递。理解并正确使用 context 对于编写高效、可维护的 Go 程序至关重要。</p><p>希望通过本文，你能够对 <code>context</code> 包有一个全面的理解，并在自己的项目中有效地使用它。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Golang </tag>
            
            <tag> Context </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过IMAP协议使用Go语言解析邮件</title>
      <link href="posts/60016311.html"/>
      <url>posts/60016311.html</url>
      
        <content type="html"><![CDATA[<p>电子邮件在现代通信中依然扮演着重要的角色。为了提升邮件处理的效率，使用编程语言进行自动化处理变得尤为重要。</p><p>本文将详细介绍如何使用 Go 语言从 IMAP 服务器读取邮件，解析邮件内容，并存储或处理所需信息。</p><p>说到邮件服务，我们就得先了解几个和邮件相关的协议。</p><h2 id="什么是-POP3-IMAP-SMTP-服务"><a href="#什么是-POP3-IMAP-SMTP-服务" class="headerlink" title="什么是 POP3/IMAP/SMTP 服务"></a>什么是 POP3/IMAP/SMTP 服务</h2><ul><li>POP3 （Post Office Protocol - Version 3）协议用于支持使用电子邮件客户端获取并删除在服务器上的电子邮件。</li><li>IMAP （Internet Message Access Protocol）协议用于支持使用电子邮件客户端交互式存取服务器上的邮件。</li><li>SMTP （Simple Mail Transfer Protocol）协议用于支持使用电子邮件客户端发送电子邮件。</li></ul><h2 id="IMAP-和-POP-有什么区别"><a href="#IMAP-和-POP-有什么区别" class="headerlink" title="IMAP 和 POP 有什么区别"></a>IMAP 和 POP 有什么区别</h2><p>SMTP 协议就不用多说了，专门用于发送邮件，这个协议也是我们在编程开发中用的最多的协议之一。</p><p>POP 允许电子邮件客户端下载服务器上的邮件，但是你在电子邮件客户端上的操作（如：移动邮件、标记已读等）不会反馈到服务器上的，比如：你通过电子邮件客户端收取了 QQ 邮箱中的 3 封邮件并移动到了其他文件夹，这些移动动作是不会反馈到服务器上的，也就是说，QQ 邮箱服务器上的这些邮件是没有同时被移动的。</p><p>需要特别注意的是，第三方客户端通过 POP 收取邮件时，也是有可能同步删除服务端邮件。在第三方客户端设置 POP 时，请留意是否有 <strong>保留邮件副本/备份</strong> 相关选项。<em>如有该选项，且要保留服务器上的邮件，请勾选该选项。</em></p><p>在 IMAP 协议上，电子邮件客户端的操作都会反馈到服务器上，你对邮件进行的操作（如：移动邮件、标记已读、删除邮件等）服务器上的邮件也会做相应的动作。也就是说，IMAP 是“双向”的。同时，IMAP 可以只下载邮件的主题，只有当你真正需要的时候，才会下载邮件的所有内容。<strong>在 POP3 和 IMAP 协议上，QQ邮箱推荐你使用IMAP协议来存取服务器上的邮件。</strong></p><h2 id="授权码"><a href="#授权码" class="headerlink" title="授权码"></a>授权码</h2><p>在我们开发之前，我们需要先准备好对应邮箱的<strong>授权码</strong>，这个授权码是邮箱用于登录第三方客户端/服务的专用密码，适用于登录以下服务：POP3/IMAP/SMTP/Exchange/CardDAV/CalDAV 服务。</p><p><strong>不同的邮箱会有不同的获取方式，但是一般获取方式都非常简单</strong>，可以自行通过搜索引擎检索一下即可。</p><p>比如：QQ 邮箱的授权码的获取方式是：</p><p>在邮箱**<a href="https://wx.mail.qq.com/account">帐号与安全</a>**点击&nbsp;<strong>设备管理 &gt; 授权码管理</strong>，对授权码进行管理，即可获得。</p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>今天我们就通过 Go 语言来演示一下如何解析邮件。</p><p>首先我们先下载第三方 imap 协议的插件包：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go get <span class="token parameter variable">-v</span> github.com/emersion/go-imap@v1.2.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来的就是示例代码，很多重要信息，在代码里都有注释信息，因此请多留意注释：</p><p>下面的代码逻辑大致是：读取指定邮箱中的收件箱邮件，每次读取 2 封邮件，并解析出邮件的主题、收件人、发件人、收件时间、邮件正文，读取完毕之后，给每封邮件标记已读。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> mail_parse<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"io"</span><span class="token string">"io/ioutil"</span><span class="token string">"log"</span><span class="token string">"strings"</span><span class="token string">"time"</span><span class="token string">"github.com/emersion/go-imap"</span><span class="token string">"github.com/emersion/go-imap/client"</span><span class="token string">"github.com/emersion/go-message/mail"</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">(</span>Addr          <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"imap.qq.com:993"</span>UserName      <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"123456789@qq.com"</span> <span class="token comment">// 邮箱地址</span>Password      <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">""</span>                 <span class="token comment">// 这里的密码是使用开启 imap 协议后对应的服务商给到的密码，不是邮箱账号密码</span>Folder        <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"INBOX"</span>            <span class="token comment">// 邮箱文件夹，比如： INBOX 收件箱、Sent Messages 发件箱、Drafts 草稿箱、Trash、Junk 垃圾箱</span>ReadBatchSize <span class="token builtin">int</span>    <span class="token operator">=</span> <span class="token number">2</span>                  <span class="token comment">// 每次读取的邮件数量</span><span class="token punctuation">)</span><span class="token comment">// IMAP（Internet Message Access Protocol）是一种用于在互联网上访问电子邮件的协议。</span><span class="token comment">// 它允许用户通过 Internet 访问他们在邮件服务器上存储的电子邮件。</span><span class="token comment">// Go 语言的 go-imap 库是一个用于从 IMAP 服务器获取电子邮件的库，它可以帮助你在 Go 代码中访问 IMAP 协议</span><span class="token keyword">func</span> <span class="token function">ReadEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"开始连接服务器"</span><span class="token punctuation">)</span><span class="token comment">// 建立与 IMAP 服务器的连接</span>c<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">DialTLS</span><span class="token punctuation">(</span>Addr<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"连接 IMAP 服务器失败: %+v \n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"连接成功！"</span><span class="token punctuation">)</span><span class="token comment">// 最后一定不要忘记退出登录</span><span class="token keyword">defer</span> c<span class="token punctuation">.</span><span class="token function">Logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 登录</span><span class="token keyword">if</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Login</span><span class="token punctuation">(</span>UserName<span class="token punctuation">,</span> Password<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"邮箱[%s] 登录失败: %v \n"</span><span class="token punctuation">,</span> Addr<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span>log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"邮箱[%s] 登录成功！\n"</span><span class="token punctuation">,</span> UserName<span class="token punctuation">)</span><span class="token comment">// 列出当前邮箱中的文件夹</span>mailboxes <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token operator">*</span>imap<span class="token punctuation">.</span>MailboxInfo<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>done <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">error</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 记录错误的 chan</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>done <span class="token operator">&lt;-</span> c<span class="token punctuation">.</span><span class="token function">List</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">,</span> mailboxes<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"--&gt;当前邮箱的文件夹 Mailboxes:"</span><span class="token punctuation">)</span><span class="token keyword">var</span> folderExists <span class="token builtin">bool</span><span class="token keyword">for</span> m <span class="token operator">:=</span> <span class="token keyword">range</span> mailboxes <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"* "</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token keyword">if</span> m<span class="token punctuation">.</span>Name <span class="token operator">==</span> Folder <span class="token punctuation">{</span>folderExists <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token operator">&lt;-</span>done<span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"列出邮箱列表时，出现错误：%v \n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"--&gt;列出邮箱列表完毕！"</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token operator">!</span>folderExists <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"文件夹[%s] 不存在 \n"</span><span class="token punctuation">,</span> Folder<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 选择指定的文件夹</span>mbox<span class="token punctuation">,</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>Folder<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"选择邮件箱失败: %v \n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span>log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"mbox %+v \n"</span><span class="token punctuation">,</span> mbox<span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"当前文件夹[%s]中，总共有 %d 封邮件 \n"</span><span class="token punctuation">,</span> Folder<span class="token punctuation">,</span> mbox<span class="token punctuation">.</span>Messages<span class="token punctuation">)</span><span class="token keyword">if</span> mbox<span class="token punctuation">.</span>Messages <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"当前文件夹[%s]中没有邮件"</span><span class="token punctuation">,</span> Folder<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 创建一个序列集，用于批量读取邮件</span>seqset <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>imap<span class="token punctuation">.</span>SeqSet<span class="token punctuation">)</span><span class="token comment">// 假设需要获取最后4封邮件时</span><span class="token comment">// from := uint32(1)</span><span class="token comment">// to := mbox.Messages // 此文件下的邮件总数</span><span class="token comment">// if mbox.Messages &gt; 3 {</span><span class="token comment">// from = mbox.Messages - 3</span><span class="token comment">// }</span><span class="token comment">// seqset.AddRange(from, to) // 添加指定范围内的邮件编号</span><span class="token comment">// 搜索指定状态的邮件</span>criteria <span class="token operator">:=</span> imap<span class="token punctuation">.</span><span class="token function">NewSearchCriteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span>criteria<span class="token punctuation">.</span>WithoutFlags <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>imap<span class="token punctuation">.</span>SeenFlag<span class="token punctuation">}</span> <span class="token comment">// 未读邮件标记</span><span class="token comment">// criteria.WithFlags = []string{imap.SeenFlag} // 已读邮件标记</span>uids<span class="token punctuation">,</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Search</span><span class="token punctuation">(</span>criteria<span class="token punctuation">)</span><span class="token comment">// 在这里也可以使用 UidSearch 方法，但是用了 UidSearch 方法后，下面的很多方法都需要使用 Uid 开头的方法</span><span class="token comment">// 也就是说 Fetch -&gt; UidFetch，Store -&gt; UidStore，Copy -&gt; UidCopy，Move -&gt; UidMove，Search -&gt; UidSearch</span><span class="token comment">// uids, err := c.UidSearch(criteria)</span><span class="token comment">// 关于 Store 方法和 UidStore 方法</span><span class="token comment">// Store 和 UidStore 方法都是用于在 IMAP 中更新邮件标志的，但它们有一些区别：</span><span class="token comment">//</span><span class="token comment">// Store：使用的是消息序列号（message sequence number）来标识邮件。序列号是动态的，每次邮件删除或添加时，序列号可能会改变。序列号从1开始，按邮件在邮箱中的位置进行排序。</span><span class="token comment">// UidStore：使用的是消息的唯一标识符（UID）来标识邮件。UID 是固定的，不会因为邮件的添加或删除而改变，适合于需要确保唯一标识邮件的操作。</span><span class="token comment">// 在标记为已读时，使用 UidStore 方法更为安全和可靠，因为它使用邮件的唯一标识符，可以避免由于序列号变化导致的潜在问题。</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"搜索邮件时出现错误：%v \n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span>log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"搜索到的邮件 uids: %+v \n"</span><span class="token punctuation">,</span> uids<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>uids<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"没有搜索到邮件"</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"搜索到的邮件总共有 %v 封 %+v \n"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>uids<span class="token punctuation">)</span><span class="token punctuation">,</span> uids<span class="token punctuation">)</span><span class="token comment">// 获取整个消息正文</span><span class="token comment">// imap.FetchEnvelope：请求获取邮件的信封数据（例如发件人、收件人、主题等元数据）。</span><span class="token comment">// imap.FetchRFC822：请求获取完整的邮件内容，包括所有头部和正文。</span>items <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>imap<span class="token punctuation">.</span>FetchItem<span class="token punctuation">{</span>imap<span class="token punctuation">.</span>FetchFlags<span class="token punctuation">,</span> imap<span class="token punctuation">.</span>FetchEnvelope<span class="token punctuation">,</span> imap<span class="token punctuation">.</span>FetchRFC822<span class="token punctuation">}</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> uidsCount <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>uids<span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> uidsCount<span class="token punctuation">;</span> i <span class="token operator">+=</span> ReadBatchSize <span class="token punctuation">{</span><span class="token comment">// 清空序列集中的所有邮件编号，以便添加新的邮件编号。每次循环开始时调用此方法，确保序列集中只有当前批次的邮件编号</span>seqset<span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 添加一批邮件到序列集中</span><span class="token keyword">if</span> i<span class="token operator">+</span>ReadBatchSize <span class="token operator">&lt;</span> uidsCount <span class="token punctuation">{</span>seqset<span class="token punctuation">.</span><span class="token function">AddNum</span><span class="token punctuation">(</span>uids<span class="token punctuation">[</span>i <span class="token punctuation">:</span> i<span class="token operator">+</span>ReadBatchSize<span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token comment">// 添加指定范围内的邮件编号</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>seqset<span class="token punctuation">.</span><span class="token function">AddNum</span><span class="token punctuation">(</span>uids<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token comment">// 添加剩余的邮件编号</span><span class="token punctuation">}</span><span class="token comment">// 获取邮件内容 Start</span>messages <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token operator">*</span>imap<span class="token punctuation">.</span>Message<span class="token punctuation">,</span> ReadBatchSize<span class="token punctuation">)</span> <span class="token comment">// 创建一个通道，用于接收邮件消息</span>fetchDone <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">error</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>                    <span class="token comment">// 创建一个通道，用于接收错误消息</span><span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// Fetch方法用于从服务器获取邮件数据，这里请求了邮件的信封和完整内容</span>fetchDone <span class="token operator">&lt;-</span> c<span class="token punctuation">.</span><span class="token function">Fetch</span><span class="token punctuation">(</span>seqset<span class="token punctuation">,</span> items<span class="token punctuation">,</span> messages<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"开始读取邮件内容"</span><span class="token punctuation">)</span><span class="token keyword">for</span> msg <span class="token operator">:=</span> <span class="token keyword">range</span> messages <span class="token punctuation">{</span><span class="token function">readEveryMsg</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token operator">&lt;-</span>fetchDone<span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"获取邮件信息出现错误：%v \n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 获取邮件内容 End</span><span class="token comment">// 给邮件打标记 Start</span>item <span class="token operator">:=</span> imap<span class="token punctuation">.</span><span class="token function">FormatFlagsOp</span><span class="token punctuation">(</span>imap<span class="token punctuation">.</span>AddFlags<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// 标记为已读</span><span class="token comment">// item := imap.FormatFlagsOp(imap.RemoveFlags, true) // 标记为未读</span>flags <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>imap<span class="token punctuation">.</span>SeenFlag<span class="token punctuation">}</span>log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"即将给这些邮件 [%s] 打标记 \n"</span><span class="token punctuation">,</span> seqset<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span>seqset<span class="token punctuation">,</span> item<span class="token punctuation">,</span> flags<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"给邮件打标记失败：%v \n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 给邮件打标记 End</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">// 休眠10秒</span><span class="token punctuation">}</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"读取了所有邮件，完毕！"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// document link: https://github.com/emersion/go-imap/wiki/Fetching-messages</span><span class="token keyword">func</span> <span class="token function">readEveryMsg</span><span class="token punctuation">(</span>msg <span class="token operator">*</span>imap<span class="token punctuation">.</span>Message<span class="token punctuation">)</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"每一封邮件的消息序列号 %+v \n"</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span>SeqNum<span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"-------------------------"</span><span class="token punctuation">)</span><span class="token comment">// 获取邮件正文</span>r <span class="token operator">:=</span> msg<span class="token punctuation">.</span><span class="token function">GetBody</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>imap<span class="token punctuation">.</span>BodySectionName<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">if</span> r <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span><span class="token string">"服务器没有返回消息内容"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>mr<span class="token punctuation">,</span> err <span class="token operator">:=</span> mail<span class="token punctuation">.</span><span class="token function">CreateReader</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"邮件读取时出现错误： %v \n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> date<span class="token punctuation">,</span> err <span class="token operator">:=</span> mr<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"收件时间 Date:"</span><span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> from<span class="token punctuation">,</span> err <span class="token operator">:=</span> mr<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">AddressList</span><span class="token punctuation">(</span><span class="token string">"From"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"发件人 From:"</span><span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> to<span class="token punctuation">,</span> err <span class="token operator">:=</span> mr<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">AddressList</span><span class="token punctuation">(</span><span class="token string">"To"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"收件人 To:"</span><span class="token punctuation">,</span> to<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> subject<span class="token punctuation">,</span> err <span class="token operator">:=</span> mr<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Subject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"邮件主题 Subject:"</span><span class="token punctuation">,</span> subject<span class="token punctuation">)</span><span class="token punctuation">}</span>log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"抄送 Cc: %+v \n"</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span>Envelope<span class="token punctuation">.</span>Cc<span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">{</span>p<span class="token punctuation">,</span> err <span class="token operator">:=</span> mr<span class="token punctuation">.</span><span class="token function">NextPart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">==</span> io<span class="token punctuation">.</span>EOF <span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"读取邮件内容时出现错误：%v \n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">switch</span> h <span class="token operator">:=</span> p<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token operator">*</span>mail<span class="token punctuation">.</span>InlineHeader<span class="token punctuation">:</span><span class="token comment">// 这是消息的文本（可以是纯文本或 HTML）</span>contentType <span class="token operator">:=</span> h<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">)</span>b<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token keyword">if</span> strings<span class="token punctuation">.</span><span class="token function">HasPrefix</span><span class="token punctuation">(</span>contentType<span class="token punctuation">,</span> <span class="token string">"text/plain"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"得到正文 -&gt; TEXT: %v \n"</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> strings<span class="token punctuation">.</span><span class="token function">HasPrefix</span><span class="token punctuation">(</span>contentType<span class="token punctuation">,</span> <span class="token string">"text/html"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"得到正文 -&gt; HTML: %v \n"</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">break</span><span class="token keyword">case</span> <span class="token operator">*</span>mail<span class="token punctuation">.</span>AttachmentHeader<span class="token punctuation">:</span><span class="token comment">// 这是一个附件</span>filename<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> h<span class="token punctuation">.</span><span class="token function">Filename</span><span class="token punctuation">(</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"得到附件: %v \n"</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">}</span><span class="token punctuation">}</span>log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"一封邮件读取完毕"</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"------------------------- \n\n"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="值得一提"><a href="#值得一提" class="headerlink" title="值得一提"></a>值得一提</h2><p>需要说明一下的是，上面代码中，我们给邮件标记已读时，采用的是 <code>Store</code> 方法，其实也可以使用 <code>UidStore</code> 方法，那么这两个方法有什么区别呢？</p><h3 id="关于-Store-方法和-UidStore-方法"><a href="#关于-Store-方法和-UidStore-方法" class="headerlink" title="关于 Store 方法和 UidStore 方法"></a>关于 Store 方法和 UidStore 方法</h3><p><code>Store</code> 和 <code>UidStore</code> 方法都是用于在 IMAP 中更新邮件标志的，但它们有一些区别：</p><p><strong>Store</strong>：使用的是消息序列号（message sequence number）来标识邮件。序列号是动态的，每次邮件删除或添加时，序列号可能会改变。序列号从1开始，按邮件在邮箱中的位置进行排序。</p><p><strong>UidStore</strong>：使用的是消息的唯一标识符（UID）来标识邮件。UID 是固定的，不会因为邮件的添加或删除而改变，适合于需要确保唯一标识邮件的操作。</p><p>在标记为已读时，使用 <code>UidStore</code> 方法更为安全和可靠，因为它使用邮件的唯一标识符，可以避免由于序列号变化导致的潜在问题。但是经过我的测试，发现使用 <code>Store</code> 方法也没啥太大的问题，但是<strong>使用的时候一定要配套使用</strong>，也就是说，<strong>要是你使用了 <code>Uid</code> 开头的方法时，很多方法你都需要改成 <code>Uid</code> 开头的方法才能有效使用</strong>，比如： Fetch -&gt; UidFetch，Store -&gt; UidStore，Copy -&gt; UidCopy，Move -&gt; UidMove，Search -&gt; UidSearch。否则，可能会有一些意料之外的事情发生。这是我看文档以及自己摸索得出来的结论，如果你觉得我理解的不对，也可以予以纠正。</p><p>好了，聊到这里基本上就结束了。本文主要还是以代码为主，毕竟没有什么比几行代码来得干脆了。不过，可不要将上面的代码直接放到项目中跑呀，放到自己的项目中还是需要稍作调整的，上面代码只是为了方便我在本地调试，因此才有大批量的 log 输出。</p><p>如果刚好你也有类似的需求，希望这篇文章可以帮得到你。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Golang </tag>
            
            <tag> IMAP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何借助Redis巧妙的管理用户签到？——Bitmap篇</title>
      <link href="posts/fe86d4b2.html"/>
      <url>posts/fe86d4b2.html</url>
      
        <content type="html"><![CDATA[<p>数据管理和分析是任何大小项目的重要组成部分。在管理如用户签到数据这类信息时，我们通常追求的是高效性和存储节省。</p><p>今天，让我们一起探索一种既节省空间又高效的数据管理方法——Redis 的位操作（Bit operations）。</p><h2 id="Redis-位操作简介"><a href="#Redis-位操作简介" class="headerlink" title="Redis 位操作简介"></a>Redis 位操作简介</h2><p>Redis，作为一种高性能的键值对存储系统，提供了丰富的数据操作指令，其中位操作指令（Bit operations）允许我们直接在字符串类型的值上执行位级操作，这种方式非常适合处理如用户签到等场景，它可以以极小的存储空间来表示大量的用户签到信息。</p><h3 id="理解位操作"><a href="#理解位操作" class="headerlink" title="理解位操作"></a>理解位操作</h3><p>位（Bit）是计算机存储的最小单位，每个位要么是 0，要么是 1。当我们将用户的签到信息以位形式存储时，可以用一个比特位来表示用户某一天是否签到，其中 1 表示签到，0 表示未签到。</p><h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><h4 id="记录用户签到"><a href="#记录用户签到" class="headerlink" title="记录用户签到"></a>记录用户签到</h4><p>假设我们需要记录用户 8 在某月的签到情况，具体命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> setbit user:8:sign <span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这表示我们将用户 8 在这个月的第一天标记为签到。在 Redis 中，<code>setbit</code> 命令是用来在指定的位上设置值的，其中第一个参数是键名，第二个参数是位的偏移量（表示第几天），第三个参数是要设置的值（1或0）。</p><p>我们也可以再写入一些测试数据，方便后面我们查询：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> setbit user:8:sign <span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> setbit user:8:sign <span class="token number">2</span> <span class="token number">0</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> setbit user:8:sign <span class="token number">3</span> <span class="token number">1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> setbit user:8:sign <span class="token number">3</span> <span class="token number">1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> setbit user:8:sign <span class="token number">4</span> <span class="token number">1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> setbit user:8:sign <span class="token number">5</span> <span class="token number">1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> setbit user:8:sign <span class="token number">6</span> <span class="token number">1</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> setbit user:8:sign <span class="token number">7</span> <span class="token number">0</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> setbit user:8:sign <span class="token number">8</span> <span class="token number">0</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> setbit user:9:sign <span class="token number">1</span> <span class="token number">0</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查询用户签到情况"><a href="#查询用户签到情况" class="headerlink" title="查询用户签到情况"></a>查询用户签到情况</h4><p>如果我们想查询用户 8 在这个月的第 4 天是否签到，我们可以使用 <code>getbit</code> 命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> getbit user:8:sign <span class="token number">4</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>返回值 <code>1</code> 表明用户在这一天签到了。</p><h4 id="统计签到天数"><a href="#统计签到天数" class="headerlink" title="统计签到天数"></a>统计签到天数</h4><p>要统计某用户在这个月签到了几天，我们可以使用 <code>bitcount</code> 命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> bitcount user:8:sign<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里返回的 <code>5</code> 表示用户 8 在这个月已经签到了 5 天。</p><h2 id="一些注意事项"><a href="#一些注意事项" class="headerlink" title="一些注意事项"></a>一些注意事项</h2><ul><li><strong>存储效率</strong>：使用位操作存储这类信息非常节省空间，每个月的签到数据只需要几十个字节的存储空间。</li><li><strong>操作性能</strong>：位操作命令执行速度极快，适合高频次的数据更新和查询操作。</li><li><strong>灵活性</strong>：除了 <code>setbit</code> 和 <code>getbit</code>，Redis 还提供了如 <code>bitop</code> 这样的命令，用于对多个键的位进行逻辑操作，非常灵活。</li></ul><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>除了用户签到外，Redis 的位操作还可以用于：</p><ul><li>用户特征标记，如记录用户的喜好、行为特性等。</li><li>系统功能的开关状态，如功能是否启用、是否具有某种权限等。</li><li>在线状态追踪，如标记用户的在线或离线状态。</li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>Redis 的位操作是处理大规模数据集中的二进制数据时的一种高效手段。它不仅节省存储空间，而且提供了极高的数据操作性能。对于需要大量位级数据管理的应用场景，如用户签到、在线状态追踪等，Redis 的位操作无疑是一个优秀的选择。</p><p>希望通过这篇文章，你能对 Redis 的位操作有一个初步的了解，并能在自己的项目中加以应用。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Cache </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何借助Redis更高效统计UV？——Hyperloglog篇</title>
      <link href="posts/ceb09f0b.html"/>
      <url>posts/ceb09f0b.html</url>
      
        <content type="html"><![CDATA[<p>在今天的互联网时代，数据如潮水般汹涌而来。从用户行为数据、系统日志到实时交互数据，如何高效、准确地统计这海量数据中的唯一元素数量，成为了一个不小的挑战。</p><p>今天，我们要一起探索的是 Redis 中一个非常强大但可能被忽视的数据类型——HyperLogLog，它如何在牺牲极少的准确度前提下，实现对大规模数据集的快速去重计数。</p><h2 id="什么是-HyperLogLog？"><a href="#什么是-HyperLogLog？" class="headerlink" title="什么是 HyperLogLog？"></a>什么是 HyperLogLog？</h2><p>HyperLogLog 是一种用于基数统计的算法，基数指的是<strong>一个集合中不重复元素的数量</strong>。</p><p>想象一下，当我们面对数亿级别的数据时，传统的去重统计方法不仅计算量大，而且消耗大量的存储空间。HyperLogLog 则以一种非常节省空间的方式，解决了这个问题，虽然它的计算结果是一个估计值，但是准确率非常高，通常**误差率仅为 0.81%**。</p><h2 id="使用-Redis-的-HyperLogLog-实现去重计数"><a href="#使用-Redis-的-HyperLogLog-实现去重计数" class="headerlink" title="使用 Redis 的 HyperLogLog 实现去重计数"></a>使用 Redis 的 HyperLogLog 实现去重计数</h2><h3 id="添加元素：pfadd"><a href="#添加元素：pfadd" class="headerlink" title="添加元素：pfadd"></a>添加元素：pfadd</h3><p>首先，我们看一下如何向 HyperLogLog 中添加元素。Redis 提供了 <code>pfadd</code> 命令用于添加元素到 HyperLogLog 中。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> pfadd p1 a b c d e f g<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里，我们添加了七个元素（a, b, c, d, e, f, g）到 HyperLogLog p1 中。返回值 <code>(integer) 1</code> 表示操作成功。</p><h3 id="统计元素数量：pfcount"><a href="#统计元素数量：pfcount" class="headerlink" title="统计元素数量：pfcount"></a>统计元素数量：pfcount</h3><p>接下来，我们利用 <code>pfcount</code> 命令来获取 HyperLogLog 中的元素个数。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> pfcount p1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过 <code>pfcount p1</code>，我们得知 HyperLogLog p1 中有七个唯一元素，和我们之前添加的元素数量一致。</p><h3 id="合并-HyperLogLog：pfmerge"><a href="#合并-HyperLogLog：pfmerge" class="headerlink" title="合并 HyperLogLog：pfmerge"></a>合并 HyperLogLog：pfmerge</h3><p>如果我们有多个 HyperLogLog，想要合并它们的统计结果，该怎么做呢？Redis 的 <code>pfmerge</code> 命令能够帮助我们实现这一点。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> pfadd p2 d e f g h i j k<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> pfcount p2<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">8</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> pfmerge p3 p1 p2OK<span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> pfcount p3<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">11</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从以上例子中，我们可以看到 <code>pfadd</code> 命令分别向 p1 和 p2 中添加了不同的元素。通过 <code>pfmerge p3 p1 p2</code>，我们将 p1 和 p2 合并到了 p3 中，并用 <code>pfcount p3</code> 确认了合并后 HyperLogLog p3 中共有 11 个唯一元素。</p><h3 id="添加相同元素时"><a href="#添加相同元素时" class="headerlink" title="添加相同元素时"></a>添加相同元素时</h3><p>值得一提的是，如果我们尝试再次添加相同的元素到 HyperLogLog，它将不会增加计数，因为 HyperLogLog 本质上是一种去重计数工具。</p><p>刚刚我们往 <code>p1</code> 中添加了 (a, b, c, d, e, f, g) 七个元素，那么如果此时我们添加几个相同的元素以及少量的不同元素，会怎样呢？</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> pfadd p1 a a b c h<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> pfcount p1<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">8</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们可以看到，<code>p1</code> 只会统计不同的元素的个数，会自动过滤掉相同的元素。依据这个特性，是不是在脑海中就里面想到了一个常见的应用场景了？是的，依据这个去重特性，我们可以非常方便的做 UV 统计。</p><blockquote><p>UV（Unique visitor）：是指通过互联网访问、浏览这个网页的自然人。访问的一个电脑客户端为一个访客，一天内同一个访客仅被计算一次。</p></blockquote><p>传统的做法是使用 set 保存用户的 ID，然后统计 set 中元素的数量作为判断标准。但是这种方式保存了大量的用户 ID，用户 ID 一般比较长，这就占用空间，还很麻烦。我们的目的是计数，不是保存数据，所以这样做有弊端。但是如果使用 hyperloglog 就比较合适了。</p><p>hyperloglog 的优点是<strong>占用内存小</strong>，并且是<strong>固定的</strong>。存储 2^64 个不同元素的基数，只需要 12 KB 的空间。</p><h3 id="数据类型：type"><a href="#数据类型：type" class="headerlink" title="数据类型：type"></a>数据类型：type</h3><p>最后，我们来确认一下 HyperLogLog 的数据类型。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">type</span> p1string<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>虽然 <code>type p1</code> 返回的是 <code>string</code>，但在 Redis 中，HyperLogLog 是作为一种概率型数据结构实现的，它通过一种特殊的字符串格式来存储数据。因此，虽然它在 Redis 中表现为字符串类型，但它用于实现基数统计的功能。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>HyperLogLog 提供了一种非常高效的方式来对大规模数据集进行去重计数。虽然其结果是估计值，但其高效性和准确度使其在处理大数据统计时表现出色。</p><p>通过上述的简单示例，相信你已经对 Redis 的 HyperLogLog 有了基本的了解。无论是实时数据分析、日志统计还是用户行为分析，HyperLogLog 都是一个值得尝试的利器。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Cache </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在Redis中快速推算两地之间的距离？——Geo篇</title>
      <link href="posts/9c96a9d2.html"/>
      <url>posts/9c96a9d2.html</url>
      
        <content type="html"><![CDATA[<p>处理地理位置数据已成为许多应用程序的核心需求。无论是推送附近的餐馆还是对全国范围内的服务点进行分析，快速而准确地处理和检索地理位置信息都至关重要。Redis，作为一种高性能的内存数据库，为我们提供了这样的解决方案。</p><blockquote><p>Redis 在 3.2 推出 Geo 类型，该功能可以推算出地理位置信息，两地之间的距离。有效的经度从 -180 度到 180 度。有效的纬度从 -85.05112878 度到 85.05112878 度，如果超过此范围，redis 会直接报错。</p></blockquote><p>通过本文，我们将一步步探索 Redis 如何帮助我们处理地理位置数据，不仅适合初学者，也能让有经验的开发者有所收获。</p><h2 id="添加地理位置数据"><a href="#添加地理位置数据" class="headerlink" title="添加地理位置数据"></a>添加地理位置数据</h2><p>首先，我们需要向 Redis 中添加一些中国城市的地理位置数据：</p><blockquote><p>你可以通过这个网站 <code>http://www.jsons.cn/lngcode/</code> 来查询一下一些城市的经纬度。</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> geoadd china:city <span class="token number">116.40</span> <span class="token number">39.90</span> beijing<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> geoadd china:city <span class="token number">121.47</span> <span class="token number">31.23</span> shanghai<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> geoadd china:city <span class="token number">106.50</span> <span class="token number">29.53</span> chongqing <span class="token number">114.05</span> <span class="token number">22.52</span> shengzhen<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> geoadd china:city <span class="token number">120.16</span> <span class="token number">30.24</span> hangzhou <span class="token number">108.96</span> <span class="token number">34.26</span> xian<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里，<code>geoadd</code> 命令用于向指定的 key（这里是 china:city）中添加地理空间位置信息。每条记录包括经度、纬度以及位置的名称。</p><p>你是否会好奇 geo 是通过什么类型在 Redis 中存储的？那我们不妨可以使用 type 命令来进行查看一下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">type</span> china:cityzset<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们可以看到，其实 **geo 底层实现原理就是 zset ** ，这表明 Redis 内部使用了有序集合存储地理空间信息，每个地点的名称是有序集合的成员，而其经纬度则用于计算分数，以确保成员的有序性。</p><h2 id="查询地理空间信息"><a href="#查询地理空间信息" class="headerlink" title="查询地理空间信息"></a>查询地理空间信息</h2><p>当信息存入数据库后，我们可以执行各种查询：</p><h3 id="查询单个城市位置"><a href="#查询单个城市位置" class="headerlink" title="查询单个城市位置"></a>查询单个城市位置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> geopos china:city shanghai<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"121.47000163793563843"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"31.22999903975783553"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>geopos 命令用于获取一个或多个成员的地理位置信息（经度和纬度），这个命令返回上海的经纬度。</p><h3 id="计算两城市间距离"><a href="#计算两城市间距离" class="headerlink" title="计算两城市间距离"></a>计算两城市间距离</h3><p>单位：</p><ul><li><code>m</code> 表示单位为米，也是默认单位。</li><li><code>km</code> 表示单位为千米。</li><li><code>mi</code> 表示单位为英里。</li><li><code>ft</code> 表示单位为英尺。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> geodist china:city shanghai chongqing<span class="token string">"1447673.6920"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>geodist 命令用于计算两个位置之间的距离，默认单位是米。上面返回的是上海到重庆的距离。</p><h3 id="查询指定范围内的城市"><a href="#查询指定范围内的城市" class="headerlink" title="查询指定范围内的城市"></a>查询指定范围内的城市</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> georadius china:city <span class="token number">100</span> <span class="token number">20</span> <span class="token number">1000</span> km<span class="token punctuation">(</span>empty array<span class="token punctuation">)</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> georadius china:city <span class="token number">110</span> <span class="token number">30</span> <span class="token number">1000</span> km<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"chongqing"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"xian"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"shengzhen"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"hangzhou"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看以（110,30）为中心，半径 1000 公里的范围内，有哪些城市。</p><h2 id="带有选项的地理位置查询"><a href="#带有选项的地理位置查询" class="headerlink" title="带有选项的地理位置查询"></a>带有选项的地理位置查询</h2><p>Redis 地理空间查询还支持多种选项，例如，返回搜索结果的坐标和距离，或者限制返回结果的数量：</p><h3 id="查询并返回坐标"><a href="#查询并返回坐标" class="headerlink" title="查询并返回坐标"></a>查询并返回坐标</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> georadius china:city <span class="token number">110</span> <span class="token number">30</span> <span class="token number">1000</span> km withcoord<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"chongqing"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"106.49999767541885376"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"29.52999957900659211"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>通过添加 withcoord 选项，georadius 命令可以返回位置元素的名称和它们的地理位置信息。</p><h3 id="查询并返回距离"><a href="#查询并返回距离" class="headerlink" title="查询并返回距离"></a>查询并返回距离</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> georadius china:city <span class="token number">110</span> <span class="token number">30</span> <span class="token number">1000</span> km withdist<span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"chongqing"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"341.9374"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xian"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"483.8340"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"shengzhen"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"924.6408"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"hangzhou"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"977.5143"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>返回每个城市到查询中心的距离。</p><h3 id="查询并限制结果数量"><a href="#查询并限制结果数量" class="headerlink" title="查询并限制结果数量"></a>查询并限制结果数量</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> georadius china:city <span class="token number">110</span> <span class="token number">30</span> <span class="token number">1000</span> km withdist withcoord count <span class="token number">2</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"chongqing"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"341.9374"</span>   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"106.49999767541885376"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"29.52999957900659211"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"xian"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"483.8340"</span>   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"108.96000176668167114"</span>      <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"34.25999964418929977"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>仅返回两个最近的城市及其坐标和距离。</p><h2 id="查询某个距离范围内的元素"><a href="#查询某个距离范围内的元素" class="headerlink" title="查询某个距离范围内的元素"></a>查询某个距离范围内的元素</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> georadiusbymember china:city chongqing <span class="token number">1000000</span> m<span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"chongqing"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"xian"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>georadiusbymember 命令根据指定成员的位置和给定的距离，返回范围内的位置元素。</p><p>上文中，我们已经知道 geo 的底层是通过 zset 来实现的，那么也就意味着我们也可以通过 zset 命令来操作 geo。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> zrange china:city <span class="token number">0</span> <span class="token parameter variable">-1</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"chongqing"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"xian"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"shengzhen"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"hangzhou"</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"shanghai"</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">"beijing"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> zrem china:city xian<span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> zrange china:city <span class="token number">0</span> <span class="token parameter variable">-1</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"chongqing"</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"shengzhen"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"hangzhou"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"shanghai"</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"beijing"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实践意义"><a href="#实践意义" class="headerlink" title="实践意义"></a>实践意义</h2><p>在实际开发中，你可以使用 Redis 的地理空间功能来实现各种基于位置的服务，如商家定位、配送范围估算、最近服务点查询等。通过上述例子，我们可以看到，Redis 提供的地理空间功能既强大又易于使用，能够帮助开发者在构建地理空间数据相关应用时，提高开发效率和应用性能。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>Redis 的地理空间数据处理模块为处理和查询地理信息提供了强大而高效的方法。无论你是在处理简单的位置数据查询还是构建复杂的地理信息系统（GIS），Redis 都能为你提供必要的支持。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Cache </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言中的map为什么默认不是并发安全的？</title>
      <link href="posts/3761f660.html"/>
      <url>posts/3761f660.html</url>
      
        <content type="html"><![CDATA[<p>今天我们聊一个 Go 语言中的 “热门” 话题——为什么 <strong>Go 语言中的 map 默认不是并发安全</strong>的呢？</p><p>对于广大 Go 程序员来说，尤其是那些刚跨入 Go 世界的新朋友们，这个问题或许让你们摸不着头脑。别急，让我们一起慢慢揭开这层神秘的面纱。</p><h2 id="Go-语言中-map-的基本使用"><a href="#Go-语言中-map-的基本使用" class="headerlink" title="Go 语言中 map 的基本使用"></a>Go 语言中 map 的基本使用</h2><p>首先，我们得知道 map 是什么。在 Go 中，map 是一种内置的数据结构，它提供了 “键值对”（Key-Value）的存储机制。使用 map，你可以通过 Key 快速找到对应的 Value，这让我们在处理一些需要快速查询的场景时如虎添翼。</p><p>一个简单的 map 示例：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 创建一个map</span>    myMap <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>    <span class="token comment">// 向map中添加键值对</span>    myMap<span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    myMap<span class="token punctuation">[</span><span class="token string">"banana"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>    <span class="token comment">// 从map中获取值</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>myMap<span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 输出: 1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="那为什么-map-默认不是并发安全的呢？"><a href="#那为什么-map-默认不是并发安全的呢？" class="headerlink" title="那为什么 map 默认不是并发安全的呢？"></a>那为什么 map 默认不是并发安全的呢？</h2><p>难不成 Go 官方觉得太复杂了？性能太差了？还是为了什么？</p><h3 id="典型使用场景"><a href="#典型使用场景" class="headerlink" title="典型使用场景"></a>典型使用场景</h3><p>Go 官方认为，map 的典型使用场景并不需要从多个 goroutine 中安全地访问。因此，在设计时，优先考虑了性能和简单性，而没有将并发安全作为默认特性。这是一种基于使用案例进行权衡的结果。</p><h3 id="性能考量"><a href="#性能考量" class="headerlink" title="性能考量"></a>性能考量</h3><p>引入并发安全意味着每次操作 map 时都需要进行加锁和解锁，这无疑会增加额外的性能开销。为了大多数程序的性能考虑，Go 没有将 map 设计为并发安全的，因为这会导致即使在不需要并发访问的场景下，也要付出不必要的性能代价。</p><h3 id="官方方案"><a href="#官方方案" class="headerlink" title="官方方案"></a>官方方案</h3><p>从 <code>Go 1.6</code> 开始，引入了并发访问 map 的检测机制，如果检测到并发读写，程序会直接崩溃，而不是隐瞒问题。Go 官方倾向于让问题显露出来（”let it crash”），这样可以迫使开发者正视并发问题，采取正确的方法来解决。</p><h2 id="如何安全地在多个-goroutine-中操作-map？"><a href="#如何安全地在多个-goroutine-中操作-map？" class="headerlink" title="如何安全地在多个 goroutine 中操作 map？"></a>如何安全地在多个 goroutine 中操作 map？</h2><p>虽然原生的 map 不是并发安全的，但 Go 提供了其他机制来解决并发访问的问题。最直接的方法是使用互斥锁 <code>sync.Mutex</code>，来确保同一时间只有一个 goroutine 能访问 map。</p><blockquote><p>当然现在不止这一个方法保证 map 并发安全，由于篇幅有限，这里仅以此为例。</p></blockquote><p>例子如下：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"sync"</span><span class="token punctuation">)</span><span class="token keyword">var</span> <span class="token punctuation">(</span>    myMap <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>    lock  sync<span class="token punctuation">.</span>Mutex<span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 启动一个 goroutine 写入数据</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            myMap<span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>            lock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">// 在主 goroutine 中读取数据</span>    <span class="token keyword">for</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>myMap<span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        lock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>通过以上的探讨，我们了解了为什么 Go 语言中的 map 默认不是并发安全的，其实就是一句话概括：<strong>Go 官方觉得大部分场景都不需要支持并发，从性能上做的考虑</strong>。</p><p>Go 语言的设计哲学之一就是简单而有效，通过让开发者显式地处理并发问题，既保证了性能，也让代码的行为更加透明。</p><p>也有网友讨论说，可以像 Java 那样提供两个 map，一个支持并发，性能差些，一个不支持并发，性能好。但是 Go 官方为什么不提供两个，那就不得而知了，可能是为了符合 Go 语言“少就是多”的理念？</p><p>你有什么看法呢？一起聊聊……</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言map并发安全，互斥锁和读写锁谁更优？</title>
      <link href="posts/35885ddd.html"/>
      <url>posts/35885ddd.html</url>
      
        <content type="html"><![CDATA[<p>并发编程是 Go 语言的一大特色，合理地使用锁对于保证数据一致性和提高程序性能至关重要。</p><p>在处理并发控制时，<code>sync.Mutex</code>（互斥锁）和 <code>sync.RWMutex</code>（读写锁）是两个常用的工具。理解它们各自的优劣及擅长的场景，能帮助我们更好地设计高效且稳定的并发程序。</p><h2 id="互斥锁（Mutex）"><a href="#互斥锁（Mutex）" class="headerlink" title="互斥锁（Mutex）"></a>互斥锁（Mutex）</h2><p>互斥锁是最基本、最直接的并发原语之一，它保证了在任何时刻只有一个 goroutine 能对数据进行操作，从而保证了并发安全。</p><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p><code>sync.Mutex</code> 通过内部计数器（只有两个值，锁定和未锁定）和等待队列（等待获取锁的 goroutines 列表）来实现锁的机制。当一个 goroutine 请求锁时，如果锁已被占用，则该 goroutine 会被放入等待队列中，直至锁被释放。</p><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li>对数据进行读写操作的频率大致相当。</li><li>需要确保数据写操作的绝对安全，且读操作不远远高于写操作。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>读操作多于写操作时，效率较低，因为读操作也会被阻塞。</li></ul><h2 id="读写锁（RWMutex）"><a href="#读写锁（RWMutex）" class="headerlink" title="读写锁（RWMutex）"></a>读写锁（RWMutex）</h2><p>读写锁维护了两个状态：读锁状态和写锁状态。当一个 goroutine 获取读锁时，其他 goroutine 仍然可以获取读锁，但是写锁会被阻塞；当一个 goroutine 获取写锁时，则所有的读锁和写锁都会被阻塞。</p><h3 id="实现原理-1"><a href="#实现原理-1" class="headerlink" title="实现原理"></a>实现原理</h3><p><code>sync.RWMutex</code> 通过分别维护读者计数和写者状态，让多个读操作可以同时进行，而写操作保持排他性。读锁的请求会在没有写操作或写请求时获得满足，写锁的请求则需要等待所有的读锁和写锁释放。</p><h3 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li>读操作远多于写操作。</li><li>读操作需要较高性能，而写操作频率较低。</li></ul><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ul><li>在读操作极其频繁，写操作也较多的场景下，写操作可能会面临较长时间的等待。</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><h3 id="互斥锁的示例"><a href="#互斥锁的示例" class="headerlink" title="互斥锁的示例"></a>互斥锁的示例</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> mutex sync<span class="token punctuation">.</span>Mutex<span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">Write</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> value <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    mutex<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    m<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value    mutex<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">Read</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    mutex<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> mutex<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> m<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="读写锁的示例"><a href="#读写锁的示例" class="headerlink" title="读写锁的示例"></a>读写锁的示例</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> rwMutex sync<span class="token punctuation">.</span>RWMutex<span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">Write</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> value <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    rwMutex<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    m<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value    rwMutex<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">Read</span><span class="token punctuation">(</span>key value<span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    rwMutex<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> rwMutex<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> m<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>选择 <code>sync.Mutex</code> 还是 <code>sync.RWMutex</code> 需要根据你的具体场景来决定。如果你的应用中读操作远多于写操作，并且对读操作的并发性要求高，那么 <code>sync.RWMutex</code> 是一个更好的选择。反之，如果读写操作频率相似，或者写操作的安全性至关重要，那么使用 <code>sync.Mutex</code> 会更加简单和直接。</p><p>理解每种锁的内部实现和特点，可以帮助我们更加精细地控制并发，提升程序的性能和稳定性。</p><p>希望本文能够帮助你更好地理解 Go 语言中的并发锁选择。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> 互斥锁 </tag>
            
            <tag> 锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言map并发安全使用的正确姿势</title>
      <link href="posts/85f0ac00.html"/>
      <url>posts/85f0ac00.html</url>
      
        <content type="html"><![CDATA[<p>在并发编程的世界里，<code>map</code> 的使用随处可见。然而，当多个 goroutine 同时读写 map 时，如果不加以控制，很容易导致程序崩溃。</p><p>在 Go 语言中，我们通常有几种方法来保证对 map 的并发安全访问。今天，我将带大家详细了解如何在 Go 语言中安全地使用 map。</p><h2 id="为什么需要并发安全的-map？"><a href="#为什么需要并发安全的-map？" class="headerlink" title="为什么需要并发安全的 map？"></a>为什么需要并发安全的 map？</h2><p>在 Go 的并发模型中，goroutine 是轻量级的线程，我们可以轻松地创建成千上万的 goroutine。但是，当这些 goroutine 尝试同时访问和修改同一个 map 时，由于 map 本身不是并发安全的，这就可能导致<strong>数据竞态</strong>，进而影响数据的完整性与程序的稳定性。</p><h2 id="使用互斥锁（Mutex）保护-map"><a href="#使用互斥锁（Mutex）保护-map" class="headerlink" title="使用互斥锁（Mutex）保护 map"></a>使用互斥锁（Mutex）保护 map</h2><p>最简单且暴力的方式就是，直接使用互斥锁（<code>sync.Mutex</code>）来保证在同一时间只有一个 goroutine 能够访问 map。</p><p>来看看如何实现：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"sync"</span><span class="token punctuation">)</span><span class="token comment">// 定义一个并发安全的 map</span><span class="token keyword">type</span> SafeMap <span class="token keyword">struct</span> <span class="token punctuation">{</span>    mu sync<span class="token punctuation">.</span>Mutex    m  <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">}</span><span class="token comment">// 创建一个新的并发安全的 map</span><span class="token keyword">func</span> <span class="token function">NewSafeMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>SafeMap <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&amp;</span>SafeMap<span class="token punctuation">{</span>        m<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 设置键值对，加锁保护</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>SafeMap<span class="token punctuation">)</span> <span class="token function">Set</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> value <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    s<span class="token punctuation">.</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">}</span><span class="token comment">// 根据键获取值，加锁保护</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>SafeMap<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">defer</span> s<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    val<span class="token punctuation">,</span> ok <span class="token operator">:=</span> s<span class="token punctuation">.</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token keyword">return</span> val<span class="token punctuation">,</span> ok<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sm <span class="token operator">:=</span> <span class="token function">NewSafeMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 设置值</span>    sm<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">)</span>    <span class="token comment">// 获取值</span>    <span class="token keyword">if</span> val<span class="token punctuation">,</span> ok <span class="token operator">:=</span> sm<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Value:"</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过定义一个结构体来组合 <code>sync.Mutex</code> 和 map，我们可以确保每次访问或修改 map 时都会通过互斥锁进行同步，从而保证并发安全。</p><h2 id="使用-sync-Map"><a href="#使用-sync-Map" class="headerlink" title="使用 sync.Map"></a>使用 sync.Map</h2><p>从 Go 1.9 开始，标准库提供了 <code>sync.Map</code>，专门用来处理并发环境下的 map 操作。</p><p><code>sync.Map</code> 内置了所有必要的并发安全保护，适合在多个 goroutine 间共享和修改 map 数据的场景。它提供了如下几个主要方法：<code>Load</code>、<code>Store</code>、<code>Delete</code> 和 <code>Range</code>。</p><p>以下是使用 <code>sync.Map</code> 的示例：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"sync"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> m sync<span class="token punctuation">.</span>Map        <span class="token comment">// 存储键值对</span>    m<span class="token punctuation">.</span><span class="token function">Store</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span> <span class="token string">"value1"</span><span class="token punctuation">)</span>        <span class="token comment">// 从 map 中获取值</span>    value<span class="token punctuation">,</span> ok <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">Load</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> ok <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Found value: %s\n"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>    <span class="token punctuation">}</span>        <span class="token comment">// 删除键</span>    m<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">)</span>        <span class="token comment">// 使用 Range 遍历 map</span>    m<span class="token punctuation">.</span><span class="token function">Range</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%v: %v\n"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span> <span class="token comment">// 继续迭代</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>sync.Map</code> 虽然方便，但并不是万能的。它在特定场景（如元素频繁变化的场合）下性能并不高。所以，是否选择 <code>sync.Map</code>，需要根据实际情况权衡。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在 Go 语言并发编程中，正确地使用 map 是保证程序稳定运行的关键。通过互斥锁和 <code>sync.Map</code>，我们可以在不同的场景中安全地使用 map。每种方法都有其适用场景和性能特点，开发者需要根据具体需求来选择。希望本文能帮助大家在 Go 语言的并发编程旅途上更加顺畅。</p><p>好了，今天的分享就到这里，希望这篇文章对你有所帮助。如果你对并发安全的 map 有更多想法，欢迎留言讨论。记得点个关注哦！</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解 Nginx 与 Kong 的配置与实践</title>
      <link href="posts/52ffe35e.html"/>
      <url>posts/52ffe35e.html</url>
      
        <content type="html"><![CDATA[<p>在现代的微服务架构中，服务之间的通信和负载坐标成为了关键环节。这篇文章将深入探讨如何通过 Nginx 配置实现服务的负载均衡，同时如何利用 Kong API 网关管理微服务，包括但不限于服务发现、路由、和负载坐标。我们将使用具体代码示例，确保即便是编程新手也能轻松领悟。</p><h2 id="一、理解-Nginx-配置"><a href="#一、理解-Nginx-配置" class="headerlink" title="一、理解 Nginx 配置"></a>一、理解 Nginx 配置</h2><p>Nginx 是一个高性能的 HTTP 和反向代理服务器，也被广泛用于负载均衡。首先，让我们来看一个基本的 Nginx 配置例子，这将帮助我们理解如何实现负载均衡。</p><h3 id="Nginx-配置示例"><a href="#Nginx-配置示例" class="headerlink" title="Nginx 配置示例"></a>Nginx 配置示例</h3><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">upstream</span> pay-service</span> <span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">server</span> 127.0.0.1:5501 weight=2</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server</span> 127.0.0.1:5502 weight=4</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server</span> 127.0.0.1:5503 weight=8</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server_name</span> pay-service.xxx.com</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> /paymanger</span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">proxy_redirect</span>             <span class="token boolean">off</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span>           Host             <span class="token variable">$http_host</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span>           X-Real-IP        <span class="token variable">$remote_addr</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span>           X-Forwarded-For  <span class="token variable">$proxy_add_x_forwarded_for</span></span><span class="token punctuation">;</span>                <span class="token directive"><span class="token keyword">proxy_cookie_path</span> / <span class="token string">"/; secure; HttpOnly; SameSite=strict"</span></span><span class="token punctuation">;</span>                <span class="token directive"><span class="token keyword">proxy_pass</span>                 http://pay-service</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的配置定义了一个名为 <code>pay-service</code> 的 upstream，它包括三个后端服务节点，通过不同的权重分配处理请求。这里的权重意味着 <code>127.0.0.1:5503</code> 的请求处理能力是 <code>127.0.0.1:5501</code> 的四倍。</p><h3 id="核心概念解释："><a href="#核心概念解释：" class="headerlink" title="核心概念解释："></a>核心概念解释：</h3><ul><li><strong>upstream</strong>: 用来定义一组后端服务节点。</li><li><strong>server</strong>: 监听客户端请求的配置。</li><li><strong>location</strong>: 匹配请求URI，并定义处理请求的配置。</li><li><strong>proxy_pass</strong>: 指定请求转发的后端服务群组。</li></ul><table><thead><tr><th>Kong 组件</th><th>说明</th></tr></thead><tbody><tr><td>service</td><td>service 对应服务，可以直接指向一个 API 服务节点（host 参数设置为 ip + port），也可以指定一个 upstream 实现负载均衡。简单来说，服务用于映射被转发的后端 API 的节点集合。 <strong>对应的就是以上的 proxy_pass <a href="http://pay-service/">http://pay-service</a>; 这一行配置</strong></td></tr><tr><td>route</td><td>route 对应路由，它负责匹配实际的请求，映射到 service 中。 <strong>对应的就是以上的  /paymanger 配置</strong></td></tr><tr><td>upstream</td><td>upstream 对应一组 API 节点，实现负载均衡</td></tr><tr><td>target</td><td>target 对应一个 API 节点 <strong>对应的就是以上的 127.0.0.1:5501 127.0.0.1:5502 127.0.0.1:5503 这三个节点</strong></td></tr></tbody></table><hr><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-d4fae85689ca7f09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="请求示例图"></p><h2 id="二、使用-Kong-进行服务管理"><a href="#二、使用-Kong-进行服务管理" class="headerlink" title="二、使用 Kong 进行服务管理"></a>二、使用 Kong 进行服务管理</h2><p>Kong 是一个云原生、快速、可扩展的微服务抽象层（API 网关），用于管理微服务的请求如路由、身份验证、监控等。</p><h3 id="Kong-组件简介"><a href="#Kong-组件简介" class="headerlink" title="Kong 组件简介"></a>Kong 组件简介</h3><ul><li><strong>service</strong>: 映射后端 API 节点集合。</li><li><strong>route</strong>: 匹配并映射到 service。</li><li><strong>upstream</strong>: 一组 API 节点，用于负载均衡。</li><li><strong>target</strong>: 一个 API 节点。</li></ul><h3 id="创建-upstream-和-target"><a href="#创建-upstream-和-target" class="headerlink" title="创建 upstream 和 target"></a>创建 upstream 和 target</h3><h4 id="创建-upstream"><a href="#创建-upstream" class="headerlink" title="创建 upstream"></a>创建 upstream</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-X</span> POST http://127.0.0.1:8001/upstreams  <span class="token parameter variable">--data</span> <span class="token string">"name=pay-service"</span><span class="token function">curl</span> http://127.0.0.1:8001/upstreams<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="创建-target"><a href="#创建-target" class="headerlink" title="创建 target"></a>创建 target</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-X</span> POST http://127.0.0.1:8001/upstreams/pay-service/targets  <span class="token punctuation">\</span><span class="token parameter variable">--data</span> <span class="token string">"target=127.0.0.1:5501"</span> <span class="token punctuation">\</span><span class="token parameter variable">--data</span> <span class="token string">"weight=2"</span><span class="token function">curl</span> <span class="token parameter variable">-X</span> POST http://127.0.0.1:8001/upstreams/pay-service/targets  <span class="token punctuation">\</span><span class="token parameter variable">--data</span> <span class="token string">"target=127.0.0.1:5502"</span> <span class="token punctuation">\</span><span class="token parameter variable">--data</span> <span class="token string">"weight=4"</span><span class="token function">curl</span> <span class="token parameter variable">-X</span> POST http://127.0.0.1:8001/upstreams/pay-service/targets  <span class="token punctuation">\</span><span class="token parameter variable">--data</span> <span class="token string">"target=127.0.0.1:5503"</span> <span class="token punctuation">\</span>--d<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上命令将创建三个带有不同权重的 target，对应到之前的 Nginx 配置的三个服务节点。</p><h3 id="创建-service-和-route"><a href="#创建-service-和-route" class="headerlink" title="创建 service 和 route"></a>创建 service 和 route</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建 service</span><span class="token function">curl</span> <span class="token parameter variable">-X</span> POST http://127.0.0.1:8001/services  <span class="token punctuation">\</span><span class="token parameter variable">--data</span> <span class="token string">"name=payment-service"</span> <span class="token punctuation">\</span><span class="token parameter variable">--data</span> <span class="token string">"host=pay-service"</span><span class="token comment"># 创建 service 对应的 route</span><span class="token function">curl</span> <span class="token parameter variable">-X</span> POST http://127.0.0.1:8001/services/payment-service/routes  <span class="token punctuation">\</span><span class="token parameter variable">--data</span> <span class="token string">"name=payment-service-route"</span> <span class="token punctuation">\</span><span class="token parameter variable">--data</span> <span class="token string">"paths[]=/paymanger"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上述配置，当用户请求 <code>/paymanger</code> 时，Kong 会映射这个请求到 <code>payment-service</code>，并通过 upstream <code>pay-service</code> 实现负载均衡。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>Nginx 和 Kong 在现代微服务架构中起到了至关重要的角色。Nginx 擅长处理静态内容、负载均衡和反向代理，而 Kong 提供了一个强大的 API 管理平台，让你可以更容易地管理和监控你的 API。希望这篇文章能够帮助你深入理解它们的工作原理和配置方法。</p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KONG </tag>
            
            <tag> 微服务 </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 安装 KONG 带你玩转 API 网关</title>
      <link href="posts/b8eafe4f.html"/>
      <url>posts/b8eafe4f.html</url>
      
        <content type="html"><![CDATA[<p>在当今的软件开发中，API 网关已成为微服务架构中不可或缺的一环。它不仅简化了服务间的通信、提供了统一的入口，还能在安全、监控、限流等方面发挥巨大作用。</p><p>今天，我们就来聊聊如何通过 Docker 快速部署 KONG —— 一个流行的开源 API 网关。</p><h2 id="KONG-简介"><a href="#KONG-简介" class="headerlink" title="KONG 简介"></a>KONG 简介</h2><p>KONG 是基于 <a href="nginx.org">Nginx</a> 和 <a href="https://openresty.org/cn/">OpenResty</a> （Nginx + Lua）的云原生、高性能、可扩展的微服务 API 网关。它以插件形式提供丰富的功能，包括但不限于：</p><ul><li>身份认证（如 JWT、basic-auth）</li><li>安全性（如 IP 黑白名单）</li><li>监控</li><li>流量控制</li></ul><h2 id="KONG-与-Nginx-和-OpenResty-的关系"><a href="#KONG-与-Nginx-和-OpenResty-的关系" class="headerlink" title="KONG 与 Nginx 和 OpenResty 的关系"></a>KONG 与 Nginx 和 OpenResty 的关系</h2><p>为了更好地理解 KONG，我们首先要明白它与 Nginx、OpenResty 的关系：</p><ul><li><strong>Nginx</strong>：是一个高性能的 HTTP 服务器和反向代理，以及一个 IMAP/POP3 代理服务器。</li><li><strong>OpenResty</strong>：是在 Nginx 上集成了 Lua-nginx-module，允许使用 Lua 脚本语言扩展 Nginx 的能力。</li><li><strong>KONG</strong>：则是在 OpenResty 基础上，加入了自定义框架和一系列企业级功能实现的 API 网关。</li></ul><h2 id="Docker-安装-KONG"><a href="#Docker-安装-KONG" class="headerlink" title="Docker 安装 KONG"></a>Docker 安装 KONG</h2><p>安装 KONG 的一种便捷方式是使用 Docker。下面，我们将详细介绍如何通过 Docker 进行安装。</p><h3 id="步骤-1：创建容器网络"><a href="#步骤-1：创建容器网络" class="headerlink" title="步骤 1：创建容器网络"></a>步骤 1：创建容器网络</h3><p>首先创建一个 Docker 网络，以便容器间可以互相通信。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> network create kong-net<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="步骤-2：搭建数据库"><a href="#步骤-2：搭建数据库" class="headerlink" title="步骤 2：搭建数据库"></a>步骤 2：搭建数据库</h3><p>KONG 支持 Cassandra 和 PostgreSQL 数据库。这里，我们以 PostgreSQL 为例。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建一个数据卷</span><span class="token function">docker</span> volume create kong-volume<span class="token comment"># 查看所有的数据卷</span><span class="token function">docker</span> volume <span class="token function">ls</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> kong-database <span class="token punctuation">\</span><span class="token parameter variable">--network</span><span class="token operator">=</span>kong-net <span class="token punctuation">\</span><span class="token parameter variable">-p</span> <span class="token number">5432</span>:5432 <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token string">"POSTGRES_USER=konguser"</span> <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token string">"POSTGRES_DB=kong"</span> <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token string">"POSTGRES_PASSWORD=kongpwd"</span> <span class="token punctuation">\</span><span class="token comment"># 挂载卷以便持久化数据到宿主机</span><span class="token parameter variable">-v</span> kong-volume:/var/lib/postgresql/data <span class="token punctuation">\</span>postgres:9.6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="步骤-3：数据库初始化"><a href="#步骤-3：数据库初始化" class="headerlink" title="步骤 3：数据库初始化"></a>步骤 3：数据库初始化</h3><p>使用 <code>docker run --rm</code> 来初始化数据库，该命令执行后会退出容器而保留内部的数据卷。并且，要注意：<strong>一定要跟你声明的网络、数据库类型、host 名称一致。</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">--rm</span> <span class="token parameter variable">--network</span><span class="token operator">=</span>kong-net <span class="token punctuation">\</span><span class="token comment"># 如果使用的是 Cassandra 时，则需要设定为 cassandra 我这里使用的是 PostgreSQL 因此则设定为 postgres</span><span class="token parameter variable">-e</span> <span class="token string">"KONG_DATABASE=postgres"</span> <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token string">"KONG_PG_HOST=kong-database"</span> <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token string">"KONG_PG_USER=konguser"</span> <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token string">"KONG_PG_PASSWORD=kongpwd"</span> <span class="token punctuation">\</span><span class="token comment"># 企业版才会用到这个配置，非企业版设定此参数也无所谓</span><span class="token parameter variable">-e</span> <span class="token string">"KONG_PASSWORD=test"</span> <span class="token punctuation">\</span>kong/kong-gateway:3.4.1.1 kong migrations bootstrap<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="步骤-4：启动-KONG"><a href="#步骤-4：启动-KONG" class="headerlink" title="步骤 4：启动 KONG"></a>步骤 4：启动 KONG</h3><p>一切准备就绪后，我们可以启动 KONG 容器了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> kong-gateway <span class="token punctuation">\</span><span class="token parameter variable">--network</span><span class="token operator">=</span>kong-net <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token string">"KONG_DATABASE=postgres"</span> <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token string">"KONG_PG_HOST=kong-database"</span> <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token string">"KONG_PG_USER=konguser"</span> <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token string">"KONG_PG_PASSWORD=kongpwd"</span> <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token string">"KONG_PROXY_ACCESS_LOG=/dev/stdout"</span> <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token string">"KONG_ADMIN_ACCESS_LOG=/dev/stdout"</span> <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token string">"KONG_PROXY_ERROR_LOG=/dev/stderr"</span> <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token string">"KONG_ADMIN_ERROR_LOG=/dev/stderr"</span> <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token string">"KONG_ADMIN_LISTEN=0.0.0.0:8001"</span> <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token string">"KONG_ADMIN_GUI_URL=http://localhost:8002"</span> <span class="token punctuation">\</span><span class="token comment"># 仅仅企业版需要设定证书</span><span class="token parameter variable">-e</span> KONG_LICENSE_DATA <span class="token punctuation">\</span><span class="token parameter variable">-p</span> <span class="token number">8000</span>:8000 <span class="token punctuation">\</span><span class="token parameter variable">-p</span> <span class="token number">8443</span>:8443 <span class="token punctuation">\</span><span class="token parameter variable">-p</span> <span class="token number">8001</span>:8001 <span class="token punctuation">\</span><span class="token parameter variable">-p</span> <span class="token number">8444</span>:8444 <span class="token punctuation">\</span><span class="token parameter variable">-p</span> <span class="token number">8002</span>:8002 <span class="token punctuation">\</span><span class="token parameter variable">-p</span> <span class="token number">8445</span>:8445 <span class="token punctuation">\</span><span class="token parameter variable">-p</span> <span class="token number">8003</span>:8003 <span class="token punctuation">\</span><span class="token parameter variable">-p</span> <span class="token number">8004</span>:8004 <span class="token punctuation">\</span>kong/kong-gateway:3.4.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="步骤-5：检查-KONG-是否运行正常"><a href="#步骤-5：检查-KONG-是否运行正常" class="headerlink" title="步骤 5：检查 KONG 是否运行正常"></a>步骤 5：检查 KONG 是否运行正常</h3><p>最后，我们来检查 KONG 是否成功运行。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-X</span> GET <span class="token parameter variable">--url</span> http://<span class="token punctuation">{</span>YOUR_SERVER_IP<span class="token punctuation">}</span>:8001/services<span class="token comment"># 你也可以通过浏览器访问以下地址查看 KONG 管理界面</span>http://<span class="token punctuation">{</span>YOUR_SERVER_IP<span class="token punctuation">}</span>:8002<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>至此，你已经成功地在 Docker 上部署了 KONG。</p><h2 id="安装-Konga"><a href="#安装-Konga" class="headerlink" title="安装 Konga"></a>安装 Konga</h2><p>Konga 是一个开源的 KONG 管理界面，可以帮助我们更方便地管理和监控 KONG。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 拉取最新版本的 Konga</span><span class="token function">docker</span> pull pantsel/konga<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过以下命令预装 Konga 所需的数据库：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 这里的 172.18.0.2 要是 kong-database 容器的 IP 地址</span><span class="token comment"># konguser 和 kongpwd 是前面安装 PostgreSQL 是用到的账号和密码，konga 数据库专门为 Konga 设定（执行这条命令时，如果 konga 数据库不存在，则会自动创建）</span><span class="token function">docker</span> run <span class="token parameter variable">--rm</span> pantsel/konga <span class="token punctuation">\</span><span class="token parameter variable">--network</span><span class="token operator">=</span>kong-net <span class="token punctuation">\</span><span class="token parameter variable">-c</span> prepare <span class="token punctuation">\</span><span class="token parameter variable">-a</span> postgres <span class="token punctuation">\</span><span class="token parameter variable">-u</span> postgresql://konguser:kongpwd@172.18.0.2:5432/konga<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>安装 Konga：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> konga <span class="token punctuation">\</span><span class="token parameter variable">-p</span> <span class="token number">1337</span>:1337 <span class="token punctuation">\</span><span class="token parameter variable">--network</span> kong-net <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token string">"NODE_ENV=production"</span> <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token string">"DB_ADAPTER=postgres"</span> <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token string">"DB_HOST=kong-database"</span> <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token string">"DB_PORT=5432"</span> <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token string">"DB_USER=konguser"</span> <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token string">"DB_PASSWORD=kongpwd"</span> <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token string">"DB_DATABASE=konga"</span> <span class="token punctuation">\</span>pantsel/konga<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以通过浏览器访问 <code>http://{YOUR_SERVER_IP}:1337</code> 来检测安装是否成功。第一次访问时，需要注册管理员账号，通过注册之后，然后在 CONNECTIONS 中添加 Kong 服务的管理路径 <code>http://kong-gateway:8001</code> （因为这几个容器都连接了 kong-net 网络，因此这里可以通过容器名称作为 IP 地址，亦即这里的 <code>kong-gateway</code>） 即可管理 Kong。</p><h2 id="如果需要清除所有容器时"><a href="#如果需要清除所有容器时" class="headerlink" title="如果需要清除所有容器时"></a>如果需要清除所有容器时</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">kill</span> kong-gateway<span class="token function">docker</span> <span class="token function">kill</span> kong-database<span class="token function">docker</span> <span class="token function">kill</span> konga<span class="token function">docker</span> container <span class="token function">rm</span> kong-gateway<span class="token function">docker</span> container <span class="token function">rm</span> kong-database<span class="token function">docker</span> container <span class="token function">rm</span> konga<span class="token function">docker</span> network <span class="token function">rm</span> kong-net<span class="token function">docker</span> volume <span class="token function">rm</span> kong-volume<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过本文的步骤，你应该能够成功地在 Docker 中安装和运行 KONG API 网关以及 Konga 管理界面。KONG 提供了强大的 API 管理功能，而 Konga 则提供了一个用户友好的界面来管理 KONG 的各个方面。</p><p>希望这篇文章能帮助你快速入门 KONG，赶快动手试试吧！</p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> KONG </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Protobuf 实现高效数据交换</title>
      <link href="posts/7940debf.html"/>
      <url>posts/7940debf.html</url>
      
        <content type="html"><![CDATA[<p>在当今的软件开发领域，数据传输的效率和格式化方式尤为关键。Google 开发的 <strong>Protocol Buffers(Protobuf)</strong> 是一种语言无关的、平台无关的、高效、可扩展的序列化格式。</p><p>它提供了一种灵活、高效、自动化的方式来序列化数据，被广泛应用于网络传输、通信协议和数据存储等场景。</p><p>本文旨在介绍 Protobuf 的基本概念、类型映射、基本语法，以及与 RESTful API 的对比等方面，希望能帮助大家更好地了解并使用这一技术。</p><h2 id="Protobuf-简介"><a href="#Protobuf-简介" class="headerlink" title="Protobuf 简介"></a>Protobuf 简介</h2><p>它不仅支持常见的数据类型，如整数、浮点数、布尔值、字符串、字节序列等，还支持枚举、数组（重复字段）、嵌套消息等复杂类型。Protobuf 数据是结构化的数据，类似 JSON，但比 JSON 更小、更快、更简单。</p><h2 id="常见的-Protobuf-类型映射"><a href="#常见的-Protobuf-类型映射" class="headerlink" title="常见的 Protobuf 类型映射"></a>常见的 Protobuf 类型映射</h2><p>为了更好地在不同语言之间进行数据交换，Protobuf 定义了一套类型系统，并且可以映射到不同编程语言中的类型。常见的类型映射如下所示：</p><table><thead><tr><th>.proto Type</th><th>Go Type</th><th>PHP Type</th></tr></thead><tbody><tr><td>double</td><td>float64</td><td>float</td></tr><tr><td>float</td><td>float32</td><td>float</td></tr><tr><td>int32</td><td>int32</td><td>integer</td></tr><tr><td>int64</td><td>int64</td><td>integer/string</td></tr><tr><td>uint32</td><td>uint32</td><td>integer</td></tr><tr><td>uint64</td><td>uint64</td><td>integer/string</td></tr><tr><td>sint32</td><td>int32</td><td>integer</td></tr><tr><td>sint64</td><td>int64</td><td>integer/string</td></tr><tr><td>fixed32</td><td>uint32</td><td>integer</td></tr><tr><td>fixed64</td><td>uint64</td><td>integer/string</td></tr><tr><td>sfixed32</td><td>int32</td><td>integer</td></tr><tr><td>sfixed64</td><td>int64</td><td>integer/string</td></tr><tr><td>bool</td><td>bool</td><td>boolean</td></tr><tr><td>string</td><td>string</td><td>string</td></tr><tr><td>bytes</td><td>[]byte</td><td>string</td></tr></tbody></table><h2 id="Protobuf-基本语法"><a href="#Protobuf-基本语法" class="headerlink" title="Protobuf 基本语法"></a>Protobuf 基本语法</h2><p>下面是一个 Protobuf 文件的基本结构示例，定义了一个简单的 <code>HelloWorld</code> 服务，包含了发送和接收消息的格式。</p><pre class="line-numbers language-protobuf" data-language="protobuf"><code class="language-protobuf"><span class="token comment">// 声明使用 proto3 语法，目前主流推荐使用。</span><span class="token keyword">syntax</span> <span class="token operator">=</span> <span class="token string">"proto3"</span><span class="token punctuation">;</span><span class="token comment">// 声明包名，用于避免命名冲突。</span><span class="token keyword">package</span> helloworld<span class="token punctuation">;</span><span class="token comment">// 定义一个服务。</span><span class="token keyword">service</span> <span class="token class-name">Greeter</span> <span class="token punctuation">{</span>    <span class="token comment">// 定义 rpc 方法，注意请求和响应消息的类型。</span>    <span class="token keyword">rpc</span> <span class="token function">SayHello</span> <span class="token punctuation">(</span><span class="token class-name">HelloRequest</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token class-name">HelloReply</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 定义请求消息。</span><span class="token keyword">message</span> <span class="token class-name">HelloRequest</span> <span class="token punctuation">{</span>    <span class="token builtin">string</span> name <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 字段序号为 1。</span><span class="token punctuation">}</span><span class="token comment">// 定义响应消息。</span><span class="token keyword">message</span> <span class="token class-name">HelloReply</span> <span class="token punctuation">{</span>    <span class="token builtin">string</span> message <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 字段序号为 1。</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种定义方式非常类似于编程语言中的接口定义，但它更关注于数据的结构而非具体逻辑处理。</p><h2 id="gRPC-与-RESTful-API-对比"><a href="#gRPC-与-RESTful-API-对比" class="headerlink" title="gRPC 与 RESTful API 对比"></a>gRPC 与 RESTful API 对比</h2><p>在现代微服务架构中，gRPC 和 RESTful API 是两种流行的服务间通信方式。它们各有优缺点：</p><table><thead><tr><th>特性</th><th>gRPC</th><th>RESTful API</th></tr></thead><tbody><tr><td>规范</td><td>必须使用 .proto</td><td>可选 OpenAPI</td></tr><tr><td>协议</td><td>HTTP/2</td><td>任意版本的 HTTP 协议</td></tr><tr><td>有效载荷</td><td>Protobuf（小、二进制）</td><td>JSON（大、易读）</td></tr><tr><td>浏览器支持</td><td>需要 grpc-web</td><td>是</td></tr><tr><td>流传输</td><td>客户端、服务端、双向</td><td>客户端、服务端</td></tr><tr><td>代码生成</td><td>是</td><td>OpenAPI+ 第三方工具</td></tr></tbody></table><h2 id="特殊类型处理"><a href="#特殊类型处理" class="headerlink" title="特殊类型处理"></a>特殊类型处理</h2><p>在 Protobuf 中，提供了 <code>oneof</code>, <code>enum</code>, 和 <code>map</code> 等特殊类型，以支持更复杂的数据结构。</p><ul><li><strong>oneof</strong>：一种特殊类型，确保消息中最多只有一个字段被设置。</li></ul><pre class="line-numbers language-protobuf" data-language="protobuf"><code class="language-protobuf"><span class="token keyword">message</span> <span class="token class-name">HelloRequest</span> <span class="token punctuation">{</span>    <span class="token keyword">oneof</span> name <span class="token punctuation">{</span>        <span class="token builtin">string</span> nick_name <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token builtin">string</span> true_name <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>enum</strong>：枚举类型，用来限定字段可以接收的预定义的值。</li></ul><pre class="line-numbers language-protobuf" data-language="protobuf"><code class="language-protobuf"><span class="token comment">// 定义了一个枚举类型 NameType。</span><span class="token keyword">enum</span> <span class="token class-name">NameType</span> <span class="token punctuation">{</span>    NickName <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    TrueName <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 在消息中使用枚举类型。</span><span class="token keyword">message</span> <span class="token class-name">HelloRequest</span> <span class="token punctuation">{</span>    <span class="token builtin">string</span> name <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 普通字段。</span>    <span class="token positional-class-name class-name">NameType</span> nameType <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 枚举字段。</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>map</strong>：用来定义键值对的集合，类似于其他语言中的字典或映射类型。</li></ul><pre class="line-numbers language-protobuf" data-language="protobuf"><code class="language-protobuf"><span class="token keyword">message</span> <span class="token class-name">HelloRequest</span> <span class="token punctuation">{</span>    <span class="token map class-name">map<span class="token punctuation">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">&gt;</span></span> names <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 定义一个键和值都是字符串类型的 map。</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Protobuf 是一种高效的数据交换格式，尤其适合在分布式系统中使用。通过明确的类型定义和规范的数据结构，Protobuf 能够确保数据的一致性和可维护性。同时，通过 gRPC 这样的 RPC 框架，Protobuf 能够发挥更大的作用，实现高性能的远程服务调用。</p><p>希望通过本文，你能够初步掌握 Protobuf 的使用方法，为你的项目带来性能上的飞跃。</p>]]></content>
      
      
      <categories>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
            <tag> Protobuf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言设计模式：使用Option模式简化类的初始化</title>
      <link href="posts/d24ea952.html"/>
      <url>posts/d24ea952.html</url>
      
        <content type="html"><![CDATA[<p>在面向对象编程中，当我们需要创建一个构造参数众多的类时，不仅使得代码难以阅读，而且在参数较多时，调用者需要记住每个参数的顺序和类型，这无疑增加了使用的复杂性，代码往往变得难以管理。</p><p>Go 语言虽然不支持传统意义上的类，但我们也可以使用结构体和函数来模拟面向对象的构造函数。</p><p>今天，我们将讨论一种优雅的解决方案——Option 模式。</p><h2 id="传统的构造函数方法"><a href="#传统的构造函数方法" class="headerlink" title="传统的构造函数方法"></a>传统的构造函数方法</h2><p>先来看一个常见的例子，在 Go 语言中定义了一个 <code>Foo</code> 类，它有四个字段：<code>name</code>、<code>id</code>、<code>age</code> 和 <code>db</code>：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> newdemo<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> Foo <span class="token keyword">struct</span> <span class="token punctuation">{</span>   name <span class="token builtin">string</span>   id <span class="token builtin">int</span>   age <span class="token builtin">int</span>   db <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">NewFoo</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> id <span class="token builtin">int</span><span class="token punctuation">,</span> age <span class="token builtin">int</span><span class="token punctuation">,</span> db <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">*</span>Foo <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token operator">&amp;</span>Foo<span class="token punctuation">{</span>      name<span class="token punctuation">:</span> name<span class="token punctuation">,</span>      id<span class="token punctuation">:</span>   id<span class="token punctuation">,</span>      age<span class="token punctuation">:</span>  age<span class="token punctuation">,</span>      db<span class="token punctuation">:</span>   db<span class="token punctuation">,</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    foo <span class="token operator">:=</span> <span class="token function">NewFoo</span><span class="token punctuation">(</span><span class="token string">"jianfengye"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token comment">// 需要记住每个参数的顺序和类型</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种方法在参数较少时工作得很好，但随着参数数量的增加，其局限性也越来越明显。</p><h2 id="引入-Option-模式"><a href="#引入-Option-模式" class="headerlink" title="引入 Option 模式"></a>引入 Option 模式</h2><p>Option 模式通过使用函数选项来构建对象，为我们提供了一种更为灵活和可扩展的方式来配置类的实例。这种模式允许我们在不改变构造函数签名的情况下，灵活地添加更多的配置选项。</p><p>改造后的 <code>Foo</code> 类如下所示：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> newdemo<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> Foo <span class="token keyword">struct</span> <span class="token punctuation">{</span> name <span class="token builtin">string</span> id <span class="token builtin">int</span> age <span class="token builtin">int</span> db <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// FooOption 代表可选参数</span><span class="token keyword">type</span> FooOption <span class="token keyword">func</span><span class="token punctuation">(</span>foo <span class="token operator">*</span>Foo<span class="token punctuation">)</span><span class="token comment">// WithName 为 name 字段提供一个设置器</span><span class="token keyword">func</span> <span class="token function">WithName</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> FooOption <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>foo <span class="token operator">*</span>Foo<span class="token punctuation">)</span> <span class="token punctuation">{</span>      foo<span class="token punctuation">.</span>name <span class="token operator">=</span> name   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// WithAge 为 age 字段提供一个设置器</span><span class="token keyword">func</span> <span class="token function">WithAge</span><span class="token punctuation">(</span>age <span class="token builtin">int</span><span class="token punctuation">)</span> FooOption <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>foo <span class="token operator">*</span>Foo<span class="token punctuation">)</span> <span class="token punctuation">{</span>      foo<span class="token punctuation">.</span>age <span class="token operator">=</span> age   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// WithDB 为 db 字段提供一个设置器</span><span class="token keyword">func</span> <span class="token function">WithDB</span><span class="token punctuation">(</span>db <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> FooOption <span class="token punctuation">{</span>   <span class="token keyword">return</span> <span class="token keyword">func</span><span class="token punctuation">(</span>foo <span class="token operator">*</span>Foo<span class="token punctuation">)</span> <span class="token punctuation">{</span>      foo<span class="token punctuation">.</span>db <span class="token operator">=</span> db   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// NewFoo 创建 Foo 实例的构造函数，id为必传参数，其他为可选</span><span class="token keyword">func</span> <span class="token function">NewFoo</span><span class="token punctuation">(</span>id <span class="token builtin">int</span><span class="token punctuation">,</span> options <span class="token operator">...</span>FooOption<span class="token punctuation">)</span> <span class="token operator">*</span>Foo <span class="token punctuation">{</span>   foo <span class="token operator">:=</span> <span class="token operator">&amp;</span>Foo<span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>      id<span class="token punctuation">:</span>   id<span class="token punctuation">,</span>      age<span class="token punctuation">:</span>  <span class="token number">10</span><span class="token punctuation">,</span>      db<span class="token punctuation">:</span>   <span class="token boolean">nil</span><span class="token punctuation">,</span>   <span class="token punctuation">}</span>   <span class="token comment">// 遍历每个选项并应用它们</span>   <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> option <span class="token operator">:=</span> <span class="token keyword">range</span> options <span class="token punctuation">{</span>      <span class="token function">option</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> foo<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// 使用 Option 模式，仅传递需要设置的字段</span>    foo <span class="token operator">:=</span> <span class="token function">NewFoo</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token function">WithAge</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">WithName</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><ol><li><strong>灵活性和可读性</strong>：调用者只需要关注他们关心的选项，忽略其他默认配置。</li><li><strong>扩展性</strong>：新增选项不需要更改构造函数的签名，对旧代码无影响。</li><li><strong>可维护性</strong>：使用选项函数意味着所有的设置逻辑被封装起来，易于管理和维护。</li></ol><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>Option 模式是一种强大且灵活的方式，用于在 Go 语言中初始化复杂对象，特别适合于有多个配置选项的情况。通过这种模式，我们可以轻松地添加或者修改实例的配置，同时保持代码的简洁性和可读性。尽管刚开始可能需要一些额外的工作来实现，但长远来看，它将极大地提升我们代码的质量和可维护性。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 语言性能优化技巧</title>
      <link href="posts/2a37659b.html"/>
      <url>posts/2a37659b.html</url>
      
        <content type="html"><![CDATA[<p>在软件开发中，性能往往是我们需要特别关注的方面之一。对于使用 Go 语言的开发者而言，如何编写高性能的代码是一个重要的考虑点。</p><p>今天，我将分享一些在 Go 语言开发中可以采取的性能优化策略，希望能帮助大家写出更高效的程序。</p><h2 id="数字与字符串的转换"><a href="#数字与字符串的转换" class="headerlink" title="数字与字符串的转换"></a>数字与字符串的转换</h2><p>在处理数字和字符串的转换时，<code>strconv.Itoa()</code> 通常比 <code>fmt.Sprintf()</code> 更加高效。</p><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"strconv"</span><span class="token punctuation">)</span><span class="token comment">// 使用 strconv.Itoa() 进行转换</span>num <span class="token operator">:=</span> <span class="token number">123</span>str <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token comment">// 使用 fmt.Sprintf() 进行转换</span>str2 <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>strconv.Itoa()</code> 的速度大约是 <code>fmt.Sprintf()</code> 的两倍，因为后者需要解析格式字符串，而前者直接进行转换。</p><h2 id="字符串与字节切片的转换"><a href="#字符串与字节切片的转换" class="headerlink" title="字符串与字节切片的转换"></a>字符串与字节切片的转换</h2><p>尽可能避免将 <code>string</code> 转换为 <code>[]byte</code>。这个操作会增加额外的内存拷贝，从而影响性能。</p><h2 id="处理切片时的性能优化"><a href="#处理切片时的性能优化" class="headerlink" title="处理切片时的性能优化"></a>处理切片时的性能优化</h2><p>在使用 <code>for-loop</code> 对 <code>Slice</code> 进行 <code>append</code> 操作时，请先分配足够的容量。</p><h3 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 不推荐的做法</span><span class="token keyword">var</span> nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>    nums <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 推荐的做法</span>nums <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment">// 预分配足够的容量</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>    nums <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过预先分配足够的容量，可以避免在 <code>append</code> 过程中发生内存重新分配。</p><h2 id="字符串的拼接"><a href="#字符串的拼接" class="headerlink" title="字符串的拼接"></a>字符串的拼接</h2><p>使用 <code>strings.Builder</code> 对字符串进行拼接，性能远高于使用 <code>+</code> 或 <code>+=</code>。</p><h3 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token string">"strings"</span><span class="token comment">// 使用 strings.Builder 进行字符串拼接</span><span class="token keyword">var</span> builder strings<span class="token punctuation">.</span>Builder<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>    builder<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">"str"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>result <span class="token operator">:=</span> builder<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="并发编程"><a href="#并发编程" class="headerlink" title="并发编程"></a>并发编程</h2><p>利用 Go 语言的强大并发特性。使用并发的 <code>goroutine</code> 并配合 <code>sync.WaitGroup</code> 进行同步，可以显著提升程序的执行效率。</p><h3 id="示例代码-3"><a href="#示例代码-3" class="headerlink" title="示例代码"></a>示例代码</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"sync"</span><span class="token punctuation">)</span><span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>    wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">// 你的代码逻辑</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span>wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="慎用内存分配"><a href="#慎用内存分配" class="headerlink" title="慎用内存分配"></a>慎用内存分配</h2><p>避免在性能敏感的代码（热代码）中频繁进行内存分配，以减少垃圾回收的压力。</p><h2 id="对象重用"><a href="#对象重用" class="headerlink" title="对象重用"></a>对象重用</h2><p>使用 <code>sync.Pool</code> 来重用对象，可以有效降低内存分配的频率和垃圾回收的压力。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">pool <span class="token operator">:=</span> sync<span class="token punctuation">.</span>Pool<span class="token punctuation">{</span>    New<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">new</span><span class="token punctuation">(</span>MyStruct<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span>myVar <span class="token operator">:=</span> pool<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>MyStruct<span class="token punctuation">)</span><span class="token comment">// 使用 myVar 后，记得放回池中</span>pool<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span>myVar<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="无锁编程"><a href="#无锁编程" class="headerlink" title="无锁编程"></a>无锁编程</h2><p>尽可能采用无锁操作，比如使用 <code>sync/atomic</code> 包中的原子操作，以避免锁的开销。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 使用 Atomic 包进行原子操作</span><span class="token keyword">var</span> counter <span class="token builtin">int64</span>sync<span class="token operator">/</span>atomic<span class="token punctuation">.</span><span class="token function">AddInt64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>counter<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="I-O-缓冲"><a href="#I-O-缓冲" class="headerlink" title="I/O 缓冲"></a>I/O 缓冲</h2><p>I/O 操作是非常慢的，使用缓冲 I/O（如 <code>bufio.NewWriter()</code> 和 <code>bufio.NewReader()</code>）可以显著提升 I/O 性能。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 使用 bufio 包进行 I/O 缓冲</span>writer <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewWriter</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token keyword">defer</span> writer<span class="token punctuation">.</span><span class="token function">Flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span>writer<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span><span class="token string">"Hello, World"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="正则表达式优化"><a href="#正则表达式优化" class="headerlink" title="正则表达式优化"></a>正则表达式优化</h2><p>在循环内部使用正则表达式时，应先用 <code>regexp.Compile()</code> 将其编译，以提升性能。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">re <span class="token operator">:=</span> regexp<span class="token punctuation">.</span><span class="token function">MustCompile</span><span class="token punctuation">(</span><span class="token string">"some-regex-pattern"</span><span class="token punctuation">)</span>matches <span class="token operator">:=</span> re<span class="token punctuation">.</span><span class="token function">FindAllString</span><span class="token punctuation">(</span><span class="token string">"some string"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="序列化性能选择"><a href="#序列化性能选择" class="headerlink" title="序列化性能选择"></a>序列化性能选择</h2><p>如果对性能有高要求，考虑使用 <code>protobuf</code> 或 <code>msgp</code> 等序列化方案，而不是 <code>json</code>，因为 <code>json</code> 序列化涉及反射，性能较低。</p><h2 id="Map-使用技巧"><a href="#Map-使用技巧" class="headerlink" title="Map 使用技巧"></a>Map 使用技巧</h2><p>在使用 <code>map</code> 时，整型作为键的性能会比字符串高，这是因为整型的比较操作比字符串比较要快。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 使用整型作为 Map 的 key</span>mapInt <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token string">"two"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>如果需要把数字转换成宇符串，使用 <code>strconv.ltoa()</code> 比 <code>fmt.Sprintf()</code> 要快一倍左右。</li><li>尽可能避免把 <code>String</code> 转成 <code>[]Byte</code>，这个转换会导致性能下降。</li><li>如果在 <code>for-loop</code> 里对某个 <code>Slice</code> 使用 <code>append()</code>，请先把 <code>Slice</code> 的容量扩充到位，这样可以避免内存重新分配以及系统自动按 2 的 N 次方幂进行扩展但又用不到的情况，从而避免浪费内存。</li><li>使用 <code>StringBuffer</code> 或是 <code>StringBuild</code> 来拼接字符串，性能会比使用 <code>+</code> 或 <code>+=</code> 高三到四个数量级。</li><li>尽可能使用并发的 <code>goroutine</code> 然后使用 <code>sync.WaitGroup</code> 来同步分片操作。</li><li>避免在热代码中进行内存分配，这样会导致 <code>gc</code> 很忙。</li><li>尽可能使用 <code>sync.Pool</code> 来重用对象。</li><li>使用 <code>lock-free</code> 的操作，避免使用 <code>mutex</code>，尽可能使用 <code>sync/Atomic</code> 包。</li><li>使用 <code>I/O</code> 缓冲，<code>I/O</code> 是个非常非常慢的操作，使用 <code>bufio.NewWrite()</code> 和 <code>bufio.NewReader()</code> 可以带来更高的性能。</li><li>对于在 <code>for-loop</code> 里的固定的正则表达式，一定要使用 <code>regexp.Compile()</code> 编译正则表达式。性能会提升两个数量级。</li><li>如果你需要更高性能的协议，就要考虑使用 <code>protobuf</code> 或 <code>msgp</code> 而不是 <code>json</code>，因为 <code>json</code> 的序列化和反序列化里使用了反射。</li><li>你在使用 <code>Map</code> 的时候，使用整型的 <code>key</code> 会比字符串的要快，因为整型比较比字符串比较要快。</li></ul><p>通过上述的技巧，我们可以在编写 Go 程序时更加注重性能。从字符串处理到并发控制，再到内存管理，每一个环节都有提升效率的空间。希望这些技巧能够帮助你在开发过程中写出更高效、更优化的代码。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊聊 Go 中的单例模式</title>
      <link href="posts/1b8de6f.html"/>
      <url>posts/1b8de6f.html</url>
      
        <content type="html"><![CDATA[<p>单例模式在软件开发中是一种常见的设计模式，用于确保一个类在任何情况下都仅有一个实例，并提供一个访问它的全局访问点。</p><p>在 Go 语言中，实现单例模式通常有两种方式：<strong>饿汉式</strong> 和 <strong>懒汉式</strong>。</p><p>今天，我们就来详细了解这两种实现方式，并通过简单易懂的代码示例解释相关概念。</p><h2 id="饿汉式单例模式"><a href="#饿汉式单例模式" class="headerlink" title="饿汉式单例模式"></a>饿汉式单例模式</h2><p>饿汉式单例模式的核心思想是：类加载时就创建实例。由于 Go 语言不同于 Java，没有显式的类概念，我们通常使用结构体来模拟类的行为。下面是一个饿汉式单例模式的实现示例：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 饿汉式单例模式</span><span class="token keyword">package</span> main<span class="token keyword">type</span> singleton <span class="token keyword">struct</span> <span class="token punctuation">{</span>    count <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token comment">// 饿汉式单例，程序启动即初始化</span><span class="token keyword">var</span> Instance <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>singleton<span class="token punctuation">)</span><span class="token comment">// Add 方法用于累加并返回计数值</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>singleton<span class="token punctuation">)</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>    s<span class="token punctuation">.</span>count<span class="token operator">++</span>    <span class="token keyword">return</span> s<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，我们定义了一个 <code>singleton</code> 结构体，并在程序启动时通过 <code>var</code> 声明即初始化了 <code>Instance</code>。这样就保证了 <code>Instance</code> 是全局唯一的，并且在第一次使用前就已经准备好了。</p><h2 id="懒汉式单例模式"><a href="#懒汉式单例模式" class="headerlink" title="懒汉式单例模式"></a>懒汉式单例模式</h2><p>与饿汉式相比，懒汉式单例模式在第一次需要时才创建实例，可以延迟初始化资源。这在某些情况下可以节省资源，但需要考虑并发环境下的线程安全问题。</p><p>在 Go 语言中，可以使用<a href="https://zh.wikipedia.org/wiki/%E5%8F%8C%E9%87%8D%E6%A3%80%E6%9F%A5%E9%94%81%E5%AE%9A%E6%A8%A1%E5%BC%8F">双重检查锁定模式</a> （Double-checked Locking）来解决线程安全问题。</p><p>下面是懒汉式单例模式的实现示例：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 懒汉式单例模式</span><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"sync"</span><span class="token punctuation">)</span><span class="token keyword">type</span> singleton <span class="token keyword">struct</span> <span class="token punctuation">{</span>count <span class="token builtin">int</span><span class="token punctuation">}</span><span class="token keyword">var</span> <span class="token punctuation">(</span>instance <span class="token operator">*</span>singletonmutex    sync<span class="token punctuation">.</span>Mutex<span class="token punctuation">)</span><span class="token comment">// New 实例化一个对象</span><span class="token comment">// 这里采用了【双重检查】</span><span class="token comment">// 假设 goroutine X 和 Y 几乎同时调用 New 函数</span><span class="token comment">// 当它们同时进入此函数时，instance 变量值是 nil 因此 goroutine X 和 Y 会同时到达【位置1】</span><span class="token comment">// 假设 goroutine X 会先到达【位置2】，并进入 mutex.Lock() 到达【位置3】，这时，由于 mutex.Lock() 的同步限制</span><span class="token comment">// goroutine Y 无法到达【位置3】只能在【位置2】等候</span><span class="token comment">// goroutine X 执行 instance = new(singleton) 语句，使得 instance 变量得到一个值，此时 goroutine Y 还是只能在【位置2】等候</span><span class="token comment">// goroutine X 释放锁，返回 instance 变量，退出 New 函数</span><span class="token comment">// goroutine Y 进入 mutex.Lock() 到达【位置3】，进而到达【位置4】。由于此时 instance 变量已经不是 nil，因此 goroutine Y 释放锁</span><span class="token comment">// 可见，锁仅用来避免多个 goroutine 同时实例化 singleton</span><span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>singleton <span class="token punctuation">{</span><span class="token keyword">if</span> instance <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> <span class="token comment">// 【位置1】</span><span class="token comment">// 这里可能有多于一个 goroutine 同时到达 【位置2】</span>mutex<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 这里每个时刻只会有一个 goroutine 到达  【位置3】</span><span class="token keyword">if</span> instance <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> <span class="token comment">// 【位置4】</span>instance <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>singleton<span class="token punctuation">)</span><span class="token punctuation">}</span>mutex<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> instance<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>singleton<span class="token punctuation">)</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>s<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token keyword">return</span> s<span class="token punctuation">.</span>count<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个例子中，我们使用 <code>mutex</code> 来保护 <code>instance</code> 的创建过程，确保即使在多个 goroutine 同时调用 <code>New()</code> 时，实例也只会被创建一次。这种方法称为“双重检查”，因为每次调用 <code>New()</code> 时会进行两次 <code>instance</code> 是否为 <code>nil</code> 的检查：一次在加锁前，一次在加锁后。</p><h2 id="双重检查锁定模式"><a href="#双重检查锁定模式" class="headerlink" title="双重检查锁定模式"></a>双重检查锁定模式</h2><p>双重检查锁定模式是一种优化，它避免了在每次访问实例时都要进行同步操作的开销。这种模式首先检查实例是否已经创建，如果没有，则进行同步。在同步块内部，再次检查实例是否创建，以确保即使多个 goroutine 同时进入同步块，也只有一个能够创建实例。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>单例模式在需要全局访问点且只希望创建一个实例的场景下非常有用。饿汉式单例模式简单但可能造成资源浪费，而懒汉式单例模式则更加灵活，但需要处理线程安全问题。Go 语言的并发特性使得实现懒汉式单例模式时，双重检查锁定模式成为了一个优雅的解决方案。</p><p>通过以上的介绍和代码示例，相信你已经对饿汉式和懒汉式单例模式有了基本的了解和认识。在实际开发中，根据具体情况选用适当的实现方式，是每个 Go 开发者需要考虑的问题。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 项目自动重载解决方案 —— Air 使用入门</title>
      <link href="posts/2968883c.html"/>
      <url>posts/2968883c.html</url>
      
        <content type="html"><![CDATA[<p>在开发 Go 应用程序时，我们经常需要重启应用来加载最新的代码更改。这个过程虽然简单，但重复的操作会降低我们的开发效率。</p><p>今天，我们要介绍的工具 —— <strong>Air</strong>， 就是为了解决这个问题而生的。</p><p>下面，我们将一步步介绍如何使用 Air 来实现 Go 项目的自动重载，让你的开发过程更加顺畅。</p><h2 id="什么是-Air？"><a href="#什么是-Air？" class="headerlink" title="什么是 Air？"></a>什么是 Air？</h2><p><a href="https://github.com/cosmtrek/air">Air</a> 是一个为 Go 项目提供自动重载功能的工具。通过监听项目中文件的变化，自动重新编译并运行你的应用，从而达到热重载的效果，极大地提升开发效率。Air 的使用也非常简单，下面我们将通过几个步骤来详细介绍。</p><h2 id="安装-Air"><a href="#安装-Air" class="headerlink" title="安装 Air"></a>安装 Air</h2><p>安装 Air 的第一步是确保你的环境中安装了 Go，并且启用了 Go Module。这样我们可以更方便地管理项目的依赖。下面是安装 Air 的命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 最前面的 GO111MODULE=on 是只为当前命令启用 Go Module</span><span class="token comment"># 开启以后我们才能使用 Go Proxy 进行加速，以下命令会全局安装 Air</span><span class="token assign-left variable">GO111MODULE</span><span class="token operator">=</span>on  go <span class="token function">install</span> github.com/cosmtrek/air@latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上述命令会通过 Go 的包管理工具下载并安装 Air 到你的 <code>$GOPATH/bin</code> 目录下，因此请确保这个目录包含在你的环境变量 <code>PATH</code> 中。</p><h2 id="检查安装情况"><a href="#检查安装情况" class="headerlink" title="检查安装情况"></a>检查安装情况</h2><p>安装完成后，我们可以通过下面的命令来检查 Air 是否安装成功：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">air <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果安装成功，此命令将显示 Air 的版本信息。这说明 Air 已经准备好可以在你的项目中使用了。</p><h2 id="使用-Air"><a href="#使用-Air" class="headerlink" title="使用 Air"></a>使用 Air</h2><p>接下来，让我们看看如何在实际项目中使用 Air 来实现自动重载功能。</p><ol><li><strong>启动 Air</strong></li></ol><p>在你的 Go 项目根目录下运行以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 运行 Air</span>air<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>这个命令会启动 Air，并根据 `air.toml` 配置文件（如果项目中没有这个文件，Air 会使用默认配置）来监听文件变化。一旦检测到文件更改，Air 会自动编译并重启你的应用。</code></pre><ol start="2"><li><strong>忽略临时文件</strong></li></ol><p>启动 Air 之后，你会发现项目根目录下多了一个 <code>tmp</code> 文件夹，Air 使用这个文件夹来存放编译过程中产生的临时文件。因为这些文件通常不需要提交到版本控制系统中，所以你应该将 <code>tmp/</code> 添加到你的 <code>.gitignore</code> 文件中：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># .gitignore</span>tmp/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>air 通过监视项目文件的改动来工作。当它检测到文件变化时，air 会触发构建过程，并在构建成功后重启你的应用程序。这样，你就不需要每次修改代码后都手动重新编译和运行了。</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>使用 Air，你的 Go 项目开发过程将变得更加顺畅，不再需要手动重启应用来加载更改。通过自动重载，你可以更专注于代码的编写和调试，提高开发效率。</p><p>值得注意的是，虽然 Air 是一个强大方便的工具，但在生产环境下还是应该关闭自动重载功能，以保证应用的稳定性和性能。</p><p>希望这篇文章能帮助你更好地了解和使用 Air，让你的 Go 项目开发变得更加轻松和愉快。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Makefile 管理和部署 Go 项目</title>
      <link href="posts/926b9d4b.html"/>
      <url>posts/926b9d4b.html</url>
      
        <content type="html"><![CDATA[<p>在软件开发的世界里，自动化是提升效率的关键。<code>Makefile</code> 尽管是一个历史悠久的工具，但它在任务管理和自动化方面的能力依然不可小觑。</p><p>对于 <code>Go</code> 语言项目来说，利用 <code>Makefile</code> 来管理和自动化构建、部署过程能极大地简化开发流程。本文将引导你如何使用 <code>Makefile</code> 在本地开发 <code>Go</code> 项目后，将其更新到服务器上。</p><h2 id="为什么使用-Makefile？"><a href="#为什么使用-Makefile？" class="headerlink" title="为什么使用 Makefile？"></a>为什么使用 Makefile？</h2><p><code>Makefile</code> 提供了一个中心化的脚本集合，用于自动化执行各种任务，如编译源代码、打包软件、清理临时文件、部署到服务器等。使用 <code>Makefile</code> 可以让复杂的任务序列化、一键化，从而减少人为错误，提升工作效率。</p><h2 id="Makefile-基础"><a href="#Makefile-基础" class="headerlink" title="Makefile 基础"></a>Makefile 基础</h2><p>Makefile 是一个特殊格式的文件，它被 make 工具使用来管理和自动化软件的构建过程。每个 Makefile 包含一系列的规则和依赖，make 根据这些规则来执行任务。</p><h2 id="创建-Makefile"><a href="#创建-Makefile" class="headerlink" title="创建 Makefile"></a>创建 Makefile</h2><p>首先，在项目根目录下创建 <code>Makefile</code> 文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> Makefile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接着，我们定义一系列的任务来管理和部署我们的 Go 项目。</p><h3 id="任务脚本解析"><a href="#任务脚本解析" class="headerlink" title="任务脚本解析"></a>任务脚本解析</h3><p>以下是 <code>Makefile</code> 的内容示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 预定义变量</span><span class="token assign-left variable">REMOTE</span><span class="token operator">=</span><span class="token number">127.0</span>.0.1<span class="token assign-left variable">APPNAME</span><span class="token operator">=</span>alex-blog<span class="token comment"># 声明 .PHONY 目标</span>.PHONY: deploy-dev<span class="token comment"># deploy-dev 任务</span>deploy-dev:    @echo <span class="token string">"<span class="token entity" title="\n">\n</span>--- 开始构建可执行文件 ---"</span>    <span class="token comment"># 设置目标操作系统为 linux，架构为 amd64，并构建项目</span>    <span class="token assign-left variable">GOOS</span><span class="token operator">=</span>linux <span class="token assign-left variable">GOARCH</span><span class="token operator">=</span>amd64 go build <span class="token parameter variable">-ldflags</span><span class="token operator">=</span><span class="token string">"-s -w"</span> <span class="token parameter variable">-v</span> <span class="token parameter variable">-o</span> tmp/<span class="token variable"><span class="token variable">$(</span>APPNAME<span class="token variable">)</span></span>_tmp    @echo <span class="token string">"<span class="token entity" title="\n">\n</span>--- 上传可执行文件 ---"</span>    <span class="token comment"># 将构建的文件上传到服务器</span>    <span class="token function">scp</span> tmp/<span class="token variable"><span class="token variable">$(</span>APPNAME<span class="token variable">)</span></span>_tmp root@<span class="token variable"><span class="token variable">$(</span>REMOTE<span class="token variable">)</span></span>:/data/www/blog.com/    @echo <span class="token string">"<span class="token entity" title="\n">\n</span>--- 停止服务 ---"</span>    <span class="token comment"># 使用 SSH 执行命令，停止服务</span>    <span class="token function">ssh</span> root@<span class="token variable"><span class="token variable">$(</span>REMOTE<span class="token variable">)</span></span> <span class="token string">"supervisorctl stop <span class="token variable"><span class="token variable">$(</span>APPNAME<span class="token variable">)</span></span>"</span>    @echo <span class="token string">"<span class="token entity" title="\n">\n</span>--- 替换新文件 ---"</span>    <span class="token comment"># 使用 SSH 执行一系列命令，更新应用程序</span>    <span class="token function">ssh</span> root@<span class="token variable"><span class="token variable">$(</span>REMOTE<span class="token variable">)</span></span> <span class="token string">"cd /data/www/blog.com/ \                            &amp;&amp; rm <span class="token variable"><span class="token variable">$(</span>APPNAME<span class="token variable">)</span></span> \                            &amp;&amp; mv <span class="token variable"><span class="token variable">$(</span>APPNAME<span class="token variable">)</span></span>_tmp <span class="token variable"><span class="token variable">$(</span>APPNAME<span class="token variable">)</span></span> \                            &amp;&amp; chown www-data:www-data <span class="token variable"><span class="token variable">$(</span>APPNAME<span class="token variable">)</span></span>"</span>    @echo <span class="token string">"<span class="token entity" title="\n">\n</span>--- 开始服务 ---"</span>    <span class="token comment"># 使用 SSH 执行命令，启动服务</span>    <span class="token function">ssh</span> root@<span class="token variable"><span class="token variable">$(</span>REMOTE<span class="token variable">)</span></span> <span class="token string">"supervisorctl start <span class="token variable"><span class="token variable">$(</span>APPNAME<span class="token variable">)</span></span>"</span>    @echo <span class="token string">"<span class="token entity" title="\n">\n</span>--- 部署完毕 ---<span class="token entity" title="\n">\n</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="PHONY"><a href="#PHONY" class="headerlink" title=".PHONY: <任务名称>"></a><code>.PHONY: &lt;任务名称&gt;</code></h3><p><code>.PHONY</code> 用于声明一个目标是“伪目标”，而非文件名。这意呤着即使在当前目录下存在与任务同名的文件，执行 <code>make &lt;任务名称&gt;</code> 时，仍会执行该任务。这个声明可以避免由于存在同名文件而导致的任务不被执行。</p><h2 id="执行任务"><a href="#执行任务" class="headerlink" title="执行任务"></a>执行任务</h2><p>要运行上面定义的 <code>deploy-dev</code> 任务，只需要在项目根目录下运行以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span> deploy-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这条命令会依次执行构建可执行文件、上传至服务器、停止服务、替换新文件并重新启动服务等一系列操作，极大地简化了手动部署的过程。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过使用 <code>Makefile</code> 管理和自动化 <code>Go</code> 项目的构建和部署过程，我们可以节省大量时间，避免在重复性操作中出错。</p><p>本文介绍的 <code>Makefile</code> 示例展示了如何利用这种强大工具简化开发工作，但 <code>Makefile</code> 的潜力远不止于此。随着你对 <code>Makefile</code> 更深入的理解和掌握，你将能够创建更加复杂和强大的自动化脚本，使你的开发流程更加高效、专业。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Golang </tag>
            
            <tag> Makefile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何有效提升 API 接口的安全性？</title>
      <link href="posts/5edede5c.html"/>
      <url>posts/5edede5c.html</url>
      
        <content type="html"><![CDATA[<p>在如今的互联网应用中，API 接口的安全性已经成为了开发过程中不可忽视的一环。越来越多的应用服务通过 API 进行数据交换，而 API 的安全性直接关系到应用的数据安全与用户隐私。因此，我们需要采取一系列措施来确保 API 的安全。</p><p>本文将教你如何通过 API 接口验证规则和接口防刷来提升 API 的安全性。</p><h2 id="API-接口验证规则"><a href="#API-接口验证规则" class="headerlink" title="API 接口验证规则"></a>API 接口验证规则</h2><p>API 接口验证是 API 安全的基础。有效的验证机制可以阻止未授权的访问尝试，并确保只有拥有正确凭据的请求才能成功执行。</p><p>以下是一种常见且有效的 API 接口验证方法：</p><ol><li><p><strong>请求参数排序</strong>：将所有请求参数按 <code>ASCII</code> 码的顺序进行排序。这一步是为了确保发送到服务端的参数在前后端保持一致性，以便于生成可验证的签名(<code>sign</code>)。</p></li><li><p><strong>生成查询字符串</strong>：将排序后的请求参数转换成 <code>key=value</code> 的形式，并使用 <code>&amp;</code> 连接，形成查询字符串。如 <code>a=111&amp;b=222</code>。在此基础上，还可以加上一个与后端开发人员协定好的密钥(<code>key</code>)，以增加验证的复杂度。</p></li></ol><p>比如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">GET /api/data?a<span class="token operator">=</span><span class="token number">111</span><span class="token operator">&amp;</span><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">222</span><span class="token operator">&amp;</span><span class="token assign-left variable">key</span><span class="token operator">=</span>secret<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li><strong>MD5 加密</strong>：对步骤 2 生成的查询字符串进行 MD5 加密，生成签名(<code>sign</code>)。</li></ol><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$sign</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"a=111&amp;b=222&amp;key=secret"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li><p><strong>客户端携带签名请求</strong>：客户端在发送请求时，将加密后的签名(<code>sign</code>)一同携带发送。</p></li><li><p><strong>服务端验证</strong>：服务端接收到请求后，按照相同的规则（步骤 1 - 3）对请求进行处理并生成新的 <code>sign</code>，然后与客户端发送过来的 <code>sign</code> 进行对比。如果两者一致，则验证通过，否则请求无效。</p></li></ol><p>PHP 示例代码如下：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">// 示例代码，假设请求参数是一个关联数组</span><span class="token variable">$params</span> <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string single-quoted-string">'b'</span> <span class="token operator">=&gt;</span> <span class="token number">222</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'a'</span> <span class="token operator">=&gt;</span> <span class="token number">111</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 1. 对请求参数进行 ASCII 排序</span><span class="token function">ksort</span><span class="token punctuation">(</span><span class="token variable">$params</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2. 转成 `a=111&amp;b=222` 这样的结构</span><span class="token variable">$queryString</span> <span class="token operator">=</span> <span class="token function">http_build_query</span><span class="token punctuation">(</span><span class="token variable">$params</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 3. 进行 MD5 加密，生成 sign</span><span class="token variable">$secretKey</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'your_secret_key'</span><span class="token punctuation">;</span> <span class="token comment">// 与后端协定好的 key</span><span class="token variable">$sign</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$queryString</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&amp;key='</span> <span class="token operator">.</span> <span class="token variable">$secretKey</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4. 客户端请求携带参数以及 sign</span><span class="token comment">// 假设这是客户端的请求</span><span class="token variable">$request</span> <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string single-quoted-string">'params'</span> <span class="token operator">=&gt;</span> <span class="token variable">$params</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'sign'</span> <span class="token operator">=&gt;</span> <span class="token variable">$sign</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 后端验证逻辑示例</span><span class="token keyword">function</span> <span class="token function-definition function">verifyRequest</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token variable">$secretKey</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 获取参数和 sign</span>    <span class="token variable">$params</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'params'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$clientSign</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'sign'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 1. 对请求参数进行 ASCII 排序</span>    <span class="token function">ksort</span><span class="token punctuation">(</span><span class="token variable">$params</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 2. 转成 `a=111&amp;b=222` 这样的结构</span>    <span class="token variable">$queryString</span> <span class="token operator">=</span> <span class="token function">http_build_query</span><span class="token punctuation">(</span><span class="token variable">$params</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 3. 进行 MD5 加密，生成新的 sign</span>    <span class="token variable">$serverSign</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$queryString</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&amp;key='</span> <span class="token operator">.</span> <span class="token variable">$secretKey</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 4. 比较两个 sign</span>    <span class="token keyword">return</span> <span class="token variable">$clientSign</span> <span class="token operator">===</span> <span class="token variable">$serverSign</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$secretKey</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'your_secret_key'</span><span class="token punctuation">;</span> <span class="token comment">// 与前端协定好的 key</span><span class="token variable">$isRequestValid</span> <span class="token operator">=</span> <span class="token function">verifyRequest</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token variable">$secretKey</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$isRequestValid</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"请求合法"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"请求非法"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="接口防刷"><a href="#接口防刷" class="headerlink" title="接口防刷"></a>接口防刷</h2><p>接口被恶意刷取不仅会消耗服务器资源，还可能导致数据被不当获取。为了防止接口被恶意调用，通常会采用一些防刷策略，比如限制请求频率、使用验证码等。</p><p>其中，一种简单有效的防刷策略是利用 Redis 设置请求指纹的过期时间，限制同一签名（<code>sign</code>）或同一用户在短时间内的请求频率。</p><p>当一个请求被处理后，可以将该请求的签名存入 Redis，并设置一个过期时间，例如 1 小时。如果在 1 小时内再次收到相同的签名请求，则可以认为是重复请求，拒绝处理。<del>这里的时间可以按照具体情况设置短一点儿也行。</del></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">// 假设已经连接到 Redis 服务器</span><span class="token variable">$redis</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>Redis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$redis</span><span class="token operator">-&gt;</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 生成一个唯一的 sign，通常可以使用请求参数的哈希值</span><span class="token variable">$sign</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">http_build_query</span><span class="token punctuation">(</span><span class="token variable">$params</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&amp;key='</span> <span class="token operator">.</span> <span class="token variable">$secretKey</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 检查请求是否已经存在于 Redis 中</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$redis</span><span class="token operator">-&gt;</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token variable">$sign</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"请求过于频繁，请稍后再试"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment">// 设置 Redis 键值对，带过期时间（秒）</span>    <span class="token variable">$expirationTime</span> <span class="token operator">=</span> <span class="token number">3600</span><span class="token punctuation">;</span> <span class="token comment">// 1 小时</span>    <span class="token variable">$redis</span><span class="token operator">-&gt;</span><span class="token function">setex</span><span class="token punctuation">(</span><span class="token variable">$sign</span><span class="token punctuation">,</span> <span class="token variable">$expirationTime</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'alex'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 处理正常请求逻辑</span>    <span class="token comment">// ...</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述代码中，我们使用 Redis 的 <code>setex</code> 方法将请求的 <code>sign</code> 作为键，值设置为 <code>alex</code>，并设置过期时间为 1 小时。</p><p>每次请求时，先检查该 <code>sign</code> 是否存在于 Redis 中，如果存在，则认为请求过于频繁，拒绝处理。如果不存在，则将签名存入 Redis，并设置过期时间为 1 小时。这样，即使同一个签名的请求在 1 小时内重复发送，服务器也能正确地拒绝处理。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>API 接口的安全防护是确保数据安全和服务质量的关键。通过实现严格的验证规则和采用接口防刷措施，我们可以有效地保护我们的 API 免受恶意攻击和滥用。</p><p>通过上述介绍，我们学习了如何通过 API 接口验证与接口防刷两种方式来增强我们 API 的安全性。这两种方法在实际开发中非常实用，能有效防止 API 被滥用，保护数据安全。</p><p>希望这篇文章能够帮助你在日后的开发工作中更好地保护 API。</p>]]></content>
      
      
      <categories>
          
          <category> 科普 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手把手教你玩转 Nginx 配置</title>
      <link href="posts/40e3643a.html"/>
      <url>posts/40e3643a.html</url>
      
        <content type="html"><![CDATA[<p>在现代的互联网应用中，Nginx 已经成为了不可或缺的组成部分。无论是作为静态资源服务器、反向代理服务器、还是负载均衡器，Nginx 的高性能和灵活配置都让它备受青睐。</p><p>本文将以简单、易懂的语言和实例，详细介绍几种常见的 Nginx 配置场景，旨在帮助初学者和有一定经验的开发者能更好地理解和使用 Nginx。</p><h2 id="一、简单配置"><a href="#一、简单配置" class="headerlink" title="一、简单配置"></a>一、简单配置</h2><p>让我们从最基本的 Nginx 配置讲起。下面是一个非常基础的静态网站配置示例：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">listen</span>          <span class="token number">80</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server_name</span>     alex.com</span><span class="token punctuation">;</span> <span class="token comment"># 填写你的域名</span>    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>         <span class="token directive"><span class="token keyword">root</span> /var/www/wwwroot/myblog</span><span class="token punctuation">;</span> <span class="token comment"># 静态文件存放目录</span>        <span class="token directive"><span class="token keyword">index</span>  index.html index.htm</span><span class="token punctuation">;</span>  <span class="token comment"># 默认页面</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关键点解析："><a href="#关键点解析：" class="headerlink" title="关键点解析："></a>关键点解析：</h3><ul><li><code>listen 80;</code>：此行配置 Nginx 监听 80 端口，即 HTTP 标准端口。</li><li><code>server_name</code>：指定当前服务器块处理的域名。</li><li><code>location /</code>：处理根 URL 的请求。在这个位置块里，你定义了请求 <code>/</code> 时的行为。</li><li><code>root</code>：指定静态文件的存放目录。</li><li><code>index</code>：当请求目录时，默认返回的文件名。</li></ul><h2 id="二、配置-SSL-从-80-端口转发到-443"><a href="#二、配置-SSL-从-80-端口转发到-443" class="headerlink" title="二、配置 SSL - 从 80 端口转发到 443"></a>二、配置 SSL - 从 80 端口转发到 443</h2><p>随着网络安全的日益重要，为网站配置 SSL，即在 HTTP 上实施 TLS/SSL 来加密客户端和服务器之间的通信，已成为一项标准实践。下面的配置展示了如何将 http 流量（80端口）重定向到 https（443端口）：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># 80 端口配置，用于重定向到 https</span><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">listen</span>          <span class="token number">80</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server_name</span>     alex.com</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">rewrite</span> ^ https://<span class="token variable">$http_host</span><span class="token variable">$request_uri?</span> permanent</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment"># https 配置</span><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">443</span> ssl</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server_name</span> alex.com</span><span class="token punctuation">;</span>     <span class="token comment"># 绑定证书的域名</span>    <span class="token directive"><span class="token keyword">ssl_certificate</span> /etc/nginx/cert/alex_blog.crt</span><span class="token punctuation">;</span>      <span class="token comment"># 证书路径</span>    <span class="token directive"><span class="token keyword">ssl_certificate_key</span> /etc/nginx/cert/alex_blog.key</span><span class="token punctuation">;</span>  <span class="token comment"># 私钥路径</span>    <span class="token directive"><span class="token keyword">ssl_session_timeout</span> <span class="token number">5m</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">ssl_protocols</span> TLSv1 TLSv1.1 TLSv1.2</span><span class="token punctuation">;</span>  <span class="token comment"># 使用的协议</span>    <span class="token directive"><span class="token keyword">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">ssl_prefer_server_ciphers</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">root</span> /var/www/wwwroot/myblog</span><span class="token punctuation">;</span>    <span class="token comment"># 站点目录</span>        <span class="token directive"><span class="token keyword">index</span>  index.html index.htm</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关键点解析：-1"><a href="#关键点解析：-1" class="headerlink" title="关键点解析："></a>关键点解析：</h3><ul><li>第一个 <code>server</code> 块相当于一个跳板，接受 80 端口的请求并通过 301 永久重定向到 https。</li><li>第二个 <code>server</code> 块则是真正处理 https 请求的。</li><li><code>ssl_certificate</code> 和 <code>ssl_certificate_key</code> 分别指向了 SSL 证书和私钥的路径，这对于启用 https 是必须的。</li></ul><h2 id="三、反向代理配置"><a href="#三、反向代理配置" class="headerlink" title="三、反向代理配置"></a>三、反向代理配置</h2><p>反向代理是 Nginx 的另一个常用功能，它能让你将客户端的请求转发到其他服务器，并将其响应返回给客户端。这样做的好处包括隐藏服务器真实 IP、负载均衡、缓存静态内容等。以下示例配置描述了如何将对 <code>api.alex.com</code> 的请求转发到另一个服务器：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>    <span class="token comment"># 访问 api.alex.com 实际访问到 https://www.alex.com:5200 </span>    <span class="token directive"><span class="token keyword">server_name</span>  api.alex.com</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">proxy_pass</span> https://www.alex.com:5200</span><span class="token punctuation">;</span> <span class="token comment">#反向代理的地址</span>        <span class="token directive"><span class="token keyword">proxy_http_version</span> 1.1</span><span class="token punctuation">;</span> <span class="token comment">#配置参数（重要）</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span> Upgrade <span class="token variable">$http_upgrade</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span> Connection <span class="token string">"upgrade"</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关键点解析：-2"><a href="#关键点解析：-2" class="headerlink" title="关键点解析："></a>关键点解析：</h3><ul><li><code>proxy_pass</code> 指明了被代理服务器的地址。</li><li><code>proxy_set_header</code> 用于设置 HTTP 头信息，以确保正常的 WebSocket 通信。</li></ul><h2 id="四、配置图片服务器"><a href="#四、配置图片服务器" class="headerlink" title="四、配置图片服务器"></a>四、配置图片服务器</h2><p>当你需要专门处理图片或其他静态资源时，Nginx 可以配置成一个高效的图片服务器。以下是一个示例配置，用于处理特定路径下的图片文件请求：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># 正则表达式，访问 /home/alex/images/ 路径下的文件</span><span class="token directive"><span class="token keyword">location</span> ~ (images/).+(gif|jpg|jpeg|png)$</span> <span class="token punctuation">{</span>                 <span class="token directive"><span class="token keyword">expires</span> <span class="token number">24h</span></span><span class="token punctuation">;</span>                <span class="token directive"><span class="token keyword">root</span> /home/alex/</span><span class="token punctuation">;</span><span class="token comment">#指定图片存放路径</span>                <span class="token directive"><span class="token keyword">access_log</span> /home/alex/log/images.log</span><span class="token punctuation">;</span><span class="token comment">#日志存放路径</span>                <span class="token directive"><span class="token keyword">proxy_store</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>                <span class="token directive"><span class="token keyword">proxy_store_access</span> user:rw group:rw all:rw</span><span class="token punctuation">;</span>                <span class="token directive"><span class="token keyword">proxy_temp_path</span>     /home/alex/</span><span class="token punctuation">;</span><span class="token comment">#图片访问路径</span>                <span class="token directive"><span class="token keyword">proxy_redirect</span>     <span class="token boolean">off</span></span><span class="token punctuation">;</span>                <span class="token directive"><span class="token keyword">proxy_set_header</span>    Host 127.0.0.1</span><span class="token punctuation">;</span>                <span class="token directive"><span class="token keyword">client_max_body_size</span>  <span class="token number">10m</span></span><span class="token punctuation">;</span>                <span class="token directive"><span class="token keyword">client_body_buffer_size</span> <span class="token number">1280k</span></span><span class="token punctuation">;</span>                <span class="token directive"><span class="token keyword">proxy_connect_timeout</span>  <span class="token number">900</span></span><span class="token punctuation">;</span>                <span class="token directive"><span class="token keyword">proxy_send_timeout</span>   <span class="token number">900</span></span><span class="token punctuation">;</span>                <span class="token directive"><span class="token keyword">proxy_read_timeout</span>   <span class="token number">900</span></span><span class="token punctuation">;</span>                <span class="token directive"><span class="token keyword">proxy_buffer_size</span>    <span class="token number">40k</span></span><span class="token punctuation">;</span>                <span class="token directive"><span class="token keyword">proxy_buffers</span>      <span class="token number">40</span> <span class="token number">320k</span></span><span class="token punctuation">;</span>                <span class="token directive"><span class="token keyword">proxy_busy_buffers_size</span> <span class="token number">640k</span></span><span class="token punctuation">;</span>                <span class="token directive"><span class="token keyword">proxy_temp_file_write_size</span> <span class="token number">640k</span></span><span class="token punctuation">;</span>                <span class="token directive"><span class="token keyword">if</span> ( !-e <span class="token variable">$request_filename</span>)</span>                <span class="token punctuation">{</span>                        <span class="token directive"><span class="token keyword">proxy_pass</span> http://127.0.0.1</span><span class="token punctuation">;</span><span class="token comment">#默认80端口 </span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关键点解析：-3"><a href="#关键点解析：-3" class="headerlink" title="关键点解析："></a>关键点解析：</h3><ul><li>这个位置匹配了以 <code>images/</code> 开头，并以 <code>gif</code>、<code>jpg</code>、<code>jpeg</code>、<code>png</code> 结尾的请求路径，然后对这些资源进行了缓存和日志记录的配置。</li></ul><h2 id="五、Vue-应用的-Nginx-配置"><a href="#五、Vue-应用的-Nginx-配置" class="headerlink" title="五、Vue 应用的 Nginx 配置"></a>五、Vue 应用的 Nginx 配置</h2><p>将前端项目部署到服务器上时，你通常需要配置一个 Web 服务器来托管它们。Vue 应用就是这样一个案例。下面的 Nginx 配置适用于 Vue 应用的部署：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server_name</span> h5.alex.com</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">error_log</span> /var/log/nginx/frontend-h5.err</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">access_log</span>  /var/log/nginx/frontend-h5.log</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">root</span>   /opt/h5</span><span class="token punctuation">;</span><span class="token comment">#        rewrite ^/article/([0-9]+)$ /index.html?id=$1 last;</span>             <span class="token directive"><span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ /index.html</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token directive"><span class="token keyword">location</span> /dapi/</span> <span class="token punctuation">{</span>           <span class="token directive"><span class="token keyword">proxy_pass</span> http://172.19.0.23:8502/</span><span class="token punctuation">;</span>            <span class="token directive"><span class="token keyword">proxy_set_header</span> Host <span class="token variable">$host</span></span><span class="token punctuation">;</span>           <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Real-IP <span class="token variable">$http_x_real_ip</span></span><span class="token punctuation">;</span>           <span class="token directive"><span class="token keyword">proxy_set_header</span> X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span></span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token comment">#</span>    <span class="token directive"><span class="token keyword">error_page</span>   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">root</span>   /usr/share/nginx/html</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关键点解析：-4"><a href="#关键点解析：-4" class="headerlink" title="关键点解析："></a>关键点解析：</h3><ul><li><code>try_files</code> 命令用于尝试按顺序访问指定的文件或目录，如果都没有找到，最后会重定向到 <code>/index.html</code> 文件。这对于单页面应用（SPA）非常重要，因为它们依赖于前端路由。</li></ul><h2 id="六、Go-Gin-应用的配置与负载均衡"><a href="#六、Go-Gin-应用的配置与负载均衡" class="headerlink" title="六、Go Gin 应用的配置与负载均衡"></a>六、Go Gin 应用的配置与负载均衡</h2><p>Go-Gin 是一个高性能的 Web 框架，适用于构建高效的 Web 应用。部署至生产环境时，你可能需要 Nginx 作为反向代理服务器，并实现负载均衡以提高应用的可用性和响应速度。以下配置展示了如何设置反向代理和负载均衡：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">worker_processes</span>  <span class="token number">1</span></span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">events</span></span> <span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">worker_connections</span>  <span class="token number">1024</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">include</span>       mime.types</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">default_type</span>  application/octet-stream</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">sendfile</span>        <span class="token boolean">on</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">keepalive_timeout</span>  <span class="token number">65</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">8081</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">server_name</span>  api.blog.com</span><span class="token punctuation">;</span>        <span class="token comment"># 将所有路径转发到 http://127.0.0.1:8000/ 下</span>        <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>            <span class="token directive"><span class="token keyword">proxy_pass</span> http://127.0.0.1:8000/</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置负载均衡</p><blockquote><p>使用 gin 启动两个服务，分别监听 8001 端口和 8002 端口</p></blockquote><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">worker_processes</span>  <span class="token number">1</span></span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">events</span></span> <span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">worker_connections</span>  <span class="token number">1024</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">include</span>       mime.types</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">default_type</span>  application/octet-stream</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">sendfile</span>        <span class="token boolean">on</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">keepalive_timeout</span>  <span class="token number">65</span></span><span class="token punctuation">;</span>    <span class="token comment"># 设置其对应的 2 个后端服务</span>    <span class="token directive"><span class="token keyword">upstream</span> api.blog.com</span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">server</span> 127.0.0.1:8001</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">server</span> 127.0.0.1:8002</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">8081</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">server_name</span>  api.blog.com</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>            <span class="token comment"># 格式为 http:// + upstream 的节点名称</span>            <span class="token directive"><span class="token keyword">proxy_pass</span> http://api.blog.com/</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关键点解析：-5"><a href="#关键点解析：-5" class="headerlink" title="关键点解析："></a>关键点解析：</h3><ul><li><code>upstream</code> 指令定义了一个服务器组，可以包含一个或多个服务器。在这个例子中，两个 Gin 应用实例分别运行在 8001 和 8002 端口。</li><li>当请求到来时，Nginx 会根据配置的策略（默认为轮询）将请求分发到不同的服务器。</li></ul><h2 id="七、按目录划分项目"><a href="#七、按目录划分项目" class="headerlink" title="七、按目录划分项目"></a>七、按目录划分项目</h2><ul><li><a href="http://www.blog.com/">www.blog.com</a> 访问静态文档项目</li><li><a href="http://www.blog.com/frontend">www.blog.com/frontend</a> 访问门户页面</li><li><a href="http://www.blog.com/backend">www.blog.com/backend</a> 访问后台页面</li></ul><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server_name</span>  www.blog.com</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">root</span>   /usr/share/nginx/html/www</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">index</span>  index.html index.htm</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token directive"><span class="token keyword">location</span> /frontend</span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">alias</span>   /usr/share/nginx/html/frontend</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">index</span>  index.html index.htm</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token directive"><span class="token keyword">location</span> /backend</span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">alias</span>   /usr/share/nginx/html/backend</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">index</span>  index.html index.htm</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token directive"><span class="token keyword">error_page</span>   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">root</span>   /usr/share/nginx/html</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="八、一些判断"><a href="#八、一些判断" class="headerlink" title="八、一些判断"></a>八、一些判断</h2><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>    <span class="token comment"># 没有后缀的请求才会转发 </span>    <span class="token directive"><span class="token keyword">if</span> (!-e <span class="token variable">$request_filename</span>)</span><span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">proxy_pass</span> http://localhost:8080</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">break</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过这篇文章，我们简要介绍了 Nginx 的几种常见配置场景，并提供了详细的代码示例和解释。希望这能帮助你更好地理解和运用 Nginx。无论你是完全的新手还是有一定经验的开发者，掌握这样一个强大的工具都将极大地提升你的开发和部署效率。</p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多机部署：打造内网服务器集群</title>
      <link href="posts/9a124193.html"/>
      <url>posts/9a124193.html</url>
      
        <content type="html"><![CDATA[<p>在当今这个信息爆炸的时代，多机部署已经成为许多大型应用不可或缺的一部分。但是，对于很多刚刚接触服务器管理和网络部署的新手来说，多机部署可能听起来就像是一门深不可测的技术。</p><p>别担心，今天就让我带你一起轻松学习如何在同一内网的不同服务器之间进行连接。</p><p>通过这篇文章，你不仅能够掌握基本的多机部署方法，还能理解其背后的逻辑。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>在我们进入正题之前，需要明确一个非常重要的前提：为了保持用户登录状态的一致性，在进行多机部署时，我们强烈推荐你将 Laravel 项目的 <code>.env</code> 配置文件中的 <code>CACHE_DRIVER</code> 和 <code>SESSION_DRIVER</code> 改成 <code>redis</code>。</p><p>这是因为，当同一个用户的请求被随机分发到各个服务器时，使用 Redis 可以有效地维护用户的登录状态，实现数据的共享和状态的同步。</p><p>现在，让我们进入正题，分别来看一下如何配置 MySQL、Redis 和 Elasticsearch 的内网通信。</p><h2 id="修改-MySQL-监听-IP"><a href="#修改-MySQL-监听-IP" class="headerlink" title="修改 MySQL 监听 IP"></a>修改 MySQL 监听 IP</h2><p>首先，我们需要查看服务器的内网 IP 地址，这可以通过以下命令完成：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ifconfig</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'inet addr'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到内网 IP 地址后，接下来就需要修改 MySQL 的配置文件了。我们需要将 <code>bind-address</code> 改为刚才查到的内网 IP 地址。</p><p>打开 MySQL 的配置文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/mysql/mysql.conf.d/mysqld.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在该文件中找到 <code>bind-address</code> 项，并修改它：</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">bind-address = {云服务器的内网 ip 地址}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改完成后，别忘了重启 MySQL 服务以应用更改：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl restart mysql.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为了验证 MySQL 服务是否正确开启，执行以下命令查看端口：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> -anp<span class="token operator">|</span><span class="token function">grep</span> <span class="token number">3306</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="修改-Redis-监听-IP"><a href="#修改-Redis-监听-IP" class="headerlink" title="修改 Redis 监听 IP"></a>修改 Redis 监听 IP</h2><p>与 MySQL 类似，修改 Redis 的监听 IP 也是必要步骤。打开 Redis 的配置文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/redis/redis.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到 <code>bind</code> 配置项，替换为内网 IP 地址：</p><pre class="line-numbers language-redis" data-language="redis"><code class="language-redis">bind {云服务器的内网 ip 地址}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改完成后，同样需要重启 Redis 服务：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl restart redis.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为了确认 Redis 服务是否启动成功，可以通过检查端口号来验证：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> -anp<span class="token operator">|</span><span class="token function">grep</span> <span class="token number">6379</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="修改-Elasticsearch-监听-IP"><a href="#修改-Elasticsearch-监听-IP" class="headerlink" title="修改 Elasticsearch 监听 IP"></a>修改 Elasticsearch 监听 IP</h2><p>最后，让我们来调整 Elasticsearch 的配置。打开 Elasticsearch 的配置文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/elasticsearch/elasticsearch.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在文件中找到 <code>network.host</code> 和 <code>discovery.seed_hosts</code>，并去掉这两项前面的注释符号（<code>#</code>），然后将其值分别设置为内网 IP 地址：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">network.host</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>云服务器的内网 ip 地址<span class="token punctuation">}</span><span class="token key atrule">discovery.seed_hosts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"{云服务器的内网 ip 地址}"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改完成后，同样不要忘记重启 Elasticsearch 服务以应用修改：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl restart elasticsearch.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最后，通过检查端口信息来确认 Elasticsearch 服务是否启动成功：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> -anp<span class="token operator">|</span><span class="token function">grep</span> <span class="token number">9200</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>恭喜你，通过上面的步骤，你不仅学会了如何设置不同服务器之间的内网连接，还完成了对 MySQL、Redis 和 Elasticsearch 三大常用服务的配置调整。</p><p>多机部署虽然听起来复杂，但只要按照正确的步骤操作，就可以轻松实现。最重要的是，理解其中的原理和逻辑，这将对你未来处理更复杂的部署场景大有帮助。</p><p>希望这篇文章能够帮助你迈出多机部署的第一步！</p>]]></content>
      
      
      <categories>
          
          <category> 科普 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 服务器集群 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tmux 快速入门：提高终端管理效率的必备技能</title>
      <link href="posts/bb0f40eb.html"/>
      <url>posts/bb0f40eb.html</url>
      
        <content type="html"><![CDATA[<p>在日常的软件开发过程当中，程序员经常需要同时操作多个终端窗口。不论是编写代码、运行测试、监控日志，还是远程登录服务器，多个窗口的切换不仅繁琐，而且降低了工作效率。</p><p>此时，一个叫作 <strong>Tmux</strong>（terminal multiplexer）的工具就能大显身手了。Tmux 允许你在一个终端窗口中，通过多个窗格（pane）和窗口（window）同时进行多项操作，极大地提高了使用终端的效率。</p><p>接下来，我们用简单易懂的语言介绍一下 Tmux 的基础使用方法，让你迅速上手这个强大的工具。</p><hr><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>快捷键是 Tmux 操作的核心，通过它们，你可以快速实现会话管理、窗格和窗口的操作。以下是一些基础且常用的快捷键列表。</p><h3 id="会话管理"><a href="#会话管理" class="headerlink" title="会话管理"></a>会话管理</h3><p>会话（Session）是 Tmux 的顶层组织单位，每个会话可以包含多个窗口。</p><ul><li>分离当前会话： Ctrl+b d</li><li>列出所有会话： Ctrl+b s</li><li>重命名当前会话： Ctrl+b $</li></ul><h3 id="窗格操作"><a href="#窗格操作" class="headerlink" title="窗格操作"></a>窗格操作</h3><p>窗格是分屏的基本单位，一个窗口可以包含一个或多个窗格。</p><ul><li>划分左右两个窗格： Ctrl+b %</li><li>划分上下两个窗格： Ctrl+b “ （左双引号）</li><li>上下-左右窗格互切： Ctrl+b <space>  （空格）</space></li><li>光标切换到其他窗格： Ctrl+b <arrow key=""> （方向键）</arrow></li><li>当前窗格与上一个窗格互换位置： Ctrl+b {</li><li>当前窗格与下一个窗格互换位置： Ctrl+b }</li><li>关闭当前窗格： Ctrl+b x</li><li>将当前窗格拆分为一个独立窗口： Ctrl+b !</li><li>当前窗格全屏显示： Ctrl+b z （再次使用恢复原来大小）</li><li>调整窗格大小： Ctrl+b Ctrl+<arrow key="">  （以 1 个单元格为单位调整）</arrow></li><li>调整窗格大小： Ctrl+b Alt+<arrow key="">  （以 5 个单元格为单位调整）</arrow></li><li>显示窗格编号： Ctrl+b q</li><li>顺时针旋转当前窗口的窗格： Ctrl+b Ctrl+o  （字母 o）</li><li>逆时针旋转当前窗口的窗格：  Ctrl+b Alt+o</li><li>显示时钟：Ctrl+b t</li></ul><h3 id="窗口操作"><a href="#窗口操作" class="headerlink" title="窗口操作"></a>窗口操作</h3><p>窗口可以视为多个工作空间，每个窗口可以包含多个窗格。</p><ul><li>创建新窗口： Ctrl+b c</li><li>切换到上一个窗口： Ctrl+b p</li><li>切换到下一个窗口： Ctrl+b n</li><li>切换到指定编号的窗口: Ctrl+b <number></number></li><li>从列表中选择窗口： Ctrl+b w</li><li>窗口重命名： Ctrl+b ,</li></ul><hr><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在不同的操作系统上安装 Tmux 的命令如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Ubuntu 或 Debian</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> tmux<span class="token comment"># CentOS 或 Fedora</span><span class="token function">sudo</span> yum <span class="token function">install</span> tmux<span class="token comment"># Mac</span>brew <span class="token function">install</span> tmux<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="启动与退出"><a href="#启动与退出" class="headerlink" title="启动与退出"></a>启动与退出</h2><p>要开始使用 Tmux，只需打开终端并输入 <code>tmux</code> 来启动。</p><ul><li><strong>启动</strong>：直接在终端中输入 <code>tmux</code>。</li><li><strong>退出</strong>：可以使用 <code>Ctrl + d</code> 或者输入 <code>exit</code> 命令。</li></ul><h2 id="会话管理-1"><a href="#会话管理-1" class="headerlink" title="会话管理"></a>会话管理</h2><p>会话让你能在单一窗口中管理多个项目或任务，非常适合多任务操作。</p><ol><li><strong>新建会话</strong></li></ol><p>新建一个默认名称的会话：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tmux<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>或新建一个指定名称的会话：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tmux new <span class="token parameter variable">-s</span> <span class="token operator">&lt;</span>session-name<span class="token operator">&gt;</span>  <span class="token comment"># 新建一个名称叫做 alex 的会话</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li><strong>分离会话</strong></li></ol><p>让当前会话在后台运行，你可以安全地关闭终端连接，之后再重新接入：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Ctrl + b d  <span class="token comment"># 或者 tmux detach</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li><strong>查看当前所有的 tmux 会话</strong></li></ol><p>查看有哪些会话正在运行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tmux <span class="token function">ls</span>  <span class="token comment"># 或者 tmux list-session</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置相关"><a href="#配置相关" class="headerlink" title="配置相关"></a>配置相关</h2><ul><li>系统配置文件 <code>/etc/tmux.conf</code></li><li>用户级配置文件 <code>~/.tmux.conf</code></li></ul><p>配置文件实际上就是 <code>tmux</code> 的命令集合，也就是说每行配置均可在进入命令行模式后输入生效</p><ul><li>将 <code>Ctrl + r</code> 设置为加载配置文件，并显示 <code>Refresh configure!</code></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">bind</span> C-r source-file ~/.tmux.conf <span class="token punctuation">\</span><span class="token punctuation">;</span> display <span class="token string">"Refresh configure!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>将 <code>prefix</code> 快捷键前缀由 <code>Ctrl+b</code> 更改为 <code>Ctrl+a</code></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Send prefix</span>set-option <span class="token parameter variable">-g</span> prefix C-aunbind-key C-abind-key C-a send-prefix<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>不用按快捷键前缀，直接使用 <code>alt + 方向键</code> 在 pane 之间 switch</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Use Alt-arrow keys to switch panes</span><span class="token builtin class-name">bind</span> <span class="token parameter variable">-n</span> M-Left select-pane <span class="token parameter variable">-L</span><span class="token builtin class-name">bind</span> <span class="token parameter variable">-n</span> M-Right select-pane <span class="token parameter variable">-R</span><span class="token builtin class-name">bind</span> <span class="token parameter variable">-n</span> M-Up select-pane <span class="token parameter variable">-U</span><span class="token builtin class-name">bind</span> <span class="token parameter variable">-n</span> M-Down select-pane <span class="token parameter variable">-D</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>不用按快捷键前缀，直接使用 <code>shift + 方向键</code> 在 window 之间 switch</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Shift arrow to switch windows</span><span class="token builtin class-name">bind</span> <span class="token parameter variable">-n</span> S-Left previous-window<span class="token builtin class-name">bind</span> <span class="token parameter variable">-n</span> S-Right next-window<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>开启鼠标模式，用鼠标就能切换 window 、 pane、还能调整 pane 的大小</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Mouse mode</span><span class="token builtin class-name">set</span> <span class="token parameter variable">-g</span> mouse on<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>Ctrl+b v</code> 竖着分屏， <code>Ctrl+b h</code> 横着分屏</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Set easier window split keys</span>bind-key <span class="token function">v</span> split-window <span class="token parameter variable">-h</span>bind-key h split-window <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>tmux 是一个功能强大的终端复用器，它通过丰富的快捷键和灵活的配置选项，极大地提升了我们使用终端的效率。无论你是开发者、系统管理员还是普通用户，掌握 tmux 都能帮助你更好地管理终端会话。</p><p>操作 Tmux 的精髓在于灵活地管理和切换会话、窗口和窗格。掌握以上基本命令，就可以让你的终端操作效率大大提高。继续探索 Tmux，你会发现更多强大功能，比如自定义快捷键、脚本自动化等，让你的工作更加得心应手。</p>]]></content>
      
      
      <categories>
          
          <category> 科普 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tmux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 管理远程会话 screen：掌握终端的多任务操作</title>
      <link href="posts/1330f742.html"/>
      <url>posts/1330f742.html</url>
      
        <content type="html"><![CDATA[<p>在日常开发和服务器管理工作中，特别是当我们通过 SSH 连接到远程服务器时，通常需要同时执行多个任务。</p><p>Linux 的 <code>screen</code> 命令为此提供了一种简便的解决方案。<code>screen</code> 允许用户创建多个会话窗口，并在它们之间自由切换，即便与远程服务器的连接断开，这些会话仍然会在后台运行。</p><p>接下来，我们将使用简单易懂的语言，探索如何通过 <code>screen</code> 提高我们的工作效率。</p><h2 id="初识-Screen"><a href="#初识-Screen" class="headerlink" title="初识 Screen"></a>初识 Screen</h2><h3 id="创建新的会话窗口"><a href="#创建新的会话窗口" class="headerlink" title="创建新的会话窗口"></a>创建新的会话窗口</h3><p>如果你想运行一个长时间执行的命令（比如备份操作），并不希望因为网络问题而导致命令中断，可以创建一个新的 <code>screen</code> 会话窗口。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">screen</span> <span class="token parameter variable">-S</span> backup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里 <code>-S</code> 参数后面跟着的是我们给这个会话窗口的名字，这里名字是 <code>backup</code>。</p><h3 id="查看当前所有会话窗口"><a href="#查看当前所有会话窗口" class="headerlink" title="查看当前所有会话窗口"></a>查看当前所有会话窗口</h3><p>如果想要查看当前所有的 <code>screen</code> 会话窗口，可以使用下面的命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">screen</span> <span class="token parameter variable">-ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行这个命令后，你会看到类似于 <code>session_id</code> 的信息，其中包含了会话的名称和状态信息，帮助你识别和管理多个会话。</p><h3 id="退出会话窗口"><a href="#退出会话窗口" class="headerlink" title="退出会话窗口"></a>退出会话窗口</h3><p>当你完成工作，想要退出某个 <code>screen</code> 会话时，可以简单地输入：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这会结束当前的会话，并关闭相关的窗口。</p><h2 id="高级操作"><a href="#高级操作" class="headerlink" title="高级操作"></a>高级操作</h2><h3 id="在-screen-中运行命令"><a href="#在-screen-中运行命令" class="headerlink" title="在 screen 中运行命令"></a>在 screen 中运行命令</h3><p>有时候，我们希望直接在创建 <code>screen</code> 会话的同时执行某个命令，并且在该命令执行完毕后自动结束会话。可以这样做：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">screen</span> <span class="token function">vim</span> memo.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这个命令会在一个新的 <code>screen</code> 会话中打开 <code>vim</code> 编辑器编辑 <code>memo.txt</code> 文件，当你退出 <code>vim</code> 时，该 <code>screen</code> 会话也会自动结束。</p><h3 id="会话共享功能"><a href="#会话共享功能" class="headerlink" title="会话共享功能"></a>会话共享功能</h3><p><code>screen</code> 的一个强大功能是支持会话共享，意味着多个用户可以实时共享和操作同一个会话视图。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 终端 A：创建会话</span><span class="token function">screen</span> <span class="token parameter variable">-S</span> backup<span class="token comment"># 终端 B：同步终端信息</span><span class="token function">screen</span> <span class="token parameter variable">-x</span><span class="token comment"># 或者通过指定具体的 session-id 来共享会话</span><span class="token function">screen</span> <span class="token parameter variable">-x</span> <span class="token operator">&lt;</span>screen-session-id<span class="token operator">&gt;</span><span class="token comment"># 比如</span><span class="token function">screen</span> <span class="token parameter variable">-x</span> <span class="token number">364490</span>.backup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这对于协作调试和教学非常有用。</p><h3 id="重新连接断开的会话"><a href="#重新连接断开的会话" class="headerlink" title="重新连接断开的会话"></a>重新连接断开的会话</h3><p>当 <code>screen</code> 会话因为网络问题或其它原因断开时，你可以很容易地重新连接到这个会话：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">screen</span> <span class="token parameter variable">-r</span> backup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果 <code>screen</code> 提示会话状态为 Attached，说明会话仍被另一个连接占用，你可以使用下面的命令强制回收：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">screen</span> <span class="token parameter variable">-D</span> <span class="token parameter variable">-r</span> backup<span class="token comment"># 或</span><span class="token function">screen</span> <span class="token parameter variable">-D</span> <span class="token parameter variable">-r</span> <span class="token operator">&lt;</span>screen-session-id<span class="token operator">&gt;</span><span class="token comment"># 比如</span><span class="token function">screen</span> <span class="token parameter variable">-D</span> <span class="token parameter variable">-r</span> backup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><code>screen</code> 是一个强大的工具，通过它，我们可以在远程服务器上高效地管理多个会话，保证关键任务的持续运行，甚至在不同用户之间共享会话，以便于协作和教学。</p><p>使用简单的操作，却能极大地提升我们的工作效率和协作能力。</p><p>希望本文能帮助你入门并实践使用 <code>screen</code>，让你的 Linux 经验更上一层楼。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> screen </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>expect自动交互脚本：简化你的自动化任务</title>
      <link href="posts/9f8553ef.html"/>
      <url>posts/9f8553ef.html</url>
      
        <content type="html"><![CDATA[<p>在日常的 Linux 系统管理和自动化任务处理中，经常会遇到需要自动登录到服务器并执行一系列命令的情况，例如批量部署更新、监控日志等。手动操作不仅耗时耗力，而且效率低下，特别是当涉及到多台服务器时。</p><p><code>expect</code> 工具就是为了解决这类问题而生。它可以模拟键盘输入，自动化控制交互式应用程序的执行流程。</p><p>本文将从初学者的角度出发，介绍如何使用 <code>expect</code> 来简化日常的自动化任务。</p><h2 id="安装-expect"><a href="#安装-expect" class="headerlink" title="安装 expect"></a>安装 expect</h2><p>在开始之前，首先需要确保你的系统中已安装 <code>expect</code>。安装 <code>expect</code> 的步骤非常简单：</p><h3 id="CentOS-系统"><a href="#CentOS-系统" class="headerlink" title="CentOS 系统"></a>CentOS 系统</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装依赖包</span>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> tcl<span class="token comment"># 安装 expect</span>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token function">expect</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Ubuntu-系统"><a href="#Ubuntu-系统" class="headerlink" title="Ubuntu 系统"></a>Ubuntu 系统</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token function">expect</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="自动登录服务器并执行脚本"><a href="#自动登录服务器并执行脚本" class="headerlink" title="自动登录服务器并执行脚本"></a>自动登录服务器并执行脚本</h2><h3 id="基础示例"><a href="#基础示例" class="headerlink" title="基础示例"></a>基础示例</h3><p>以自动登录服务器并部罀项目的脚本为例，我们来看如何使用 <code>expect</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/usr/bin/expect -f</span><span class="token builtin class-name">set</span> user root <span class="token comment"># 这里填写账户名称</span><span class="token builtin class-name">set</span> <span class="token function">host</span> <span class="token number">127.0</span>.0.1 <span class="token comment"># 这里填写服务器 IP 地址</span><span class="token builtin class-name">set</span> password <span class="token number">123456</span> <span class="token comment"># 这里填写密码</span><span class="token builtin class-name">set</span> <span class="token function">timeout</span> <span class="token parameter variable">-1</span> <span class="token comment"># 设置超时时间永不超时，默认为 10 秒</span><span class="token comment"># 启动 ssh 命令</span>spawn <span class="token function">ssh</span> <span class="token variable">$user</span>@<span class="token variable">$host</span><span class="token function">expect</span> <span class="token string">"password:*"</span>send <span class="token string">"<span class="token variable">$password</span><span class="token entity" title="\r">\r</span>"</span><span class="token comment"># 执行目标命令</span><span class="token function">expect</span> <span class="token string">"#"</span>send <span class="token string">"cd /data/portal_api_dfo_hyperf<span class="token entity" title="\r">\r</span>"</span><span class="token function">expect</span> <span class="token string">"#"</span>send <span class="token string">"./deploy.sh<span class="token entity" title="\r">\r</span>"</span><span class="token function">expect</span> <span class="token string">"#"</span><span class="token comment"># 读取到文件结束符，表示 expect 执行结束</span><span class="token function">expect</span> eof<span class="token comment"># 进入交互模式，用户将停留在远程服务器上</span>interact<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段脚本简洁直观地展示了如何自动登录服务器并执行简单命令。</p><h3 id="获取-IP-地址"><a href="#获取-IP-地址" class="headerlink" title="获取 IP 地址"></a>获取 IP 地址</h3><p><code>expect</code> 也可以配合其他命令使用，例如获取服务器的 IP 地址：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">set</span> idcid <span class="token punctuation">[</span>exec <span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token punctuation">{</span>ifconfig eth0 <span class="token operator">|</span> <span class="token function">grep</span> Mask <span class="token operator">|</span> <span class="token function">cut</span> -d: <span class="token parameter variable">-f2</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print $1}'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过执行 shell 命令，我们可以把命令的输出赋值给 <code>expect</code> 脚本中的变量。</p><h3 id="进阶示例"><a href="#进阶示例" class="headerlink" title="进阶示例"></a>进阶示例</h3><p>进一步地，我们可以编写一个更复杂的 <code>expect</code> 脚本来实现自动连接服务器并进入 MySQL 数据库：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/usr/bin/expect -f</span><span class="token builtin class-name">set</span> <span class="token function">timeout</span> <span class="token parameter variable">-1</span>spawn <span class="token function">ssh</span> root@127.0.0.1<span class="token function">expect</span> <span class="token parameter variable">-re</span> <span class="token string">"password"</span> <span class="token punctuation">{</span> send <span class="token string">"userpwd123<span class="token entity" title="\r">\r</span>"</span> <span class="token punctuation">}</span><span class="token function">expect</span> <span class="token parameter variable">-re</span> <span class="token string">":~#"</span> <span class="token punctuation">{</span> send <span class="token string">"mysql -uroot -p123456<span class="token entity" title="\r">\r</span>"</span> <span class="token punctuation">}</span><span class="token function">expect</span> <span class="token parameter variable">-re</span> <span class="token string">"mysql&gt;"</span> <span class="token punctuation">{</span> send <span class="token string">"show databases;<span class="token entity" title="\r">\r</span>"</span> <span class="token punctuation">}</span><span class="token function">expect</span> <span class="token parameter variable">-re</span> <span class="token string">"mysql&gt;"</span> <span class="token punctuation">{</span> <span class="token builtin class-name">exit</span> <span class="token punctuation">}</span><span class="token function">expect</span> eof<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试一些其他的参数"><a href="#测试一些其他的参数" class="headerlink" title="测试一些其他的参数"></a>测试一些其他的参数</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#!/usr/bin/expect -f</span><span class="token builtin class-name">set</span> user root<span class="token builtin class-name">set</span> <span class="token function">host</span> <span class="token number">127.0</span>.0.1<span class="token builtin class-name">set</span> password <span class="token number">123456</span><span class="token builtin class-name">set</span> <span class="token function">timeout</span> <span class="token parameter variable">-1</span>spawn <span class="token function">ssh</span> <span class="token variable">$user</span>@<span class="token variable">$host</span><span class="token function">expect</span> <span class="token string">"password:*"</span>send <span class="token string">"<span class="token variable">$password</span><span class="token entity" title="\r">\r</span>"</span>send_user <span class="token string">"Now! we will deploy the project of portal_api_dfo_hyperf<span class="token entity" title="\r">\r</span>"</span>  <span class="token comment"># 打印信息，类似 echo</span><span class="token builtin class-name">set</span> tt <span class="token punctuation">[</span>exec <span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token punctuation">{</span>echo <span class="token number">1212123</span><span class="token punctuation">}</span><span class="token punctuation">]</span>  <span class="token comment">#   执行 shell 语句</span>puts <span class="token string">"<span class="token variable">$tt</span>"</span>  <span class="token comment"># 打印信息，类似 echo</span><span class="token function">expect</span> <span class="token string">"#"</span>send <span class="token string">"cd /data/portal_api_dfo_hyperf<span class="token entity" title="\r">\r</span>"</span><span class="token function">expect</span> <span class="token string">"#"</span>send <span class="token string">"./deploy.sh<span class="token entity" title="\r">\r</span>"</span><span class="token function">expect</span> <span class="token string">"Detected an available cache, skip the vendor scan process"</span><span class="token function">sleep</span> <span class="token number">10</span>  <span class="token comment"># 脚本进入睡眠</span>send <span class="token string">"<span class="token entity" title="\003">\003</span>"</span> <span class="token comment"># 如果想向远端发送 Ctrl-C 结束远端进程</span><span class="token builtin class-name">exit</span>  <span class="token comment"># 退出</span><span class="token comment">#interact</span><span class="token function">expect</span> eof<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="支持登录多台服务器的脚本"><a href="#支持登录多台服务器的脚本" class="headerlink" title="支持登录多台服务器的脚本"></a>支持登录多台服务器的脚本</h2><p>在管理多台服务器时，可以通过编写一个脚本来选择性登录不同的服务器：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token builtin class-name">echo</span> <span class="token string">"1. 阿里云"</span><span class="token builtin class-name">echo</span> <span class="token string">"2. 百度云"</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"选择要登录的服务器: "</span><span class="token builtin class-name">read</span> choose<span class="token keyword">case</span> <span class="token variable">$choose</span> <span class="token keyword">in</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token function">expect</span> <span class="token parameter variable">-c</span> <span class="token string">'  set timeout -1  spawn ssh root@服务器IP地址  expect {          "yes/no"  {send "yes\r"; exp_continue}          "*assword"  {send "服务器密码\r"}      }  interact  expect eof  '</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段脚本使用了 bash 和 <code>expect</code> 的混合编程，使得根据用户输入，自动选择并登录到不同的服务器。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>expect</code> 是一个非常强大的自动化工具，可以模拟用户的键盘输入操作，帮助我们自动化执行各种交互式命令。通过本文的介绍，你应该已经对如何使用 <code>expect</code> 有了基本的了解。</p><p>实际上，<code>expect</code> 的应用场景非常丰富，掌握了这个工具，你将能够大大提升你的工作效率。希望这篇文章能对你有所帮助！</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> expect </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSH安全远程登录与端口转发</title>
      <link href="posts/af7eff68.html"/>
      <url>posts/af7eff68.html</url>
      
        <content type="html"><![CDATA[<p>在今天这个云计算盛行的时代，SSH（Secure Shell）几乎成了每个开发者必备技能之一。SSH 不仅可以让我们安全地远程登录到服务器，执行操作，还支持如文件传输、端口转发等高级功能。</p><p>本文将用浅显易懂的语言，带你深入了解 SSH 的两个常用功能：<strong>使用密钥登录</strong>和<strong>通过 SSH 实现端口转发</strong>。</p><h2 id="使用密钥登录"><a href="#使用密钥登录" class="headerlink" title="使用密钥登录"></a>使用密钥登录</h2><p>传统上，我们习惯使用用户名和密码进行 SSH 登录。但在安全性要求更高的环境下，使用密钥登录是更推荐的选择。</p><p>首先，我们需要在客户端生成一对密钥（一个公开的「公钥」和一个私有的「私钥」）。接下来，将公钥配置到服务器上，然后利用客户端的私钥进行认证登录。这样，即使有人知道了我们的服务器 IP 和用户，没有私钥也无法登录。</p><h3 id="首次设置和登录"><a href="#首次设置和登录" class="headerlink" title="首次设置和登录"></a>首次设置和登录</h3><ol><li><p><strong>生成密钥对</strong> (如果已有密钥对可跳过此步骤)。</p><p>打开终端运行：</p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li><p><strong>登录到你的服务器</strong> ，并将公钥内容添加到 <code>~/.ssh/authorized_keys</code> 中。</p></li><li><p><strong>使用密钥登录</strong>：</p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> root@<span class="token punctuation">{</span>你的服务器公网 IP<span class="token punctuation">}</span> <span class="token parameter variable">-i</span> ~/.ssh/<span class="token operator">&lt;</span>your-pem-name<span class="token operator">&gt;</span>.pem<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的  <code>-i</code> 参数用于指定私钥文件的路径。</p><p>为简化登录过程，我们可以编辑 ssh 配置文件：</p><p>在客户端编辑 <code>vim ~/.ssh/config</code> 文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># PubkeyAuthentication yes 代表使用密钥方式登录</span><span class="token comment"># IdentityFile 用于指定密钥文件路径</span>Host <span class="token punctuation">{</span>你的云服务器公网 IP<span class="token punctuation">}</span>    PubkeySerialization <span class="token function">yes</span>    IdentificationFile ~/.ssh/<span class="token operator">&lt;</span>your-pem-name<span class="token operator">&gt;</span>.pem<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置后，直接使用下面的命令登录：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> root@<span class="token punctuation">{</span>你的云服务器公网 IP<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="通过-SSH-实现端口转发"><a href="#通过-SSH-实现端口转发" class="headerlink" title="通过 SSH 实现端口转发"></a>通过 SSH 实现端口转发</h2><p>在进行数据分析、Web 开发等场景时，我们经常需要将远程服务器上的服务端口映射到本地端口，以便本地访问。SSH 的端口转发功能让这一需求得以简单实现。</p><h3 id="端口转发的基本用法"><a href="#端口转发的基本用法" class="headerlink" title="端口转发的基本用法"></a>端口转发的基本用法</h3><p>假设你想要访问位于 <code>192.168.0.101</code> 服务器上的 <code>9200</code> 端口的服务，可以通过 SSH 将该端口映射到本地机器的 <code>9201</code> 端口上：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token parameter variable">-L</span> <span class="token parameter variable">-N</span> <span class="token number">9201</span>:0.0.0.0:9200 alex@192.168.0.101<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的 <code>-L</code> 参数指定了本地端口转发，<code>-N</code> 参数表示不执行远程命令。</p><h3 id="端口转发的高级用法"><a href="#端口转发的高级用法" class="headerlink" title="端口转发的高级用法"></a>端口转发的高级用法</h3><p>如果 SSH 服务的默认端口 <code>22</code> 被更改了，比如改为了 <code>2202</code>，你可以通过 <code>-p</code> 参数指定 SSH 连接的端口：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token parameter variable">-L</span> <span class="token parameter variable">-N</span> <span class="token number">9201</span>:0.0.0.0:9200 <span class="token parameter variable">-p</span> <span class="token number">2202</span> alex@192.168.0.101<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="端口转发的应用场景"><a href="#端口转发的应用场景" class="headerlink" title="端口转发的应用场景"></a>端口转发的应用场景</h3><p>端口转发可以用于多种场景，比如：</p><ul><li>访问位于内网中的数据库或 Web 服务。</li><li>绕过防火墙访问某些服务。</li><li>为远程服务提供一个安全的本地访问点。</li></ul><p>通过上面的分享，相信你已经对 SSH 的密钥登录和端口转发功能有了初步的了解。这两个功能在日常开发中非常有用，掌握它们将大大提高你的工作效率。</p><p>记住，实践是学习的捷径。不妨亲自动手尝试一下，实操中你会有更深的领悟。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>知道这几个Linux组合命令，效率大大提升！</title>
      <link href="posts/d9e9c80b.html"/>
      <url>posts/d9e9c80b.html</url>
      
        <content type="html"><![CDATA[<p>在日常的服务器管理和问题诊断过程中，Linux 命令行工具提供了强大的支持。本文通过几个常用的示例，介绍如何快速定位问题、监控服务器性能。</p><p>无论你是编程新手还是有一定经验的开发者，理解和掌握这些命令，都将在你的工作中大放异彩。</p><h2 id="监控网络请求"><a href="#监控网络请求" class="headerlink" title="监控网络请求"></a>监控网络请求</h2><h3 id="查找-80-端口请求数最高的前-20-个-IP"><a href="#查找-80-端口请求数最高的前-20-个-IP" class="headerlink" title="查找 80 端口请求数最高的前 20 个 IP"></a>查找 80 端口请求数最高的前 20 个 IP</h3><p>当我们的服务器响应慢或者网络流量异常时，第一步往往是检查哪些客户端正在频繁访问我们的服务。以下命令可以帮助我们迅速定位到请求数最高的前 20 个 IP 地址。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> -anlp<span class="token operator">|</span><span class="token function">grep</span> <span class="token number">80</span><span class="token operator">|</span><span class="token function">grep</span> tcp<span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print $5}'</span><span class="token operator">|</span><span class="token function">awk</span> -F: <span class="token string">'{print $1}'</span><span class="token operator">|</span><span class="token function">sort</span><span class="token operator">|</span><span class="token function">uniq</span> -c<span class="token operator">|</span><span class="token function">sort</span> -nr<span class="token operator">|</span><span class="token function">head</span> <span class="token parameter variable">-n20</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>netstat -anlp</code> 显示系统中所有连接的状态。</li><li><code>grep 80</code> 筛选出与 80 端口相关的连接。</li><li><code>awk '{print $5}'</code> 获取远程地址和端口。</li><li><code>sort|uniq -c|sort -nr</code> 对 IP 地址计数并降序排列。</li></ul><p>这个命令对于发现潜在的 DDoS 攻击尝试是非常有用的。</p><h2 id="分析-TCP-连接状态"><a href="#分析-TCP-连接状态" class="headerlink" title="分析 TCP 连接状态"></a>分析 TCP 连接状态</h2><h3 id="查看-TCP-连接状态"><a href="#查看-TCP-连接状态" class="headerlink" title="查看 TCP 连接状态"></a>查看 TCP 连接状态</h3><p>理解服务器上当前 TCP 连接的状态对于排查网络问题是非常有帮助的。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> <span class="token parameter variable">-nat</span> <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'{print $6}'</span><span class="token operator">|</span><span class="token function">sort</span><span class="token operator">|</span><span class="token function">uniq</span> -c<span class="token operator">|</span><span class="token function">sort</span> <span class="token parameter variable">-rn</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该命令用于统计每种连接状态的数量，帮助我们快速了解服务器网络连接的状况。</p><h2 id="CPU-和内存使用情况"><a href="#CPU-和内存使用情况" class="headerlink" title="CPU 和内存使用情况"></a>CPU 和内存使用情况</h2><h3 id="找出当前系统-CPU-使用量较高的进程"><a href="#找出当前系统-CPU-使用量较高的进程" class="headerlink" title="找出当前系统 CPU 使用量较高的进程"></a>找出当前系统 CPU 使用量较高的进程</h3><p>当你发现服务器反应慢或者负载高时，第一步往往是查看哪个进程正在使用大量 CPU 资源。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> <span class="token parameter variable">-aux</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-rnk</span> <span class="token number">3</span> <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-20</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该命令会列出 CPU 使用量最高的前 20 个进程，帮助你快速定位问题进程。</p><h3 id="找出当前系统内存使用量较高的进程"><a href="#找出当前系统内存使用量较高的进程" class="headerlink" title="找出当前系统内存使用量较高的进程"></a>找出当前系统内存使用量较高的进程</h3><p>类似于 CPU 使用情况，查看内存使用最高的进程也同样重要。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> <span class="token parameter variable">-aux</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-rnk</span> <span class="token number">4</span> <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-20</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这条命令能帮助我们找到内存“大户”。</p><h2 id="文件查找和打包"><a href="#文件查找和打包" class="headerlink" title="文件查找和打包"></a>文件查找和打包</h2><h3 id="找出当前机器上所有以-conf-结尾的文件，并压缩打包"><a href="#找出当前机器上所有以-conf-结尾的文件，并压缩打包" class="headerlink" title="找出当前机器上所有以 .conf 结尾的文件，并压缩打包"></a>找出当前机器上所有以 .conf 结尾的文件，并压缩打包</h3><p>对配置文件的管理是服务器维护工作中的一个重要方面。以下命令可以帮助我们找到所有的 <code>.conf</code> 配置文件，并将其打包备份。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / <span class="token parameter variable">-name</span> *.conf <span class="token parameter variable">-type</span> f <span class="token parameter variable">-print</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">tar</span> cjf test.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>find / -name *.conf -type f</code> 在整个根目录下查找所有以 <code>.conf</code> 结尾的文件。</li><li><code>xargs tar cjf test.tar.gz</code> 将找到的文件打包并压缩为 <code>test.tar.gz</code>。</li></ul><p>以上命令，无论对初学者还是经验丰富的开发者，都是极其有用的日常工具。理解并熟练运用它们，将有助于你高效地解决服务器运维中的各种问题。</p><p>希望本文的内容能够帮助到你，让你在 Linux 系统的使用过程中如鱼得水。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP中常用的设计模式</title>
      <link href="posts/e0806fd7.html"/>
      <url>posts/e0806fd7.html</url>
      
        <content type="html"><![CDATA[<ol><li>创建型模式<br>单例模式、工厂模式、简单工厂模式、抽象工厂模式、建造者模式、原型模式</li><li>结构型模式<br>适配器模式、组合模式、代理模式、外观模式、装饰器模式、桥接模式、享元模式</li><li>行为型模式<br>观察者模式、迭代子模式、策略模式、命令模式、模板方法模式、责任链模式、备忘录模式、状态模式、访问者模式、中介者模式、注册模式</li></ol><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><ul><li>什么是单例模式？<br>单例模式通俗定义，一个类只有一个实例。而且是内部自行实例化并向整个系统全局地提供这个实例。它不会创建实例副本，而是返回单例类内部存储的实例一个引用。</li></ul><blockquote><p>上面的代码用静态变量 实现了单例模式和创建单例的静态方法 getInstance(). 请注意以下几点：</p><ul><li>构造函数 __construct() 被声明为 protected 是为了防止用 new 操作符在这个类之外创建新的实例。</li><li>魔术方法 __clone() 被声明为 private 是为了防止用 clone 操作符克隆出新的实例.</li><li>魔术方法 __wakeup() 被声明为 private 是为了防止通过全局函数 unserialize() 反序列化这个类的实例。</li><li>新的实例是用过静态方法 getInstance() 使用后期静态绑定生成的。这允许我们对 Singleton 类进行继承，并且在取得 SingletonChild 的单例时不会出现问题。<br>  单例模式是非常有用的，特别是我们需要确保在整个请求的声明周期内只有一个实例存在。典型的应用场景是，当我们有一个全局的对象（比如配置类）或一个共享的资源（比如事件队列）时。</li></ul><p>你应该非常小心地使用单例模式，因为它非常自然地引入了全局状态到你的应用中，降低了可测试性。 在大多数情况下，依赖注入可以（并且应该）代替单例类。 使用依赖注入意味着我们不会在设计应用时引入不必要的耦合，因为对象使用共享的或全局的资源，不再需要耦合具体的类。</p></blockquote><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/** *  我们如何来写一个属于自己的单例类呢？ *  写一个单例类是否有什么规则可寻？ *  1.有一个静态成员变量来保存类的唯一实例 *  2.构造函数和克隆函数必须申明为私有的（防止外部程序能通过 new 关键字进行创建对象） *  3.公共的静态方法可以访问类的实例作为一个引用返回 *  4.只能实例化一次 */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Obj</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token variable">$_Ins</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">str</span> <span class="token operator">=</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">__clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token variable">$_Ins</span> <span class="token keyword">instanceof</span> <span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token variable">$_Ins</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token variable">$_Ins</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token class-name static-context">Obj</span><span class="token operator">::</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token class-name static-context">Obj</span><span class="token operator">::</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br/&gt;&lt;hr/&gt;'</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br/&gt;&lt;hr/&gt;'</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">===</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>或者采用 ci 框架比较古老的单例方法<span class="token operator">&lt;</span><span class="token operator">?</span>php<span class="token keyword">class</span> <span class="token class-name-definition class-name">ClassName</span><span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token variable">$instance</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">// 运用了 $this 因此下面调用的时候必须先实例化</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token variable">$instance</span> <span class="token operator">=</span><span class="token operator">&amp;</span> <span class="token variable">$this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token operator">&amp;</span><span class="token function">get_instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token variable">$instance</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$aa</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassName</span><span class="token punctuation">;</span><span class="token variable">$bb</span> <span class="token operator">=</span> <span class="token class-name static-context">ClassName</span><span class="token operator">::</span><span class="token function">get_instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$cc</span> <span class="token operator">=</span> <span class="token class-name static-context">ClassName</span><span class="token operator">::</span><span class="token function">get_instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;pre&gt;'</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$aa</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;pre&gt;'</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$bb</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;pre&gt;'</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$cc</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><ul><li>什么是策略模式？<br>定义了算法家族，分别封装起来，让它们之间可以相互替换，此模式让算法的变化不会影响到使用算法的用户。使用策略模式可以实现 Ioc、依赖倒置、控制反转<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/** * 策略模式 * 需求：同样一份数据需要导出不同的格式 */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">DataModel</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$writer</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$writer</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">writer</span> <span class="token operator">=</span> <span class="token variable">$writer</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">export</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'This is first'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'This is second'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'This is third'</span><span class="token punctuation">]</span>        <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">writer</span><span class="token operator">-&gt;</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">Writer</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$_file</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">_file</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 强制要求子类定义 write 方法</span>    <span class="token keyword">abstract</span> <span class="token keyword">function</span> <span class="token function-definition function">write</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 以 CSV 格式写入数据 */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">CsvWriter</span> <span class="token keyword">extends</span> <span class="token class-name">Writer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">write</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$fp</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">_file</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$data</span> <span class="token keyword">as</span> <span class="token variable">$row</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">fputcsv</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> <span class="token variable">$row</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">/** * 以 Html 格式写入数据 */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">HtmlWriter</span> <span class="token keyword">extends</span> <span class="token class-name">Writer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">write</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$fp</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">_file</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'&lt;table&gt;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$data</span> <span class="token keyword">as</span> <span class="token variable">$row</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'&lt;tr&gt;&lt;td&gt;'</span> <span class="token operator">.</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'&lt;/td&gt;&lt;td&gt;'</span><span class="token punctuation">,</span> <span class="token variable">$row</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;/td&gt;&lt;/tr&gt;\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'&lt;/table&gt;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$model</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataModel</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CsvWriter</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'D:\test.csv'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$model</span><span class="token operator">-&gt;</span><span class="token function">export</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php">/** * * 需求：假如一个电商网站系统，针对男性女性用户要各自跳转到不同的商品类目，并且所有广告位展示不同的广告 */  // UserStrategy.php  <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">IMooc</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name-definition class-name">UserStrategy</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function-definition function">showAd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">showCategory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// FemaleUserStrategy.php</span><span class="token operator">&lt;</span><span class="token operator">?</span>php<span class="token keyword">namespace</span> <span class="token package">IMooc</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">FemaleUserStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">UserStrategy</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function-definition function">showAd</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'2014新款女装'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function-definition function">showCategory</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'女装'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// MaleUserStrategy.php</span><span class="token operator">&lt;</span><span class="token operator">?</span>php<span class="token keyword">namespace</span> <span class="token package">IMooc</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">MaleUserStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">UserStrategy</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function-definition function">showAd</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'2014男装秀'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function-definition function">showCategory</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'男装'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 调用</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Page</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$strategy</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">index</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'AD:'</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">strategy</span><span class="token operator">-&gt;</span><span class="token function">showAd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br/&gt;'</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'Category:'</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">strategy</span><span class="token operator">-&gt;</span><span class="token function">showCategory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function-definition function">setStrategy</span> <span class="token punctuation">(</span><span class="token class-name class-name-fully-qualified type-declaration"><span class="token punctuation">\</span>IMooc<span class="token punctuation">\</span>UserStrategy</span> <span class="token variable">$strategy</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">strategy</span> <span class="token operator">=</span> <span class="token variable">$strategy</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$page</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Page</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'female'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$strategy</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>IMooc<span class="token punctuation">\</span>FemaleUserStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token variable">$strategy</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>IMooc<span class="token punctuation">\</span>MaleUserStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$page</span><span class="token operator">-&gt;</span><span class="token function">setStrategy</span><span class="token punctuation">(</span><span class="token variable">$strategy</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$page</span><span class="token operator">-&gt;</span><span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><ul><li>什么是观察者模式？<br>定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己。</li></ul><p>应用场景：一个事件发生后，要执行一连串更新操作。传统的编程方式，就是在事件的代码之后直接加入处理逻辑。当更新的逻辑增多之后，代码会变得难以维护。这种方式是耦合的，侵入式的，增加新的逻辑需要修改事件主体的代码。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php">// EventGenerator.php 中<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">IMooc</span><span class="token punctuation">;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">EventGenerator</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$observers</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 添加观察者</span>    <span class="token keyword">function</span> <span class="token function-definition function">addObserver</span> <span class="token punctuation">(</span><span class="token class-name type-declaration">Observer</span> <span class="token variable">$observer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">observers</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$observer</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 调用每一个观察者的 update 方法</span>    <span class="token keyword">function</span> <span class="token function-definition function">notify</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">observers</span> <span class="token keyword">as</span> <span class="token variable">$observer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$observer</span><span class="token operator">-&gt;</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Observer.php 中</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">IMooc</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name-definition class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function-definition function">update</span> <span class="token punctuation">(</span><span class="token variable">$envent_info</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用观察者</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Event</span> <span class="token keyword">extends</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>IMooc<span class="token punctuation">\</span>EventGenerator</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function-definition function">trigger</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 观察者1</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Observer1</span> <span class="token keyword">implements</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>IMooc<span class="token punctuation">\</span>Observer</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function-definition function">update</span> <span class="token punctuation">(</span><span class="token variable">$event_info</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"逻辑1&lt;br /&gt; \n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 观察者2</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Observer2</span> <span class="token keyword">implements</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>IMooc<span class="token punctuation">\</span>Observer</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function-definition function">update</span> <span class="token punctuation">(</span><span class="token variable">$event_info</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"逻辑2&lt;br /&gt; \n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$event</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Event</span><span class="token punctuation">;</span><span class="token variable">$event</span><span class="token operator">-&gt;</span><span class="token function">addObserver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Observer1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$event</span><span class="token operator">-&gt;</span><span class="token function">addObserver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Observer2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$event</span><span class="token operator">-&gt;</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><ul><li>什么是工厂模式？<br>工厂方法或者类生成对象，而不是在代码中直接 new，好处在于改动一个类的名称或者参数时，只需要改动一个地方<pre class="line-numbers language-php" data-language="php"><code class="language-php">// Factory.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">IMooc</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Factory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">createDatabase</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 在这里 实例化需要用到的对象</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>外部调用时</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token class-name class-name-fully-qualified static-context">IMooc<span class="token punctuation">\</span>Factory</span><span class="token operator">::</span><span class="token function">createDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="注册树模式"><a href="#注册树模式" class="headerlink" title="注册树模式"></a>注册树模式</h3><ul><li>什么是注册树模式？<br>解决全局共享和交换对象</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php">// Register.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">IMooc</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Register</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token variable">$objects</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 注册实例     * @param [type] $alias  实例别名     * @param [type] $object 实例对象     */</span>    <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">set</span> <span class="token punctuation">(</span><span class="token variable">$alias</span><span class="token punctuation">,</span> <span class="token variable">$object</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token variable">$objects</span><span class="token punctuation">[</span><span class="token variable">$alias</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$object</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 获取对象实例</span>    <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">get</span> <span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token variable">$objects</span><span class="token punctuation">[</span><span class="token variable">$name</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 删除对象实例</span>    <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">_unset</span> <span class="token punctuation">(</span><span class="token variable">$alias</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token variable">$objects</span><span class="token punctuation">[</span><span class="token variable">$alias</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以放在工厂文件中之后再在其他地方调用</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// Factory.php 中设置</span><span class="token class-name static-context">Register</span><span class="token operator">::</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'db'</span><span class="token punctuation">,</span> <span class="token class-name static-context">Database</span><span class="token operator">::</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 其它文件中调用</span><span class="token variable">$db</span> <span class="token operator">=</span> <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>IMooc<span class="token punctuation">\</span>Register</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'db'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><ul><li>什么是适配器模式？</li></ul><ol><li>适配器模式，可以将截然不同的函数接口封装成统一的API；</li><li>实际应用举例，PHP的数据库操作有mysql，mysqli，pdo 3种，可以用适配器模式统一成一致。类似的场景还有 cache 适配器，将 memcache，redis，file，apc等不同的缓存函数，统一成一致。<pre class="line-numbers language-php" data-language="php"><code class="language-php">// Database.php 文件中<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">IMooc</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name-definition class-name">IDatabase</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function-definition function">connect</span> <span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">,</span> <span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token variable">$passwd</span><span class="token punctuation">,</span> <span class="token variable">$dbname</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Database</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token variable">$db</span><span class="token punctuation">;</span>    <span class="token comment">// 获取对象实例</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token variable">$db</span> <span class="token keyword">instanceof</span> <span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token variable">$db</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token variable">$db</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">__clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">where</span><span class="token punctuation">(</span><span class="token variable">$where</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">order</span><span class="token punctuation">(</span><span class="token variable">$order</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">limit</span><span class="token punctuation">(</span><span class="token variable">$limit</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>IMooc\Database\PDO.php 文件中<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">IMooc<span class="token punctuation">\</span>Database</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">IMooc<span class="token punctuation">\</span>IDatabase</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">PDO</span> <span class="token keyword">implements</span> <span class="token class-name">IDatabase</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$conn</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">connect</span> <span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">,</span> <span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token variable">$passwd</span><span class="token punctuation">,</span> <span class="token variable">$dbname</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">conn</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>PDO</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"mysql:host=<span class="token interpolation"><span class="token variable">$host</span></span>;dbname=<span class="token interpolation"><span class="token variable">$dbname</span></span>"</span><span class="token punctuation">,</span> <span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token variable">$passwd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function-definition function">query</span> <span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">conn</span><span class="token operator">-&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function-definition function">close</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>调用<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$db</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">IMooc<span class="token punctuation">\</span>Database<span class="token punctuation">\</span>PDO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$db</span><span class="token operator">-&gt;</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'root'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'123456'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'show databases'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$db</span><span class="token operator">-&gt;</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="数据对象映射模式"><a href="#数据对象映射模式" class="headerlink" title="数据对象映射模式"></a>数据对象映射模式</h3><ul><li>什么是数据对象映射模式？</li></ul><ol><li>数据对象映射模式，是将对象和数据存储映射起来，对一个对象的操作会映射为对数据存储的操作。</li></ol><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">IMooc</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$id</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$phone</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$regtime</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$db</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__construct</span> <span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">db</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>IMooc<span class="token punctuation">\</span>Database<span class="token punctuation">\</span>MySQLi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">db</span><span class="token operator">-&gt;</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'root'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'123456'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">db</span><span class="token operator">-&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'select * from user limit 1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$res</span><span class="token operator">-&gt;</span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">id</span> <span class="token operator">=</span> <span class="token variable">$id</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">phone</span> <span class="token operator">=</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'phone'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">regtime</span> <span class="token operator">=</span> <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'regtime'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 运用析构函数的特性实现更新操作</span>    <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">db</span><span class="token operator">-&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"update user set name = '<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">name</span><span class="token punctuation">}</span></span>',            phone = '<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">phone</span><span class="token punctuation">}</span></span>',regtime = '<span class="token interpolation"><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">regtime</span></span>'              where id = '<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">id</span><span class="token punctuation">}</span></span>' limit 1 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$user</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>IMooc<span class="token punctuation">\</span>User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token property">phone</span> <span class="token operator">=</span> <span class="token number">18502728040</span><span class="token punctuation">;</span><span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token property">name</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'张三'</span><span class="token punctuation">;</span><span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token property">regtime</span> <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><ul><li>什么是原型模式？</li></ul><ol><li>与工厂模式作用类似，都是用来创建对象。</li><li>与工厂模式的实现不同，原型模式是先创建好一个原型对象，然后通过 clone 原型对象来创建新的对象。这样就免去了类创建时重复的初始化操作。</li><li>原型模式适用于大对象的创建。创建一个大对象需要很大的开销，如果每次 new 就会消耗很大，原型模式仅需内存拷贝即可。</li></ol><p>传统写法</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// 实例化画布对象</span><span class="token variable">$canvas1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">IMooc<span class="token punctuation">\</span>Canvas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 初始化画布操作</span><span class="token variable">$canvas1</span><span class="token operator">-&gt;</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 对画布1进行绘制</span><span class="token variable">$canvas1</span><span class="token operator">-&gt;</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$canvas1</span><span class="token operator">-&gt;</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 实例化画布对象</span><span class="token variable">$canvas2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">IMooc<span class="token punctuation">\</span>Canvas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 初始化画布操作</span><span class="token variable">$canvas2</span><span class="token operator">-&gt;</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 对画布2进行绘制</span><span class="token variable">$canvas1</span><span class="token operator">-&gt;</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$canvas2</span><span class="token operator">-&gt;</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用原型模式</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// 实例化画布对象</span><span class="token variable">$prototype</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">IMooc<span class="token punctuation">\</span>Canvas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 初始化画布操作</span><span class="token variable">$prototype</span><span class="token operator">-&gt;</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$canvas1</span> <span class="token operator">=</span> <span class="token keyword">clone</span> <span class="token variable">$prototype</span><span class="token punctuation">;</span><span class="token comment">// 对画布1进行绘制</span><span class="token variable">$canvas1</span><span class="token operator">-&gt;</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$canvas1</span><span class="token operator">-&gt;</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$canvas2</span> <span class="token operator">=</span> <span class="token keyword">clone</span> <span class="token variable">$prototype</span><span class="token punctuation">;</span><span class="token comment">// 对画布2进行绘制</span><span class="token variable">$canvas2</span><span class="token operator">-&gt;</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$canvas2</span><span class="token operator">-&gt;</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h3><ol><li>装饰器模式（Decorator），可以动态地添加修改类的功能。</li><li>一个类提供了一项功能，如果要在修改并添加额外的功能，传统的编程模式，需要写一个子类继承它，并重新实现类的方法。</li><li>使用装饰器模式，仅需要在运行时添加一个装饰器对象即可实现，可以实现最大的灵活性。</li></ol><p>IMooc\Canvas.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">IMooc</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Canvas</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$data</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 保存装饰器     *     * @var array     */</span>    <span class="token keyword">protected</span> <span class="token variable">$decorators</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 初始化画布     *     * @param int $width     * @param int $height     */</span>    <span class="token keyword">function</span> <span class="token function-definition function">init</span><span class="token punctuation">(</span><span class="token variable">$width</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token variable">$height</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$height</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$j</span> <span class="token operator">&lt;</span> <span class="token variable">$width</span><span class="token punctuation">;</span> <span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'*'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">data</span> <span class="token operator">=</span> <span class="token variable">$data</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 添加装饰器     *     * @param DrawDecorator $decorator     */</span>    <span class="token keyword">function</span> <span class="token function-definition function">addDecorator</span><span class="token punctuation">(</span><span class="token class-name type-declaration">DrawDecorator</span> <span class="token variable">$decorator</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">decorators</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$decorator</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 画画前的调用方法     */</span>    <span class="token keyword">function</span> <span class="token function-definition function">beforeDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">decorators</span> <span class="token keyword">as</span> <span class="token variable">$decorator</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$decorator</span><span class="token operator">-&gt;</span><span class="token function">beforeDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 画画后的调用方法     */</span>    <span class="token keyword">function</span> <span class="token function-definition function">afterDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">// 需要进行反转，beforeDraw 方法是先进，afterDraw 方法是先出  （先进先出，后进后出）</span>        <span class="token variable">$decorators</span> <span class="token operator">=</span> <span class="token function">array_reverse</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">decorators</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$decorators</span> <span class="token keyword">as</span> <span class="token variable">$decorator</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$decorator</span><span class="token operator">-&gt;</span><span class="token function">afterDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 画画     */</span>    <span class="token keyword">function</span> <span class="token function-definition function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">beforeDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">data</span> <span class="token keyword">as</span> <span class="token variable">$line</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$line</span> <span class="token keyword">as</span> <span class="token variable">$char</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token variable">$char</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br /&gt;\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">afterDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function-definition function">rect</span><span class="token punctuation">(</span><span class="token variable">$a1</span><span class="token punctuation">,</span> <span class="token variable">$a2</span><span class="token punctuation">,</span> <span class="token variable">$b1</span><span class="token punctuation">,</span> <span class="token variable">$b2</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">data</span> <span class="token keyword">as</span> <span class="token variable">$k1</span> <span class="token operator">=&gt;</span> <span class="token variable">$line</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$k1</span> <span class="token operator">&lt;</span> <span class="token variable">$a1</span> <span class="token keyword">or</span> <span class="token variable">$k1</span> <span class="token operator">&gt;</span> <span class="token variable">$a2</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$line</span> <span class="token keyword">as</span> <span class="token variable">$k2</span> <span class="token operator">=&gt;</span> <span class="token variable">$char</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$k2</span> <span class="token operator">&lt;</span> <span class="token variable">$b1</span> <span class="token keyword">or</span> <span class="token variable">$k2</span> <span class="token operator">&gt;</span> <span class="token variable">$b2</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">data</span><span class="token punctuation">[</span><span class="token variable">$k1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$k2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'&amp;nbsp;'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>IMooc\DrawDecorator.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">IMooc</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name-definition class-name">DrawDecorator</span><span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function-definition function">beforeDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">afterDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>IMooc\ColorDrawDecorator.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">IMooc</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ColorDrawDecorator</span> <span class="token keyword">implements</span> <span class="token class-name">DrawDecorator</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$color</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$color</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'red'</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">color</span> <span class="token operator">=</span> <span class="token variable">$color</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function-definition function">beforeDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;div style='color: <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">color</span><span class="token punctuation">}</span></span>;'&gt;"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function-definition function">afterDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/div&gt;"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>IMooc\SizeDrawDecorator.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">IMooc</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">SizeDrawDecorator</span> <span class="token keyword">implements</span> <span class="token class-name">DrawDecorator</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$size</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$size</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'14px'</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">size</span> <span class="token operator">=</span> <span class="token variable">$size</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function-definition function">beforeDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;div style='font-size: <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">size</span><span class="token punctuation">}</span></span>;'&gt;"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function-definition function">afterDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/div&gt;"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$canvas</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>IMooc<span class="token punctuation">\</span>Canvas</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$canvas</span><span class="token operator">-&gt;</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$canvas</span><span class="token operator">-&gt;</span><span class="token function">addDecorator</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>IMooc<span class="token punctuation">\</span>ColorDrawDecorator</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'green'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// $canvas-&gt;addDecorator(new \IMooc\SizeDrawDecorator('10px'));</span><span class="token variable">$canvas</span><span class="token operator">-&gt;</span><span class="token function">rect</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$canvas</span><span class="token operator">-&gt;</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><ol><li>迭代器模式，在不需要了解内部实现的前提下，遍历一个聚合对象的内部元素。</li><li>相比于传统的编程模式，迭代器模式可以隐藏遍历元素的所需的操作。</li></ol><p>IMooc\AllUser.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">IMooc</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">AllUser</span> <span class="token keyword">implements</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>Iterator</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$ids</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$index</span><span class="token punctuation">;</span>  <span class="token comment">// 迭代器的当前位置</span>    <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$db</span> <span class="token operator">=</span> <span class="token class-name static-context">Factory</span><span class="token operator">::</span><span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"select id from user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">ids</span> <span class="token operator">=</span> <span class="token variable">$result</span><span class="token operator">-&gt;</span><span class="token function">fetch_all</span><span class="token punctuation">(</span><span class="token constant">MYSQLI_ASSOC</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 当前元素</span>    <span class="token keyword">function</span> <span class="token function-definition function">current</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">ids</span><span class="token punctuation">[</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">index</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 获取指定 id 的用户信息</span>        <span class="token keyword">return</span> <span class="token class-name static-context">Factory</span><span class="token operator">::</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 下一个元素</span>    <span class="token keyword">function</span> <span class="token function-definition function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">index</span> <span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 是否还有下一个元素</span>    <span class="token keyword">function</span> <span class="token function-definition function">valid</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">index</span> <span class="token operator">&lt;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">ids</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 重置迭代器</span>    <span class="token keyword">function</span> <span class="token function-definition function">rewind</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">index</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 获取当前的位置</span>    <span class="token keyword">function</span> <span class="token function-definition function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">index</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// 所有的用户信息</span><span class="token variable">$users</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>IMooc<span class="token punctuation">\</span>AllUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$users</span> <span class="token keyword">as</span> <span class="token variable">$user</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><ol><li>在客户端与实体之间建立一个代理对象 （proxy），客户端对实体进行操作全部委派给代理对象，隐藏实体的具体实现细节。</li><li>proxy 还可以与业务代码分离，部署到另外的服务器。业务代码中通过 RPC 来委派任务。</li></ol><p>IMooc\Proxy.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">IMooc</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Proxy</span> <span class="token keyword">implements</span> <span class="token class-name">IUserProxy</span><span class="token punctuation">{</span>    <span class="token comment">// 从数据库用于 读取 操作</span>    <span class="token keyword">function</span> <span class="token function-definition function">getUserName</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$db</span> <span class="token operator">=</span> <span class="token class-name static-context">Factory</span><span class="token operator">::</span><span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'slave'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$db</span><span class="token operator">-&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"select name from user where id =<span class="token interpolation"><span class="token variable">$id</span></span> limit 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 主数据库用于 更新 操作</span>    <span class="token keyword">function</span> <span class="token function-definition function">setUserName</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$db</span> <span class="token operator">=</span> <span class="token class-name static-context">Factory</span><span class="token operator">::</span><span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'master'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$db</span><span class="token operator">-&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"update user set name = <span class="token interpolation"><span class="token variable">$name</span></span> where id =<span class="token interpolation"><span class="token variable">$id</span></span> limit 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>IMooc\IUserProxy.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">IMooc</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name-definition class-name">IUserProxy</span><span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function-definition function">getUserName</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function-definition function">setUserName</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$proxy</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>IMooc<span class="token punctuation">\</span>Proxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$proxy</span><span class="token operator">-&gt;</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$proxy</span><span class="token operator">-&gt;</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 之道笔记整理：最佳实践与安全指南</title>
      <link href="posts/33277937.html"/>
      <url>posts/33277937.html</url>
      
        <content type="html"><![CDATA[<p>在这篇文章中，我们将以简明易懂的语言探讨 PHP 最佳实践中的一些关键主题，包括使用当前稳定版本、日期和时间处理、UTF-8 编码以及确保 Web 应用程序的安全。</p><p>这篇文章旨在为刚入门的开发者提供指南，同时也能够帮助有一定编程经验的开发者回顾和巩固知识。</p><h2 id="使用-PHP-当前稳定版本（8-3）"><a href="#使用-PHP-当前稳定版本（8-3）" class="headerlink" title="使用 PHP 当前稳定版本（8.3）"></a>使用 PHP 当前稳定版本（8.3）</h2><p>首先，与任何技术栈一样，使用当前的稳定版本是非常重要的。截至本文写作时，PHP 的当前稳定版本是 8.3。PHP 8.3 相较于老旧版本（比如，PHP 5.6）在性能上有了显著的提升，并且加入了很多新的特性和语法糖，同时做了向下兼容处理。值得注意的是，PHP 5.6 将在 2018 年停止接收安全更新。强烈建议尽快升级到 PHP 8.3，以享受更好的性能和安全性。</p><p>接下来，让我们一起深入探讨更多关键主题。</p><h2 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h2><p>在 PHP 开发中，经常需要处理日期和时间。PHP 的 <code>DateTime</code> 类提供了一个面向对象的接口，让日期和时间的读取、写入、比较和计算变得更加简单。此外，Carbon 是一个著名的日期时间 API 扩展，它基于 PHP 的 <code>DateTime</code> 类并提供了更多的功能，比如自然语言时间处理、国际化支持等。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">// 使用 DateTime 创建一个日期</span><span class="token variable">$date</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateTime</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'now'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$date</span><span class="token operator">-&gt;</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Y-m-d H:i:s'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用 Carbon 处理更复杂的日期时间操作</span><span class="token keyword">require</span> <span class="token string single-quoted-string">'vendor/autoload.php'</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Carbon<span class="token punctuation">\</span>Carbon</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Right now is %s"</span><span class="token punctuation">,</span> <span class="token class-name static-context">Carbon</span><span class="token operator">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">toDateTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Right now in Vancouver is %s"</span><span class="token punctuation">,</span> <span class="token class-name static-context">Carbon</span><span class="token operator">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'America/Vancouver'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 利用 Carbon 设定时区</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用-UTF-8-编码"><a href="#使用-UTF-8-编码" class="headerlink" title="使用 UTF-8 编码"></a>使用 UTF-8 编码</h2><p>在处理多语言应用时，使用合适的字符编码是非常关键的。尽管 PHP 底层还未完全支持 Unicode，但我们可以通过使用 UTF-8 编码来处理大多数的字符编码需求。</p><h3 id="1-PHP-层面的-UTF-8"><a href="#1-PHP-层面的-UTF-8" class="headerlink" title="1. PHP 层面的 UTF-8"></a>1. PHP 层面的 UTF-8</h3><p>为了正确处理 UTF-8 字符串，我们应该使用 <code>mb_*</code> 函数替代传统的字符串操作函数。例如，使用 <code>mb_substr()</code> 替代 <code>substr()</code> 来避免潜在的乱码问题。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'这是一个测试字符串'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可能会乱码</span><span class="token keyword">echo</span> <span class="token function">mb_substr</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'UTF-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 正确的做法</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>记住，在处理 UTF-8 字符串时使用 <code>mb_*</code> 函数，是保障数据完整性和避免乱码的有效方法。</p><h3 id="2-数据库层面的-UTF-8"><a href="#2-数据库层面的-UTF-8" class="headerlink" title="2. 数据库层面的 UTF-8"></a>2. 数据库层面的 UTF-8</h3><p>为了在数据库层面完整支持 UTF-8，应使用 <code>utf8mb4</code> 字符集而不是简单的 <code>utf8</code>。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> my_table <span class="token punctuation">(</span>    my_column <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb4 <span class="token keyword">COLLATE</span> utf8mb4_unicode_ci<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Web-应用程序安全"><a href="#Web-应用程序安全" class="headerlink" title="Web 应用程序安全"></a>Web 应用程序安全</h2><p>在 Web 开发中，安全始终是最重要的议题之一。以下是一些保障 Web 应用程序安全的实践。</p><h3 id="密码哈希"><a href="#密码哈希" class="headerlink" title="密码哈希"></a>密码哈希</h3><p>使用 <code>password_hash</code> 函数对用户密码进行哈希处理是一种推荐的做法。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'mypassword'</span><span class="token punctuation">;</span><span class="token variable">$hash</span> <span class="token operator">=</span> <span class="token function">password_hash</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">,</span> <span class="token constant">PASSWORD_DEFAULT</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$hash</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数据过滤"><a href="#数据过滤" class="headerlink" title="数据过滤"></a>数据过滤</h3><ol><li><p><strong>外部输入过滤</strong>：永远不要信任外部输入。在使用之前应对其进行过滤和验证。<code>filter_var()</code> 和 <code>filter_input()</code> 函数可用于过滤文本并进行格式校验。</p></li><li><p><strong>防止 XSS 攻击</strong>：通过对所有用户生成的数据进行清理，使用 <code>strip_tags()</code> 函数去除 HTML 标签或使用 <code>htmlentities()</code> 或 <code>htmlspecialchars()</code> 函数对特殊字符进行转义，以避免跨站脚本攻击（XSS）。</p></li><li><p><strong>命令行注入防御</strong>：使用 <code>escapeshellarg()</code> 函数过滤执行命令的参数，以阻止潜在的注入攻击。</p></li></ol><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$email</span> <span class="token operator">=</span> <span class="token function">filter_var</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'email'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">FILTER_VALIDATE_EMAIL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$email</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Invalid email"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Valid email"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PHP 的学习和使用是一个不断进化的过程。始终保持对最新版本的关注，采用最佳实践和安全措施，可以让我们构建更高效、更安全的 Web 应用。</p><p>希望这篇笔记整理能够帮助你回顾和掌握 PHP 开发的关键知识点。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 文件传输利器：SCP 和 LRZSZ</title>
      <link href="posts/65525c46.html"/>
      <url>posts/65525c46.html</url>
      
        <content type="html"><![CDATA[<p>在日常的软件开发和服务器管理工作中，我们经常需要在本机与远程服务器之间传输文件或文件夹。</p><p>本文将向您介绍两种高效的文件传输工具：<code>scp</code> 和 <code>lrzsz</code>，并提供简单易懂的使用指南。</p><h2 id="使用-scp-进行远程拷贝"><a href="#使用-scp-进行远程拷贝" class="headerlink" title="使用 scp 进行远程拷贝"></a>使用 scp 进行远程拷贝</h2><p><code>scp</code> 命令是 Secure Copy Protocol 的缩写，它基于 SSH (Secure Shell) 协议为用户提供在本地和远程机器之间安全传输文件的能力。</p><h3 id="1-从远程拷贝到本地"><a href="#1-从远程拷贝到本地" class="headerlink" title="1. 从远程拷贝到本地"></a>1. 从远程拷贝到本地</h3><p>当我们需要将远程服务器上的文件或文件夹拷贝到本地时，可以使用以下命令格式：</p><ul><li><strong>拷贝文件</strong></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将远程 /root/alex.sql 文件拷贝到本机 /home/hello/ 目录下</span><span class="token function">scp</span> root@192.168.0.102:/root/alex.sql /home/hello/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><strong>拷贝文件夹</strong></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将远程 /root/test 文件夹下的所有文件（包括 test 文件夹本身）拷贝到本机 /home/hello/ 目录下</span><span class="token function">scp</span> <span class="token parameter variable">-r</span> root@192.168.0.102:/root/test /home/hello/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-从本地拷贝到远程"><a href="#2-从本地拷贝到远程" class="headerlink" title="2. 从本地拷贝到远程"></a>2. 从本地拷贝到远程</h3><p>相反地，如果我们想要把本地的文件或文件夹上传到远程服务器，可以按照下面的命令格式操作：</p><ul><li><strong>拷贝文件</strong></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将本地文件 /home/hello/test.php 拷贝到远程机 /root/ 目录下</span><span class="token function">scp</span> /home/hello/test.php root@192.168.0.102:/root/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><strong>拷贝文件夹</strong></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将本地 /home/hello/test 目录（和目录中的所有文件）拷贝到远程 /root/ 目录下</span><span class="token function">scp</span> <span class="token parameter variable">-r</span> /home/hello/test root@192.168.0.102:/root/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="使用注意事项"><a href="#使用注意事项" class="headerlink" title="使用注意事项"></a>使用注意事项</h3><ul><li>运行上述命令后，系统会要求输入远程服务器的密码。</li><li>确保你具备远程服务器上相应目录的读写权限。</li><li><code>-r</code> 选项表示递归地拷贝文件夹，不加此选项时只能拷贝单个文件。</li></ul><h2 id="使用-lrzsz-进行文件传输"><a href="#使用-lrzsz-进行文件传输" class="headerlink" title="使用 lrzsz 进行文件传输"></a>使用 lrzsz 进行文件传输</h2><p><code>lrzsz</code> 是 Linux/Unix 环境下的一个免费文件传输工具，允许我们通过串行端口或安全壳（SSH）连接进行文件的上传和下载操作。</p><p>lrzsz 是 rz 和 sz 两个命令的集合，分别用于从本地到远程的文件上传和从远程到本地的文件下载。</p><h3 id="安装-lrzsz"><a href="#安装-lrzsz" class="headerlink" title="安装 lrzsz"></a>安装 lrzsz</h3><ul><li><strong>Ubuntu/Debian 系统</strong></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> lrzsz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>CentOS/RHEL 系统</strong></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token parameter variable">-y</span> <span class="token function">install</span> lrzsy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="上传和下载文件"><a href="#上传和下载文件" class="headerlink" title="上传和下载文件"></a>上传和下载文件</h3><ul><li><strong>上传文件到远程服务器</strong></li></ul><p>在远程服务器的终端输入 <code>rz</code> 命令后，一个文件选择窗口会出现在本地机器上，选择你希望上传的文件即可开始上传过程。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>从远程服务器下载文件</strong></li></ul><p>在远程服务器的终端输入 <code>sz 文件名</code> 命令时，系统会自动开始将指定的文件下载到本地机器上。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sz filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="使用注意事项-1"><a href="#使用注意事项-1" class="headerlink" title="使用注意事项"></a>使用注意事项</h3><ul><li>使用 <code>lrzsz</code> 进行文件传输时，确保你的 SSH 客户端支持 ZModem 协议。例如，使用 SecureCRT 或者 iTerm2 作为终端工具时，这些都原生支持 <code>lrzsz</code> 命令。</li><li><code>rz</code> 命令适用于上传文件，而 <code>sz</code> 命令用于下载文件。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>scp 和 lrzsz 是 Linux 系统中两个非常有用的文件传输工具。scp 提供了加密的文件传输能力，适合在不同服务器间安全地传输文件。而 lrzsz 则以其简单的操作，方便了文件的上传和下载。</p><p>随着 <code>scp</code> 和 <code>lrzsz</code> 的帮助，无论是从本地向远程服务器上传文件，还是从远程服务器下载文件到本地，都变得简单快捷。</p><p>希望本文能够帮助大家更高效地进行文件传输操作。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 三剑客 grep、sed、awk</title>
      <link href="posts/5ffd9f1c.html"/>
      <url>posts/5ffd9f1c.html</url>
      
        <content type="html"><![CDATA[<p>在 Linux 的命令行世界里，有三个强大的文本处理工具：<code>grep</code>、<code>sed</code> 和 <code>awk</code>。它们被统称为 “Linux 三剑客”，它们各自拥有独特的功能，可以帮助我们高效地进行各种文本处理任务。让我们一一了解它们。</p><h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><p><code>grep</code> 的全称为 “global regular expression print”，意味着它可以通过正则表达式来搜索文本，并把匹配的行打印出来。</p><h3 id="grep-命令常用选项及含义"><a href="#grep-命令常用选项及含义" class="headerlink" title="grep 命令常用选项及含义"></a>grep 命令常用选项及含义</h3><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-c</td><td>仅列出文件中包含匹配模式的行数</td></tr><tr><td>-i</td><td>忽略模式中的字母大小写</td></tr><tr><td>-l</td><td>列出包含匹配行的文件名</td></tr><tr><td>-n</td><td>在每一行的最前面列出行号</td></tr><tr><td>-v</td><td>列出不匹配模式的行</td></tr><tr><td>-w</td><td>仅匹配整个单词，忽略部分匹配的行</td></tr></tbody></table><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查找 demo.txt 文件中含有 "alex" 字符串的行</span><span class="token function">grep</span> <span class="token string">"alex"</span> demo.txt<span class="token comment"># 查找 demo.txt 文件中有多少行出现了 "alex" 字符串</span><span class="token function">grep</span> <span class="token parameter variable">-c</span> <span class="token string">"alex"</span> demo.txt<span class="token comment"># 假设输出是 50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h2><p><code>sed</code>（stream editor）是一种强大的流式文本编辑器。它可以根据脚本命令来处理文本文件中的数据。这些命令可以直接在命令行中输入，也可以存储在一个脚本文件中。</p><h3 id="sed-使用方式"><a href="#sed-使用方式" class="headerlink" title="sed 使用方式"></a>sed 使用方式</h3><ol><li>每次仅读取一行内容；</li><li>根据提供的规则命令匹配并修改数据。注意，<code>sed</code> 默认不会直接修改源文件数据，而是会将数据复制到缓冲区中，修改也仅在缓冲区中进行；</li><li>输出执行结果。</li></ol><p>当一行数据匹配并处理完成后，<code>sed</code> 会继续读取下一行数据，并重复这个过程，直到将文件中所有数据处理完毕。</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><h4 id="清空掉文件中所有的内容"><a href="#清空掉文件中所有的内容" class="headerlink" title="清空掉文件中所有的内容"></a>清空掉文件中所有的内容</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 不会直接修改源文件 demo.txt，而是在终端显示修改后的结果，即不显示任何内容，因为所有行都被删除了</span><span class="token function">sed</span> <span class="token string">'d'</span> demo.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h2><p><code>awk</code> 是一个用于文本分析的编程语言和工具。它非常擅长列出数据和报表，而且它的语法十分灵活，功能强大。</p><h3 id="awk-的基本使用"><a href="#awk-的基本使用" class="headerlink" title="awk 的基本使用"></a>awk 的基本使用</h3><p><code>awk</code> 通过对数据进行模式扫描和处理来达到文本处理的目的。它默认以空格为字段分隔符，将一行划分为多个字段。</p><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><h4 id="输出文件的每一行的第二个字段"><a href="#输出文件的每一行的第二个字段" class="headerlink" title="输出文件的每一行的第二个字段"></a>输出文件的每一行的第二个字段</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 假设 demo.txt 是以空格分隔的字段的文本文件</span><span class="token function">awk</span> <span class="token string">'{print $2}'</span> demo.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="分析日志文件并汇总信息"><a href="#分析日志文件并汇总信息" class="headerlink" title="分析日志文件并汇总信息"></a>分析日志文件并汇总信息</h4><p>假设有一个日志文件 <code>access.log</code>，记录了网站的访问信息。我们想要统计出现次数最多的 IP 地址。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">awk</span> <span class="token string">'{print $1}'</span> access.log <span class="token operator">|</span> <span class="token function">sort</span> <span class="token operator">|</span> <span class="token function">uniq</span> <span class="token parameter variable">-c</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-nr</span> <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-n</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解释：</p><ul><li><code>awk '{print $1}' access.log</code>：使用 awk 打印出日志中每行的第一个字段（一般是 IP 地址）。</li><li><code>sort</code>：对 IP 地址进行排序。</li><li><code>uniq -c</code>：压缩连续重复的行并计数。</li><li><code>sort -nr</code>：根据次数逆序排序。</li><li><code>head -n 10</code>：展示前 10 行。</li></ul><p>grep、sed 和 awk 是 Linux 系统中文本处理的三大法宝。grep 用于搜索文本，sed 用于编辑文本，而 awk 则用于更复杂的文本分析和处理。</p><p>通过组合使用 <code>grep</code>、<code>sed</code> 和 <code>awk</code>，我们可以轻松地处理复杂的文本数据，有效提高我们的工作效率。</p><p>希望本文能帮助你入门并熟练掌握这些工具。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>curl 使用：命令行中的 HTTP 客户端</title>
      <link href="posts/9f801236.html"/>
      <url>posts/9f801236.html</url>
      
        <content type="html"><![CDATA[<p>在日常的软件开发和网络管理工作中，<code>curl</code> 是一个我们经常会使用到的命令行工具。它支持多种协议，包括 HTTP、HTTPS、FTP 等，用于发送和接收数据。</p><p>本文将通过简单易懂的语言，带你快速掌握 curl 在发送各种类型请求时的使用方法。</p><h2 id="curl-基本概念"><a href="#curl-基本概念" class="headerlink" title="curl 基本概念"></a>curl 基本概念</h2><p><code>curl</code> 是一个强大的命令行工具，用于在命令行或者脚本中与服务器交互。它支持多种协议，能够通过 URL 等参数发送请求，并获取或发送数据。适合用于测试 API、自动化任务、数据检索等场景。</p><h2 id="发送-POST-请求"><a href="#发送-POST-请求" class="headerlink" title="发送 POST 请求"></a>发送 POST 请求</h2><p>在使用 <code>curl</code> 发送 POST 请求时，常用 <code>-d</code> 或 <code>--data</code> 参数来指定请求体的内容。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 发送 POST 请求，加入 -d 参数后，会自动转为 POST 方法，因此可以省略 -X POST 参数</span><span class="token function">curl</span> <span class="token parameter variable">-X</span> POST www.baidu.com <span class="token parameter variable">-d</span> <span class="token string">'a=1&amp;b=2'</span><span class="token comment"># 或者直接使用 curl www.baidu.com -d 'a=1&amp;b=2'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这里 <code>-d</code> 参数后跟着的是我们要发送的数据。这种方式简洁明了，非常适合测试简单的表单数据或 API 接口。</p><h2 id="发送-GET-请求"><a href="#发送-GET-请求" class="headerlink" title="发送 GET 请求"></a>发送 GET 请求</h2><p>发送 GET 请求时，我们可以通过在 URL 后直接加查询字符串或使用 <code>-G</code> 参数配合 <code>-d</code> 来构造查询字符串。</p><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 发送 GET 请求，-G 参数用来构造 URL 的查询字符串</span><span class="token function">curl</span> https://google.com/search  <span class="token parameter variable">-G</span> <span class="token parameter variable">-d</span> <span class="token string">'q=kitties&amp;count=20'</span><span class="token comment"># 或者直接使用完整的 URL</span><span class="token function">curl</span> <span class="token string">'https://google.com/search?q=kitties&amp;count=20'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这两种方式可以根据个人喜好和场景需求来选择使用，效果是相同的。</p><h2 id="发送-JSON-请求"><a href="#发送-JSON-请求" class="headerlink" title="发送 JSON 请求"></a>发送 JSON 请求</h2><p>在现代的 Web 开发中，JSON 是最常见的数据交换格式之一。<code>curl</code> 通过 <code>-H</code> 参数添加 HTTP 头，其中 <code>Content-Type: application/json</code> 表明发送的数据类型为 JSON。</p><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-H</span> <span class="token string">'Content-Type: application/json'</span> <span class="token parameter variable">-X</span> POST https://api.weixin.qq.com/datacube/getweanalysisappiddailyvisittrend<span class="token punctuation">\</span>?access_token<span class="token punctuation">\</span><span class="token operator">=</span>ACCESS_TOKEN  <span class="token parameter variable">-d</span> <span class="token string">'{  "begin_date" : "20210328",  "end_date" : "20210328"}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里使用 <code>-H</code> 添加了请求头，<code>-X POST</code> 指定了请求方法，虽然在这个场景下，由于使用了 <code>-d</code> 参数，<code>-X POST</code> 可以省略。</p><h2 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h2><p><code>curl</code> 也支持文件上传功能，常通过 <code>-F</code> 参数实现。</p><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 注意文件路径前需要加上 @ 符号</span><span class="token function">curl</span> <span class="token parameter variable">-X</span> POST http://127.0.0.1:8000/upload/file  <span class="token parameter variable">-F</span> <span class="token assign-left variable">file</span><span class="token operator">=</span>@/path/to/your/file/img1.jpeg <span class="token parameter variable">-F</span> <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在这个例子中，<code>-F</code> 参数指定了我们想要上传的文件，文件路径前必须加上 <code>@</code> 符号，表示这后面是一个文件。</p><h2 id="下载图片"><a href="#下载图片" class="headerlink" title="下载图片"></a>下载图片</h2><p>使用 curl 可以方便地下载网络上的图片或文件：</p><h3 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-X</span> POST <span class="token string">'https://api.weixin.qq.com/wxa/getwxacodeunlimit?access_token=abc'</span> <span class="token punctuation">\</span><span class="token parameter variable">-H</span> <span class="token string">'Content-Type: application/json'</span> <span class="token parameter variable">-H</span> <span class="token string">'accept: image/jpeg'</span> <span class="token punctuation">\</span>--data-raw <span class="token string">'{    "scene": "userId=2&amp;activityId=5",    "page": "pages/index/index"}'</span> <span class="token operator">&gt;</span> abc.jpeg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>通过这篇文章，相信你已经对 <code>curl</code> 的用法有了初步的了解。它是一个强大且灵活的工具，适用于多种场景。掌握了 <code>curl</code>，你便能在命令行下轻松与世界各地的服务器交流，实现数据的发送和接收。</p><p>不妨现在就开始尝试使用它，解锁更多可能吧！</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 软件安装与卸载</title>
      <link href="posts/dc4fc28a.html"/>
      <url>posts/dc4fc28a.html</url>
      
        <content type="html"><![CDATA[<p>在 Linux 的世界里，安装和卸载软件是每个使用者都需掌握的基本技能。</p><p>通过这篇文章，我们将以简明易懂的语言风格，一步步引导你学会如何在 Linux 上安装和卸载软件。</p><h2 id="以-iftop-的安装为例子"><a href="#以-iftop-的安装为例子" class="headerlink" title="以 iftop 的安装为例子"></a>以 iftop 的安装为例子</h2><h3 id="什么是-iftop？"><a href="#什么是-iftop？" class="headerlink" title="什么是 iftop？"></a>什么是 iftop？</h3><p><code>iftop</code> 是一个用于实时监控网络流量的命令行工具。它可以帮你监测通过特定接口的数据流量，具体到每个 IP 的流量。</p><h3 id="如何安装-iftop？"><a href="#如何安装-iftop？" class="headerlink" title="如何安装 iftop？"></a>如何安装 iftop？</h3><ol><li><strong>访问官网下载</strong>: iftop 的官网是 <a href="http://www.ex-parrot.com/~pdw/iftop/">http://www.ex-parrot.com/~pdw/iftop/</a>。我们需要在 Download 部分找到最新版本的下载链接。</li><li><strong>复制下载链接地址</strong>: 当前最新版本为 0.17，下载链接地址为 <a href="http://www.ex-parrot.com/~pdw/iftop/download/iftop-0.17.tar.gz">http://www.ex-parrot.com/~pdw/iftop/download/iftop-0.17.tar.gz</a>。</li><li><strong>使用 wget 命令下载软件包</strong>: 在 Linux 系统中，先创建一个文件夹，然后使用 <code>wget</code> 命令下载：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> iftop_download<span class="token builtin class-name">cd</span> iftop_download<span class="token function">wget</span> http://www.ex-parrot.com/~pdw/iftop/download/iftop-0.17.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="4"><li><p><strong>查看下载的文件</strong>: 下载完成后，使用 <code>ls</code> 命令可以看到下载的文件。</p></li><li><p><strong>解压缩文件</strong>: 使用下列命令解压缩 <code>iftop</code>：</p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-zxf</span> iftop-0.17.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li><p><strong>查看解压后的文件夹</strong>: 再次使用 <code>ls</code> 命令，你会看到一个名为 <code>iftop-0.17</code> 的文件夹。</p></li><li><p><strong>切换到 iftop 目录</strong>: 使用 <code>cd</code> 命令进入这个文件夹：</p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> iftop-0.17<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="8"><li><strong>开始安装</strong>: 在安装之前，我们需要基于源代码生成配置文件。直接输入 <code>./configure</code> 然后回车。有可能会出现错误，提示你没有安装 <code>libpcap</code> 包。这时，我们需要安装它。</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum search libpcap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到 <code>libpcap</code> 相关的包之后，使用以下命令进行安装：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> libpcap-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="9"><li><strong>再次运行配置命令</strong>:</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./configure<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="10"><li><strong>编译安装</strong>:</li></ol><p>完成配置后，接下来是编译和安装过程：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 编译</span><span class="token function">make</span><span class="token comment"># 安装</span><span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="源代码编译的方式"><a href="#源代码编译的方式" class="headerlink" title="源代码编译的方式"></a>源代码编译的方式</h3><p>在 Linux 下，从源代码编译安装是一种很常见的安装方式。以下是一些基本的步骤：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 配置（生成Makefile）</span>./configure<span class="token comment"># 执行 make 命令进行编译工作</span><span class="token function">make</span><span class="token comment"># 安装</span><span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span class="token comment"># 卸载</span><span class="token function">sudo</span> <span class="token function">make</span> uninstall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="rpm-的方式"><a href="#rpm-的方式" class="headerlink" title="rpm 的方式"></a>rpm 的方式</h3><p>RPM（Red Hat Package Manager）是 Red Hat 系 Linux 发行版的包管理器，对于基于 RPM 的发行版（如 Fedora、CentOS 等），可以使用 <code>rpm</code> 命令来管理软件包。基本命令如下：</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>rpm -ivh filename.rpm</td><td>安装软件</td></tr><tr><td>rpm -Uvh filename.rpm</td><td>升级软件</td></tr><tr><td>rpm -e filename.rpm</td><td>卸载软件</td></tr><tr><td>rpm -qa | grep filename</td><td>模糊查找软件包</td></tr><tr><td>rpm -qpi filename.rpm</td><td>查询软件描述信息</td></tr><tr><td>rpm -qpl filename.rpm</td><td>列出软件文件信息</td></tr><tr><td>rpm -qf filename</td><td>查询文件属于哪个 RPM 包</td></tr></tbody></table><h3 id="CentOS-下使用-yum-的安装方式"><a href="#CentOS-下使用-yum-的安装方式" class="headerlink" title="CentOS 下使用 yum 的安装方式"></a>CentOS 下使用 yum 的安装方式</h3><p>在 CentOS 等基于 Red Hat 的发行版中，<code>yum</code> 是一个非常方便的包管理器。近年来，<code>yum</code> 已逐渐被新的 <code>dnf</code> 命令所取代，但在很多系统中 <code>yum</code> 依然广泛使用。</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>yum repolist all</td><td>列出所有仓库</td></tr><tr><td>yum list all</td><td>列出仓库中所有软件包</td></tr><tr><td>yum info 软件包名称</td><td>查看软件包信息</td></tr><tr><td>yum search 软件包名称</td><td>搜索软件包信息</td></tr><tr><td>yum install 软件包名称</td><td>安装软件包</td></tr><tr><td>yum reinstall 软件包名称</td><td>重新安装软件包</td></tr><tr><td>yum update 软件包名称</td><td>升级软件包</td></tr><tr><td>yum remove 软件包名称</td><td>移除软件包</td></tr><tr><td>yum clean all</td><td>清除所有仓库缓存</td></tr><tr><td>yum check-update</td><td>检查可更新的软件包</td></tr><tr><td>yum grouplist</td><td>查看系统中已经安装的软件包组</td></tr><tr><td>yum groupinstall 软件包组</td><td>安装指定的软件包组</td></tr><tr><td>yum groupremove 软件包组</td><td>移除指定的软件包组</td></tr><tr><td>yum groupinfo 软件包组</td><td>查询指定的软件包组信息</td></tr></tbody></table><p>本文介绍了 Linux 下几种常见的软件安装和卸载方法，包括源代码编译安装、rpm 和 yum。不同的安装方法有各自的特点和适用场景。理解这些基本的安装步骤和命令，可以帮助你更有效地管理和维护你的 Linux 系统。</p><p>希望这篇文章能帮助你更好地掌握 Linux 软件的安装与卸载。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动化脚本：提升运维效率的秘诀</title>
      <link href="posts/19ab69b8.html"/>
      <url>posts/19ab69b8.html</url>
      
        <content type="html"><![CDATA[<p>当我们谈论服务器管理时，自动化脚本就像是一位无声的英雄，它默默在幕后保持着我们的服务器运行顺畅，确保数据安全，同时还能有效防范网络攻击。</p><p>今天，我将和大家分享几个实用的自动化脚本，涵盖了数据库备份、防范Dos攻击、监控网卡流量、发送系统告警以及日志管理等方面。无论你是初学者还是有一定经验的开发者，相信这篇文章都能带给你一些启发。</p><h2 id="一、自动备份数据库的脚本"><a href="#一、自动备份数据库的脚本" class="headerlink" title="一、自动备份数据库的脚本"></a>一、自动备份数据库的脚本</h2><h3 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h3><p>数据库是任何在线服务的心脏。无论是用户信息、交易数据还是其他重要信息，都存储在数据库中。一旦数据丢失或损坏，可能会造成不可挽回的损失。因此，定期备份数据库是一项非常关键的工作。</p><h3 id="脚本概述"><a href="#脚本概述" class="headerlink" title="脚本概述"></a>脚本概述</h3><p>以下是一个简单的shell脚本，用于备份指定的数据库表：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment">#备份指定表数据，因为加了 -t 参数，如果需要备份表字段直接去掉 -t 参数即可。</span><span class="token comment"># 数据库相关配置信息</span><span class="token assign-left variable">host</span><span class="token operator">=</span><span class="token string">'127.0.0.1'</span><span class="token assign-left variable">port</span><span class="token operator">=</span><span class="token number">3306</span><span class="token assign-left variable">username</span><span class="token operator">=</span><span class="token string">'root'</span><span class="token assign-left variable">password</span><span class="token operator">=</span><span class="token string">'password'</span><span class="token assign-left variable">database</span><span class="token operator">=</span><span class="token string">'sample_api'</span><span class="token assign-left variable">tables</span><span class="token operator">=</span><span class="token string">'menus users'</span><span class="token comment"># 当前时间</span><span class="token assign-left variable">current_time</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +<span class="token string">"%Y-%m-%d_%H:%M:%S"</span><span class="token variable">)</span></span><span class="token comment"># sql 备份目录</span><span class="token assign-left variable">sql_backup_path</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">cd</span> `dirname $0`<span class="token punctuation">;</span> <span class="token builtin class-name">pwd</span><span class="token variable">)</span></span><span class="token comment"># sql 文件</span><span class="token assign-left variable">file_name</span><span class="token operator">=</span><span class="token string">"<span class="token variable">${sql_backup_path}</span>/back_up_<span class="token variable">${current_gmtime}</span>.sql"</span><span class="token comment"># 目录存在，删除修改时间为 7 天前的文件</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-d</span> <span class="token string">"<span class="token variable">${sql_backup_path}</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token function">find</span> <span class="token string">"<span class="token variable">${sql_backup_path}</span>"</span>/* <span class="token parameter variable">-name</span> <span class="token string">'*.sql'</span> <span class="token parameter variable">-mtime</span> +1 <span class="token parameter variable">-exec</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">\</span><span class="token punctuation">;</span><span class="token keyword">fi</span><span class="token comment"># 执行 sql 备份</span>mysqldump <span class="token parameter variable">--host</span><span class="token operator">=</span><span class="token variable">${host}</span> <span class="token parameter variable">--port</span><span class="token operator">=</span><span class="token variable">${port}</span> <span class="token parameter variable">--user</span><span class="token operator">=</span><span class="token variable">${username}</span> <span class="token parameter variable">--password</span><span class="token operator">=</span><span class="token variable">${password}</span> <span class="token parameter variable">-t</span> <span class="token variable">${database}</span> <span class="token variable">${tables}</span> <span class="token operator">&gt;</span> <span class="token string">"<span class="token variable">${file_name}</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此脚本通过mysqldump工具备份指定的数据库中的表，并根据当前时间为备份文件命名，自动删除7天前的备份文件，以节省空间。</p><h2 id="二、Dos攻击防范（自动屏蔽攻击IP）"><a href="#二、Dos攻击防范（自动屏蔽攻击IP）" class="headerlink" title="二、Dos攻击防范（自动屏蔽攻击IP）"></a>二、Dos攻击防范（自动屏蔽攻击IP）</h2><h3 id="背景介绍-1"><a href="#背景介绍-1" class="headerlink" title="背景介绍"></a>背景介绍</h3><p>Dos攻击是一种常见的网络攻击方式，通过大量的请求消耗服务器资源，导致服务不可用。对于这类攻击，一种有效的应对策略是检测异常IP并及时将其屏蔽。</p><h3 id="脚本概述-1"><a href="#脚本概述-1" class="headerlink" title="脚本概述"></a>脚本概述</h3><p>以下脚本可以自动检测异常IP并屏蔽：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">DATE</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%d/%b/%Y:%H:%M<span class="token variable">)</span></span><span class="token assign-left variable">LOG_FILE</span><span class="token operator">=</span>/usr/local/nginx/logs/demo2.access.log<span class="token assign-left variable">ABNORMAL_IP</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">tail</span> <span class="token parameter variable">-n5000</span> $LOG_FILE <span class="token operator">|</span> <span class="token function">grep</span> $DATE <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{a[$1]++} END{for(i in a) if(a[i]&gt;10) print i}'</span><span class="token variable">)</span></span><span class="token keyword">for</span> <span class="token for-or-select variable">IP</span> <span class="token keyword">in</span> <span class="token variable">$ABNORMAL_IP</span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable"><span class="token variable">$(</span>iptables <span class="token parameter variable">-vnL</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-c</span> <span class="token string">"<span class="token variable">$IP</span>"</span><span class="token variable">)</span></span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        iptables <span class="token parameter variable">-I</span> INPUT <span class="token parameter variable">-s</span> <span class="token variable">$IP</span> <span class="token parameter variable">-j</span> DROP        <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +<span class="token string">'%F_%T'</span><span class="token variable">)</span></span> <span class="token variable">$IP</span>"</span> <span class="token operator">&gt;&gt;</span> /tmp/drop_ip.log    <span class="token keyword">fi</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该脚本通过分析Nginx的访问日志，查找在短时间内访问频率异常高的IP地址，并使用iptables命令屏蔽这些IP。</p><h2 id="三、查看网卡实时流量脚本"><a href="#三、查看网卡实时流量脚本" class="headerlink" title="三、查看网卡实时流量脚本"></a>三、查看网卡实时流量脚本</h2><h3 id="背景介绍-2"><a href="#背景介绍-2" class="headerlink" title="背景介绍"></a>背景介绍</h3><p>了解服务器的实时流量是监控服务器状态的重要一环。通过实时监控，我们可以及时发现异常流量，做出相应的处理。</p><h3 id="脚本概述-2"><a href="#脚本概述-2" class="headerlink" title="脚本概述"></a>脚本概述</h3><p>以下脚本可以实时显示指定网卡的流入和流出流量：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">NIC</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">" In ------ Out"</span><span class="token keyword">while</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token assign-left variable">OLD_IN</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">awk</span> <span class="token string">'$0~"'</span>$NIC<span class="token string">'"{print $2}'</span> /proc/net/dev<span class="token variable">)</span></span>    <span class="token assign-left variable">OLD_OUT</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">awk</span> <span class="token string">'$0~"'</span>$NIC<span class="token string">'"{print $10}'</span> /proc/net/dev<span class="token variable">)</span></span>    <span class="token function">sleep</span> <span class="token number">1</span>    <span class="token assign-left variable">NEW_IN</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">awk</span>  <span class="token string">'$0~"'</span>$NIC<span class="token string">'"{print $2}'</span> /proc/net/dev<span class="token variable">)</span></span>    <span class="token assign-left variable">NEW_OUT</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">awk</span> <span class="token string">'$0~"'</span>$NIC<span class="token string">'"{print $10}'</span> /proc/net/dev<span class="token variable">)</span></span>    <span class="token assign-left variable">IN</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">printf</span> <span class="token string">"%.1f%s"</span> "<span class="token punctuation">$((</span><span class="token punctuation">(</span>$NEW_IN-$OLD_IN<span class="token punctuation">)</span>/1024<span class="token variable">)</span></span><span class="token punctuation">)</span><span class="token string">" "</span>KB/s<span class="token string">")    OUT=<span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">printf</span> <span class="token string">"%.1f%s"</span> "<span class="token punctuation">$((</span><span class="token punctuation">(</span>$NEW_OUT-$OLD_OUT<span class="token punctuation">)</span>/1024<span class="token variable">)</span></span>)"</span> <span class="token string">"KB/s"</span><span class="token punctuation">)</span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$IN</span> <span class="token variable">$OUT</span>"</span>    <span class="token function">sleep</span> <span class="token number">1</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过读取 <code>/proc/net/dev</code> 文件，该脚本计算了网卡在一秒钟内的数据流入和流出量，并以KB/s为单位展示。</p><h2 id="四、Linux系统发送告警脚本"><a href="#四、Linux系统发送告警脚本" class="headerlink" title="四、Linux系统发送告警脚本"></a>四、Linux系统发送告警脚本</h2><h3 id="背景介绍-3"><a href="#背景介绍-3" class="headerlink" title="背景介绍"></a>背景介绍</h3><p>当服务器出现问题时，能否及时收到告警，直接关系到问题处理的时效性。配置一个能自动发送告警邮件的脚本，对于运维人员而言是非常有帮助的。</p><h3 id="配置邮件发送环境"><a href="#配置邮件发送环境" class="headerlink" title="配置邮件发送环境"></a>配置邮件发送环境</h3><p>在Linux系统中，我们可以使用mailx命令发送邮件。首先，需要安装mailx并配置邮件发送参数：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># yum install mailx</span><span class="token comment"># vi /etc/mail.rc</span><span class="token builtin class-name">set</span> <span class="token assign-left variable">from</span><span class="token operator">=</span>baojingtongzhi@163.com <span class="token assign-left variable">smtp</span><span class="token operator">=</span>smtp.163.com<span class="token builtin class-name">set</span> smtp-auth-user<span class="token operator">=</span>baojingtongzhi@163.com smtp-auth-password<span class="token operator">=</span><span class="token number">123456</span><span class="token builtin class-name">set</span> smtp-auth<span class="token operator">=</span>login<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过配置 <code>/etc/mail.rc</code> 文件，设置发件人邮箱、SMTP服务器、认证用户等信息，之后就可以使用mailx命令发送邮件了。</p><h2 id="五、Nginx访问日志按天切割与分析"><a href="#五、Nginx访问日志按天切割与分析" class="headerlink" title="五、Nginx访问日志按天切割与分析"></a>五、Nginx访问日志按天切割与分析</h2><h3 id="背景介绍-4"><a href="#背景介绍-4" class="headerlink" title="背景介绍"></a>背景介绍</h3><p>对于任何在线服务而言，日志文件都是不可或缺的。它们记录了服务的运行状况和用户的行为。然而，随着时间的推移，日志文件会不断增大，不仅占用磁盘空间，而且还会影响日志查找的效率。因此，按照一定的规则切割和分析日志文件是非常必要的。</p><h3 id="日志切割脚本"><a href="#日志切割脚本" class="headerlink" title="日志切割脚本"></a>日志切割脚本</h3><p>通过以下脚本，我们可以实现Nginx访问日志的按天切割：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">LOG_DIR</span><span class="token operator">=</span>/usr/local/nginx/logs<span class="token assign-left variable">YESTERDAY_TIME</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> <span class="token parameter variable">-d</span> <span class="token string">"yesterday"</span> +%F<span class="token variable">)</span></span><span class="token assign-left variable">LOG_MONTH_DIR</span><span class="token operator">=</span><span class="token variable">$LOG_DIR</span>/<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +<span class="token string">"%Y-%m"</span><span class="token variable">)</span></span><span class="token assign-left variable">LOG_FILE_LIST</span><span class="token operator">=</span><span class="token string">"default.access.log"</span><span class="token keyword">for</span> <span class="token for-or-select variable">LOG_FILE</span> <span class="token keyword">in</span> <span class="token variable">$LOG_FILE_LIST</span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-d</span> <span class="token variable">$LOG_MONTH_DIR</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token variable">$LOG_MONTH_DIR</span>    <span class="token function">mv</span> <span class="token variable">$LOG_DIR</span>/<span class="token variable">$LOG_FILE</span> <span class="token variable">$LOG_MONTH_DIR</span>/<span class="token variable">${LOG_FILE}</span>_<span class="token variable">${YESTERDAY_TIME}</span><span class="token keyword">done</span><span class="token function">kill</span> <span class="token parameter variable">-USR1</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> /var/run/nginx.pid<span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该脚本会将指定的日志文件移动到按月分类的目录中，并以昨天的日期为文件名后缀，然后通过发送USR1信号给Nginx主进程，无需重新启动Nginx即可生效。</p><h3 id="日志分析脚本"><a href="#日志分析脚本" class="headerlink" title="日志分析脚本"></a>日志分析脚本</h3><p>为了更好地理解访问模式，以下脚本提供了一种Nginx日志的分析方法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># 日志格式: $remote_addr - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent" "$http_x_forwarded_for"</span><span class="token assign-left variable">LOG_FILE</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token builtin class-name">echo</span> <span class="token string">"统计访问最多的10个IP"</span><span class="token function">awk</span> <span class="token string">'{a[$1]++}END{print "UV:",length(a);for(v in a)print v,a[v]}'</span> <span class="token variable">$LOG_FILE</span> <span class="token operator">|</span><span class="token function">sort</span> <span class="token parameter variable">-k2</span> <span class="token parameter variable">-nr</span> <span class="token operator">|</span><span class="token function">head</span> <span class="token parameter variable">-10</span><span class="token builtin class-name">echo</span> <span class="token string">"----------------------"</span><span class="token builtin class-name">echo</span> <span class="token string">"统计时间段访问最多的IP"</span><span class="token function">awk</span> <span class="token string">'$4&gt;="[01/Dec/2018:13:20:25" &amp;&amp; $4&lt;="[27/Nov/2018:16:20:49"{a[$1]++}END{for(v in a)print v,a[v]}'</span> <span class="token variable">$LOG_FILE</span> <span class="token operator">|</span><span class="token function">sort</span> <span class="token parameter variable">-k2</span> -nr<span class="token operator">|</span><span class="token function">head</span> <span class="token parameter variable">-10</span><span class="token builtin class-name">echo</span> <span class="token string">"----------------------"</span><span class="token builtin class-name">echo</span> <span class="token string">"统计访问最多的10个页面"</span><span class="token function">awk</span> <span class="token string">'{a[$7]++}END{print "PV:",length(a);for(v in a){if(a[v]&gt;10)print v,a[v]}}'</span> <span class="token variable">$LOG_FILE</span> <span class="token operator">|</span><span class="token function">sort</span> <span class="token parameter variable">-k2</span> <span class="token parameter variable">-nr</span><span class="token builtin class-name">echo</span> <span class="token string">"----------------------"</span><span class="token builtin class-name">echo</span> <span class="token string">"统计访问页面状态码数量"</span><span class="token function">awk</span> <span class="token string">'{a[$7" "$9]++}END{for(v in a){if(a[v]&gt;5)print v,a[v]}}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个脚本可以帮助我们快速从日志中挖掘出访问量最多的IP、高频时间段、热门页面以及状态码分布等关键信息，对于分析和优化网站性能具有重要参考价值。</p><p>通过这些脚本，我们不仅可以提高数据安全和服务稳定性，还可以有效管理日志文件，及时发现并处理问题。希望这些内容对你有所帮助！</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim 编辑器：高效文本编辑的瑞士军刀</title>
      <link href="posts/3325b0d1.html"/>
      <url>posts/3325b0d1.html</url>
      
        <content type="html"><![CDATA[<p>Vim，作为编程和系统管理中的强大工具，以其丰富的功能和高度可定制性著称。</p><p>在这篇文章中，我们将探索 Vim 的一些高效使用技巧，从打开文件的快捷方法到文本编辑、查找、替换、删除和复制的高级技巧，再到 Vim 配置和插件安装，帮助你提升 Vim 使用技能。</p><h2 id="vim-打开文件的快捷方法"><a href="#vim-打开文件的快捷方法" class="headerlink" title="vim 打开文件的快捷方法"></a>vim 打开文件的快捷方法</h2><p>Vim 提供了多种打开文件的选项，让你的工作更加高效：</p><table><thead><tr><th>vim 使用的选项</th><th>说明</th></tr></thead><tbody><tr><td>vim -r filename</td><td>恢复上次 vim 打开时崩溃的文件</td></tr><tr><td>vim + filename</td><td>打开文件，并将光标置于最后一行的首部</td></tr><tr><td>vim +n filename</td><td>打开文件，并将光标置于第 n 行的首部</td></tr><tr><td>vim +/pattern filename</td><td>打幵文件，并将光标置于第一个与 pattern 匹配的位置</td></tr><tr><td>vim -c command filename</td><td>在对文件进行编辑前，先执行指定的命令</td></tr></tbody></table><h2 id="命令行模式下的常用命令"><a href="#命令行模式下的常用命令" class="headerlink" title="命令行模式下的常用命令"></a>命令行模式下的常用命令</h2><p>Vim 的命令行模式提供了丰富的快捷命令，以下是一些常用的：</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>set nu</td><td>显示行号</td></tr><tr><td>set nonu</td><td>取消显示行号</td></tr><tr><td>set ic</td><td>忽略大小写</td></tr><tr><td>set noic</td><td>取消忽略大小写</td></tr><tr><td>yy</td><td>复制光标所在行</td></tr><tr><td>p</td><td>粘贴</td></tr><tr><td>u</td><td>撤销</td></tr><tr><td>ctrl + r</td><td>反撤销（恢复撤销）</td></tr><tr><td>ctrl+d</td><td>翻页 向下翻</td></tr><tr><td>ctrl+b</td><td>翻页 向上翻</td></tr><tr><td>/关键字</td><td>查找</td></tr><tr><td>dd</td><td>删除当前行</td></tr><tr><td>x</td><td>删除单个字符</td></tr><tr><td>o （小写）</td><td>下行插入</td></tr><tr><td>O （大写 shift +o）</td><td>上行插入</td></tr><tr><td>a</td><td>字符后插入</td></tr><tr><td>A</td><td>行末插入</td></tr><tr><td>数字 0 或者 ^</td><td>光标移动到当前行的行首</td></tr><tr><td>$</td><td>光标移动到当前行的行尾</td></tr><tr><td>gg</td><td>光标移动到文件开头</td></tr><tr><td>G</td><td>光标移动到文件末尾</td></tr></tbody></table><h3 id="vim-查找文本"><a href="#vim-查找文本" class="headerlink" title="vim 查找文本"></a>vim 查找文本</h3><p>要查找的字符串是严格区分大小写的，比如需要查找 <code>alex</code> 和 <code>Alex</code> 会得到不同的结果</p><table><thead><tr><th>快捷键</th><th>功能描述</th></tr></thead><tbody><tr><td>/abc</td><td>从光标所在位置向前查找字符串 abc</td></tr><tr><td>/^abc</td><td>查找以 abc 为行首的行</td></tr><tr><td>/abc$</td><td>查找以 abc 为行尾的行</td></tr><tr><td>?abc</td><td>从光标所在为主向后查找字符串 abc</td></tr><tr><td>n</td><td>向同一方向重复上次的查找指令</td></tr><tr><td>N</td><td>向相反方向重复上次的查找指定</td></tr></tbody></table><h3 id="vim-替换文本"><a href="#vim-替换文本" class="headerlink" title="vim 替换文本"></a>vim 替换文本</h3><table><thead><tr><th>快捷键</th><th>功能描述</th></tr></thead><tbody><tr><td>r</td><td>替换光标所在位置的字符</td></tr><tr><td>R</td><td>从光标所在位置开始替换字符，其输入内容会覆盖掉后面等长的文本内容，按“Esc”可以结束</td></tr><tr><td>:s/a1/a2/g</td><td>将当前光标所在行中的所有 a1 用 a2 替换</td></tr><tr><td>:n1,n2s/a1/a2/g</td><td>将文件中 n1 到 n2 行中所有 a1 都用 a2 替换</td></tr><tr><td>:g/a1/a2/g</td><td>将文件中所有的 a1 都用 a2 替换</td></tr></tbody></table><h3 id="vim-删除文本"><a href="#vim-删除文本" class="headerlink" title="vim 删除文本"></a>vim 删除文本</h3><table><thead><tr><th>快捷键</th><th>功能描述</th></tr></thead><tbody><tr><td>x</td><td>删除光标所在位置的字符</td></tr><tr><td>dd</td><td>删除光标所在行</td></tr><tr><td>ndd</td><td>删除当前行（包括此行）后 n 行文本</td></tr><tr><td>dG</td><td>删除光标所在行一直到文件末尾的所有内容</td></tr><tr><td>D</td><td>删除光标位置到行尾的内容</td></tr></tbody></table><h3 id="复制文本"><a href="#复制文本" class="headerlink" title="复制文本"></a>复制文本</h3><table><thead><tr><th>快捷键</th><th>功能描述</th></tr></thead><tbody><tr><td>p</td><td>将剪贴板中的内容粘贴到光标后</td></tr><tr><td>P（大写）</td><td>将剪贴板中的内容粘贴到光标前</td></tr><tr><td>y</td><td>复制已选中的文本到剪贴板</td></tr><tr><td>yy</td><td>将光标所在行复制到剪贴板，此命令前可以加数字 n，可复制多行</td></tr><tr><td>yw</td><td>将光标位置的单词复制到剪贴板</td></tr></tbody></table><h2 id="配置配置文件-vim-vimrc"><a href="#配置配置文件-vim-vimrc" class="headerlink" title="配置配置文件 ~/.vim/vimrc"></a>配置配置文件 <code>~/.vim/vimrc</code></h2><pre class="line-numbers language-none"><code class="language-none"># 将 leader 键更改为空格键let mapleader=" "# 增加兼容性的常规设置set nocompatiblefiletype onfiletype indent onfiletype plugin onfiletype plugin indent on# 让 vim 编辑器可以使用鼠标set mouse=a# 设置编码格式# set encoding=utf-8# 有些终端颜色可能会出问题，加上这一行之后就会好很多let &amp;t_ut=''# 按一下 tab 键，缩进为 4 个空格set expandtabset tabstop=4set shiftwidth=4set softtabstop=4# 显示高亮syntax on# 显示行号set number# 显示当前活动行号set relativenumber# 当前光标处，显示一条横线set cursorline# 当前行不会超出当前窗口，自动换行set wrap# 显示按键输出set showcmd# 提示set wildmenu# 搜索词高亮 high light searchset hlsearch# 进入命令行模式时，自动取消高亮exec "nohlsearch"# 边输入，边高亮set incsearch# 搜索时，忽略大小写set ignorecase# 智能大小写set smartcase# 设置键盘映射# 将 n 键映射为 h 也就是说当按了 n 键，相当于按了 h 键noremap n h# 设置快捷指令# 删除小写 s 键对应的功能map s &lt;nop&gt;# 按了大写 s 键，相当于 `:w 回车` 即为快捷保存文件指令map S :w&lt;CR&gt;# 退出map Q :q&lt;CR&gt;# 重新加载 vim 配置文件map R :source $MYVIMRC&lt;CR&gt;# 向右分屏map sl :set splitright&lt;CR&gt;:vsplit&lt;CR&gt;# 向左分屏map sh :set nosplitright&lt;CR&gt;:vsplit&lt;CR&gt;# 向上分屏map sk :set nosplitbelow&lt;CR&gt;:split&lt;CR&gt;# 向下分屏map sj :set splitbelow&lt;CR&gt;:split&lt;CR&gt;# 当前屏，纵向分屏map sv &lt;C-w&gt;t&lt;C-w&gt;H# 当前屏，横向分屏map sb &lt;C-w&gt;t&lt;C-w&gt;K# 当前配置文件最上方已经将 leader 键更改为空格键，那么这里就是 空格+k 代替了 Ctrl+w# 分屏之后，光标向上移动map &lt;LEADER&gt;k &lt;C-w&gt;k# 分屏之后，光标向下移动map &lt;LEADER&gt;j &lt;C-w&gt;j# 分屏之后，光标向左移动map &lt;LEADER&gt;h &lt;C-w&gt;h# 分屏之后，光标向右移动map &lt;LEADER&gt;l &lt;C-w&gt;l# 横向的分屏往上加 5map &lt;up&gt; :res +5&lt;CR&gt;# 横向的分屏往下减 5map &lt;down&gt; :res -5&lt;CR&gt;# 纵向的分屏宽度减 5map &lt;left&gt; :vertical resize-5&lt;CR&gt;# 纵向的分屏宽度加 5map &lt;right&gt; :vertical resize+5&lt;CR&gt;# 新建标签页map tn :tabe&lt;CR&gt;# 查看左边的标签页map tl :-tabnext&lt;CR&gt;# 查看右边的标签页map tr :+tabnext&lt;CR&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>在 <code>~/.vim/vimrc</code> 配置文件中</p><pre class="line-numbers language-none"><code class="language-none">call plug#begin('~/.vim/plugged')# 安装 vim-airline 插件Plug 'vim-airline/vim-airline'# 安装配色Plug 'connorholyday/vim-snazzy'call plug#end()# 详见 https://github.com/connorholyday/vim-snazzy# 设置配色color snazzy# 设置透明背景let g:SnazzyTransparent = 1# 然后在命令行模式下输入# :PlugInstall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Vim 是一个功能强大的文本编辑器，通过熟练掌握其快捷键和配置，你可以极大提升编辑效率。希望这篇文章能帮助你更好地使用 Vim，成为文本编辑的高手。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell 重定向：控制数据流向的艺术</title>
      <link href="posts/8af44f1b.html"/>
      <url>posts/8af44f1b.html</url>
      
        <content type="html"><![CDATA[<p>在 Unix 或 Linux 系统中，我们通常会使用 Shell 来与操作系统交互。在这个过程中，数据的输入和输出是两个非常基础且重要的操作。</p><p>理解和掌握输入输出重定向是提高 Shell 使用效率的关键。本文旨在用简单易懂的语言，为你揭开 Shell 重定向的神秘面纱。</p><h2 id="标准的输入与输出"><a href="#标准的输入与输出" class="headerlink" title="标准的输入与输出"></a>标准的输入与输出</h2><p>在 Shell 中，默认情况下，程序的输入来源于键盘，输出则显示在屏幕上。这种默认的行为对我们日常的使用来说是非常方便的。但有时候，我们需要更灵活地控制数据的流向，这时候就需要用到输入输出重定向的技术了。</p><h2 id="输入输出重定向简介"><a href="#输入输出重定向简介" class="headerlink" title="输入输出重定向简介"></a>输入输出重定向简介</h2><h3 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h3><p>输入重定向允许我们将程序的输入从键盘改为来自于文件或其他数据源。这意味着程序会从我们指定的文件中读取输入，而不是等待我们通过键盘输入。</p><h3 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h3><p>与输入重定向相反，输出重定向让我们可以将程序的输出发送到除了终端显示器外的其他位置，比如文件中。这在我们需要保存输出结果以供后续处理时非常有用。</p><h2 id="与输入输出有关的文件描述符"><a href="#与输入输出有关的文件描述符" class="headerlink" title="与输入输出有关的文件描述符"></a>与输入输出有关的文件描述符</h2><p>在深入理解输入输出重定向之前，我们需要先明白文件描述符的概念。文件描述符是一个数字，它代表着一个打开文件的引用。在 Shell 中，有三个基本的文件描述符：</p><ul><li><strong>0</strong> - 标准输入（<code>stdin</code>），默认从键盘读取</li><li><strong>1</strong> - 标准输出（<code>stdout</code>），默认输出到显示器</li><li><strong>2</strong> - 标准错误输出（<code>stderr</code>），默认也是输出到显示器</li></ul><p>了解这三个文件描述符对于理解接下来的内容至关重要。</p><h2 id="输出重定向-1"><a href="#输出重定向-1" class="headerlink" title="输出重定向"></a>输出重定向</h2><p>输出重定向允许我们将命令的输出结果从标准输出（通常是屏幕）重定向到文件中。这对于保存命令的执行结果非常有用。</p><h3 id="Bash-支持的输出重定向符号"><a href="#Bash-支持的输出重定向符号" class="headerlink" title="Bash 支持的输出重定向符号"></a>Bash 支持的输出重定向符号</h3><h4 id="标准输出重定向"><a href="#标准输出重定向" class="headerlink" title="标准输出重定向"></a>标准输出重定向</h4><ul><li><code>&gt;</code> 用于将命令的正确输出重定向到文件中，如果文件已存在，则覆盖。</li><li><code>&gt;&gt;</code> 用于将命令的正确输出重定向到文件中，如果文件已存在，则追加。</li></ul><p>例如，将 <code>echo</code> 命令的输出保存到文件中：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># 标准输出重定向</span><span class="token function">ls</span> <span class="token parameter variable">-l</span> <span class="token operator">&gt;</span> output.txt<span class="token comment"># 追加到文件</span><span class="token builtin class-name">echo</span> <span class="token string">"追加到文件末尾"</span> <span class="token operator">&gt;&gt;</span> output.txt<span class="token comment"># 错误输出重定向</span><span class="token function">ls</span> not_exists <span class="token operator"><span class="token file-descriptor important">2</span>&gt;&gt;</span> error.log<span class="token comment"># 同时保存输出和错误信息</span>./your_script.sh <span class="token operator">&gt;</span> output.txt <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span><span class="token builtin class-name">echo</span> <span class="token string">"Hello, World!"</span> <span class="token operator">&gt;</span> hello.txt  <span class="token comment"># 创建或覆盖 hello.txt 文件</span><span class="token builtin class-name">echo</span> <span class="token string">"Another line."</span> <span class="token operator">&gt;&gt;</span> hello.txt  <span class="token comment"># 追加内容到 hello.txt 文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="标准错误输出重定向"><a href="#标准错误输出重定向" class="headerlink" title="标准错误输出重定向"></a>标准错误输出重定向</h4><ul><li><code>2&gt;</code> 用于将命令的错误输出重定向到文件中，如果文件已存在，则覆盖。</li><li><code>2&gt;&gt;</code> 用于将命令的错误输出重定向到文件中，如果文件已存在，则追加。</li></ul><h4 id="正确输出和错误信息同时保存"><a href="#正确输出和错误信息同时保存" class="headerlink" title="正确输出和错误信息同时保存"></a>正确输出和错误信息同时保存</h4><ul><li><code>command &gt;file 2&gt;&amp;1</code> 将标准输出和错误输出都重定向到同一个文件中，覆盖模式。</li><li><code>command &gt;&gt;file 2&gt;&amp;1</code> 同上，追加模式。</li><li><code>command &gt;file1 2&gt;file2</code> 将标准输出和错误输出分别重定向到两个不同的文件中，覆盖模式。</li></ul><h3 id="输入重定向-1"><a href="#输入重定向-1" class="headerlink" title="输入重定向"></a>输入重定向</h3><p>输入重定向使我们能够改变命令的输入来源，不再限于键盘输入。这意味着我们可以从文件中读取输入。</p><h4 id="Bash-支持的输入重定向符号"><a href="#Bash-支持的输入重定向符号" class="headerlink" title="Bash 支持的输入重定向符号"></a>Bash 支持的输入重定向符号</h4><ul><li><code>&lt;</code> 用于将文件内容作为命令的输入。</li><li><code>&lt;&lt;END</code> 从标准输入（键盘）读取数据，直到遇到<code>END</code>标记为止，<code>END</code>是自定义的终止字符串。</li></ul><p>例如，使用 <code>cat</code> 命令读取文件内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># 使用自定义的分界符进行输入</span><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">END这是一个多行文本输入示例。END</span><span class="token function">cat</span> <span class="token operator">&lt;</span> hello.txt  <span class="token comment"># 使用文件 hello.txt 的内容作为 cat 命令的输入</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用输入输出重定向，我们可以实现数据在程序、文件和终端之间灵活流动。掌握这些技巧后，你就可以更加高效地使用 Shell 进行各种任务处理了。</p><p>希望本文能帮助你理解和应用 Shell 输入输出重定向的基本概念和技巧。</p>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell 内建命令：Shell 的内在魔力</title>
      <link href="posts/a915d50b.html"/>
      <url>posts/a915d50b.html</url>
      
        <content type="html"><![CDATA[<h1 id="shell-内建命令（内置命令）"><a href="#shell-内建命令（内置命令）" class="headerlink" title="shell 内建命令（内置命令）"></a>shell 内建命令（内置命令）</h1><p>今天我们来深入挖掘一下 Shell 的内在魔力——内建命令。</p><p>通常来说，内建命令会比外部命令执行得更快，执行外部命令时不但会触发磁盘 I/O，还需要 fork 出一个单独的进程来执行，执行完成后再退出。而执行内建命令相当于调用当前 Shell 进程的一个函数。</p><h2 id="检查一个命令是否是内建命令"><a href="#检查一个命令是否是内建命令" class="headerlink" title="检查一个命令是否是内建命令"></a>检查一个命令是否是内建命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># cd 是一个内建命令</span><span class="token builtin class-name">type</span> <span class="token builtin class-name">cd</span><span class="token comment"># cd is a shell builtin</span><span class="token comment"># 可见 ifconfig 是一个外部文件，它的位置时 /sbin/ifconfig</span><span class="token builtin class-name">type</span> <span class="token function">ifconfig</span><span class="token comment"># ifconfig is /sbin/ifconfig</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Bash-Shell-内建命令"><a href="#Bash-Shell-内建命令" class="headerlink" title="Bash Shell 内建命令"></a>Bash Shell 内建命令</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>:</td><td>扩展参数列表，执行重定向操作</td></tr><tr><td>.</td><td>读取并执行指定文件中的命令（在当前 shell 环境中）</td></tr><tr><td>alias</td><td>为指定命令定义一个别名</td></tr><tr><td>bg</td><td>将作业以后台模式运行</td></tr><tr><td>bind</td><td>将键盘序列绑定到一个 readline 函数或宏</td></tr><tr><td>break</td><td>退出 for、while、select 或 until 循环</td></tr><tr><td>builtin</td><td>执行指定的 shell 内建命令</td></tr><tr><td>caller</td><td>返回活动子函数调用的上下文</td></tr><tr><td>cd</td><td>将当前目录切换为指定的目录</td></tr><tr><td>command</td><td>执行指定的命令，无需进行通常的 shell 查找</td></tr><tr><td>compgen</td><td>为指定单词生成可能的补全匹配</td></tr><tr><td>complete</td><td>显示指定的单词是如何补全的</td></tr><tr><td>compopt</td><td>修改指定单词的补全选项</td></tr><tr><td>continue</td><td>继续执行 for、while、select 或 until 循环的下一次迭代</td></tr><tr><td>declare</td><td>声明一个变量或变量类型。</td></tr><tr><td>dirs</td><td>显示当前存储目录的列表</td></tr><tr><td>disown</td><td>从进程作业表中刪除指定的作业</td></tr><tr><td>echo</td><td>将指定字符串输出到 STDOUT</td></tr><tr><td>enable</td><td>启用或禁用指定的内建shell命令</td></tr><tr><td>eval</td><td>将指定的参数拼接成一个命令，然后执行该命令</td></tr><tr><td>exec</td><td>用指定命令替换 shell 进程</td></tr><tr><td>exit</td><td>强制 shell 以指定的退出状态码退出</td></tr><tr><td>export</td><td>设置子 shell 进程可用的变量</td></tr><tr><td>fc</td><td>从历史记录中选择命令列表</td></tr><tr><td>fg</td><td>将作业以前台模式运行</td></tr><tr><td>getopts</td><td>分析指定的位置参数</td></tr><tr><td>hash</td><td>查找并记住指定命令的全路径名</td></tr><tr><td>help</td><td>显示帮助文件</td></tr><tr><td>history</td><td>显示命令历史记录</td></tr><tr><td>jobs</td><td>列出活动作业</td></tr><tr><td>kill</td><td>向指定的进程 ID(PID) 发送一个系统信号</td></tr><tr><td>let</td><td>计算一个数学表达式中的每个参数</td></tr><tr><td>local</td><td>在函数中创建一个作用域受限的变量</td></tr><tr><td>logout</td><td>退出登录 shell</td></tr><tr><td>mapfile</td><td>从 STDIN 读取数据行，并将其加入索引数组</td></tr><tr><td>popd</td><td>从目录栈中删除记录</td></tr><tr><td>printf</td><td>使用格式化字符串显示文本</td></tr><tr><td>pushd</td><td>向目录栈添加一个目录</td></tr><tr><td>pwd</td><td>显示当前工作目录的路径名</td></tr><tr><td>read</td><td>从 STDIN 读取一行数据并将其赋给一个变量</td></tr><tr><td>readarray</td><td>从 STDIN 读取数据行并将其放入索引数组</td></tr><tr><td>readonly</td><td>从 STDIN 读取一行数据并将其赋给一个不可修改的变量</td></tr><tr><td>return</td><td>强制函数以某个值退出，这个值可以被调用脚本提取</td></tr><tr><td>set</td><td>设置并显示环境变量的值和 shell 属性</td></tr><tr><td>shift</td><td>将位置参数依次向下降一个位置</td></tr><tr><td>shopt</td><td>打开/关闭控制 shell 可选行为的变量值</td></tr><tr><td>source</td><td>读取并执行指定文件中的命令（在当前 shell 环境中）</td></tr><tr><td>suspend</td><td>暂停 Shell 的执行，直到收到一个 SIGCONT 信号</td></tr><tr><td>test</td><td>基于指定条件返回退出状态码 0 或 1</td></tr><tr><td>times</td><td>显示累计的用户和系统时间</td></tr><tr><td>trap</td><td>如果收到了指定的系统信号，执行指定的命令</td></tr><tr><td>type</td><td>显示指定的单词如果作为命令将会如何被解释</td></tr><tr><td>typeset</td><td>声明一个变量或变量类型。</td></tr><tr><td>ulimit</td><td>为系统用户设置指定的资源的上限</td></tr><tr><td>umask</td><td>为新建的文件和目录设置默认权限</td></tr><tr><td>unalias</td><td>刪除指定的别名</td></tr><tr><td>unset</td><td>刪除指定的环境变量或 shell 属性</td></tr><tr><td>wait</td><td>等待指定的进程完成，并返回退出状态码</td></tr></tbody></table><h2 id="alias-给命令创建别名"><a href="#alias-给命令创建别名" class="headerlink" title="alias 给命令创建别名"></a>alias 给命令创建别名</h2><h3 id="查看所有别名"><a href="#查看所有别名" class="headerlink" title="查看所有别名"></a>查看所有别名</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 不带任何参数，则列出当前 shell 进程中所有别名</span><span class="token builtin class-name">alias</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="设置别名"><a href="#设置别名" class="headerlink" title="设置别名"></a>设置别名</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 为获取当前的 unix 时间戳设置别名 timestamp</span><span class="token builtin class-name">alias</span> <span class="token assign-left variable">timestamp</span><span class="token operator">=</span><span class="token string">'date +%s'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="删除别名"><a href="#删除别名" class="headerlink" title="删除别名"></a>删除别名</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 删除 timestamp 别名</span><span class="token builtin class-name">unalias</span> timestamp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="echo-用于在终端输出字符串"><a href="#echo-用于在终端输出字符串" class="headerlink" title="echo 用于在终端输出字符串"></a>echo 用于在终端输出字符串</h2><p>默认在末尾加上了换行符</p><h3 id="不换行"><a href="#不换行" class="headerlink" title="不换行"></a>不换行</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"Alex"</span><span class="token assign-left variable">age</span><span class="token operator">=</span><span class="token number">26</span><span class="token assign-left variable">height</span><span class="token operator">=</span><span class="token number">168</span><span class="token assign-left variable">weight</span><span class="token operator">=</span><span class="token number">62</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">${name}</span> is <span class="token variable">${age}</span> years old, "</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">${height}</span>cm in height "</span><span class="token builtin class-name">echo</span> <span class="token string">"and <span class="token variable">${weight}</span>kg in weight."</span><span class="token builtin class-name">echo</span> <span class="token string">"Thank you!"</span><span class="token comment"># Alex is 26 years old, 168cm in height and 62kg in weight.</span><span class="token comment"># Thank you!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="输出转义字符"><a href="#输出转义字符" class="headerlink" title="输出转义字符"></a>输出转义字符</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"Alex"</span><span class="token assign-left variable">age</span><span class="token operator">=</span><span class="token number">26</span><span class="token assign-left variable">height</span><span class="token operator">=</span><span class="token number">168</span><span class="token assign-left variable">weight</span><span class="token operator">=</span><span class="token number">62</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token variable">${name}</span> is <span class="token variable">${age}</span> years old,<span class="token entity" title="\n">\n</span> "</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">${height}</span>cm in height "</span><span class="token builtin class-name">echo</span> <span class="token string">"and <span class="token variable">${weight}</span>kg in weight."</span><span class="token builtin class-name">echo</span> <span class="token string">"Thank you!"</span><span class="token comment"># Alex is 26 years old,</span><span class="token comment">#</span><span class="token comment"># 168cm in height and 62kg in weight.</span><span class="token comment"># Thank you!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="强制不换行"><a href="#强制不换行" class="headerlink" title="强制不换行"></a>强制不换行</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"Alex"</span><span class="token assign-left variable">age</span><span class="token operator">=</span><span class="token number">26</span><span class="token assign-left variable">height</span><span class="token operator">=</span><span class="token number">168</span><span class="token assign-left variable">weight</span><span class="token operator">=</span><span class="token number">62</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token variable">${name}</span> is <span class="token variable">${age}</span> years old,<span class="token entity" title="\c">\c</span> "</span><span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token variable">${height}</span>cm in height "</span><span class="token builtin class-name">echo</span> <span class="token string">"and <span class="token variable">${weight}</span>kg in weight."</span><span class="token builtin class-name">echo</span> <span class="token string">"Thank you!"</span><span class="token comment"># Alex is 26 years old,168cm in height</span><span class="token comment"># and 62kg in weight.</span><span class="token comment"># Thank you!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="printf"><a href="#printf" class="headerlink" title="printf"></a>printf</h2><table><thead><tr><th>格式替代符</th><th>含义</th></tr></thead><tbody><tr><td>%s</td><td>输出一个字符串</td></tr><tr><td>%d</td><td>输出一个整型</td></tr><tr><td>%c</td><td>输出一个字符</td></tr><tr><td>%f</td><td>输出一个小数</td></tr><tr><td>%-10s</td><td>指一个宽度为 10 个字符（-表示左对齐，没有则表示右对齐），任何字符都会被显示在 10 个字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来。</td></tr><tr><td>%-4.2f</td><td>格式化为小数，其中 <code>.2</code> 指保留 2 位小数</td></tr></tbody></table><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#!/bin/bash</span><span class="token builtin class-name">printf</span> <span class="token string">"%-10s %-8s %-4s<span class="token entity" title="\n">\n</span>"</span> 姓名 性别 体重kg<span class="token builtin class-name">printf</span> <span class="token string">"%-10s %-8s %-4.2f<span class="token entity" title="\n">\n</span>"</span> alex 男 <span class="token number">62.3452</span><span class="token comment"># 姓名     性别   体重kg</span><span class="token comment"># alex       男      62.35</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="read-用来从标准输入中读取数据并赋值给变量"><a href="#read-用来从标准输入中读取数据并赋值给变量" class="headerlink" title="read 用来从标准输入中读取数据并赋值给变量"></a>read 用来从标准输入中读取数据并赋值给变量</h2><blockquote><p>如果没有进行重定向，默认就是从键盘读取用户输入的数据；如果进行了重定向，那么可以从文件中读取数据。</p></blockquote><p>read 命令的用法为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># options 表示选项</span><span class="token comment"># variables 表示用来存储数据的变量，可以有一个，也可以有多个</span><span class="token builtin class-name">read</span> <span class="token punctuation">[</span>-options<span class="token punctuation">]</span> <span class="token punctuation">[</span>variables<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>options 支持的选项有：</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-a new_array</td><td>把读取的数据赋值给数组 new_array，从下标 0 开始。</td></tr><tr><td>-d delimiter</td><td>用字符串 delimiter 指定读取结束的位置，而不是一个换行符（读取到的数据不包括 delimiter）。</td></tr><tr><td>-e</td><td>在获取用户输入的时候，对功能键进行编码转换，不会直接显式功能键对应的字符。</td></tr><tr><td>-n num</td><td>读取 num 个字符，而不是整行字符。</td></tr><tr><td>-p prompt</td><td>显示提示信息，提示内容为 prompt。</td></tr><tr><td>-r</td><td>原样读取（Raw mode），不把反斜杠字符解释为转义字符。</td></tr><tr><td>-s</td><td>静默模式（Silent mode），不会在屏幕上显示输入的字符。当输入密码和其它确认信息的时候，这是很有必要的。</td></tr><tr><td>-t seconds</td><td>设置超时时间，单位为秒。如果用户没有在指定时间内输入完成，那么 read 将会返回一个非 0 的退出状态，表示读取失败。</td></tr><tr><td>-u fd</td><td>使用文件描述符 fd 作为输入源，而不是标准输入，类似于重定向。</td></tr></tbody></table><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#!/bin/bash</span><span class="token comment"># 使用 read 命令给多个变量赋值</span><span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"Enter your name, age and city ===&gt; "</span> name age city<span class="token builtin class-name">echo</span> <span class="token string">"你的名字为：<span class="token variable">${name}</span>"</span><span class="token builtin class-name">echo</span> <span class="token string">"你的年龄为：<span class="token variable">${age}</span>"</span><span class="token builtin class-name">echo</span> <span class="token string">"你所在的城市为：<span class="token variable">${city}</span>"</span><span class="token comment"># Enter your name, age and city ===&gt; alex 26 Shanghai</span><span class="token comment"># 你的名字为：alex</span><span class="token comment"># 你的年龄为：26</span><span class="token comment"># 你所在的城市为：Shanghai</span><span class="token comment">#########################################################</span><span class="token comment">#!/bin/bash</span><span class="token comment"># 在指定时间内输入密码</span><span class="token keyword">if</span>    <span class="token builtin class-name">read</span> <span class="token parameter variable">-t</span> <span class="token number">20</span> <span class="token parameter variable">-sp</span> <span class="token string">"Enter password in 20 seconds(once) ====&gt; "</span> pass1 <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">printf</span> <span class="token string">"<span class="token entity" title="\n">\n</span>"</span> <span class="token operator">&amp;&amp;</span> <span class="token comment"># 第一次输入密码</span>    <span class="token builtin class-name">read</span> <span class="token parameter variable">-t</span> <span class="token number">20</span> <span class="token parameter variable">-sp</span> <span class="token string">"Please confirm your password again in 20 seconds ====&gt; "</span> pass2 <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">printf</span> <span class="token string">"<span class="token entity" title="\n">\n</span>"</span> <span class="token operator">&amp;&amp;</span> <span class="token comment"># 确认密码</span>    <span class="token punctuation">[</span> <span class="token variable">$pass1</span> <span class="token operator">==</span> <span class="token variable">$pass2</span> <span class="token punctuation">]</span>  <span class="token comment"># 判断两次输入的密码是否相等</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"your password is ok!"</span><span class="token keyword">else</span>    <span class="token builtin class-name">echo</span> <span class="token string">"Invalid password"</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="exit-用来退出当前-shell-进程，并返回一个退出状态"><a href="#exit-用来退出当前-shell-进程，并返回一个退出状态" class="headerlink" title="exit 用来退出当前 shell 进程，并返回一个退出状态"></a>exit 用来退出当前 shell 进程，并返回一个退出状态</h2><ul><li>可以使用 <code>$?</code> 接收这个退出状态</li><li>可以接受一个整数值作为参数，代表退出状态，如果不指定，默认状态值是 0</li><li>退出状态为 0 表示成功，退出状态非 0 表示执行出错或失败</li><li>退出状态只能是一个介于 <code>0~255</code> 之间的整数，其中只有 0 表示成功，其他值都表示失败</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#!/bin/bash</span><span class="token builtin class-name">echo</span> <span class="token string">"before exit"</span>  <span class="token comment"># 只会输出 before exit</span><span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token builtin class-name">echo</span> <span class="token string">"after exit"</span>  <span class="token comment"># 不会输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="declare-和-typeset-用来设置变量属性"><a href="#declare-和-typeset-用来设置变量属性" class="headerlink" title="declare 和 typeset 用来设置变量属性"></a>declare 和 typeset 用来设置变量属性</h2><blockquote><p>typeset 已经被废弃，建议使用 declare</p></blockquote><p>declare 的用法为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># - 表示设置属性</span><span class="token comment"># + 表示取消属性</span><span class="token comment"># aAfFgilprtux 表示具体的选项</span><span class="token builtin class-name">declare</span> <span class="token punctuation">[</span>+/-<span class="token punctuation">]</span> <span class="token punctuation">[</span>aAfFgilprtux<span class="token punctuation">]</span> <span class="token punctuation">[</span>变量名<span class="token operator">=</span>变量值<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>aAfFgilprtux 支持的选项有：</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-f [name]</td><td>列出之前由用户在脚本中定义的函数名称和函数体。</td></tr><tr><td>-F [name]</td><td>仅列出自定义函数名称。</td></tr><tr><td>-g name</td><td>在 Shell 函数内部创建全局变量。</td></tr><tr><td>-p [name]</td><td>显示指定变量的属性和值。</td></tr><tr><td>-a name</td><td>声明变量为普通数组。</td></tr><tr><td>-A name</td><td>声明变量为关联数组（支持索引下标为字符串）。</td></tr><tr><td>-i name</td><td>将变量定义为整数型。</td></tr><tr><td>-r name[=value]</td><td>将变量定义为只读（不可修改和删除），等价于 readonly name。</td></tr><tr><td>-x name[=value]</td><td>将变量设置为环境变量，等价于 export name[=value]。</td></tr></tbody></table><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#!/bin/bash</span><span class="token comment"># 将变量声明为整数并进行计算</span><span class="token builtin class-name">declare</span> <span class="token parameter variable">-i</span> x y ret<span class="token assign-left variable">x</span><span class="token operator">=</span><span class="token number">11</span><span class="token assign-left variable">y</span><span class="token operator">=</span><span class="token number">22</span><span class="token assign-left variable">ret</span><span class="token operator">=</span><span class="token variable">$x</span>+<span class="token variable">$y</span><span class="token builtin class-name">echo</span> <span class="token variable">$ret</span>  <span class="token comment"># 33</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内建命令是 Shell 的核心功能，它们提供了快速且强大的工具来处理日常任务。掌握这些内建命令，可以帮助你更高效地编写 Shell 脚本和命令行程序。</p><p>希望这篇文章能够帮助你更好地理解和使用 Shell 内建命令。</p>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell 函数深入解析与实践</title>
      <link href="posts/9d11e5.html"/>
      <url>posts/9d11e5.html</url>
      
        <content type="html"><![CDATA[<p>在本文中，我们将深入探讨 Shell 函数的定义、参数传递、以及如何正确获取函数运算结果。</p><p>本教程旨在为刚入门的新手提供明晰的指南，同时也为有一定编程基础的开发者提供深入理解 shell 函数的机会。我们将通过实际代码示例，逐步展开讨论，以确保概念的清晰传达和理解。</p><h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><p>在 Shell 脚本中，定义函数的语法有几种形式，尽管它们在表现形式上略有不同，但实际上是等价的。以下是定义函数的三种基本方式：</p><blockquote><p>定义 shell 函数时 <strong>不能</strong> 指明参数，但是在调用时却可以传递参数，并且给它传递什么参数它就接收什么参数。</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 标准的函数写法</span><span class="token keyword">function</span> <span class="token function-name function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">return</span> <span class="token string">'demo-test'</span>  <span class="token comment"># 可以写 return 语句，也可以不写</span><span class="token punctuation">}</span><span class="token comment"># 也可以不写 function 关键字</span><span class="token function-name function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">return</span> <span class="token string">'demo-test'</span><span class="token punctuation">}</span><span class="token comment"># 还可以直接省略掉函数名后面的小括号</span><span class="token keyword">function</span> <span class="token function-name function">func</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">return</span> <span class="token string">'demo-test'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注意</strong>：在 Shell 中，<code>return</code> 语句用于返回函数的退出状态码，而非返回数据值。如果需要返回数据值，通常是通过 <code>echo</code> 或者全局变量的方式。</p></blockquote><h2 id="给函数传递位置参数"><a href="#给函数传递位置参数" class="headerlink" title="给函数传递位置参数"></a>给函数传递位置参数</h2><p>当我们调用函数时，可以向其传递位置参数。在 Shell 函数内部，这些参数可以通过 <code>$1</code>, <code>$2</code>, <code>$3</code> 等特殀变量访问。如果参数数量超过 9 个，需要使用花括号，例如 <code>${10}</code>, <code>${11}</code>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># 定义函数</span><span class="token keyword">function</span> <span class="token function-name function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$1</span>"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$2</span>"</span>  <span class="token comment"># 接收位置参数并打印</span><span class="token punctuation">}</span><span class="token comment"># 调用函数，传递两个参数</span>func name alex <span class="token comment"># 输出: name alex</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="计算函数参数的和"><a href="#计算函数参数的和" class="headerlink" title="计算函数参数的和"></a>计算函数参数的和</h2><p>我们还可以定义一个函数，来计算传入参数的和。通过使用特殊变量 <code>$@</code>，我们可以接收函数的所有参数。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">sum</span><span class="token operator">=</span><span class="token number">100</span>  <span class="token comment"># 全局变量</span><span class="token keyword">function</span> <span class="token function-name function">cal_sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token builtin class-name">local</span> <span class="token assign-left variable">sum</span><span class="token operator">=</span><span class="token number">0</span>  <span class="token comment"># 使用 local 关键字定义局部变量</span>  <span class="token keyword">for</span> <span class="token for-or-select variable">n</span> <span class="token keyword">in</span> <span class="token variable">$@</span>  <span class="token comment"># 遍历所有参数</span>  <span class="token keyword">do</span>    <span class="token variable"><span class="token punctuation">((</span>sum<span class="token operator">+=</span>n<span class="token punctuation">))</span></span>  <span class="token comment"># 累加参数值</span>  <span class="token keyword">done</span>  <span class="token builtin class-name">echo</span> <span class="token variable">$sum</span>  <span class="token comment"># 打印局部变量 sum 的值</span>  <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token assign-left variable">total</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>cal_sum <span class="token number">10</span> <span class="token number">20</span> <span class="token number">30</span> <span class="token number">40</span><span class="token variable">)</span></span><span class="token builtin class-name">echo</span> <span class="token variable">$total</span>  <span class="token comment"># 输出: 100</span><span class="token comment"># 返回函数的退出状态</span><span class="token builtin class-name">echo</span> <span class="token variable">$?</span>  <span class="token comment"># 输出: 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="获取函数的返回值"><a href="#获取函数的返回值" class="headerlink" title="获取函数的返回值"></a>获取函数的返回值</h2><p>在 Shell 中，使用特殊变量 <code>$?</code> 可以获取上一个命令的退出状态码。但需要注意的是，使用 <code>return</code> 返回大于 255 的数值时会出现问题，因为返回值是一个 8 位的数，范围从 0 到 255。</p><p><code>$?</code> 可以用来获取上一个命令的退出状态，但使用它来获取函数的返回值是一种错误的方式。这是因为 <code>$?</code> 只能捕获命令的退出状态，而不是函数的 <code>return</code> 语句的值：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">function</span> <span class="token function-name function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token builtin class-name">return</span> <span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> $1 + $2<span class="token variable">`</span></span><span class="token punctuation">}</span><span class="token function">add</span> <span class="token number">11</span> <span class="token number">22</span>  <span class="token comment"># 调用函数</span><span class="token builtin class-name">echo</span> <span class="token variable">$?</span>  <span class="token comment"># 输出可能是上一个命令的退出状态，而不是函数的返回值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>重要提示</strong>：在 Shell 编程中，将 <code>$?</code> 用于获取函数的“返回值”（在这里实质上是退出状态码）通常不是获取函数执行结果的正确方法，尤其是如果你想要获取的是函数处理的具体数据结果。相反，应该通过 <code>echo</code> 等命令将结果输出，并在函数外部通过命令替换的方式将其捕获到变量中。</p></blockquote><h2 id="正确的返回值获取方式"><a href="#正确的返回值获取方式" class="headerlink" title="正确的返回值获取方式"></a>正确的返回值获取方式</h2><p>要正确获取函数的返回值，应该使用函数的 return 语句，并在函数调用后立即检查 <code>$?</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">function</span> <span class="token function-name function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token builtin class-name">return</span> <span class="token variable"><span class="token variable">$((</span>$<span class="token number">1</span> <span class="token operator">+</span> $<span class="token number">2</span><span class="token variable">))</span></span>  <span class="token comment"># 使用 $(( )) 进行算术运算</span><span class="token punctuation">}</span><span class="token function">add</span> <span class="token number">11</span> <span class="token number">22</span>  <span class="token comment"># 调用函数</span><span class="token assign-left variable">result</span><span class="token operator">=</span><span class="token variable">$?</span>  <span class="token comment"># 正确获取函数的返回值</span><span class="token builtin class-name">echo</span> <span class="token variable">$result</span>  <span class="token comment"># 输出：33</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过本文的学习，希望你能对 Shell 函数的相关概念有了更深入的理解，并能在实际的脚本编写中运用这些知识。记住，实践是学习的关键，不要害怕尝试和犯错！</p>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell 变量详解：如何定义、使用和管理</title>
      <link href="posts/c60e5e2c.html"/>
      <url>posts/c60e5e2c.html</url>
      
        <content type="html"><![CDATA[<p>在编写 Shell 脚本时，变量扮演着极为重要的角色。它们使我们能够临时保存数据，以便在脚本的其他部分中使用。</p><p>本文将通过简单的语言和清晰的示例，帮助你掌握 Shell 变量的基础知诀，无论你是初学者还是具备一定编程经验的开发者，都能从中获益。</p><h2 id="变量的基本规则"><a href="#变量的基本规则" class="headerlink" title="变量的基本规则"></a>变量的基本规则</h2><p>在 Bash Shell 中，变量的值默认为字符串类型，且在进行变量赋值时，等号<code>=</code>两侧不能有空格。</p><h3 id="变量命名规范"><a href="#变量命名规范" class="headerlink" title="变量命名规范"></a>变量命名规范</h3><ol><li>变量名可由数字、字母、下划线构成；</li><li>必须以字母或下划线开头；</li><li>不能使用 Shell 中的关键字（可通过 <code>help</code> 命令查看保留关键字列表）。</li></ol><h3 id="特殊变量一览"><a href="#特殊变量一览" class="headerlink" title="特殊变量一览"></a>特殊变量一览</h3><p>下面的表格简要介绍了几个常用的特殊变量及其含义：</p><table><thead><tr><th>变量</th><th>含义</th></tr></thead><tbody><tr><td><code>$0</code></td><td>当前脚本的文件名</td></tr><tr><td><code>$n</code></td><td>脚本或函数的第 n 个参数。注意：当 n≥10 时，应使用 <code>${n}</code> 的格式</td></tr><tr><td><code>$#</code></td><td>传递给脚本或函数的参数个数</td></tr><tr><td><code>$*</code></td><td>传递给脚本或函数的所有参数（作为一个整体）</td></tr><tr><td><code>$@</code></td><td>传递给脚本或函数的所有参数（作为独立的多个值）</td></tr><tr><td><code>$?</code></td><td>上一个命令的退出状态或函数的返回值</td></tr><tr><td><code>$$</code></td><td>当前 Shell 进程的 PID</td></tr><tr><td><code>$!</code></td><td>后台运行的最后一个进程的 PID</td></tr></tbody></table><h2 id="如何定义变量"><a href="#如何定义变量" class="headerlink" title="如何定义变量"></a>如何定义变量</h2><p>定义变量的方式主要有三种：不加引号、单引号和双引号。选择哪种方式取决于你希望如何处理其中的特殊字符和变量。</p><h3 id="单引号包围"><a href="#单引号包围" class="headerlink" title="单引号包围"></a>单引号包围</h3><p>单引号内的内容将完全按字面意义处理，不解析变量或执行命令。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">word</span><span class="token operator">=</span><span class="token string">'Hello $USER'</span><span class="token builtin class-name">echo</span> <span class="token variable">$word</span>  <span class="token comment"># 输出 Hello $USER 字符串本身</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="双引号包围"><a href="#双引号包围" class="headerlink" title="双引号包围"></a>双引号包围</h3><p>双引号内的内容可以解析变量，执行命令。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">word</span><span class="token operator">=</span><span class="token string">"Hello <span class="token environment constant">$USER</span>"</span><span class="token builtin class-name">echo</span> <span class="token variable">$word</span>  <span class="token comment"># 输出 Hello 后跟当前用户名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="不加引号"><a href="#不加引号" class="headerlink" title="不加引号"></a>不加引号</h3><p>不加引号时，如果值中包含空格，需要特别注意，因为 Shell 会将空格后的内容视为另一个命令或参数。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">variable</span><span class="token operator">=</span>value<span class="token builtin class-name">echo</span> <span class="token variable">${variable}</span>  <span class="token comment"># 输出 value</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h2><p>在使用变量时，强烈推荐将变量名包围在花括号<code>{}</code>中。这不仅是一个良好的编程习惯，而且有助于明确变量的边界。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"alex"</span><span class="token builtin class-name">echo</span> <span class="token string">"My name is <span class="token variable">${name}</span>."</span>  <span class="token comment"># 输出 My name is alex.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="修改变量的值"><a href="#修改变量的值" class="headerlink" title="修改变量的值"></a>修改变量的值</h2><p>变量一旦定义后，我们可以按需更改其值。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"alex"</span><span class="token builtin class-name">echo</span> <span class="token variable">${name}</span>  <span class="token comment"># 输出 alex</span><span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"harry"</span><span class="token builtin class-name">echo</span> <span class="token variable">${name}</span>  <span class="token comment"># 输出 harry</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="将命令的输出赋值给变量"><a href="#将命令的输出赋值给变量" class="headerlink" title="将命令的输出赋值给变量"></a>将命令的输出赋值给变量</h2><p>可以通过反引号<code>`</code>或 <code>$()</code> 将命令的输出结果赋值给变量，<code>$()</code> 方式具有可嵌套的特性且可读性更强。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">path</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">pwd</span><span class="token variable">)</span></span><span class="token builtin class-name">echo</span> <span class="token variable">${path}</span>  <span class="token comment"># 输出当前目录路径</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>示例：计算脚本的运行时间</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">begin_time</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%s<span class="token variable">`</span></span>    <span class="token comment">#开始时间，使用``替换</span><span class="token function">sleep</span> 20s                <span class="token comment">#休眠20秒</span><span class="token assign-left variable">finish_time</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%s<span class="token variable">)</span></span>  <span class="token comment">#结束时间，使用$()替换</span><span class="token assign-left variable">run_time</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>finish_time <span class="token operator">-</span> begin_time<span class="token variable">))</span></span>  <span class="token comment">#时间差</span><span class="token builtin class-name">echo</span> <span class="token string">"begin time: <span class="token variable">$begin_time</span>"</span><span class="token builtin class-name">echo</span> <span class="token string">"finish time: <span class="token variable">$finish_time</span>"</span><span class="token builtin class-name">echo</span> <span class="token string">"run time: <span class="token variable">${run_time}</span>s"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="只读变量"><a href="#只读变量" class="headerlink" title="只读变量"></a>只读变量</h2><p>使用 <code>readonly</code> 命令可以将变量设置为只读，尝试更改这些变量的值将导致错误。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"alex"</span><span class="token builtin class-name">readonly</span> name<span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">"ben"</span>  <span class="token comment"># 尝试执行将引发错误</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h2><p>使用 <code>unset</code> 命令可以删除变量。但需要注意的是，这个命令不能删除只读变量。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">path</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">pwd</span><span class="token variable">)</span></span><span class="token builtin class-name">unset</span> path<span class="token builtin class-name">echo</span> <span class="token variable">${path}</span>  <span class="token comment"># 此时没有任何输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，我们对 Shell 变量的定义、使用和管理方法有了基本的了解。通过这篇文章，你应该能够在你的脚本中更灵活地使用变量来存储和修改数据了。</p><p>记得实践是学习的最佳方式，所以不妨动手尝试一下吧！</p>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell 循环语句：重复任务的自动化利器</title>
      <link href="posts/33c4223c.html"/>
      <url>posts/33c4223c.html</url>
      
        <content type="html"><![CDATA[<p>在日复一日的脚本编程中，循环语句无疑是我们最好的朋友。通过循环，我们可以执行重复的任务，无论是遍历文件列表，处理文本数据，还是简单的数学运算。</p><p>今天，我们就来聊聊 shell 脚本中的几种循环语句，它们将如何帮助我们简化编程任务。</p><h2 id="while-循环：当条件满足时循环"><a href="#while-循环：当条件满足时循环" class="headerlink" title="while 循环：当条件满足时循环"></a>while 循环：当条件满足时循环</h2><p><code>while</code> 循环非常有用，基本语法是当条件为真（即返回值为 0）时，就执行循环体内的语句。使用它可以执行诸如从 1 加到 100 这样简单但有趣的任务。</p><p><strong>例子：实现 1 到 100 的求和</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">sum</span><span class="token operator">=</span><span class="token number">0</span><span class="token keyword">while</span> <span class="token variable"><span class="token punctuation">((</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">))</span></span><span class="token keyword">do</span>  <span class="token variable"><span class="token punctuation">((</span>sum <span class="token operator">+=</span> i<span class="token punctuation">))</span></span>  <span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token keyword">done</span><span class="token builtin class-name">echo</span> <span class="token string">"The sum is ===&gt; <span class="token variable">$sum</span>"</span><span class="token comment"># 输出：The sum is ===&gt; 5050</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>例子：实现一个简单的加法计算器</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">sum</span><span class="token operator">=</span><span class="token number">0</span><span class="token builtin class-name">echo</span> <span class="token string">'输入数字，进行加法计算（按住 Ctrl + D 组合键获取结果）'</span><span class="token keyword">while</span> <span class="token builtin class-name">read</span> n<span class="token keyword">do</span>  <span class="token variable"><span class="token punctuation">((</span>sum <span class="token operator">+=</span> n<span class="token punctuation">))</span></span><span class="token keyword">done</span><span class="token builtin class-name">echo</span> <span class="token string">"The sum is ====&gt; <span class="token variable">$sum</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这两个例子中，我们可以看到 <code>while</code> 循环如何在满足条件的情况下反复执行，直到条件不再成立。特别是在第二个例子中，我们利用了 <code>read</code> 命令读取用户输入，这在脚本交互中非常常见。</p><h2 id="for-in-循环：遍历列表元素"><a href="#for-in-循环：遍历列表元素" class="headerlink" title="for-in 循环：遍历列表元素"></a>for-in 循环：遍历列表元素</h2><p><code>for-in</code> 循环的用法与 Python 中的非常相似，用于遍历列表中的每个元素。这种方式编写的代码可读性强，易于理解。</p><p><strong>直接给出具体的值作为列表</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">sum</span><span class="token operator">=</span><span class="token number">0</span><span class="token keyword">for</span> <span class="token for-or-select variable">n</span> <span class="token keyword">in</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span><span class="token keyword">do</span>  <span class="token builtin class-name">echo</span> <span class="token variable">$n</span>  <span class="token variable"><span class="token punctuation">((</span>sum <span class="token operator">+=</span> n<span class="token punctuation">))</span></span><span class="token keyword">done</span><span class="token builtin class-name">echo</span> <span class="token string">'The sum is '</span><span class="token variable">$sum</span><span class="token comment"># 输出分别为 1 2 3 4 5 6 和 The sum is 21</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>给出一个取值范围作为列表</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">sum</span><span class="token operator">=</span><span class="token number">0</span><span class="token keyword">for</span> <span class="token for-or-select variable">n</span> <span class="token keyword">in</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">100</span><span class="token punctuation">}</span><span class="token keyword">do</span>  <span class="token variable"><span class="token punctuation">((</span>sum <span class="token operator">+=</span> n<span class="token punctuation">))</span></span><span class="token keyword">done</span><span class="token builtin class-name">echo</span> <span class="token string">"The result is <span class="token variable">${sum}</span>"</span><span class="token comment"># 输出：The result is 5050</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用命令的执行结果作为列表</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">for</span> <span class="token for-or-select variable">filename</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">ls</span> *.sh<span class="token variable">)</span></span><span class="token keyword">do</span>  <span class="token builtin class-name">echo</span> <span class="token string">"当前目录下所有的以 .sh 为后缀的文件为 ==&gt; <span class="token variable">${filename}</span>"</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这些示例中，我们看到 <code>for-in</code> 循环如何通过直接列出元素、指定范囹、甚至使用命令的输出作为列表来实现强大的遍历功能。</p><h2 id="select-in-循环：增强脚本交互性"><a href="#select-in-循环：增强脚本交互性" class="headerlink" title="select-in 循环：增强脚本交互性"></a>select-in 循环：增强脚本交互性</h2><p><code>select-in</code> 循环是脚本中用于交互的强大工具，它会显示一个带编号的菜单，用户通过输入编号来进行选择，进而执行不同的功能。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token builtin class-name">echo</span> <span class="token string">'你喜欢哪种运动？'</span><span class="token keyword">select</span> <span class="token for-or-select variable">sport</span> <span class="token keyword">in</span> <span class="token string">'足球'</span> <span class="token string">'篮球'</span> <span class="token string">'乒乓球'</span> <span class="token string">'看电视'</span><span class="token keyword">do</span>  <span class="token builtin class-name">echo</span> <span class="token string">"你选择了 <span class="token variable">$sport</span>"</span>  <span class="token builtin class-name">break</span> <span class="token comment"># 加上 break 退出循环</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过 <code>select-in</code> 循环，我们可以轻松地构建用户友好的菜单系统，使得脚本的交互性大大增强。</p><p>在编写 shell 脚本时，正确选择循环类型对于提高代码的可读性和可维护性非常重要。</p><p>通过这篇文章的介绍，相信你已经对三种不同的循环有了初步的了解，并能够在实际编程中灵活应用它们。接下来，就是在你自己的脚本项目中实践和探索的时候了！</p>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell 判断语句：决策的艺术</title>
      <link href="posts/43dbd7ab.html"/>
      <url>posts/43dbd7ab.html</url>
      
        <content type="html"><![CDATA[<p>编写 Shell 脚本时，了解如何根据不同条件执行不同的命令是至关重要的。本文旨在以简单易懂的语言，介绍 Shell 脚本中的选择结构——if 语句和 case in 语句，帮助初学者和有经验的开发者深入理解。</p><h2 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h2><p>if 语句用于基于条件的执行。在 shell 中，if 语句的基础语法如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">if</span> condition<span class="token keyword">then</span>  statement<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">fi</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在实际应用中，我们通常会遇到需要直接在 if 语句后紧接着写 then 的情况。这时，应该使用分号分隔，否则会导致语法错误。如下所示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># 分号是必须的，否则会出现语法错误</span><span class="token keyword">if</span> condition<span class="token punctuation">;</span> <span class="token keyword">then</span>  statement<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="if-else-语句"><a href="#if-else-语句" class="headerlink" title="if else 语句"></a>if else 语句</h3><p>当 if 语句的条件不满足时，else 部分的代码将会被执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">if</span> condition<span class="token keyword">then</span>   statement1<span class="token keyword">else</span>   statement2<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="if-elif-else-语句"><a href="#if-elif-else-语句" class="headerlink" title="if elif else 语句"></a>if elif else 语句</h3><p>对于多条件判断，可以使用 if, elif, else 结构来实现：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">if</span> condition1<span class="token keyword">then</span>   statement1<span class="token keyword">elif</span> condition2<span class="token keyword">then</span>    statement2<span class="token keyword">elif</span> condition3<span class="token keyword">then</span>    statement3<span class="token comment"># 可以有更多的 elif 分支</span><span class="token keyword">else</span>   statementn<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>举一个例子，输入一个整数，输出该整数对应的星期几的英文表示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token builtin class-name">printf</span> <span class="token string">"Input integer number: "</span><span class="token builtin class-name">read</span> num<span class="token keyword">if</span> <span class="token variable"><span class="token punctuation">((</span>num<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"Monday"</span><span class="token keyword">elif</span> <span class="token variable"><span class="token punctuation">((</span>num<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"Tuesday"</span><span class="token keyword">elif</span> <span class="token variable"><span class="token punctuation">((</span>num<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"Wednesday"</span><span class="token keyword">elif</span> <span class="token variable"><span class="token punctuation">((</span>num<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"Thursday"</span><span class="token keyword">elif</span> <span class="token variable"><span class="token punctuation">((</span>num<span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"Friday"</span><span class="token keyword">elif</span> <span class="token variable"><span class="token punctuation">((</span>num<span class="token operator">==</span><span class="token number">6</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"Saturday"</span><span class="token keyword">elif</span> <span class="token variable"><span class="token punctuation">((</span>num<span class="token operator">==</span><span class="token number">7</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"Sunday"</span><span class="token keyword">else</span>    <span class="token builtin class-name">echo</span> <span class="token string">"error"</span><span class="token keyword">fi</span><span class="token comment"># Input integer number: 5</span><span class="token comment"># Friday</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="case-in-语句"><a href="#case-in-语句" class="headerlink" title="case in 语句"></a>case in 语句</h2><p>case in 语句是一种更为灵活的条件分支语句，它能够匹配具体的值或者模式。基本语法如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token builtin class-name">printf</span> <span class="token string">"Input integer number: "</span><span class="token builtin class-name">read</span> num<span class="token keyword">case</span> <span class="token variable">$num</span> <span class="token keyword">in</span>  <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token builtin class-name">echo</span> <span class="token string">'Monday'</span>  <span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token builtin class-name">echo</span> <span class="token string">'Tuesday'</span>  <span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token number">3</span><span class="token punctuation">)</span>    <span class="token builtin class-name">echo</span> <span class="token string">'Wednesday'</span>  <span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token number">4</span><span class="token punctuation">)</span>    <span class="token builtin class-name">echo</span> <span class="token string">'Thursday'</span>  <span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token number">5</span><span class="token punctuation">)</span>    <span class="token builtin class-name">echo</span> <span class="token string">'Friday'</span>  <span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token number">6</span><span class="token punctuation">)</span>    <span class="token builtin class-name">echo</span> <span class="token string">'Saturday'</span>  <span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token number">7</span><span class="token punctuation">)</span>    <span class="token builtin class-name">echo</span> <span class="token string">'Sunday'</span>  <span class="token punctuation">;</span><span class="token punctuation">;</span>  *<span class="token punctuation">)</span>    <span class="token builtin class-name">echo</span> <span class="token string">'error'</span><span class="token keyword">esac</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="case-in-支持的简单正则表达式"><a href="#case-in-支持的简单正则表达式" class="headerlink" title="case in 支持的简单正则表达式"></a>case in 支持的简单正则表达式</h3><ul><li><code>*</code> 表示任意字符串。</li><li><code>[abc]</code> 表示 a、b、c 三个字符中的任意一个。比如，[15ZH] 表示 1、5、Z、H 四个字符中的任意一个。</li><li><code>[m-n]</code> 表示从 m 到 n 的任意一个字符。比如，[0-9] 表示任意一个数字，[0-9a-zA-Z] 表示字母或数字。</li><li><code>|</code> 表示多重选择，类似逻辑运算中的或运算。比如，abc | xyz 表示匹配字符串 “abc” 或者 “xyz”。</li></ul><p>一个实际例子如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token builtin class-name">printf</span> <span class="token string">'Input a character: '</span><span class="token builtin class-name">read</span> char<span class="token keyword">case</span> <span class="token variable">$char</span> <span class="token keyword">in</span>  <span class="token punctuation">[</span>abc<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token builtin class-name">echo</span> <span class="token string">'abc 中任意一个'</span>  <span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token punctuation">[</span><span class="token number">0</span>-9<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token builtin class-name">echo</span> <span class="token string">'数字'</span>  <span class="token punctuation">;</span><span class="token punctuation">;</span>  abc<span class="token operator">|</span>xyz<span class="token punctuation">)</span>    <span class="token builtin class-name">echo</span> <span class="token string">'不是 abc 就是 xyz'</span>  <span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token punctuation">[</span>,.?<span class="token operator">!</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token builtin class-name">echo</span> <span class="token string">'特殊符号'</span>  <span class="token punctuation">;</span><span class="token punctuation">;</span>  *<span class="token punctuation">)</span>    <span class="token builtin class-name">echo</span> <span class="token string">'其他'</span><span class="token keyword">esac</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>选择结构是脚本编程中不可或缺的部分，它让我们能够根据不同的条件执行不同的代码。Shell 提供的 if 语句和 case 语句各有千秋，可以根据实际需要选择使用。</p><p>通过上面的示例，你应该对 Shell 脚本中的判断语句有了基本的了解。无论你是刚开始学习编程，还是已经有一定的经验，希望本文能帮助你更好地理解和使用 Shell 脚本中的条件判断功能。</p>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell &quot;[[]]&quot; 命令：条件判断的升级版</title>
      <link href="posts/adfce4b0.html"/>
      <url>posts/adfce4b0.html</url>
      
        <content type="html"><![CDATA[<p>大家好，今天我们来聊聊 Shell 脚本中的条件判断加强版——<code>[[ ]]</code> 命令。如果你对基本的 <code>[]</code> 命令已经熟悉，那么 <code>[[ ]]</code> 将是你的下一个升级技能点。</p><h2 id="命令简介"><a href="#命令简介" class="headerlink" title="[[ ]] 命令简介"></a>[[ ]] 命令简介</h2><p><code>[[ ]]</code> 命令与 <code>test</code> 或 <code>[]</code> 命令相似，用来检测某个条件是否成立。但它提供了更多的功能和灵活性，特别是在处理字符串和文件时。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 当 expression 条件成立时，退出状态为 0，否则为非 0 值</span><span class="token punctuation">[</span><span class="token punctuation">[</span> expression <span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token comment"># 表达式左右各有一个空格</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="的优势"><a href="#的优势" class="headerlink" title="[[ ]] 的优势"></a>[[ ]] 的优势</h2><p>相比传统的 <code>[]</code>，<code>[[ ]]</code> 有一些显著的优势：</p><ul><li>不需要对变量加双引号，即使变量为空也不会导致错误。</li><li>支持字符串的直接比较，不需要对 <code>&lt;</code> 或 <code>&gt;</code> 进行转义。</li><li>支持正则表达式匹配。</li></ul><h2 id="示例：字符串和逻辑运算"><a href="#示例：字符串和逻辑运算" class="headerlink" title="示例：字符串和逻辑运算"></a>示例：字符串和逻辑运算</h2><p>下面是一个使用 <code>[[ ]]</code> 进行字符串判断和逻辑运算的示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token builtin class-name">read</span> str1<span class="token builtin class-name">read</span> str2<span class="token comment"># 检测字符串是否为空，不需要对变量名加双引号</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token variable">$str1</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token variable">$str2</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token builtin class-name">echo</span> <span class="token string">"字符串不能为空"</span>  <span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token comment"># 直接使用 &lt; 比较，不需要转义</span><span class="token keyword">elif</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$str1</span> <span class="token operator">&lt;</span> <span class="token variable">$str2</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token builtin class-name">echo</span> <span class="token string">'$str1 &lt; $str2'</span><span class="token keyword">else</span>  <span class="token builtin class-name">echo</span> <span class="token string">'$str1 &gt;= $str2'</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="也支持逻辑运算"><a href="#也支持逻辑运算" class="headerlink" title="[[]] 也支持逻辑运算"></a>[[]] 也支持逻辑运算</h2><p>[] 和 [[]] 写法对比</p><table><thead><tr><th>test 或 []</th><th align="left">写法是否对错</th><th>[[]]</th><th align="left">写法是否对错</th></tr></thead><tbody><tr><td>[ -z “$str1” ] || [ -z “$str2” ]</td><td align="left">对</td><td>[[ -z $str1 ]]  || [[ -z $str2 ]]</td><td align="left">对</td></tr><tr><td>[ -z “$str1” -o -z “$str2” ]</td><td align="left">对</td><td>[[ -z $str1 -o -z $str2 ]]</td><td align="left">错 （[[]] 不能使用 <code>-o</code> 和 <code>-a</code> 选项）</td></tr><tr><td>[ -z $str1 || -z $str2 ]</td><td align="left">错（[] 不能在内部进行逻辑运算）</td><td>[[ -z $str1 || -z $str2 ]]</td><td align="left">对</td></tr></tbody></table><h2 id="与逻辑运算"><a href="#与逻辑运算" class="headerlink" title="[[ ]] 与逻辑运算"></a>[[ ]] 与逻辑运算</h2><p><code>[[ ]]</code> 支持逻辑运算，但有一些限制。例如，它不支持 <code>-a</code> 和 <code>-o</code> 选项，而是使用 <code>&amp;&amp;</code> 和 <code>||</code> 进行逻辑与和逻辑或：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 错误的写法，[[]] 不能使用 -o 和 -a 选项</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token variable">$str1</span> <span class="token parameter variable">-o</span> <span class="token parameter variable">-z</span> <span class="token variable">$str2</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment"># 正确的写法，使用 || 代替 -o</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token variable">$str1</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token variable">$str2</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="支持正则表达式"><a href="#支持正则表达式" class="headerlink" title="[[ ]] 支持正则表达式"></a>[[ ]] 支持正则表达式</h2><p><code>[[ ]]</code> 的一个强大特性是支持正则表达式匹配。这对于字符串的复杂验证非常有用：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 正则表达式匹配用法</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token assign-left variable">str</span><span class="token operator">=~</span> regex <span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="示例：使用正则表达式检测手机号"><a href="#示例：使用正则表达式检测手机号" class="headerlink" title="示例：使用正则表达式检测手机号"></a>示例：使用正则表达式检测手机号</h2><p>下面是一个使用正则表达式检测手机号的示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token builtin class-name">read</span> phone<span class="token comment"># 正则表达式，匹配以1开头，后跟10个数字的手机号</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$phone</span> <span class="token operator">=~</span> ^1<span class="token punctuation">[</span><span class="token number">0</span>-9<span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">}</span>$ <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token builtin class-name">echo</span> <span class="token string">'是手机号'</span><span class="token keyword">else</span>  <span class="token builtin class-name">echo</span> <span class="token string">'不是手机号'</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>[[ ]]</code> 命令是 Shell 脚本中进行条件判断的有力工具，特别是在处理字符串和文件时。它提供了更多的灵活性和强大的功能，如正则表达式匹配。</p><p>以上就是今天的内容，希望这篇文章能够帮助你更好地理解和使用 <code>[[ ]]</code> 命令。</p>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell test [] 命令：条件判断的艺术</title>
      <link href="posts/8deddbf7.html"/>
      <url>posts/8deddbf7.html</url>
      
        <content type="html"><![CDATA[<p>在编程世界里，<code>shell</code> 脚本是一种强大而又灵活的方式，用于处理文件、执行命令以及进行自动化操作。</p><p>今天，我们将深入探讨 Shell 脚本中的 <code>test</code> 命令，这是一种用来检测不同条件（如数值比较、字符串比较和文件存在性检测）是否成立的命令。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>test</code> 命令用以判断一系列表达式是否成立，根据条件的成立与否，它会返回相应的退出状态码。一般来说，如果条件成立，退出状态码为 0；如果条件不成立，退出状态为非 0 值。</p><p>语法总览：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 标准语法，判断 expression 成立时，退出状态为 0，否则为非 0 值</span><span class="token builtin class-name">test</span> expression<span class="token comment"># 简写形式，推荐使用，因为更加直观</span><span class="token punctuation">[</span> expression <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数值比较"><a href="#数值比较" class="headerlink" title="数值比较"></a>数值比较</h2><p>首先，我们来看看如何使用 <code>test</code> 进行数值比较。</p><h3 id="示例：判断两个数是否相等"><a href="#示例：判断两个数是否相等" class="headerlink" title="示例：判断两个数是否相等"></a>示例：判断两个数是否相等</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># 读入两个数</span><span class="token builtin class-name">read</span> a b<span class="token comment"># 使用 test 命令判断是否相等</span><span class="token keyword">if</span> <span class="token builtin class-name">test</span> <span class="token variable">$a</span> <span class="token parameter variable">-eq</span> <span class="token variable">$b</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token builtin class-name">echo</span> <span class="token string">"相等"</span><span class="token keyword">else</span>  <span class="token builtin class-name">echo</span> <span class="token string">"不相等"</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>使用 <code>==</code>、<code>&gt;</code>、<code>&lt;</code> 这些符号时，它们只能用于字符串比较，不能用于数字。对于数值，应使用 <code>-eq</code>、<code>-gt</code>、<code>-lt</code> 这样的操作符。</li><li>尽管 Shell 支持 <code>-gt</code> 和 <code>-lt</code> 之类的数值比较操作符，但不支持 <code>&gt;=</code> 和 <code>&lt;=</code>。</li><li>建议在使用变量时，尤其是在字符串比较中，将变量用双引号包围以防止空值或带有空格的值带来问题。</li><li>对于整型数值的比较，更推荐使用 <code>(())</code> 来进行。</li></ol><h2 id="文件检测"><a href="#文件检测" class="headerlink" title="文件检测"></a>文件检测</h2><p><code>test</code> 命令还可以用于文件的检测，包括文件类型、权限和比较等。</p><h3 id="文件类型判断"><a href="#文件类型判断" class="headerlink" title="文件类型判断"></a>文件类型判断</h3><table><thead><tr><th align="left">选项</th><th>作用</th></tr></thead><tbody><tr><td align="left">-b filename</td><td>判断文件是否存在，并且是否为块设备文件。</td></tr><tr><td align="left">-c filename</td><td>判断文件是否存在，并且是否为字符设备文件。</td></tr><tr><td align="left">-d filename</td><td>判断文件是否存在，并且是否为目录文件。</td></tr><tr><td align="left">-e filename</td><td>判断文件是否存在。</td></tr><tr><td align="left">-f filename</td><td>判断文件是否存在，井且是否为普通文件。</td></tr><tr><td align="left">-L filename</td><td>判断文件是否存在，并且是否为符号链接文件。</td></tr><tr><td align="left">-p filename</td><td>判断文件是否存在，并且是否为管道文件。</td></tr><tr><td align="left">-s filename</td><td>判断文件是否存在，并且是否为非空。</td></tr><tr><td align="left">-S filename</td><td>判断该文件是否存在，并且是否为套接字文件。</td></tr></tbody></table><h3 id="文件权限判断"><a href="#文件权限判断" class="headerlink" title="文件权限判断"></a>文件权限判断</h3><table><thead><tr><th align="left">选项</th><th>作用</th></tr></thead><tbody><tr><td align="left">-r filename</td><td>判断文件是否存在，并且是否拥有读权限。</td></tr><tr><td align="left">-w filename</td><td>判断文件是否存在，并且是否拥有写权限。</td></tr><tr><td align="left">-x filename</td><td>判断文件是否存在，并且是否拥有执行权限。</td></tr><tr><td align="left">-u filename</td><td>判断文件是否存在，并且是否拥有 SUID 权限。</td></tr><tr><td align="left">-g filename</td><td>判断文件是否存在，并且是否拥有 SGID 权限。</td></tr><tr><td align="left">-k filename</td><td>判断该文件是否存在，并且是否拥有 SBIT 权限。</td></tr></tbody></table><h3 id="文件比较"><a href="#文件比较" class="headerlink" title="文件比较"></a>文件比较</h3><table><thead><tr><th align="left">选项</th><th>作用</th></tr></thead><tbody><tr><td align="left">filename1 -nt filename2</td><td>判断 filename1 的修改时间是否比 filename2 的新。</td></tr><tr><td align="left">filename -ot filename2</td><td>判断 filename1 的修改时间是否比 filename2 的旧。</td></tr><tr><td align="left">filename1 -ef filename2</td><td>判断 filename1 是否和 filename2 的 inode 号一致，可以理解为两个文件是否为同一个文件。这个判断用于判断硬链接是很好的方法</td></tr></tbody></table><h3 id="示例：检测文件是否存在并可写"><a href="#示例：检测文件是否存在并可写" class="headerlink" title="示例：检测文件是否存在并可写"></a>示例：检测文件是否存在并可写</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># 读入文件名和内容</span><span class="token builtin class-name">read</span> filename<span class="token builtin class-name">read</span> content<span class="token comment"># 检测文件是否可写且内容非空</span><span class="token keyword">if</span> <span class="token builtin class-name">test</span> <span class="token parameter variable">-w</span> <span class="token string">"<span class="token variable">$filename</span>"</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">test</span> <span class="token parameter variable">-n</span> <span class="token string">"<span class="token variable">$content</span>"</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$content</span>"</span> <span class="token operator">&gt;</span> <span class="token string">"<span class="token variable">$filename</span>"</span>  <span class="token builtin class-name">echo</span> <span class="token string">"内容写入文件成功"</span><span class="token keyword">else</span>  <span class="token builtin class-name">echo</span> <span class="token string">"内容写入失败"</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="与数值比较相关的-test-选项"><a href="#与数值比较相关的-test-选项" class="headerlink" title="与数值比较相关的 test 选项"></a>与数值比较相关的 test 选项</h2><blockquote><p>test 只能用来比较整数，小数相关的比较还是得用 <code>bc</code> 命令</p></blockquote><table><thead><tr><th align="left">选项</th><th>作用</th></tr></thead><tbody><tr><td align="left">num1 -eq num2</td><td>判断 num1 是否和 num2 相等。</td></tr><tr><td align="left">num1 -ne num2</td><td>判断 num1 是否和 num2 不相等。</td></tr><tr><td align="left">num1 -gt num2</td><td>判断 num1 是否大于 num2 。</td></tr><tr><td align="left">num1 -lt num2</td><td>判断 num1 是否小于 num2。</td></tr><tr><td align="left">num1 -ge num2</td><td>判断 num1 是否大于等于 num2。</td></tr><tr><td align="left">num1 -le num2</td><td>判断 num1 是否小于等于 num2。</td></tr></tbody></table><h2 id="与字符串判断相关的-test-选项"><a href="#与字符串判断相关的-test-选项" class="headerlink" title="与字符串判断相关的 test 选项"></a>与字符串判断相关的 test 选项</h2><table><thead><tr><th align="left">选项</th><th>作用</th></tr></thead><tbody><tr><td align="left">-z str</td><td>判断字符串 str 是否为空。</td></tr><tr><td align="left">-n str</td><td>判断宇符串 str 是否为非空。</td></tr><tr><td align="left">str1 = str2 <br> str1 == str2</td><td>=和==是等价的，都用来判断 str1 是否和 str2 相等。</td></tr><tr><td align="left">str1 != str2</td><td>判断 str1 是否和 str2 不相等。</td></tr><tr><td align="left">str1 \&gt; str2</td><td>判断 str1 是否大于 str2。\&gt;是&gt;的转义字符，这样写是为了防止&gt;被误认为成重定向运算符。</td></tr><tr><td align="left">str1 \&lt; str2</td><td>判断 str1 是否小于 str2。同样，\&lt;也是转义字符。</td></tr></tbody></table><h3 id="字符串判断"><a href="#字符串判断" class="headerlink" title="字符串判断"></a>字符串判断</h3><p>接下来，让我们学习如何利用 <code>test</code> 命令进行字符串相关的判断。</p><h4 id="示例：检测两个字符串是否相等"><a href="#示例：检测两个字符串是否相等" class="headerlink" title="示例：检测两个字符串是否相等"></a>示例：检测两个字符串是否相等</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># 读入两个字符串</span><span class="token builtin class-name">read</span> str1<span class="token builtin class-name">read</span> str2<span class="token comment"># 检测字符串是否为空</span><span class="token comment"># 防止 $str1 和 $str2 是空字符串时出现错误，因此需要用双引号括</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$str1</span>"</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$str2</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token builtin class-name">echo</span> <span class="token string">"字符串不能为空"</span>  <span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$str1</span>"</span> <span class="token operator">!=</span> <span class="token string">"<span class="token variable">$str2</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token builtin class-name">echo</span> <span class="token string">"两个字符串不相等"</span>  <span class="token builtin class-name">exit</span> <span class="token number">2</span><span class="token keyword">else</span>  <span class="token builtin class-name">echo</span> <span class="token string">"字符串相等"</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><p>最后，<code>test</code> 命令还支持逻辑运算，这包括 <code>逻辑与</code>、<code>逻辑或</code> 和 <code>逻辑非</code>。</p><table><thead><tr><th align="left">选项</th><th>作用</th></tr></thead><tbody><tr><td align="left">expression1 -a expression</td><td>逻辑与，表达式 expression1 和 expression2 都成立，最终的结果才是成立的。</td></tr><tr><td align="left">expression1 -o expression2</td><td>逻辑或，表达式 expression1 和 expression2 有一个成立，最终的结果就成立。</td></tr><tr><td align="left">!expression</td><td>逻辑非，对 expression 进行取反。</td></tr></tbody></table><h4 id="示例：利用逻辑或进行字符串空判断"><a href="#示例：利用逻辑或进行字符串空判断" class="headerlink" title="示例：利用逻辑或进行字符串空判断"></a>示例：利用逻辑或进行字符串空判断</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># 读入两个字符串</span><span class="token builtin class-name">read</span> str1<span class="token builtin class-name">read</span> str2<span class="token comment"># 使用逻辑或检测字符串是否为空</span><span class="token comment"># 使用 -o 选项取代上面的 ||</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$str1</span>"</span> <span class="token parameter variable">-o</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$str2</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token builtin class-name">echo</span> <span class="token string">"字符串不能为空"</span>  <span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token keyword">elif</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$str1</span>"</span> <span class="token operator">!=</span> <span class="token string">"<span class="token variable">$str2</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token builtin class-name">echo</span> <span class="token string">"两个字符串不相等"</span>  <span class="token builtin class-name">exit</span> <span class="token number">2</span><span class="token keyword">else</span>  <span class="token builtin class-name">echo</span> <span class="token string">"字符串相等"</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上述介绍和示例，相信你已经对 <code>test</code> 命令有了更深入的了解。<code>test</code> 命令的灵活性使得它成为 Shell 脚本中不可或缺的工具，希望你能在实践中灵活运用它。</p>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell 数学计算：轻松掌握算术运算基本功</title>
      <link href="posts/fc80fc40.html"/>
      <url>posts/fc80fc40.html</url>
      
        <content type="html"><![CDATA[<p>在日常的 Shell 脚本编写中，我们经常会遇到需要进行数学计算的场景。相较于其他编程语言直接支持算数运算，Shell 本身并不直接支持复杂的数学计算，因为它并不如 Python 那样直接支持简单的数学表达式。</p><p>不过，别担心，通过本文，你将学会如何在 Shell 中灵活进行各种数学计算。</p><h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>在深入了解细节之前，有必要先了解，尽管 Shell 本身对数学运算的支持很有限，但我们可以通过一些特定的命令和运算方式来进行。有多种方法可以在 Shell 中进行数学运算，包括一些直接的运算器如 <code>(())</code> 和 <code>let</code>，以及依赖于外部工具如 <code>bc</code> 的方式。</p><p>下面，我们讲解最常用的数学计算方式，并提供实际的代码示例。准备好开始你的 Shell 数学之旅了吗？</p><h2 id="Shell-算术运算符"><a href="#Shell-算术运算符" class="headerlink" title="Shell 算术运算符"></a>Shell 算术运算符</h2><p>在深入示例之前，让我们先快速了解一下 Shell 支持的一些基本算术运算符及其含义。</p><table><thead><tr><th>算术运算符</th><th>说明/含义</th></tr></thead><tbody><tr><td>+, -</td><td>加法（或正号）、减法（或负号）</td></tr><tr><td>*, /, %</td><td>乘法、除法、取余（取模）</td></tr><tr><td>**</td><td>幂运算</td></tr><tr><td>++, –</td><td>自增和自减，可以放在变量的前面也可以放在变量的后面</td></tr><tr><td>!, &amp;&amp;, ||</td><td>逻辑非（取反）、逻辑与（and）、逻辑或（or）</td></tr><tr><td>&lt;, &lt;=, &gt;, &gt;=</td><td>比较符号（小于、小于等于、大于、大于等于）</td></tr><tr><td>==, !=, =</td><td>比较符号（相等、不相等；对于字符串，= 也可以表示相当于）</td></tr><tr><td>&lt;&lt;, &gt;&gt;</td><td>向左移位、向右移位</td></tr><tr><td>~, |, &amp;, ^</td><td>按位取反、按位或、按位与、按位异或</td></tr><tr><td>=, +=, -=, *=, /=, %=</td><td>赋值运算符</td></tr></tbody></table><h2 id="Shell-中的数学计算方式"><a href="#Shell-中的数学计算方式" class="headerlink" title="Shell 中的数学计算方式"></a>Shell 中的数学计算方式</h2><p>shell 中常用的六种数学计算方式：</p><table><thead><tr><th>运算操作符/运算命令</th><th>说明</th></tr></thead><tbody><tr><td>(( ))</td><td>用于整数运算，效率很高，推荐使用。但是只能进行整数运算，不能对小数或者字符串进行计算。</td></tr><tr><td>let</td><td>用于整数运算，和 (()) 类似。</td></tr><tr><td>$[]</td><td>用于整数运算，不如 (()) 灵活。</td></tr><tr><td>expr</td><td>可用于整数运算，也可以处理字符串。比较麻烦，需要注意各种细节，不推荐使用。</td></tr><tr><td>bc</td><td>Linux下的一个计算器程序，可以处理整数和小数。Shell 本身只支持整数运算，想计算小数就得使用 bc 这个外部的计算器。</td></tr><tr><td>declare -i</td><td>将变量定义为整数，然后再进行数学运算时就不会被当做字符串了。功能有限，仅支持最基本的数学运算（加减乘除和取余），不支持逻辑运算、自增自减等，所以在实际开发中很少使用。</td></tr></tbody></table><blockquote><p>(()) 可以用于整数计算，bc 可以用于小数计算，推荐只使用 (()) 和 bc 的方式进行运算</p></blockquote><h3 id="使用-进行整数运算"><a href="#使用-进行整数运算" class="headerlink" title="使用 (()) 进行整数运算"></a>使用 (()) 进行整数运算</h3><p><code>(( ))</code> 是进行整数运算最推荐的方式，它不仅效率高，而且语法简洁。请注意，<code>(( ))</code> 只支持整数运算，不能用于小数或字符串。</p><p>下面通过一些实际的代码示例来展示 <code>(())</code> 的使用方法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># 简单的数值运算</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$((</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span><span class="token variable">))</span></span>  <span class="token comment"># 输出 2</span><span class="token comment"># 变量运算</span><span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">3</span><span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">*=</span><span class="token number">2</span><span class="token punctuation">))</span></span>  <span class="token comment"># 等同于 i=i*2，此时 i 的值变为 6</span><span class="token builtin class-name">echo</span> <span class="token variable">$i</span>  <span class="token comment"># 输出 6</span><span class="token comment"># 复合运算</span><span class="token variable"><span class="token punctuation">((</span>a<span class="token operator">=</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">3</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">))</span></span><span class="token builtin class-name">echo</span> <span class="token variable">$a</span>  <span class="token comment"># 输出 8，展示了加法、幂运算和取模的组合使用</span><span class="token comment"># 逻辑运算</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$((</span><span class="token number">3</span><span class="token operator">&lt;</span><span class="token number">6</span><span class="token variable">))</span></span>  <span class="token comment"># 输出 1，1 表示真（true）</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$((</span><span class="token number">3</span><span class="token operator">&gt;</span><span class="token number">6</span><span class="token variable">))</span></span>  <span class="token comment"># 输出 0，0 表示假（false）</span><span class="token comment"># 自增和自减运算</span><span class="token assign-left variable">c</span><span class="token operator">=</span><span class="token number">10</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">$((</span>c<span class="token operator">++</span><span class="token variable">))</span></span>  <span class="token comment"># 输出 10，c 的值变为 11</span><span class="token builtin class-name">echo</span> <span class="token variable">$c</span>  <span class="token comment"># 输出 11</span><span class="token comment"># 多表达式运算</span><span class="token variable"><span class="token punctuation">((</span>a<span class="token operator">=</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">,</span> b<span class="token operator">=</span>a<span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">))</span></span><span class="token builtin class-name">echo</span> <span class="token variable">$a</span> <span class="token variable">$b</span>  <span class="token comment"># 先计算 a=3+5，然后 b=a+10；最终输出 8 18</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这些例子体现了 <code>(())</code> 在处理各种整数运算中的强大和灵活性。</p><h3 id="使用-bc-进行小数计算"><a href="#使用-bc-进行小数计算" class="headerlink" title="使用 bc 进行小数计算"></a>使用 bc 进行小数计算</h3><p>对于需要小数运算的场景，<code>bc</code> 是你的最佳选择。它是 Linux 下的一个高精度计算器程序，支持整数和小数运算。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用 bc 进行小数加法</span><span class="token builtin class-name">echo</span> <span class="token string">"scale=2; 3.14 + 2.86"</span> <span class="token operator">|</span> <span class="token function">bc</span>  <span class="token comment"># 输出 6.00</span><span class="token comment"># 使用变量</span><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">5.75</span><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">4.25</span><span class="token assign-left variable">result</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">$a</span> + <span class="token variable">$b</span>"</span> <span class="token operator">|</span> <span class="token function">bc</span><span class="token variable">)</span></span><span class="token builtin class-name">echo</span> <span class="token variable">$result</span>  <span class="token comment"># 输出 10.00</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>bc</code> 使用 <code>scale</code> 来定义小数点后的精度，这在进行小数运算时非常有用。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然 Shell 本身对数学运算的支持有限，但通过 <code>(())</code> 和 <code>bc</code> 等方式，我们可以有效地进行整数和小数的计算。</p><p>希望本文能帮助你在编写 Shell 脚本时，更加自如地处理数学运算问题。</p>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell 数组：灵活操作的秘诀</title>
      <link href="posts/1ddd131d.html"/>
      <url>posts/1ddd131d.html</url>
      
        <content type="html"><![CDATA[<p>进入编程世界，无论是初学者还是有一定经验的开发者，都会接触到各种各样的数据结构，而数组无疑是其中最基础也是最重要的一种。在 Shell 编程中，数组的使用同样占据了极其重要的地位。</p><p>本文将通过简单易懂的语言和例子，帮助你快速掌握 Shell 数组的使用。</p><h2 id="什么是-Shell-数组？"><a href="#什么是-Shell-数组？" class="headerlink" title="什么是 Shell 数组？"></a>什么是 Shell 数组？</h2><p>Shell 数组是一种可以存储多个值的变量。与大多数编程语言一样，Shell 数组可以包含多个元素，这些元素可以是数字、字符串或其他数据类型。</p><p>在 Shell 中，数组的下标是从 0 开始的，这意呀着第一个元素的下标是 0，第二个元素的下标是 1，以此类推。</p><h2 id="创建和访问数组"><a href="#创建和访问数组" class="headerlink" title="创建和访问数组"></a>创建和访问数组</h2><p>让我们先从如何定义一个数组开始：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">7</span> <span class="token number">9</span> <span class="token number">11</span> <span class="token string">'alex'</span> <span class="token string">'harry'</span> <span class="token number">0.14</span> <span class="token number">2.5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在这里，我们定义了一个名为 <code>array</code> 的数组，它包含了多种类型的元素，既有整数，也有字符串和浮点数。</p><p>要访问数组中的元素，我们可以使用如下语法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token variable">${array<span class="token punctuation">[</span>0<span class="token punctuation">]</span>}</span>  <span class="token comment"># 访问第一个元素，输出 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="获取数组所有元素"><a href="#获取数组所有元素" class="headerlink" title="获取数组所有元素"></a>获取数组所有元素</h2><p>获取数组中的所有元素，可以使用 <code>${array[*]}</code> 或 <code>${array[@]}</code>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token variable">${array<span class="token punctuation">[</span>*<span class="token punctuation">]</span>}</span>  <span class="token comment"># 输出数组中所有元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="增加和修改数组元素"><a href="#增加和修改数组元素" class="headerlink" title="增加和修改数组元素"></a>增加和修改数组元素</h2><p>向数组添加新元素非常简单，只需指定一个新的索引并赋值即可：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">array<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'new_element'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果要修改数组中的现有元素，也采用类似的方法：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">55</span>  <span class="token comment"># 修改索引为 2 的元素值为 55</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="删除数组元素"><a href="#删除数组元素" class="headerlink" title="删除数组元素"></a>删除数组元素</h2><p>删除数组中的元素，我们可以使用 <code>unset</code> 命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">unset</span> array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>  <span class="token comment"># 删除索引为 2 的元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="数组长度和元素长度"><a href="#数组长度和元素长度" class="headerlink" title="数组长度和元素长度"></a>数组长度和元素长度</h2><p>获取数组的长度（即元素的总数）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token variable">${<span class="token operator">#</span>array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span>  <span class="token comment"># 输出数组的长度</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>获取特定元素的长度：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token variable">${<span class="token operator">#</span>array<span class="token punctuation">[</span>3<span class="token punctuation">]</span>}</span>  <span class="token comment"># 输出索引为 3 的元素的长度</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="数组拼接"><a href="#数组拼接" class="headerlink" title="数组拼接"></a>数组拼接</h2><p>数组的拼接也非常直接，只需要将两个数组的所有元素列出，赋值给一个新的数组即可：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">array_new</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable">${array<span class="token punctuation">[</span>*<span class="token punctuation">]</span>}</span> <span class="token variable">${nums<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="删除数组"><a href="#删除数组" class="headerlink" title="删除数组"></a>删除数组</h2><p>想要一次性删除整个数组，同样使用 <code>unset</code> 命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">unset</span> array<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过这篇文章，我们学习了 Shell 数组的基本操作，包括创建、访问、修改、获取长度、拼接以及删除操作。数组是 Shell 脚本中非常有用的工具，能够帮助我们更高效地处理数据。</p><p>希望这篇文章能帮助你在 Shell 编程的道路上更进一步。记住，实践是学习的捷径，多写代码，多做实验，才能更快地提升。</p>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell 字符串操作：让你的脚本语言更加灵活</title>
      <link href="posts/68372f77.html"/>
      <url>posts/68372f77.html</url>
      
        <content type="html"><![CDATA[<p>字符串在编程中扮演着至关重要的角色，尤其是在 Shell 脚本编程中。无论是处理文件路径、生成动态消息还是执行复杂的文本分析，掌握字符串操作无疑会让你的脚本更加强大且灵活。</p><p>今天，我们就来深入了解一些基础而且实用的 Shell 字符串操作技巧，无论你是编程新手还是有一定经验的开发者，掌握字符串操作总能在编写脚本时让你事半功倍。</p><h2 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a>获取字符串长度</h2><p>有时候，你可能想知道一个字符串有多长，比如在校验用户名或者是切割字符串时。Shell 通过一个简单的表达式就能帮助我们得到答案。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">name</span><span class="token operator">=</span>alex<span class="token builtin class-name">echo</span> <span class="token variable">${<span class="token operator">#</span>name}</span>  <span class="token comment"># 输出：4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>通过 <code>${#变量名}</code> 的语法，就可以快速获取字符串的长度。这种方式简洁而高效，对于各种字符串操作场景非常实用。</p><h2 id="字符串连接合合并"><a href="#字符串连接合合并" class="headerlink" title="字符串连接合合并"></a>字符串连接合合并</h2><p>在日常的脚本编写中，字符串的连接操作是避不开的。无论是拼接路径，还是生成含有变量的提示信息，字符串连接都扮演着重要的角色。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">name</span><span class="token operator">=</span>alex<span class="token assign-left variable">age</span><span class="token operator">=</span><span class="token number">26</span><span class="token assign-left variable">str1</span><span class="token operator">=</span><span class="token variable">$name</span><span class="token variable">$begin</span><span class="token assign-left variable">str2</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$name</span> <span class="token variable">$age</span>"</span> <span class="token comment"># 注意，当字符串中包含空格时，最好用双引号包裹起来</span><span class="token assign-left variable">str3</span><span class="token operator">=</span><span class="token variable">$name</span><span class="token string">"=====&gt;<span class="token variable">$age</span>"</span><span class="token assign-left variable">str4</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$name</span> =====&gt; <span class="token variable">$age</span>"</span><span class="token assign-left variable">str5</span><span class="token operator">=</span><span class="token string">"<span class="token variable">${name}</span>is a web artisan and the age is<span class="token variable">${age}</span>"</span><span class="token builtin class-name">echo</span> <span class="token variable">$str1</span>  <span class="token comment"># 输出：alex26</span><span class="token builtin class-name">echo</span> <span class="token variable">$str2</span>  <span class="token comment"># 输出：alex 26</span><span class="token builtin class-name">echo</span> <span class="token variable">$str3</span>  <span class="token comment"># 输出：alex=====&gt;26</span><span class="token builtin class-name">echo</span> <span class="token variable">$str4</span>  <span class="token comment"># 输出：alex =====&gt; 26</span><span class="token builtin class-name">echo</span> <span class="token variable">$str5</span>  <span class="token comment"># 输出：alexis a web artisan and the age is26</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>连接字符串时，直接使用 <code>$变量名</code> 或者是 <code>${变量名}</code> 完成。特别是在字符串和变量混合使用的场景下，使用大括号可以帮助明确变量的边界，避免解析上的混乱。</p><h2 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h2><p>字符串截取是另一个非常实用的功能，它允许我们从一个字符串中提取出我们需要的某一部分。这在处理路径、文件名或者是日志分析等场景中特别有用。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">name</span><span class="token operator">=</span>alex<span class="token assign-left variable">age</span><span class="token operator">=</span><span class="token number">26</span><span class="token assign-left variable">str</span><span class="token operator">=</span><span class="token string">"hello, my name is <span class="token variable">${name}</span>, my age is <span class="token variable">${age}</span>. nice to meet you!"</span><span class="token comment"># 从字符串左边开始计数</span><span class="token builtin class-name">echo</span> <span class="token variable">${str<span class="token operator">:</span> 4<span class="token operator">:</span> 6}</span>  <span class="token comment"># o, my</span><span class="token comment"># 直接截取到字符串的末尾</span><span class="token builtin class-name">echo</span> <span class="token variable">${str<span class="token operator">:</span> 4}</span>  <span class="token comment"># o, my name is alex, my age is 26. nice to meet you!</span><span class="token comment"># 从字符串右边开始计数</span><span class="token builtin class-name">echo</span> <span class="token variable">${str<span class="token operator">:</span> 0-11<span class="token operator">:</span> 8}</span>  <span class="token comment"># o meet y</span><span class="token comment"># 直接截取到字符串的末尾</span><span class="token builtin class-name">echo</span> <span class="token variable">${str<span class="token operator">:</span> 0-11}</span>  <span class="token comment"># o meet you!</span><span class="token comment"># 使用 # 号截取右边所有字符</span><span class="token builtin class-name">echo</span> <span class="token variable">${str<span class="token operator">#</span>*my}</span>  <span class="token comment"># name is alex, my age is 26. nice to meet you!</span><span class="token builtin class-name">echo</span> <span class="token variable">${str<span class="token operator">#</span>*y}</span>  <span class="token comment"># name is alex, my age is 26. nice to meet you!</span><span class="token comment"># 如果不需要忽略子字符串左边的字符，那么也可以不写 * 号</span><span class="token builtin class-name">echo</span> <span class="token variable">${str<span class="token operator">#</span>my}</span>  <span class="token comment"># hello, my name is alex, my age is 26. nice to meet you!</span><span class="token comment"># 如果希望直到最后一个子字符串才匹配结束，那么可以使用两个 # 号</span><span class="token builtin class-name">echo</span> <span class="token variable">${str<span class="token operator">##</span>*my}</span>  <span class="token comment"># age is 26. nice to meet you!</span><span class="token comment"># 使用 % 号截取左边所有字符</span><span class="token builtin class-name">echo</span> <span class="token variable">${str<span class="token operator">%</span>my*}</span>  <span class="token comment"># hello, my name is alex,</span><span class="token builtin class-name">echo</span> <span class="token variable">${str<span class="token operator">%</span>y*}</span>  <span class="token comment"># hello, my name is alex, my age is 26. nice to meet</span><span class="token builtin class-name">echo</span> <span class="token variable">${str<span class="token operator">%</span>}</span>  <span class="token comment"># hello, my name is alex, my age is 26. nice to meet you!</span><span class="token builtin class-name">echo</span> <span class="token variable">${str<span class="token operator">%%</span>my*}</span>  <span class="token comment"># hello,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这些截取方法基于不同的需求，为我们提供了极大的灵活性，但同时也需要我们有足够的练习来熟练掌握。</p><p>更多的用法可以对照这张表进行查看：</p><table><thead><tr><th>格式</th><th>含义</th></tr></thead><tbody><tr><td>${string: start :length}</td><td>从 string 字符串的左边第 start 个字符开始，向右截取 length 个字符</td></tr><tr><td>${string: start}</td><td>从 string 字符串的左边第 start 个字符开始截取，直到最后</td></tr><tr><td>${string: 0-start :length}</td><td>从 string 字符串的右边第 start 个字符开始，向右截取 length 个字符</td></tr><tr><td>${string: 0-start}</td><td>从 string 字符串的右边第 start 个字符开始截取，直到最后</td></tr><tr><td>${string#*chars}</td><td>从 string 字符串第一次出现 *chars 的位置开始，截取 *chars 右边的所有字符</td></tr><tr><td>${string##*chars}</td><td>从 string 字符串最后一次出现 *chars 的位置开始，截取 *chars 右边的所有字符</td></tr><tr><td>${string%*chars}</td><td>从 string 字符串第一次出现 *chars 的位置开始，截取 *chars 左边的所有字符</td></tr><tr><td>${string%%*chars}</td><td>从 string 字符串最后一次出现 *chars 的位置开始，截取 *chars 左边的所有字符</td></tr></tbody></table><p>通过以上的介绍，我希望能帮助你了解并掌握 Shell 中的基础字符串操作。</p><p>记住，实践是学习的捷径。我鼓励你自行编写脚本，尝试不同的字符串操作，这样你才能更加熟悉并灵活运用它们。</p>]]></content>
      
      
      <categories>
          
          <category> Shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Charles抓包神器的使用，完美解决抓取HTTPS请求unknown问题</title>
      <link href="posts/1eac0236.html"/>
      <url>posts/1eac0236.html</url>
      
        <content type="html"><![CDATA[<p>在 Windows 上可能比较好用的抓包工具是 fidder，当然，在 Mac 上也有一款抓包神器不输 fiddler，那就是今天的主角—— Charles。</p><p>软件的安装过程就不介绍了，只要自己下载好了软件，安装过程就是傻瓜式的操作，非常简单。</p><p>今天主要介绍的是如何配置 HTTP 和 HTTPS。有不少童鞋在抓取 HTTPS 请求时，会出现 <code>unknown</code> 无法解析的情况，那么，遇到这种情况，我们该如何处理呢？</p><p>这篇文章将为你介绍整个配置过程，来，继续往下看吧！</p><blockquote><p>我这里演示的是：<br>Charles 版本为：4.6.6<br>MacOS 系统版本为：Sonoma 14.5<br>iOS 系统版本为：17.3</p></blockquote><h2 id="安装证书"><a href="#安装证书" class="headerlink" title="安装证书"></a>安装证书</h2><p>安装证书这一步是抓取 HTTPS 请求的关键所在，<strong>包括 PC 端和手机端都需要安装证书</strong>。</p><h3 id="PC-端"><a href="#PC-端" class="headerlink" title="PC 端"></a>PC 端</h3><p>我们需要先打开 <code>Charles</code> 软件，然后在菜单栏中依次选择：<code>Help</code> -&gt; <code>SSL Proxying</code> -&gt; <code>Install Charles Root Certificate</code> 然后直接点击，将证书安装到我们的电脑上。</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-8a490511ae8a2661.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="安装证书"></p><p>将证书安装完毕之后，我们需要打开<strong>钥匙串访问</strong></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-a26501fc5f4396e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="打开「钥匙串访问」"></p><p>当我们打开<strong>钥匙串访问</strong>后，找到「系统钥匙串」-&gt; 「系统」-&gt; 「证书」-&gt; 「Charles Proxy CA……」</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-c389e595b039a474.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="找到证书"></p><p>我们可以看到这个证书默认是<strong>不被信任的</strong>，此时我们需要将其设置为信任。</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-e1684b7fff48320e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="设置证书为“始终信任”"></p><ol><li>我们直接对着“Charles Proxy ……”开头的证书直接<strong>双击</strong>然后就会出现一个弹窗；</li><li>此弹窗中有一个<strong>信任</strong>，默认是闭合的，此时我们需要点击一下，进行展开；</li><li>展开后我们可以看到有一项“使用此证书时”，我们将其改为<strong>始终信任</strong>；</li><li>然后关闭此弹窗就可以了。不放心的童鞋可以再次打开这个弹窗做一个验证。</li></ol><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-7bec8f2e8ed07af8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="需要输入密码"></p><p>当我们关闭弹窗的时候，需要我们验证密码。</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-91aab2a8c9c1560d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="已经标记为“受所有用户信任”"></p><p>当我们再次查看证书时，我们可以看到此时已经是<strong>受所有用户信任</strong>，此时电脑端的证书就已经安装完成了。</p><p>接下来，我们安装手机端的证书：</p><h3 id="手机端"><a href="#手机端" class="headerlink" title="手机端"></a>手机端</h3><blockquote><p>我这里以 iOS 设备为例，Android 手机可能会有所差异，但是我想应该安装步骤都是大差不差的，各位做一个参考也行。</p></blockquote><p>在手机上安装证书，依然需要先打开 <code>Charles</code> 软件，然后在菜单栏中依次选择：<code>Help</code> -&gt; <code>SSL Proxying</code> -&gt; <code>Install Charles Root Certificate on a Mobile Device or Remote Browser</code> 然后直接点击。</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-0fdd6d440d4b36f0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="手机上安装证书"></p><p>当我们点击之后会有一个弹框提示，大致内容如下：</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-eb69b8372e7e6d68.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="手机端安装时，会有弹窗提示"></p><p>大致的意思是说需要我们在手机上设置 HTTP 代理，代理地址为 <code>192.168.0.102:8888</code> 设置好后再通过浏览器访问 <code>chls.pro/ssl</code> 地址并下载安装证书。</p><p>并且还需要注意：<strong>如果是 iOS 10 及其以后的版本时，还需要进入「设置」-&gt; 「通用」-&gt;「关于本机」-&gt; 滑到最底部「证书信任设置」，并启用 Charles 证书为可信任证书。</strong></p><p>并且还需要注意的是，你<strong>一定需要将手机和电脑连接在同一个局域网内</strong>，如果你的电脑是笔记本的话，就是说你的电脑和手机连接的是同一个 Wi-Fi。另外这里我的电脑端局域网 IP 地址为 <code>192.168.0.102</code> 你的可能和我的不一样，这个也是正常现象，以弹窗中的 IP 地址为准。</p><p>接下来，我们需要在手机上操作：</p><ol><li>打开「设置」找到「无线局域网」这里一定需要注意，此时你手机上连接的 Wi-Fi 一定和电脑所在的网络在同一个局域网内，不然就白搭了。</li><li>点击你所连接的 Wi-Fi，滑到最底部会有一个「配置代理」，点击打开，选择「手动」。</li><li>然后在“服务器”位置输入<strong>192.168.0.102</strong>，“端口”位置输入<strong>8888</strong>，然后点击右上角的「存储」。</li></ol><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-248604b868222b90.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="手机上配置代理"></p><p>然后去打开 <strong>Safari</strong> 浏览器（其他浏览器<strong>不一定</strong>可以唤起安装证书的弹窗），输入地址 <code>chls.pro/ssl</code> 打开页面，此时会自动唤起安装描述文件的弹窗。</p><p>如果此时你发现并没有唤起安装描述文件的弹窗时，你需要回到你的电脑上，可能会有一个类似以下的弹窗，你需要点击一下<strong>Allow</strong>，这是你的手机连接到了 Charles 。当你点击了 <strong>Allow</strong> 之后再去手机 Safari 浏览器上刷新一下应该就会有安装描述文件的弹窗了。</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-90de545c3e0bb400.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="需要在电脑上允许一下"></p><p>当出现安装描述文件的弹窗后，会告知你现在正在下载一个配置描述文件，你直接点击<strong>允许</strong>就好了。</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-c86485bab631efaa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="手机上下载配置描述文件"></p><p>当下载好证书之后，我们需要前往：「设置」-&gt;「通用」-&gt; 「VPN与设备管理」然后就可以看到“已下载的描述文件” <code>Charles Proxy CA……</code> 进行点击进去，然后看到右上角会有一个「安装」按钮，点击安装即可。</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-ab64c916867c3eda.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="安装配置描述文件"></p><p>之前也说到了，如果是 iOS 10 及其以后的版本时，还需要在「证书信任设置」，并启用 Charles 证书为可信任证书，这点你按照你的系统版本按需来做就好了。</p><p>不过一般来说，现在很少有低于 iOS 10 的手机还在跑了吧？<strong>其实这一点也是很多人虽然安装完了证书，但是发现依然抓取 HTTPS 请求时认为 unknown 的原因。</strong> 所以，一定要记得去信任一下证书，这点非常重要！</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-a650be3665c57d25.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="开启信任证书"></p><p>现在我们证书已经安装好了，但是还需要简单配置一下 Charles。</p><h2 id="配置-Charles"><a href="#配置-Charles" class="headerlink" title="配置 Charles"></a>配置 Charles</h2><h3 id="配置代理端口"><a href="#配置代理端口" class="headerlink" title="配置代理端口"></a>配置代理端口</h3><p>直接点击菜单栏中的「Proxy」 -&gt;「Proxy Settings」</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-0a36814f9dfecb62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置代理"></p><p>还记得上面我们在手机上设置代理的时候那个 8888 端口吗？如果你想自定义代理端口，可以直接在这个位置进行更改。不改问题也不大，自己按照实际情况而定。</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-58134297b5b4207b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="更改代理端口"></p><h3 id="配置-SSL-代理设置"><a href="#配置-SSL-代理设置" class="headerlink" title="配置 SSL 代理设置"></a>配置 SSL 代理设置</h3><p>直接点击菜单栏中的「Proxy」-&gt;「SSL Proxying Settings」</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-9c01ebf614410cc0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置SSL代理设置"></p><p>这里有一个非常重要的配置 <strong>SSL Proxying Settings</strong>，我们需要确保勾选上了「Enable SSL Proxying」并且还需要添加「Include」，<strong>否则即使我们添加了证书，抓取 HTTPS 时还是会出现 unknown</strong>。</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-457f3b5df5b88fff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置 SSL 代理设置"></p><p>Include 和 Exclude 就是字面上的含义，分别代表包含和不包含，这里我在 Include 处设置两个星号 <code>*</code> 的含义是：包含所有的域名和端口。你也可以按照你自己的实际情况来设置。</p><p>好了，现在该配置的都已经配置完了，剩下的就可以愉快的玩耍啦。</p><blockquote><p>另外，听说 Android 7.0 之后默认不信任用户添加到系统的 CA 证书，也就是说对基于 SDK24 及以上的 APP 来说，即使你在手机上安装了抓包工具的证书也无法抓取 HTTPS 请求。那么如何解决这个问题呢？当前我手上没有 Android 手机，也无法去测试，这个问题就留给有 Android 手机的用户来解决吧。不过，我想这个问题应该也已经有了解决方案，如果你知道解决方案，也希望一起分享分享。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 抓包工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 抓包工具 </tag>
            
            <tag> MacOS </tag>
            
            <tag> Charles </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>推荐几个好用的GRPC调试工具</title>
      <link href="posts/47f9e31c.html"/>
      <url>posts/47f9e31c.html</url>
      
        <content type="html"><![CDATA[<h1 id="GRPC-调试工具"><a href="#GRPC-调试工具" class="headerlink" title="GRPC 调试工具"></a>GRPC 调试工具</h1><h2 id="1-grpcui"><a href="#1-grpcui" class="headerlink" title="1. grpcui"></a>1. <a href="https://github.com/fullstorydev/grpcui">grpcui</a></h2><ul><li>下载</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 这时，会在 $GOPATH/bin 目录下，生成一个 grpcui 可执行文件</span>go <span class="token function">install</span> github.com/fullstorydev/grpcui/cmd/grpcui@latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>测试安装是否成功</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">grpcui <span class="token parameter variable">-help</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>调试</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 这里的地址需要设置为：grpc 项目域名或者 ip + 端口号</span><span class="token comment"># -plaintext 参数忽略 tls 证书的验证过程</span>grpcui <span class="token parameter variable">-plaintext</span> localhost:12345<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-grpcurl"><a href="#2-grpcurl" class="headerlink" title="2. grpcurl"></a>2. <a href="https://github.com/fullstorydev/grpcurl">grpcurl</a></h2><ul><li>下载</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 这时，会在 $GOPATH/bin 目录下，生成一个 grpcurl 可执行文件</span>go <span class="token function">install</span> github.com/fullstorydev/grpcurl/cmd/grpcurl@latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>测试安装是否成功</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">grpcurl <span class="token parameter variable">-help</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>调试</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看服务列表</span><span class="token comment"># grpcurl 工具默认使用 TLS 认证（可通过 -cert 和 -key 参数设置公钥和密钥）可以通过指定 plaintext 选项来忽略 TLS 认证</span>grpcurl <span class="token parameter variable">-plaintext</span> localhost:5200 list<span class="token comment"># 比如输出以下内容：</span><span class="token comment"># grpc.reflection.v1alpha.ServerReflection</span><span class="token comment"># proto.TagService</span><span class="token comment"># 查看服务的方法列表</span>grpcurl <span class="token parameter variable">-plaintext</span> localhost:5200 list proto.TagService<span class="token comment"># 比如输出以下内容：</span><span class="token comment"># proto.TagService.GetTagList</span><span class="token comment"># 查看方法的细节</span>grpcurl <span class="token parameter variable">-plaintext</span> localhost:5200 describe proto.TagService<span class="token comment"># 比如输出以下内容：</span><span class="token comment"># proto.TagService is a service:</span><span class="token comment"># service TagService {</span><span class="token comment">#  rpc GetTagList ( .proto.GetTagListRequest ) returns ( .proto.GetTagListResponse );</span><span class="token comment"># }</span><span class="token comment"># 调用方法</span><span class="token comment"># 参数必须为 json 格式的字符串</span><span class="token comment"># `proto.TagService/GetTagList` 是所需要调用的接口</span>grpcurl <span class="token parameter variable">-plaintext</span> <span class="token parameter variable">-d</span> <span class="token string">'{"name":"go"}'</span> localhost:5200 proto.TagService/GetTagList<span class="token comment"># 或者</span>grpcurl <span class="token parameter variable">-plaintext</span> <span class="token parameter variable">-d</span> <span class="token string">'{"name":"go"}'</span> localhost:5200 proto.TagService.GetTagList<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上两种方式都需要启动反射服务才可以使用，代码类似如下</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"log"</span><span class="token string">"net"</span>pb <span class="token string">"github.com/pudongping/go-grpc-service/proto"</span><span class="token string">"github.com/pudongping/go-grpc-service/server"</span><span class="token string">"google.golang.org/grpc"</span><span class="token string">"google.golang.org/grpc/reflection"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>s <span class="token operator">:=</span> grpc<span class="token punctuation">.</span><span class="token function">NewServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>pb<span class="token punctuation">.</span><span class="token function">RegisterTagServiceServer</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> server<span class="token punctuation">.</span><span class="token function">NewTagServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>listen<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token string">":5200"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"net.Listen err: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 注册反射服务，方便让 grpcurl 或者 grpcui 用作调试</span>reflection<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>err <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">Serve</span><span class="token punctuation">(</span>listen<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"server.Serve err: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-bloomrpc"><a href="#3-bloomrpc" class="headerlink" title="3. bloomrpc"></a>3. <a href="https://github.com/bloomrpc/bloomrpc">bloomrpc</a></h2><blockquote><p>使用方式非常简单，GitHub 仓库上有一张动图演示，只需要上传 proto 文件即可，不需要在代码中开启反射。</p></blockquote><p><strong>如果发现 bloomrpc 包使用 int64 时失真，那么可以考虑使用 <a href="https://github.com/crossoverJie/ptg">crossoverJie/ptg</a> 包（看他的文档说已经解决掉 bloomrpc int64 失真的问题，但是我自己没有去验证）</strong></p><ul><li>安装</li></ul><pre class="line-numbers language-none"><code class="language-none"># macOS/Homebrewbrew install --cask bloomrpc# 或者直接根据系统下载对应的包文件，下载地址如下：https://github.com/bloomrpc/bloomrpc/releases# 比如要是 macOS 系统下wget https://github.com/bloomrpc/bloomrpc/releases/download/1.5.3/BloomRPC-1.5.3.dmg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-kreya"><a href="#4-kreya" class="headerlink" title="4. kreya"></a>4. <a href="https://kreya.app/">kreya</a></h2>]]></content>
      
      
      <categories>
          
          <category> RPC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RPC </tag>
            
            <tag> GRPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 基础数据类型</title>
      <link href="posts/1308b152.html"/>
      <url>posts/1308b152.html</url>
      
        <content type="html"><![CDATA[<h1 id="Go-基础数据类型"><a href="#Go-基础数据类型" class="headerlink" title="Go 基础数据类型"></a>Go 基础数据类型</h1><p>对于浮点类型需要被自动推导的变量，其类型将被自动设置为 float64，而不管赋值给它的数字是否是用 32 位长度表示的<br>在实际开发中，应该尽可能地使用 float64 类型，因为 math 包中所有有关数学运算的函数都会要求接收这个类型。</p><h2 id="Go-支持的数据类型"><a href="#Go-支持的数据类型" class="headerlink" title="Go 支持的数据类型"></a>Go 支持的数据类型</h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><ul><li>布尔类型：bool</li><li>整型： int8、byte、int16、int、uint、uintptr 等</li><li>浮点类型：float32（单精度浮点数，可以精确到小数点后 7 位）、float64（双精度浮点数，可以精确到小数点后 15 位）</li><li>复数类型：complex64、complex128</li><li>字符串：string</li><li>字符类型：rune</li><li>错误类型：error</li></ul><h3 id="复合类型"><a href="#复合类型" class="headerlink" title="复合类型"></a>复合类型</h3><ul><li>指针：pointer</li><li>数组：array</li><li>切片：slice <a href="https://ueokande.github.io/go-slice-tricks/">切片动态操作图片示例</a></li><li>字典：map</li><li>通道：chan</li><li>结构体：struct</li><li>接口：interface</li></ul><h4 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h4><table><thead><tr><th>类型</th><th>长度（单位：字节）</th><th>说明</th><th>值范围</th><th>默认值</th></tr></thead><tbody><tr><td>int8</td><td>1</td><td>带符号8位整型</td><td>-128~127</td><td>0</td></tr><tr><td>uint8</td><td>1</td><td>无符号8位整型，与 byte 类型等价</td><td>0~255</td><td>0</td></tr><tr><td>int16</td><td>2</td><td>带符号16位整型</td><td>-32768~32767</td><td>0</td></tr><tr><td>uint16</td><td>2</td><td>无符号16位整型</td><td>0~65535</td><td>0</td></tr><tr><td>int32</td><td>4</td><td>带符号32位整型，与 rune 类型等价</td><td>-2147483648~2147483647</td><td>0</td></tr><tr><td>uint32</td><td>4</td><td>无符号32位整型</td><td>0~4294967295</td><td>0</td></tr><tr><td>int64</td><td>8</td><td>带符号64位整型</td><td>-9223372036854775808~9223372036854775807</td><td>0</td></tr><tr><td>uint64</td><td>8</td><td>无符号64位整型</td><td>0~18446744073709551615</td><td>0</td></tr><tr><td>int</td><td>32位或64位</td><td>根据宿主机的机器字长决定（int 和 uint 是一样的大小）</td><td>32 位的机器就是 int32，64 位就是 int64</td><td>0</td></tr><tr><td>uint</td><td>32位或64位</td><td>根据宿主机的机器字长决定（int 和 uint 是一样的大小）</td><td>32 位的机器就是 int32，64 位就是 int64</td><td>0</td></tr><tr><td>uintptr</td><td>与对应指针相同</td><td>无符号整型，足以存储指针值的未解释位</td><td>32位平台下为4字节，64位平台下为8字节</td><td>0</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言中init 函数、变量、常量的执行顺序</title>
      <link href="posts/40b0fc5c.html"/>
      <url>posts/40b0fc5c.html</url>
      
        <content type="html"><![CDATA[<h1 id="init-函数、变量、常量的执行顺序"><a href="#init-函数、变量、常量的执行顺序" class="headerlink" title="init 函数、变量、常量的执行顺序"></a>init 函数、变量、常量的执行顺序</h1><p><img src="/medias/loading.gif" data-original="https://cdn.learnku.com/uploads/images/202011/11/1/ipbtiTb7Fd.png!large" alt="img"></p><ul><li>假如 main 引入了 pkg1 最终依赖于 pkg3，pkg3 中的 init() 方法会优先被执行；</li><li>同一个包里，单文件的情况，init() 优先于其他方法执行，包括 main()；</li><li>同一个包里的常量和变量声明会优先于 init() 方法执行；</li><li>同一个文件里允许多个 init() 存在，会按照自上而下的顺序执行；</li><li>同一个包，多个文件里存在 init() 的情况，执行顺序是按文件名的字母排序执行。</li></ul><h2 id="包导入路径优先级"><a href="#包导入路径优先级" class="headerlink" title="包导入路径优先级"></a>包导入路径优先级</h2><h3 id="如果使用-govendor-时"><a href="#如果使用-govendor-时" class="headerlink" title="如果使用 govendor 时"></a>如果使用 <code>govendor</code> 时</h3><ol><li>先从项目根目录的 <code>vendor</code> 目录下查找</li><li>然后从 $GOROOT/src 目录下查找</li><li>然后从 $GOPATH/src 目录下查找</li><li>都找不到时，报错</li></ol><h3 id="如果使用-go-modules-时"><a href="#如果使用-go-modules-时" class="headerlink" title="如果使用 go modules 时"></a>如果使用 <code>go modules</code> 时</h3><ol><li>如果导入的包有域名，则都会在 $GOPATH/pkg/mod 下查找，找不到就去域名对应的网站下寻找，找不到或者找到的不是一个包，则报错</li><li>如果导入的包没有域名，比如 <code>fmt</code> 包，则就去 $GOROOT 下找</li><li>如果项目根目录下存在 <code>vendor</code> 目录，则不管导入的包有没有域名，都只会在 <code>vendor</code> 目录中查找</li></ol><blockquote><p>通常 <code>vendor</code> 目录是通过执行 <code>go mod vendor</code> 命令生成的。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分享几个Go Slice 技巧，大大提高工作效率！</title>
      <link href="posts/669a361f.html"/>
      <url>posts/669a361f.html</url>
      
        <content type="html"><![CDATA[<h2 id="声明一个数组"><a href="#声明一个数组" class="headerlink" title="声明一个数组"></a>声明一个数组</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token comment">// 让编译器统计数组字面值中元素的数目</span><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token comment">// 类型： [10]int 长度： 10 容量： 10 值为： [1 2 3 4 5 6 7 8 9 10]</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"类型： %T 长度： %v 容量： %v 值为： %v \n"</span><span class="token punctuation">,</span> arr<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token comment">// 比较，类型： bool 结果： true </span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"比较，类型： %T 结果： %v \n"</span><span class="token punctuation">,</span> arr <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span> arr <span class="token operator">==</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 比较，类型： bool 结果： true </span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"比较，类型： %T 结果： %v \n"</span><span class="token punctuation">,</span> arr <span class="token operator">==</span> arr1<span class="token punctuation">,</span> arr <span class="token operator">==</span> arr1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基于数组创建一个切片"><a href="#基于数组创建一个切片" class="headerlink" title="基于数组创建一个切片"></a>基于数组创建一个切片</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token comment">// 基于数组创建一个切片</span><span class="token keyword">var</span> slice <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment">// 类型： [10]int 长度： 10 容量： 10 值为： [1 2 3 4 5 6 7 8 9 10]</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"类型： %T 长度： %v 容量： %v 值为： %v \n"</span><span class="token punctuation">,</span> arr<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token comment">// 类型： []int 长度： 10 容量： 10 值为： [1 2 3 4 5 6 7 8 9 10] </span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"类型： %T 长度： %v 容量： %v 值为： %v \n"</span><span class="token punctuation">,</span> slice<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>slice<span class="token punctuation">)</span><span class="token punctuation">,</span> slice<span class="token punctuation">)</span><span class="token comment">// 类型不同，无法运算，编译器直接编译不过</span><span class="token comment">// fmt.Printf("比较，类型： %T 结果： %v \n", arr == slice, arr == slice)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="切片截取"><a href="#切片截取" class="headerlink" title="切片截取"></a>切片截取</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> slice1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token comment">// 左闭右开的索引区间</span><span class="token comment">// slice2 的长度为 3 即（6-3=3）容量为 7 即（10-3=7）</span><span class="token keyword">var</span> slice2 <span class="token operator">=</span> slice1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token comment">// slice3 的长度为 3 即（6-3=3）容量为 6 即（9-3=6）</span>slice3 <span class="token operator">:=</span> slice1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token comment">// 类型： []int 长度： 10 容量： 10 值为： [1 2 3 4 5 6 7 8 9 10]</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"类型： %T 长度： %v 容量： %v 值为： %v \n"</span><span class="token punctuation">,</span> slice1<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>slice1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>slice1<span class="token punctuation">)</span><span class="token punctuation">,</span> slice1<span class="token punctuation">)</span><span class="token comment">// 类型： []int 长度： 3 容量： 7 值为： [4 5 6]</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"类型： %T 长度： %v 容量： %v 值为： %v \n"</span><span class="token punctuation">,</span> slice2<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>slice2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>slice2<span class="token punctuation">)</span><span class="token punctuation">,</span> slice2<span class="token punctuation">)</span><span class="token comment">// 类型： []int 长度： 3 容量： 6 值为： [4 5 6]</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"类型： %T 长度： %v 容量： %v 值为： %v \n"</span><span class="token punctuation">,</span> slice3<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>slice3<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cap</span><span class="token punctuation">(</span>slice3<span class="token punctuation">)</span><span class="token punctuation">,</span> slice3<span class="token punctuation">)</span>slice4 <span class="token operator">:=</span> slice2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">cap</span><span class="token punctuation">(</span>slice2<span class="token punctuation">)</span><span class="token punctuation">]</span>slice5 <span class="token operator">:=</span> slice3<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">cap</span><span class="token punctuation">(</span>slice3<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment">// slice4 ==&gt; [4 5 6 7 8 9 10]</span><span class="token comment">// slice2 实际引用的数组是 [4 5 6 7 8 9 10]</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"slice4 ==&gt; %v \n"</span><span class="token punctuation">,</span> slice4<span class="token punctuation">)</span><span class="token comment">// slice5 ==&gt; [4 5 6 7 8 9]</span><span class="token comment">// slice3 实际引用的数组是 [4 5 6 7 8 9]</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"slice5 ==&gt; %v \n"</span><span class="token punctuation">,</span> slice5<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="切片拷贝"><a href="#切片拷贝" class="headerlink" title="切片拷贝"></a>切片拷贝</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> slice1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span>slice2 <span class="token operator">:=</span> slice1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token comment">// slice1 ==&gt; [1 2 3 4 5 6 7 8 9 10]</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"slice1 ==&gt; %v \n"</span><span class="token punctuation">,</span> slice1<span class="token punctuation">)</span><span class="token comment">// slice2 ==&gt; [5 6 7]</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"slice2 ==&gt; %v \n"</span><span class="token punctuation">,</span> slice2<span class="token punctuation">)</span><span class="token comment">// 修改切割后的切片值，发现原始切片也被修改了（浅拷贝，切片为引用传递）</span>slice2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token comment">// slice1 ==&gt; [1 2 3 4 5 123 7 8 9 10]</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"slice1 ==&gt; %v \n"</span><span class="token punctuation">,</span> slice1<span class="token punctuation">)</span><span class="token comment">// slice2 ==&gt; [5 123 7]</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"slice2 ==&gt; %v \n"</span><span class="token punctuation">,</span> slice2<span class="token punctuation">)</span><span class="token comment">// 复制一个切片时，如果不申明长度，是不会复制的</span><span class="token keyword">var</span> slice3 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token function">copy</span><span class="token punctuation">(</span>slice3<span class="token punctuation">,</span> slice2<span class="token punctuation">)</span><span class="token comment">// slice1 ==&gt; [1 2 3 4 5 123 7 8 9 10]</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"slice1 ==&gt; %v \n"</span><span class="token punctuation">,</span> slice1<span class="token punctuation">)</span><span class="token comment">// slice2 ==&gt; [5 123 7]</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"slice2 ==&gt; %v \n"</span><span class="token punctuation">,</span> slice2<span class="token punctuation">)</span><span class="token comment">// slice3 ==&gt; []</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"slice3 ==&gt; %v \n"</span><span class="token punctuation">,</span> slice3<span class="token punctuation">)</span>slice4 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>slice2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">copy</span><span class="token punctuation">(</span>slice4<span class="token punctuation">,</span> slice2<span class="token punctuation">)</span><span class="token comment">// 通过复制后，修改复制后的切片不会影响原切片（深拷贝，值传递）</span>slice4<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">567</span><span class="token comment">// slice1 ==&gt; [1 2 3 4 5 123 7 8 9 10]</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"slice1 ==&gt; %v \n"</span><span class="token punctuation">,</span> slice1<span class="token punctuation">)</span><span class="token comment">// slice2 ==&gt; [5 123 7]</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"slice2 ==&gt; %v \n"</span><span class="token punctuation">,</span> slice2<span class="token punctuation">)</span><span class="token comment">// slice4 ==&gt; [5 567 7] </span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"slice4 ==&gt; %v \n"</span><span class="token punctuation">,</span> slice4<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ArrayChunk-数组切割"><a href="#ArrayChunk-数组切割" class="headerlink" title="ArrayChunk 数组切割"></a>ArrayChunk 数组切割</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// ArrayChunkString 将一个数组分割成多个</span><span class="token comment">// s := []string{"a1", "a2", "a3", "a4", "a5", "a6", "a7"}</span><span class="token comment">// size := 2</span><span class="token comment">// output: [[a1 a2] [a3 a4] [a5 a6] [a7]]</span><span class="token keyword">func</span> <span class="token function">ArrayChunkString</span><span class="token punctuation">(</span>s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> size <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span><span class="token keyword">if</span> size <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"size: cannot be less than 1"</span><span class="token punctuation">)</span><span class="token punctuation">}</span>length <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>chunks <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Ceil</span><span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">float64</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">var</span> n <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> end <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">;</span> chunks <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> chunks<span class="token operator">--</span> <span class="token punctuation">{</span>end <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> size<span class="token keyword">if</span> end <span class="token operator">&gt;</span> length <span class="token punctuation">{</span>end <span class="token operator">=</span> length<span class="token punctuation">}</span>n <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token operator">*</span>size<span class="token punctuation">:</span>end<span class="token punctuation">]</span><span class="token punctuation">)</span>i<span class="token operator">++</span><span class="token punctuation">}</span><span class="token keyword">return</span> n<span class="token punctuation">}</span><span class="token comment">// ArrayChunkInt 将一个切片分割成多个</span><span class="token comment">// i := []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}</span><span class="token comment">// size := 3</span><span class="token comment">// output: [[0 1 2] [3 4 5] [6 7 8] [9]]</span><span class="token keyword">func</span> <span class="token function">ArrayChunkInt</span><span class="token punctuation">(</span>i <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> size <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span>batches <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>size<span class="token punctuation">)</span><span class="token keyword">for</span> size <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>i<span class="token punctuation">,</span> batches <span class="token operator">=</span> i<span class="token punctuation">[</span>size<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">append</span><span class="token punctuation">(</span>batches<span class="token punctuation">,</span> i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>size<span class="token punctuation">:</span>size<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span>batches <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>batches<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token keyword">return</span> batches<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ArrayReverse-数组反转"><a href="#ArrayReverse-数组反转" class="headerlink" title="ArrayReverse 数组反转"></a>ArrayReverse 数组反转</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// ArrayReverseInt 数组反转</span><span class="token comment">// i := []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}</span><span class="token comment">// output: [9 8 7 6 5 4 3 2 1 0]</span><span class="token keyword">func</span> <span class="token function">ArrayReverseInt</span><span class="token punctuation">(</span>i <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token punctuation">{</span><span class="token keyword">for</span> left<span class="token punctuation">,</span> right <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">;</span> left<span class="token punctuation">,</span> right <span class="token operator">=</span> left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> right<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">{</span>i<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">return</span> i<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一起来看看如何在Go中使用Swagger？</title>
      <link href="posts/53c8a188.html"/>
      <url>posts/53c8a188.html</url>
      
        <content type="html"><![CDATA[<h1 id="Swagger-go-的使用"><a href="#Swagger-go-的使用" class="headerlink" title="Swagger go 的使用"></a>Swagger go 的使用</h1><h2 id="http-服务"><a href="#http-服务" class="headerlink" title="http 服务"></a>http 服务</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go get <span class="token parameter variable">-u</span> github.com/swaggo/swag/cmd/swag@v1.7.8go get <span class="token parameter variable">-u</span> github.com/swaggo/gin-swagger@v1.3.3go get <span class="token parameter variable">-u</span> github.com/swaggo/filesgo get <span class="token parameter variable">-u</span> github.com/alecthomas/template<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="验证是否安装成功"><a href="#验证是否安装成功" class="headerlink" title="验证是否安装成功"></a>验证是否安装成功</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">swag <span class="token parameter variable">-v</span><span class="token comment"># swag version v1.7.8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="写入注解"><a href="#写入注解" class="headerlink" title="写入注解"></a>写入注解</h3><table><thead><tr><th>注解</th><th>描述</th></tr></thead><tbody><tr><td>@Summary</td><td>摘要</td></tr><tr><td>@Produce</td><td>API 可以产生的 MIME 类型的列表，MIME 类型你可以简单的理解为响应类型，例如：json、xml、html 等等</td></tr><tr><td>@Param</td><td>参数格式，从左到右分别为：参数名、入参类型、数据类型、是否必填、注释</td></tr><tr><td>@Success</td><td>响应成功，从左到右分别为：状态码、参数类型、数据类型、注释</td></tr><tr><td>@Failure</td><td>响应失败，从左到右分别为：状态码、参数类型、数据类型、注释</td></tr><tr><td>@Router</td><td>路由，从左到右分别为：路由地址，HTTP 方法</td></tr></tbody></table><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// @Summary 新增标签</span><span class="token comment">// @Produce  json</span><span class="token comment">// @Param name body string true "标签名称" minlength(3) maxlength(100)</span><span class="token comment">// @Param state body int false "状态" Enums(0, 1) default(1)</span><span class="token comment">// @Param created_by body string false "创建者" minlength(3) maxlength(100)</span><span class="token comment">// @Success 200 {object} model.Tag "成功"</span><span class="token comment">// @Failure 400 {object} errcode.Error "请求错误"</span><span class="token comment">// @Failure 500 {object} errcode.Error "内部错误"</span><span class="token comment">// @Router /api/v1/tags [post]</span><span class="token keyword">func</span> <span class="token punctuation">(</span>t Tag<span class="token punctuation">)</span> <span class="token function">Create</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="针对项目写注解"><a href="#针对项目写注解" class="headerlink" title="针对项目写注解"></a>针对项目写注解</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// @title gin-blog-service 博客系统</span><span class="token comment">// @version 1.0</span><span class="token comment">// @description gin-blog-service 学习 gin 写的一个博客系统</span><span class="token comment">// @termsOfService https://github.com/pudongping/gin-blog-service</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="生成文档"><a href="#生成文档" class="headerlink" title="生成文档"></a>生成文档</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">swag init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="添加-swagger-访问路由"><a href="#添加-swagger-访问路由" class="headerlink" title="添加 swagger 访问路由"></a>添加 swagger 访问路由</h3><blockquote><p>这里以 <code>gin</code> 框架中使用为例</p></blockquote><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"github.com/gin-gonic/gin"</span>ginSwagger <span class="token string">"github.com/swaggo/gin-swagger"</span><span class="token string">"github.com/swaggo/gin-swagger/swaggerFiles"</span>    <span class="token comment">// 初始化 docs 包，内含有 swagger 生成的文档</span><span class="token boolean">_</span> <span class="token string">"github.com/pudongping/gin-blog-service/docs"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">NewRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>gin<span class="token punctuation">.</span>Engine <span class="token punctuation">{</span>r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 如果有额外需求，可以手动指定访问地址</span><span class="token comment">// swaggerUrl := ginSwagger.URL("http://127.0.0.1:8000/swagger/doc.json")</span><span class="token comment">// r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler, swaggerUrl))</span>r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/swagger/*any"</span><span class="token punctuation">,</span> ginSwagger<span class="token punctuation">.</span><span class="token function">WrapHandler</span><span class="token punctuation">(</span>swaggerFiles<span class="token punctuation">.</span>Handler<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> r<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="grpc-服务"><a href="#grpc-服务" class="headerlink" title="grpc 服务"></a>grpc 服务</h2><h3 id="安装-protoc-插件-protoc-gen-swagger"><a href="#安装-protoc-插件-protoc-gen-swagger" class="headerlink" title="安装 protoc 插件 protoc-gen-swagger"></a>安装 protoc 插件 protoc-gen-swagger</h3><blockquote><p>protoc-gen-swagger 的作用是通过 proto 文件来生成 swagger 定义（.swagger.json）</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go get <span class="token parameter variable">-u</span> github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="下载-Swagger-UI-文件"><a href="#下载-Swagger-UI-文件" class="headerlink" title="下载 Swagger UI 文件"></a>下载 Swagger UI 文件</h3><p>Swagger 提供可视化的接口管理平台，也就是 Swagger UI，我们首先需要到 <a href="https://github.com/swagger-api/swagger-ui">https://github.com/swagger-api/swagger-ui</a> 上将其源码压缩包下载下来，接着在项目的 third_party 目录下新建 swagger-ui 目录，将其 dist 目录下的所有资源文件拷贝到我们项目的 third_party/swagger-ui 目录中去。</p><h3 id="静态资源转换"><a href="#静态资源转换" class="headerlink" title="静态资源转换"></a>静态资源转换</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将静态文件转换为 go 代码</span>go get <span class="token parameter variable">-u</span> github.com/go-bindata/go-bindata/<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在项目的 <code>pkg</code> 目录下新建 <code>swagger</code> 目录，并在项目根目录下执行以下转换命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在执行完毕后，应当在项目的 pkg/swagger 目录下创建了 data.go 文件</span>go-bindata <span class="token parameter variable">--nocompress</span> <span class="token parameter variable">-pkg</span> swagger <span class="token parameter variable">-o</span> pkg/swagger/data.go third_party/swagger-ui/<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Swagger-UI-处理和访问"><a href="#Swagger-UI-处理和访问" class="headerlink" title="Swagger UI 处理和访问"></a>Swagger UI 处理和访问</h3><p>为了让刚刚转换的静态资源代码能够让外部访问到，我们需要安装 go-bindata-assetfs 库，它能够结合 net/http 标准库和 go-bindata 所生成 Swagger UI 的 Go 代码两者来供外部访问</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go get <span class="token parameter variable">-u</span> github.com/elazarl/go-bindata-assetfs/<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>引入并使用</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>assetfs <span class="token string">"github.com/elazarl/go-bindata-assetfs"</span><span class="token string">"github.com/pudongping/go-grpc-service/pkg/swagger"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">runHttpServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>http<span class="token punctuation">.</span>ServeMux <span class="token punctuation">{</span>httpMux <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewServeMux</span><span class="token punctuation">(</span><span class="token punctuation">)</span>httpMux<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/ping"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token boolean">_</span><span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">`pong`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">// 代码大致调整这里 start</span>prefix <span class="token operator">:=</span> <span class="token string">"/swagger-ui/"</span>fileServer <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">FileServer</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>assetfs<span class="token punctuation">.</span>AssetFS<span class="token punctuation">{</span>Asset<span class="token punctuation">:</span>    swagger<span class="token punctuation">.</span>Asset<span class="token punctuation">,</span>AssetDir<span class="token punctuation">:</span> swagger<span class="token punctuation">.</span>AssetDir<span class="token punctuation">,</span>Prefix<span class="token punctuation">:</span>   <span class="token string">"third_party/swagger-ui"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span>httpMux<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> http<span class="token punctuation">.</span><span class="token function">StripPrefix</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> fileServer<span class="token punctuation">)</span><span class="token punctuation">)</span>httpMux<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/swagger/"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token operator">!</span>strings<span class="token punctuation">.</span><span class="token function">HasSuffix</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">,</span> <span class="token string">"swagger.json"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>http<span class="token punctuation">.</span><span class="token function">NotFound</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>p <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">TrimPrefix</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">,</span> <span class="token string">"/swagger/"</span><span class="token punctuation">)</span>p <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token string">"proto"</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">ServeFile</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> r<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment">// 代码大致调整这里 end</span><span class="token keyword">return</span> httpMux<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重新运行服务，通过浏览器访问 <code>http://127.0.0.1:8004/swagger-ui/</code> 即可访问 swagger 面板</p><p>访问自己的 swagger 文档接口 <code>http://127.0.0.1:8004/swagger/tag.swagger.json</code></p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何同时安装多个不同版本的Go？GVM就可以！</title>
      <link href="posts/c10fde57.html"/>
      <url>posts/c10fde57.html</url>
      
        <content type="html"><![CDATA[<h1 id="GVM"><a href="#GVM" class="headerlink" title="GVM"></a><a href="https://github.com/moovweb/gvm">GVM</a></h1><blockquote><p>安装过程中，如果遇到了错误，还是直接先访问仓库地址看看文档介绍，可能解决得更快。</p></blockquote><h2 id="安装并使用"><a href="#安装并使用" class="headerlink" title="安装并使用"></a>安装并使用</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">bash</span> <span class="token operator">&lt;</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token function">curl</span> <span class="token parameter variable">-s</span> <span class="token parameter variable">-S</span> <span class="token parameter variable">-L</span> https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer<span class="token punctuation">)</span><span class="token comment"># 也可以先把脚本先下载下来，然后执行</span><span class="token function">curl</span> <span class="token parameter variable">-o</span> gvm-installer https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer<span class="token function">chmod</span> +x gvm-installer./gvm-installer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看可用的 go 版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gvm listall<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装特定版本的 go</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 这里的版本号由 `gvm listall` 命令返回的版本号之一</span>gvm <span class="token function">install</span> go1.16.5<span class="token comment"># 下载后的 go 位于 `~/.gvm/gos` 目录下</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看当前正在使用的 go 版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gvm list<span class="token comment"># gvm gos (installed)</span><span class="token comment">#</span><span class="token comment">#   go1.17</span><span class="token comment">#   go1.17.13</span><span class="token comment">#   go1.20.8</span><span class="token comment">#=&gt; go1.21.0</span><span class="token comment">#   system</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用特定版本的 go</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gvm use go1.16.5<span class="token comment"># 设置为默认版本的 go</span>gvm use go1.16.5 <span class="token parameter variable">--default</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>卸载特定版本的 go</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gvm uninstall go1.16.5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>慎重！！！</strong> 完全卸载掉 GVM 和所有安装的 Go 版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gvm implode<span class="token comment"># 如果以上的命令不奏效的话，也可以直接</span><span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token variable">$GVM_ROOT</span><span class="token comment"># 然后去除掉 ~/.zshrc 文件中的类似以下内容即可（如果使用的是 bash 则在 ~/.bashrc 文件中）</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-s</span> <span class="token string">"/Users/pudongping/.gvm/scripts/gvm"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">source</span> <span class="token string">"/Users/pudongping/.gvm/scripts/gvm"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用-GVM-pkgset"><a href="#使用-GVM-pkgset" class="headerlink" title="使用 GVM pkgset"></a>使用 GVM pkgset</h2><blockquote><p>使用 pkgset 可以将你每一个项目的依赖包都分隔开来。</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看系统环境变量</span><span class="token builtin class-name">echo</span> <span class="token environment constant">$PATH</span><span class="token comment"># 可见已经将 `~/.gvm/bin` 加入了环境变量中</span><span class="token comment"># /Users/pudongping/.gvm/bin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>先使用特定的版本，比如 <code>go1.21.0</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gvm use go1.21.0<span class="token comment"># Now using version go1.21.0</span>gvm list<span class="token comment"># gvm gos (installed)</span><span class="token comment">#</span><span class="token comment">#   go1.17</span><span class="token comment">#   go1.17.13</span><span class="token comment">#   go1.20.8</span><span class="token comment">#=&gt; go1.21.0</span><span class="token comment">#   system</span><span class="token builtin class-name">echo</span> <span class="token environment constant">$PATH</span><span class="token comment"># /Users/pudongping/.gvm/pkgsets/go1.21.0/global/bin:/Users/pudongping/.gvm/gos/go1.21.0/bin:/Users/pudongping/.gvm/pkgsets/go1.21.0/global/overlay/bin:/Users/pudongping/.gvm/bin</span><span class="token comment"># 此时可见多添加了</span><span class="token comment"># ~/.gvm/pkgsets/{GO_VERSION}/global/bin</span><span class="token comment"># ~/.gvm/gos/{GO_VERSION}/bin</span><span class="token comment"># ~/.gvm/pkgsets/{GO_VERSION}/global/overlay/bin</span><span class="token builtin class-name">echo</span> <span class="token variable">$GOPATH</span><span class="token comment"># /Users/pudongping/.gvm/pkgsets/go1.21.0/global</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看 <strong>global</strong> pkgset</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gvm pkgset list<span class="token comment">#gvm go package sets (go1.21.0)</span><span class="token comment">#</span><span class="token comment">#=&gt;  global</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建特定的 pkgset</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建一个名为 `ppGvm` 的 pkgset</span>gvm pkgset create ppGvmgvm pkgset list<span class="token comment">#</span><span class="token comment">#gvm go package sets (go1.21.0)</span><span class="token comment">#</span><span class="token comment">#=&gt;  global</span><span class="token comment">#    ppGvm</span> <span class="token comment"># 此时查看系统环境变量，还不会将 `ppGvm` 加入    </span><span class="token builtin class-name">echo</span> <span class="token environment constant">$PATH</span><span class="token comment"># /Users/pudongping/.gvm/pkgsets/go1.21.0/global/bin:/Users/pudongping/.gvm/gos/go1.21.0/bin:/Users/pudongping/.gvm/pkgsets/go1.21.0/global/overlay/bin:/Users/pudongping/.gvm/bin</span><span class="token builtin class-name">echo</span> <span class="token variable">$GOPATH</span><span class="token comment"># /Users/pudongping/.gvm/pkgsets/go1.21.0/global</span><span class="token comment"># 使用 `ppGvm` pkgset</span>gvm pkgset use ppGvm<span class="token comment"># Now using pkgset go1.21.0@ppGvm</span>gvm pkgset list<span class="token comment">#</span><span class="token comment">#gvm go package sets (go1.21.0)</span><span class="token comment">#</span><span class="token comment">#    global</span><span class="token comment">#=&gt;  ppGvm</span><span class="token comment"># 此时可以看到，已经将 `ppGvm` 加入到环境变量中</span><span class="token builtin class-name">echo</span> <span class="token environment constant">$PATH</span><span class="token comment"># /Users/pudongping/.gvm/pkgsets/go1.21.0/ppGvm/bin:/Users/pudongping/.gvm/pkgsets/go1.21.0/ppGvm/overlay/bin:/Users/pudongping/.gvm/pkgsets/go1.21.0/global/bin:/Users/pudongping/.gvm/gos/go1.21.0/bin:/Users/pudongping/.gvm/pkgsets/go1.21.0/global/overlay/bin:/Users/pudongping/.gvm/bin</span><span class="token builtin class-name">echo</span> <span class="token variable">$GOPATH</span><span class="token comment"># /Users/pudongping/.gvm/pkgsets/go1.21.0/ppGvm:/Users/pudongping/.gvm/pkgsets/go1.21.0/global</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果此时你通过 <code>go get</code> 下载 go 包的话，你可以看到新的包被添加到了以下目录下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token variable"><span class="token variable">$(</span> <span class="token function">awk</span> -F<span class="token string">':'</span> <span class="token string">'{print $1}'</span> <span class="token operator">&lt;&lt;&lt;</span> $GOPATH <span class="token variable">)</span></span><span class="token comment"># 或者直接 cd /Users/pudongping/.gvm/pkgsets/go1.21.0/ppGvm</span><span class="token builtin class-name">pwd</span><span class="token comment">#/Users/pudongping/.gvm/pkgsets/go1.21.0/ppGvm</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang中遇到“note module requires Go xxx”后的解决方案，不升级Go版本！</title>
      <link href="posts/1c839b10.html"/>
      <url>posts/1c839b10.html</url>
      
        <content type="html"><![CDATA[<p>前几天，需要对一个两年前写的项目添加点儿新功能，需要用到一个 Http 客户端包，于是就用了 <code>https://github.com/go-resty/resty</code> 这个插件包。</p><p>我先是直接在项目根目录下执行了以下包的安装命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go get <span class="token parameter variable">-v</span> github.com/go-resty/resty<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后，在业务代码中按照官方文档实例化了 <code>client := resty.New()</code> 对象，紧接着我想先启动一下项目，看这个包是否正常可用，结果，执行 <code>go run main.go</code> 命令时，就报以下错误了。</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-0760e7ef8be84cf3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="报错了"></p><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>我们可以看到报错提示是：<code>note: module requires Go 1.17</code> 因为，我现在维护的这个项目是两年前写的，那个时候 Go 比较稳定的版本还是 <code>go 1.16</code> 因此，这个项目也是基于 <code>go 1.16</code> 版本写的。可近期 Go 的版本迭代非常快，截止发稿，现在 Go 已经迭代到 <code>go 1.22.2</code> 版本了，并且每个版本之间差异也不小，因此跨版本之后就需要解决一些兼容性问题。</p><p>回到刚刚的报错提示：<code>module requires Go 1.17</code> 我们大致可见就是<strong>有部分插件包依赖了 Go 1.17</strong> 高版本，而我现在本地版本还是 Go 1.16，版本不兼容导致，那么，应该如何解决这个问题呢？</p><h2 id="探讨解决方案"><a href="#探讨解决方案" class="headerlink" title="探讨解决方案"></a>探讨解决方案</h2><p>当然，我们可以直接升级一下 Go 的版本，这个问题应该就会迎刃而解。但是，这个项目已经在生产环境上跑了两年多了，现在贸然的去升级 Go 版本，感觉还是有些不妥，毕竟没有什么比项目稳定更加重要了。</p><p>不能去升级 Go 版本，那就只有一种解决方案了。</p><p><strong>找到有问题的插件包，然后对有问题的依赖包进行降级就好了</strong>。但是，问题是：如何快速且准确的找到这个依赖包呢？</p><p>我们再回到刚刚的报错提示，可以仔细查看到，可能跟 <code>golang.org/x/sys@v0.13.0</code> 这个包有关系，毕竟错误信息中就含有它。</p><p>那么，按照这个思路，我们可以一步一步查到每个包的依赖，方便我们好定位问题。</p><p>一般情况下，此时，我们可能会想到直接使用 <code>go mod graph</code> 命令来查看项目现有的结构图，但是，如果这个项目依赖的包不算多，我们还可以勉勉强强捋得清楚相关的依赖，如果依赖包比较多了，估计也看麻了吧……</p><h2 id="借助工具来查找依赖关系"><a href="#借助工具来查找依赖关系" class="headerlink" title="借助工具来查找依赖关系"></a>借助工具来查找依赖关系</h2><p>你会发现根本无从看起，那么，我们是否可以借助某些工具来查看呢？其实，我也不确定有没有这样的工具，那还是老套路呗，直接去 Github 上搜一波试了看，结果，一搜还真有！</p><p>就是这个包：<code>https://github.com/PaulXu-cn/go-mod-graph-chart</code> 看了下包介绍：<strong>“一个能将 <code>go mod graph</code> 输出内容可视化的无依赖小工具”</strong> ，这不正是我需要的嘛！</p><p>果断用起来！</p><p>由于这个小工具是一个二进制文件，于是直接使用 <code>go install</code> 命令安装了下。</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-50d8c5f97c29c6f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="使用工具"></p><p>然后在项目根目录下执行 <code>go mod graph | gmchart -keep 1</code> （设置 <code>-keep 1</code> 是为了保证 HTTP 服务永不退出，当然也可以完全不设置，如果不设置的话 gmchart 启动的 HTTP 服务就只会启动一分钟。）</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-2148d071f6be258b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="启动工具"></p><p>当你执行完以上命令之后，会在浏览器中自动打开一个可视化的展示图表。这个工具其实就是将 <code>go mod graph</code> 命令输出的内容以<strong>树状</strong>的形式渲染成 web 页面展示了出来，更加方便我们查看每个包的依赖关系。</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-a327b7f04b13f9d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="直接搜索依赖"></p><p>有了这个工具的协助，我们再回过头来去解决刚刚的报错问题。我们可以直接在浏览器中搜索 <code>sys@v0.13.0</code> 关键词，看这个包被哪些包依赖，然后依次检查各个依赖包所支持的版本，如果高于 <code>go 1.16</code> 那么则直接将这个包降级就好了。</p><p>搜到 <code>x/sys@v0.13.0</code> 之后，我们对着它点击一下，就可以看见如下，有三个包依赖了 <code>golang.org/x/sys@v0.13.0</code> 包。</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-1cc83cbb02dd48f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="确定依赖关系"></p><p>现在的思路就是一个一个包去找，把依赖高版本的包找出来。此时我们可以直接访问包的下载地址 <code>golang.org/x/net</code> 发现它会自动重定向到 <code>https://pkg.go.dev/golang.org/x/net</code> 地址上，这是由于官方包换了域名导致，不用太在意这点。</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-3cf5b39fd0d37fbf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="找到具体包"></p><p>截至写这篇文章时，<code>golang.org/x/net</code> 的 Latest 版本是 v0.22.0，那么，我们如何知道此时的版本依赖于什么版本的 Go 呢？是的，我们可以通过直接去查看这个包的 <code>go.mod</code> 文件，就一目了然了。</p><blockquote><p>在 Go Modules 模式下，项目根目录的 go.mod 文件中，都会记录当前项目依赖的 Go 最低版本。</p></blockquote><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-79fe07d35d94c8e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="找到指定版本"></p><p>我们对着 Latest 左侧的版本点一下，以便我们可以查看到所有的版本。因为在我的项目中采用的版本是 <code>golang.org/x/net@v0.17.0</code> 因此，我们先优先查看这个版本的 <code>go.mod</code> 文件。</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-19da41b4a3e7bdde.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="查看go.mod"></p><p>进入到指定版本页面之后，再点击页面右上方侧的 <code>go.mod</code> 处。</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-bb730c130fb98188.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="查看指定版本的go.mod内容"></p><p>我们就可以看到这个版本的 go.mod 文件了，诶…… 是不是一下子就看到了 <code>go 1.17</code> 字眼了？有点儿小激动了，是不是？那么，我们只需要往前面的版本中去找，只要找到有一个最大的版本是依赖于 <code>go 1.16</code> 就行，然后，我就开始继续找呀找……</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-67d9f7360bc3c0ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="查看各个版本"></p><p>点击依赖包的版本位置处，可见所有的版本，然后我们一个版本一个版本的点击后看看。</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-bd14b74f47b45584.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="最小的版本也是依赖go 1.17"></p><p>发现，比较恶心的一幕出现了！<strong>连最低的版本 v0.1.0 就是依赖于 go 1.17 ！</strong>  真是 WTF ！</p><h2 id="再次碰壁！遇到难题"><a href="#再次碰壁！遇到难题" class="headerlink" title="再次碰壁！遇到难题"></a>再次碰壁！遇到难题</h2><p>那……这个问题就没有解了吗？其实并不是，我们忽略了一点，还有一种版本形式，就是类似于 <code>v0.0.0-20211029224645-99673261e6eb</code> 这种的版本，为什么会有这样的版本，感兴趣的童鞋可以自行去查一查，今天的重点不在这里。</p><p>虽然我们知道，这样的版本肯定是小于 v0.1.0 版本的，但是我们又该如何去找到这种版本号的插件包呢？问题一下子就棘手了起来……</p><p>此时，我们再把这个事情好好捋顺一下。我是因为要在项目中用到 <code>github.com/go-resty/resty</code> 包，所以我就使用 <code>go get -v github.com/go-resty/resty</code> 命令去下载了这个插件包，然后启动项目的时候就直接报错了。报错内容分析得出是某些包依赖了高版本的 go 1.17 我自己本地使用的是 go 1.16 ，好吧，那我先在项目中不使用 <code>github.com/go-resty/resty</code> 包，看项目是否能够跑得起来。当我在项目中没有去掉了 resty 包之后，项目跑起来了，没有发生错误，证明我之前的项目是正常的，就是因为下载了 resty 包之后导致无法启动的。可是，我现在就想用 resty 包，并且根据以上的排查，我们还发现了 <code>golang.org/x/net</code> 包只能用 v0.0.0 某个具体版本的。</p><p>有了这些经验之后，那么，我们来到 resty 包的 go.mod 文件中查看一下。</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-39c961225bb33afb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="查看resty包的依赖情况"></p><p>我们可以看到，当前最新的 resty v2.12.0 版本是支持 go 1.16 的，但是问题就在于此时用的 <code>golang.org/x/net</code> 包是 v0.22.0 版本，通过以上我们的结论来看 v0.22.0 版本是不支持 go 1.16 的，那么，问题就出现在这里了！</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-9001a183087f44c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="定位到具体resty包"></p><p>找到问题所在了之后，我们就一个版本一个版本的去找，最后终于锁定了 <code>resty v2.7.0</code> 版本！</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li>直接去项目的 <code>go.mod</code> 文件中添加 <code>require github.com/go-resty/resty/v2 v2.7.0</code></li><li>再去执行 <code>go mod download github.com/go-resty/resty/v2</code> 下载了指定 v2.7.0 版本的 resty 包</li><li>再去运行一下项目，就发现跑起来啦！完美！</li></ol><h2 id="最后总结一下"><a href="#最后总结一下" class="headerlink" title="最后总结一下"></a>最后总结一下</h2><ol><li>我本地之前是没有拉取过 <code>resty</code> 包的，因此当我使用 <code>go get</code> 命令且没有明确指定版本号的情况下，是直接会拉取最新版本的，也就是 <code>go get -v github.com/go-resty/resty</code>。</li><li>其实不管是 <code>golang.org/x/sys</code> 包还是 <code>golang.org/x/net</code> 包，在我项目中并没<strong>直接</strong>引用它们，因此，根本就无法在 <code>go.mod</code> 文件中去调整它们的版本。另外，哪怕是存在 <code>go.mod</code> 文件中，但是后面带了有 <code>// indirect</code> 注释的，就算是我们在 <code>go.mod</code> 文件中删了这个依赖也没有啥用！</li></ol><blockquote><p>indirect 标识表示该模块为间接依赖，也就是在当前应用程序中的 import 语句中，并没有发现这个模块的明确引用，有可能是你先手动 go get 拉取下来的，也有可能是你所依赖的模块所依赖的，情况有好几种。</p></blockquote><ol start="3"><li>虽然这两个有冲突的包在 <code>go.mod</code> 文件中不存在，但是在 <code>go.sum</code> 文件中是存在的，可不可以直接在 <code>go.sum</code> 文件中将其修改或者删除呢？回答是：<strong>不可以！</strong> 因为此时你只需要执行下 <code>go mod tidy</code> 命令，马上又回来了。</li></ol><p>其实遇到这个报错时，我也去搜索引擎上查询了一些解决方案，但是多数人的回答都是要升级 go 版本。可是，这个项目已经在生产环境上运行了一段时间了，能够稳定运行的项目，肯定是不能做调整大版本这种大动干戈动作的，不然，出了大问题，可能就直接拿我祭天了。</p><p>要是你也遇到了类似的问题，你也不想通过升级 go 版本来解决，也可以试试我说的这个方案。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Consul，一个服务发现神器</title>
      <link href="posts/74705a17.html"/>
      <url>posts/74705a17.html</url>
      
        <content type="html"><![CDATA[<p>在使用微服务的架构中，Consul 是一个不可或缺的工具。它由 HashiCorp 公司开发，Consul 提供了服务发现、健康检查、配置管理和服务网格功能，使得在复杂的分布式系统中管理和配置服务变得简单高效。</p><h2 id="服务发现：解决微服务寻址难题"><a href="#服务发现：解决微服务寻址难题" class="headerlink" title="服务发现：解决微服务寻址难题"></a>服务发现：解决微服务寻址难题</h2><p>在分布式系统中，服务实例通常会动态变化，这使得服务间的互相寻址变得复杂。Consul通过服务注册和服务发现机制解决了这一问题。每个服务实例在启动时向Consul注册自己，并周期性地更新其健康状态。这样，服务之间就可以通过Consul查询其他服务的当前可用实例。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 注册服务示例</span><span class="token function">curl</span> <span class="token parameter variable">--location</span> <span class="token parameter variable">--request</span> PUT <span class="token string">'http://localhost:8500/v1/agent/service/register'</span> <span class="token punctuation">\</span><span class="token parameter variable">--header</span> <span class="token string">'Content-Type: application/json'</span> <span class="token punctuation">\</span><span class="token parameter variable">--data</span> <span class="token string">'{  "ID": "my-service-1",  "Name": "my-service",  "Tags": ["v1"],  "Address": "10.0.0.1",  "Port": 8080,  "Check": {    "HTTP": "http://10.0.0.1:8080/health",    "Interval": "10s"  }}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="健康检查：确保服务质量和可靠性"><a href="#健康检查：确保服务质量和可靠性" class="headerlink" title="健康检查：确保服务质量和可靠性"></a>健康检查：确保服务质量和可靠性</h2><p>Consul 的健康检查机制确保只有健康的服务实例被用于服务发现。每个服务可以定义一个或多个健康检查，Consul  会定期执行这些检查以确定服务实例的健康状态。</p><h2 id="动态配置：灵活的服务配置管理"><a href="#动态配置：灵活的服务配置管理" class="headerlink" title="动态配置：灵活的服务配置管理"></a>动态配置：灵活的服务配置管理</h2><p>Consul 的 <code>Key/Value</code> 存储功能允许程序员存储和管理配置信息。服务可以在启动时从 Consul 查询这些配置，实现动态配置管理。当配置更改时，服务可以自动获取新的配置，而无需重启。</p><h2 id="多数据中心支持：扩展全球服务"><a href="#多数据中心支持：扩展全球服务" class="headerlink" title="多数据中心支持：扩展全球服务"></a>多数据中心支持：扩展全球服务</h2><p>Consul 天然支持多数据中心，这使得构建跨地理位置的高可用系统变得简单。程序员可以配置服务在多个数据中心之间相互发现和通信，而 Consul 会处理所有复杂的网络和同步问题。</p><h2 id="以下是-Consul-的几种安装方式"><a href="#以下是-Consul-的几种安装方式" class="headerlink" title="以下是 Consul 的几种安装方式"></a>以下是 Consul 的几种安装方式</h2><h3 id="第一种方式：可以直接使用-homebrew-安装"><a href="#第一种方式：可以直接使用-homebrew-安装" class="headerlink" title="第一种方式：可以直接使用 homebrew 安装"></a>第一种方式：可以直接使用 <code>homebrew</code> 安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> consul<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="第二种方式：使用-docker-安装-consul"><a href="#第二种方式：使用-docker-安装-consul" class="headerlink" title="第二种方式：使用 docker 安装 consul"></a>第二种方式：使用 docker 安装 consul</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 拉取 latest 版本镜像</span><span class="token function">docker</span> pull consul<span class="token comment"># 拉取指定版本的 consul 镜像，这里以 1.14.1 版本示例</span><span class="token function">docker</span> pull consul:1.14.1<span class="token comment"># -bind 的地址为 docker0 或者 eth0 的 ip 地址都可以</span><span class="token function">docker</span> run <span class="token parameter variable">--name</span> alex-consul <span class="token punctuation">\</span><span class="token parameter variable">--net</span><span class="token operator">=</span>host <span class="token punctuation">\</span><span class="token parameter variable">-d</span> consul:1.14.1 <span class="token punctuation">\</span>agent <span class="token parameter variable">-server</span> <span class="token parameter variable">-bind</span><span class="token operator">=</span><span class="token number">172.17</span>.118.227 -bootstrap-expect<span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">-client</span><span class="token operator">=</span><span class="token number">0.0</span>.0.0 <span class="token parameter variable">-ui</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第三种方式：直接下载-consul-二进制文件启动"><a href="#第三种方式：直接下载-consul-二进制文件启动" class="headerlink" title="第三种方式：直接下载 consul 二进制文件启动"></a>第三种方式：直接下载 consul 二进制文件启动</h3><blockquote><p><a href="https://www.consul.io/downloads" title="官方下载页面">官方下载页面</a> 可以按照系统，选择指定的 consul 版本<br>我这里下载的是 <code>Mac 版本的 consul 1.14.2 版本</code>， <a href="https://releases.hashicorp.com/consul/1.14.2/consul_1.14.2_darwin_amd64.zip" title="下载地址">下载地址</a> 下载完成之后是一个 <code>zip</code> 压缩包，直接解压即可。</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载 mac 版本的 consul 1.14.2</span><span class="token function">wget</span> https://releases.hashicorp.com/consul/1.14.2/consul_1.14.2_darwin_amd64.zip<span class="token comment"># 或者</span><span class="token function">curl</span> <span class="token parameter variable">-O</span> https://releases.hashicorp.com/consul/1.14.2/consul_1.14.2_darwin_amd64.zip<span class="token comment"># 解压</span><span class="token function">unzip</span> consul_1.14.2_darwin_amd64.zip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接使用二进制文件启动时：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># data 文件夹用于存放 consul 的数据文件， config 文件夹用于存放配置文件</span><span class="token comment"># 需要将 client 设置成 0.0.0.0 否则无法在外网访问 consul 的 UI 界面</span><span class="token comment"># 启动命令</span>./consul agent -data-dir<span class="token operator">=</span>./data -config-dir<span class="token operator">=</span>./config <span class="token parameter variable">-server</span> <span class="token parameter variable">-bind</span><span class="token operator">=</span><span class="token number">127.0</span>.0.1 -bootstrap-expect<span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">-client</span> <span class="token number">0.0</span>.0.0 <span class="token parameter variable">-ui</span><span class="token comment"># 或者</span>./consul agent -data-dir<span class="token operator">=</span>./data -config-dir<span class="token operator">=</span>./config <span class="token parameter variable">-server</span> <span class="token parameter variable">-bootstrap</span> <span class="token parameter variable">-ui</span> <span class="token parameter variable">-node</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">-client</span><span class="token operator">=</span><span class="token number">0.0</span>.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 通过 -dev 启动，不会保存配置（即重启 consul 后配置信息将消失）</span>consul agent <span class="token parameter variable">-dev</span><span class="token comment"># 查看集群成员。添加 `-detailed` 选项可以查看到额外的信息。</span>consul members<span class="token comment"># 查看准确匹配 server 的状态信息</span><span class="token function">curl</span> localhost:8500/v1/catalog/nodes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 分布式系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式系统 </tag>
            
            <tag> Consul </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一文弄懂 Swoole 进程、线程、协程到底是什么？</title>
      <link href="posts/289a4dbc.html"/>
      <url>posts/289a4dbc.html</url>
      
        <content type="html"><![CDATA[<h2 id="swoole-和-workerman-的区别"><a href="#swoole-和-workerman-的区别" class="headerlink" title="swoole 和 workerman 的区别"></a>swoole 和 workerman 的区别</h2><ul><li>workerman 使用纯 php 编写；swoole 采用 c/c++ 语言编写，作为 php 扩展</li><li>workerman 多进程；swoole 协程，多进程，多线程</li><li>swoole 性能优于 workerman</li><li>swoole 并没有用 libevent，所以不需要安装 libevent</li><li>swoole 并不依赖 php 的 stream/sockets/pcntl/posix/sysvmsg 等扩展</li></ul><h2 id="master-（主进程）、reactor-（线程）、manager（管理进程）、worker-（工作进程）-、-task-（任务进程）"><a href="#master-（主进程）、reactor-（线程）、manager（管理进程）、worker-（工作进程）-、-task-（任务进程）" class="headerlink" title="master （主进程）、reactor （线程）、manager（管理进程）、worker （工作进程） 、 task （任务进程）"></a>master （主进程）、reactor （线程）、manager（管理进程）、worker （工作进程） 、 task （任务进程）</h2><p>对于 Linux 系统，是无法区分<strong>进程</strong>和<strong>线程</strong>的，CPU 是单进程（因此<strong>并行执行</strong>只有1，因为只有 1 个 CPU，但是可用开多个进程/线程去执行，这样就达到了<strong>并发执行</strong>，CPU 可以通过轮训调度从多个进程/线程之间来回做切换，但是多进程/线程切换也就产生了切换之间的成本<strong>进程/线程的数量越多，切换成本就越大，也就越浪费，因为这种切换并没有在业务代码中消耗</strong>）</p><p>一个线程，又可用分为用户空间（用户线程）和内核空间（内核线程），内核线程就是 thread（线程），用户线程就是 co-routine（协程，golang 中叫做 goroutine），然后又可以通过一个线程去绑定一个 <strong>协程调度器</strong>，一个协程调度器又可以绑定多个协程，这样性能高低就完全取决于优化协程调度器，哪门语言的协程调度器做的好，那么性能就高。</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-e8dbb161c619f9c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-877e8c01041475e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="master-进程"><a href="#master-进程" class="headerlink" title="master 进程"></a>master 进程</h3><p>主进程内有多个 reactor 线程，reactor 线程基于 epoll/kqueue 进行网络事件轮训。收到数据后转发到 worker 进程去处理。</p><h3 id="reactor-线程"><a href="#reactor-线程" class="headerlink" title="reactor 线程"></a>reactor 线程</h3><p>reactor 线程个数默认和 cpu 核心数一致</p><h3 id="manager-进程"><a href="#manager-进程" class="headerlink" title="manager 进程"></a>manager 进程</h3><p>对所有 worker 进程进行管理，worker 进程生命周期结束或者发生异常时自动回收，并创建新的 worker 进程</p><h3 id="worker-进程"><a href="#worker-进程" class="headerlink" title="worker 进程"></a>worker 进程</h3><p>对收到的数据进行处理，包括协议解析和响应请求。如果 swoole 没有设置 worker_num ，底层会启动与 cpu 数量一致的 worker 进程</p><h3 id="task-进程"><a href="#task-进程" class="headerlink" title="task 进程"></a>task 进程</h3><p>task 进程和 worker 进程是同级别的，可以将 worker 进程中的一些服务投递给 task 进程进行处理，来达到分担 worker 进程工作量的目的</p><h3 id="coroutine-协程"><a href="#coroutine-协程" class="headerlink" title="coroutine 协程"></a>coroutine 协程</h3><p>协程可以理解为纯用户态的线程，其通过协作而不是抢占来进行切换，相对于进程或者线程，协程所有的操作都可以在用户态完成，创建和切换的消耗更低，Swoole 可以为每一个请求创建对应的协程，根据 IO 的状态来合理的调度协程。</p><p>在 Swoole 4.x 中，协程（Coroutine）取代了异步回调，成为 Swoole 官方推荐的编程方式。Swoole 协程解决了异步回调编程困难的问题，使用协程可以以传统同步编程的方法编写代码，底层自动切换为异步 IO，既保证了编程的简单性，又可借助异步 IO，提升系统的并发能力。</p><blockquote><p>注：Swoole 4.x 之前的版本也支持协程，不过 4.x 版本对协程内核进行了重构，功能更加强大，提供了完整的协程+通道特性，带来全新的 CSP 编程模型，后续介绍和示例都是基于 Swoole 4.x 版本。</p></blockquote><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-78ba06649d969718.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="进程/线程结构图"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-aa2ab771fa24e858.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="swoole 架构"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-e90a521635fbfee1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="swoole 运行流程图"></p><h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><ul><li>进程<br>进程是一个具有一定独立功能的程序在一个数据集上的一次动态执行的过程，是操作系统进行资源分配和调度的一个独立单位，是应用程序运行的载体。</li><li>线程<br>线程是程序执行中一个单一的顺序控制流程，是程序执行流的最小单元，是处理器调度和分派的基本单位。一个进程可以有一个或多个线程。</li></ul><h3 id="进程和线程的区别"><a href="#进程和线程的区别" class="headerlink" title="进程和线程的区别"></a>进程和线程的区别</h3><ul><li>线程是程序执行的最小单位，而进程是操作系统分配资源的最小单位。</li><li>一个进程由一个或多个线程组成，线程是一个进程中代码的不同执行路线。</li><li>进程之间相互独立，但同一进程下的各个线程之间共享程序的内存空间（包括代码段，数据集，堆等）及一些进程级的资源（如打开文件和信号等），某进程内的线程在其他进程不可见。</li><li>调度和切换：线程上下文切换比进程上下文切换要快得多。</li><li>线程天生的共享内存空间，线程间的通信更简单，避免了进程 IPC（进程间的通信） 引入新的复杂度。</li><li>进程开销大，线程开销小。</li></ul><h3 id="php-实现多进程"><a href="#php-实现多进程" class="headerlink" title="php 实现多进程"></a>php 实现多进程</h3><p>pcntl 是 php 官方的多进程扩展，只能在 Linux 环境下使用，编译 php 的时候需要开启 –enable-pcntl<br>pcntl_fork 在当前进程当前位置产生分支（子进程），fork 是创建了一个子进程，父进程和子进程都从 fork 得位置开始向下继续执行，不同的是父进程执行过程中，得到的 fork 返回值为子进程号，而子进程得到得是 0。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token function">pcntl_fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'我是父进程'</span> <span class="token operator">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'我是子进程'</span> <span class="token operator">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多进程例子：会先输出 <code>111</code> 然后输出 <code>222</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token function">pcntl_fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'222'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pcntl_fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'111'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 两段代码并行执行，并不会因为第一个判断中有了 sleep 就停止往下执行代码</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="进程间的通信"><a href="#进程间的通信" class="headerlink" title="进程间的通信"></a>进程间的通信</h3><p>在各个进程中，内存空间都是不一致的，各个变量都是在不同的内存空间。进程间空间独立，数据不能共享。</p><p>例子如下：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'alex'</span><span class="token punctuation">;</span><span class="token variable">$pid</span> <span class="token operator">=</span> <span class="token function">pcntl_fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$pid</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$str</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">'===111'</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$str</span> <span class="token operator">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>  <span class="token comment">// 会输出 alex===111</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token variable">$str</span> <span class="token operator">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>  <span class="token comment">// 会输出 alex</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进程间的通信可以采用多种方式，比如：管道通信、消息队列通信、进程信号通信、套接字通信、第三方通信（使用文件操作，或者mysql，或者redis等方法也可以实现通信）、共享内存通信（映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的 IPC &lt;进程间通信&gt; 方式，它是针对其他进程间通信方式运行效率低而专门设计的。<code>swoole</code> 就是采用共享内存通信）</p><h2 id="线程和协程"><a href="#线程和协程" class="headerlink" title="线程和协程"></a>线程和协程</h2><p>提起并发编程，最常见的就是 <strong>多线程编程</strong> 。线程是操作系统能够进行调度的最小单位，共享同一进程的数据和资源，并行地处理多个任务。（同一进程下多线程之间的内存是共享的）。</p><p>多线程存在两个问题，在线程数量过多时，问题被放大的尤为明显。</p><ul><li>线程的上下文切换造成的开销。</li><li>线程之间对资源的竞争问题（线程安全）。</li></ul><p>协程也是一种异步方案。在代码 IO 阻塞时，当前协程让出 CPU 执行权，让其它协程执行，待 IO 执行完毕，阻塞的协程继续执行。虽然代码是异步执行，但写代码看起来像是同步的。支持协程的编程语言实现了协程的调度器，提供了 channel 机制进行协程间通信 （CSP模型中消息传递的实现）。基于 CSP 模型的协程方案，实现了无共享内存无锁的并发，可以匹配异步回调的性能。</p><p><strong>Swoole 的协程在底层实现上是单线程的</strong>，因此同一时间只有一个协程在工作，协程的执行是串行的，这与线程不同，多个线程会被操作系统调度到多个 CPU 并行执行。</p><p>一个协程正在运行时，其他协程会停止工作。当前协程执行阻塞 IO 操作时会挂起，底层调度器会进入事件循环。当有 IO 完成事件时，底层调度器恢复事件对应的协程的执行。</p><p>在 Swoole 中对 CPU 多核的利用，仍然依赖于 Swoole 引擎的多进程机制。</p><h3 id="协程的特性"><a href="#协程的特性" class="headerlink" title="协程的特性"></a>协程的特性</h3><p>协程极高的执行效率。因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销。<br>不需要多进程的锁机制，因为只有一个线程，也不存在同时写变量冲突。（swoole 是开了一个线程，多个协程的机制）</p><h3 id="线程和协程的适用场景"><a href="#线程和协程的适用场景" class="headerlink" title="线程和协程的适用场景"></a>线程和协程的适用场景</h3><p>协程（协同程序），同一时间只能执行某个协程。开辟多个协程开销不大，协程适合对某任务进行分时处理。<strong>IO密集型</strong><br>线程，同一时间可以同时执行多个线程。开辟多条线程开销很大。线程适合多任务同时处理。 <strong>CPU密集型</strong></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swoole </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swoole 的底层架构及运行原理</title>
      <link href="posts/84212e0c.html"/>
      <url>posts/84212e0c.html</url>
      
        <content type="html"><![CDATA[<p>先看这张底层架构图</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-176c45bba608fa9a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Swoole 的底层架构及运行原理图"></p><p>我们可以看到，Swoole 主要包含以下组件：</p><ul><li><strong>Master：</strong> 当我们运行启动 Swoole 的 PHP 脚本时，首先会创建该进程（它是整个应用的 root 进程），然后由该进程 fork 出 Reactor 线程和 Manager 进程。</li><li><strong>Reactor：</strong> Reactor 是包含在 Master 进程中的多线程程序，用来处理 TCP 连接和数据收发（异步非阻塞方式）。Reactor 主线程在 Accept 新的连接后，会将这个连接分配给一个固定的 Reactor 线程，并由这个线程负责监听此 socket。在 socket 可读时读取数据，并进行协议解析，将请求投递到 Worker 进程；在 socket 可写时将数据发送给 TCP 客户端。</li><li><strong>Manager：</strong> Manager 进程负责 fork 并维护多个 Worker 子进程。当有 Worker 子进程中止时，Manager 负责回收并创建新的 Worker 子进程，以便保持 Worker 进程总数不变；当服务器关闭时，Manager 将发送信号给所有 Worker 子进程，通知其关闭服务。</li><li><strong>Worker：</strong> 以多进程方式运行，每个子进程负责接受由 Reactor 线程投递的请求数据包，并执行 PHP 回调函数处理数据，然后生成响应数据并发给 Reactor 线程，由 Reactor 线程发送给 TCP 客户端。所有请求的处理逻辑都是在 Worker 子进程中完成，这是我们编写业务代码时真正要关心的部分。</li><li><strong>Task Worker：</strong> 功能和 Worker 进程类似，同样以多进程方式运行，但仅用于任务分发，当 Worker 进程将任务异步分发到任务队列时，Task Worker 负责从队列中消费这些任务（同步阻塞方式处理），处理完成后将结果返回给 Worker 进程。</li></ul><p>Swoole 官方对 Reactor、Worker、Task Worker有一个形象的比喻，如果把基于 Swoole 的 Web 服务器比作一个工厂，那么 Reactor 就是这个工厂的销售员，Worker 是负责生产的工人，销售员负责接订单，然后交给工人生产，而 Task Worker 可以理解为行政人员，负责替工人处理生产以外的杂事，比如订盒饭、收快递，让工人可以安心生产。</p><h1 id="Swoole-的生命周期回调函数"><a href="#Swoole-的生命周期回调函数" class="headerlink" title="Swoole 的生命周期回调函数"></a>Swoole 的生命周期回调函数</h1><p>当 Master 主进程启动或关闭时会触发下面这两个回调函数：</p><ul><li>onStart</li><li>onShutdown</li></ul><p>而 Manager 管理进程启动或关闭时会触发下面这两个回调函数：</p><ul><li>onManagerStart</li><li>onManagerStop</li></ul><p>Worker 进程的生命周期中，有多个回调函数：</p><ul><li>onWorkerStart：Worker 进程启动时</li><li>onWorkerStop： Worker 进程关闭时</li><li>onConnect：连接建立时</li><li>onClose：连接关闭时</li><li>onReceive：收到请求数据时</li><li>onFinish：投递的任务处理完成时</li></ul><p>Task Worker 进程也有两个回调函数，分别在</p><ul><li>onTask：由新任务投递过来时</li><li>onWorkerStart：Task Worker 进程启动时也会触发</li></ul><p>我们日常开发中主要关注的是 Worker 进程的回调函数，只需要在服务器实例上监听相应的事件，并编写对应的回调函数来处理相应的业务逻辑即可。</p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swoole </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>swoole环境搭建</title>
      <link href="posts/59727fb0.html"/>
      <url>posts/59727fb0.html</url>
      
        <content type="html"><![CDATA[<p>PHP Swoole 扩展的安装方式有很多，这完全取决于你的使用环境，本文大致介绍几种常见的安装方式，且以在 M1 芯片上的 Mac 环境作为示例。</p><h2 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 编译安装 php 的时候直接编译进去</span>--enable-swoole <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pecl <span class="token function">install</span> swoole<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="第三种"><a href="#第三种" class="headerlink" title="第三种"></a>第三种</h2><p>docker 安装</p><h2 id="第四种"><a href="#第四种" class="headerlink" title="第四种"></a>第四种</h2><p>源码编译安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 从官方扩展网站中下载 swoole 源码安装包，这里下载的版本为 4.4.3</span><span class="token function">wget</span> http://pecl.php.net/get/swoole-4.4.3.tgz<span class="token comment"># 安装 4.6.4 版本的 swoole</span><span class="token function">wget</span> https://github.com/swoole/swoole-src/archive/v4.6.4.tar.gz<span class="token comment"># 解压安装包并进入</span><span class="token function">tar</span> <span class="token parameter variable">-xzvf</span> swoole-4.4.3.tgz <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> swoole-4.4.3<span class="token comment"># 查找 phpize 所在目录</span><span class="token function">which</span> phpize<span class="token comment"># 使用 phpize 生成 configure 文件</span>/usr/local/php/bin/phpize./configure --with-php-config<span class="token operator">=</span>/usr/local/php/bin/php-config --enable-openssl --enable-http2 --enable-sockets --enable-mysqlnd<span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span class="token comment"># 在 php.ini 配置文件中开启 swoole 扩展</span><span class="token assign-left variable">extension</span><span class="token operator">=</span>swoole.so<span class="token comment"># 重启 php</span>/etc/init.d/php-fpm restart<span class="token comment"># 查看扩展是否已经开启</span>php <span class="token parameter variable">-m</span>  php <span class="token parameter variable">--ri</span> swoole<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="M1-芯片-MacOS-上安装-swoole"><a href="#M1-芯片-MacOS-上安装-swoole" class="headerlink" title="M1 芯片 MacOS 上安装 swoole"></a>M1 芯片 MacOS 上安装 swoole</h2><h3 id="下载-swoole-源码"><a href="#下载-swoole-源码" class="headerlink" title="下载 swoole 源码"></a>下载 swoole 源码</h3><pre class="line-numbers language-none"><code class="language-none"># 下载 swoole 源码wget https://github.com/swoole/swoole-src/archive/refs/tags/v4.8.1.zip# 解压缩 swoole 源码unzip v4.8.1.zip# 切换到源码目录中cd swoole-src-4.8.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h3><pre class="line-numbers language-none"><code class="language-none"># 查看 php 安装目录which php# 比如我的 php 目录如下所示：# /opt/homebrew/opt/php@7.4/bin/php# 查看 php-config 目录which php-config# 比如我的 php-config 目录如下所示：# /opt/homebrew/opt/php@7.4/bin/php-config# 查看 phpize 安装目录which phpize# 比如我的 phpize 目录如下所示：# /opt/homebrew/opt/php@7.4/bin/phpize# 查看 openssl 安装路径brew info openssl# 如果出现如下所示：# export LDFLAGS="-L/opt/homebrew/opt/openssl@3/lib"# 如果没有安装 openssl 的话，则执行 `brew install openssl` 进行安装<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编译安装-swoole"><a href="#编译安装-swoole" class="headerlink" title="编译安装 swoole"></a>编译安装 swoole</h3><pre class="line-numbers language-none"><code class="language-none"># 使用 phpize 创建 php 编译检测脚本 ./configure# 在 swoole 源码目录中执行如下命令# 注意：需要选择 php 对应版本的 phpize，这里使用的是绝对路径，否则编译安装无法生效sudo /opt/homebrew/opt/php@7.4/bin/phpize# 会直接在 swoole 源码目录中生成 configure 执行文件# 创建编译文件# 开启了 swoole 的 ssl 功能# 开启了 swoole 支持 http2 相关的功能# m1 内核下需要开启 --enable-thread-contextsudo ./configure \--with-php-config=/opt/homebrew/opt/php@7.4/bin/php-config \--with-openssl-dir=/opt/homebrew/opt/openssl \--enable-openssl \--enable-http2 \--enable-thread-context# 编译 swoolesudo make &amp;&amp; make install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="将-swoole-so-添加到-php-ini-配置文件中"><a href="#将-swoole-so-添加到-php-ini-配置文件中" class="headerlink" title="将 swoole.so 添加到 php.ini 配置文件中"></a>将 swoole.so 添加到 php.ini 配置文件中</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看 php 扩展安装目录</span><span class="token comment"># 比如我的路径为</span><span class="token comment"># extension_dir =&gt; /opt/homebrew/lib/php/pecl/20190902 =&gt; /opt/homebrew/lib/php/pecl/20190902</span>php <span class="token parameter variable">-i</span> <span class="token operator">|</span> <span class="token function">grep</span> extension_dir<span class="token comment"># 查看自己的 php 扩展目录下是否有 `swoole.so` 文件</span><span class="token comment"># 比如我这里</span><span class="token builtin class-name">cd</span> /opt/homebrew/lib/php/pecl/20190902<span class="token comment"># 如果没有时，则需要将编译好的 `swoole.so` 文件复制到 php 的扩展目录中，比如我这里</span><span class="token function">cp</span> swoole-src-4.8.1/.libs/swoole.so /opt/homebrew/lib/php/pecl/20190902<span class="token comment"># 查看 php.ini 配置文件路径</span>php <span class="token parameter variable">--ini</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'Loaded Configuration File:'</span><span class="token comment"># 比如我这里</span><span class="token comment"># Loaded Configuration File:         /opt/homebrew/etc/php/7.4/php.ini</span><span class="token comment"># 在 php.ini 配置文件中最后一行添加 `extension="swoole.so"`</span><span class="token comment"># 比如我这里</span><span class="token comment"># vim /opt/homebrew/etc/php/7.4/php.ini</span><span class="token comment"># 查看 swoole 扩展详情</span>php <span class="token parameter variable">--ri</span> swoole<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Swoole </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何编写Dockerfile</title>
      <link href="posts/1a6d22ba.html"/>
      <url>posts/1a6d22ba.html</url>
      
        <content type="html"><![CDATA[<h1 id="编写-dockerfile"><a href="#编写-dockerfile" class="headerlink" title="编写 dockerfile"></a>编写 dockerfile</h1><p>Dockerfile 文件是用于定义 Docker 镜像生成流程的配置文件，文件内容是一条条指令，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建；这些指令应用于基础镜像并最终创建一个新的镜像<br>你可以认为用于快速创建自定义的 Docker 镜像。</p><p>部署一个简单的 gin 项目，在项目根目录下写 Dockerfile</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># FROM 指定基础镜像（必须有的指令，并且必须是第一条指令）</span><span class="token instruction"><span class="token keyword">FROM</span> golang:latest</span><span class="token instruction"><span class="token keyword">ENV</span> GOPROXY https://goproxy.cn,direct</span><span class="token comment"># 将工作目录设置为 $GOPATH/src/github.com/Alex/go-gin-example</span><span class="token comment"># 使用 WORKDIR 指令可以来指定工作目录（或者称为当前目录），</span><span class="token comment"># 以后各层的当前目录就被改为指定的目录，如果目录不存在，WORKDIR 会帮你建立目录</span><span class="token instruction"><span class="token keyword">WORKDIR</span> <span class="token variable">$GOPATH</span>/src/github.com/Alex/go-gin-example</span><span class="token comment"># 将当前上下文目录的内容复制到 $GOPATH/src/github.com/Alex/go-gin-example</span><span class="token comment"># COPY 源路径 目标路径</span><span class="token instruction"><span class="token keyword">COPY</span> . <span class="token variable">$GOPATH</span>/src/github.com/Alex/go-gin-example</span><span class="token instruction"><span class="token keyword">RUN</span> go build .</span><span class="token comment"># EXPOSE 指令是声明运行时容器提供服务端口，这只是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务</span><span class="token comment"># 但是在 Dockerfile 中写入这样的声明有两个好处：</span><span class="token comment"># 1. 帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射</span><span class="token comment"># 2. 运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口</span><span class="token instruction"><span class="token keyword">EXPOSE</span> 8000</span><span class="token comment"># 将容器启动程序设置为 `./go-gin-example`</span><span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">"./go-gin-example"</span>]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在项目根目录下执行以下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -t 指定镜像名称为 blog-service:v1.0.0</span><span class="token comment"># . 构建内容为当前上下文目录</span><span class="token function">docker</span> build <span class="token parameter variable">-t</span> blog-service:v1.0.0 <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>查看当前构建的镜像是否存在</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> images<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建并运行一个新容器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">8000</span>:8000 <span class="token parameter variable">--name</span> my-blog-service blog-service:v1.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果想要两个容器之间关联起来，互相访问的时候可以在容器内直接使用其关联的容器别名进行访问，而不是通过 IP，比如此时初始化的时候将 <code>my-blog-service</code> 容器和 <code>mysql</code> 容器进行关联</p><pre class="line-numbers language-none"><code class="language-none">docker run --link mysql:mysql -p 8000:8000 --name my-blog-service blog-service:v1.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Dockerfile </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker alpine linux 修改时区</title>
      <link href="posts/e7d57128.html"/>
      <url>posts/e7d57128.html</url>
      
        <content type="html"><![CDATA[<p>Docker alpine Linux 中修改时区</p><ul><li><a href="https://wiki.alpinelinux.org/wiki/Setting_the_timezone" title="官方解决方案">官方解决方案</a></li></ul><h2 id="如果已经在容器中"><a href="#如果已经在容器中" class="headerlink" title="如果已经在容器中"></a>如果已经在容器中</h2><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># 安装 timezone 数据包</span>apk add tzdata<span class="token comment"># 防止添加失败，可以加上 -U 参数，更新仓库缓存</span>apk add -U tzdatals /usr/share/zoneinfocp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<span class="token comment"># 指定为上海时区</span>echo "Asia/Shanghai" &gt;  /etc/timezone<span class="token comment"># 验证时区 `CST` 即为中国标准时间</span>date<span class="token comment"># date -R</span><span class="token comment"># 示例如下：</span><span class="token comment"># /etc # date</span><span class="token comment"># Tue May  3 01:41:18 CST 2022</span><span class="token comment"># /etc # date -R</span><span class="token comment"># Tue, 03 May 2022 01:41:25 +0800</span><span class="token comment"># 为了降低容器空间，可以删除掉数据包</span>apk del tzdata<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="如果是在-dockerfile-中"><a href="#如果是在-dockerfile-中" class="headerlink" title="如果是在 dockerfile 中"></a>如果是在 dockerfile 中</h2><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token instruction"><span class="token keyword">RUN</span> apk add tzdata <span class="token operator">\</span>&amp;&amp; cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime <span class="token operator">\</span>&amp;&amp; echo <span class="token string">"Asia/Shanghai"</span> &gt;  /etc/timezone <span class="token operator">\</span>&amp;&amp; apk del tzdata</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 容器内服务访问宿主机中的服务</title>
      <link href="posts/f085ffcd.html"/>
      <url>posts/f085ffcd.html</url>
      
        <content type="html"><![CDATA[<h1 id="docker-容器内服务访问宿主机中的服务"><a href="#docker-容器内服务访问宿主机中的服务" class="headerlink" title="docker 容器内服务访问宿主机中的服务"></a>docker 容器内服务访问宿主机中的服务</h1><p>假设 docker 中的某服务要访问宿主机的 mysql 时：</p><h2 id="第一种：通过-docker0-的-IP-地址进行访问"><a href="#第一种：通过-docker0-的-IP-地址进行访问" class="headerlink" title="第一种：通过 docker0 的 IP 地址进行访问"></a>第一种：通过 docker0 的 IP 地址进行访问</h2><ol><li>先在宿主机上查看 <code>docker0</code> 对应的 <code>inet</code> IP 地址</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 如果是 CentOS 或者 Ubuntu</span><span class="token function">ifconfig</span> <span class="token comment"># 或者使用</span><span class="token function">ip</span> addr show docker0<span class="token comment"># 假设查看的 docker0 的 ip 地址为：172.18.0.1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>修改 mysql 的配置文件，保证 mysql 可以被任何 ip 访问，<strong>但是一定不能开放 3306 端口，不然外网就可以直接访问 mysql 了</strong>，如果不开放允许任何 ip 访问，那么则必须要开放允许 docker 服务容器的 IP 能够访问。（注意这里的 IP 是需要连接宿主机 mysql docker 容器的 IP 不是 docker0 的 IP）</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">[mysqld]bind-address = 0.0.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>docker 容器中的服务连接 mysql 时，直接采用 <code>docker0</code> 的 IP 地址进行访问即可。即 <code>172.18.0.1</code></li></ol><h2 id="第二种：将容器的网络类型改成-host-（宿主网络：即与宿主机共用网络）"><a href="#第二种：将容器的网络类型改成-host-（宿主网络：即与宿主机共用网络）" class="headerlink" title="第二种：将容器的网络类型改成 host （宿主网络：即与宿主机共用网络）"></a>第二种：将容器的网络类型改成 host （宿主网络：即与宿主机共用网络）</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 比如容器启动时，增加 --net=host 参数</span><span class="token comment"># 在这里就没有必要去指定映射端口，因为容器中暴露出去的端口等同于宿主机暴露的端口</span><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--net</span><span class="token operator">=</span>host <span class="token punctuation">{</span>image<span class="token punctuation">}</span> <span class="token function">sh</span><span class="token comment"># 测试：</span><span class="token function">ping</span> localhost<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第三种：增加-host-docker-internal-到-hosts-文件"><a href="#第三种：增加-host-docker-internal-到-hosts-文件" class="headerlink" title="第三种：增加 host.docker.internal 到 hosts 文件"></a>第三种：增加 <code>host.docker.internal</code> 到 <code>hosts</code> 文件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># host-gateway 其实是个特殊的 CDN，在运行时会被替换为真实的宿主网关 IP 地址</span><span class="token comment"># 通过查看 `cat /etc/hosts` 即可得知已经被替换成 docker0 的网管 IP 地址</span><span class="token comment"># 创建容器的时候添加 `--add-host=host.docker.internal:host-gateway`</span><span class="token comment"># 需要注意的是：</span><span class="token comment"># 对于 mac 上的 docker 设置还有略微不一样</span><span class="token comment"># mac docker 版本在 v17.12-v18.02 需要将 host.docker.internal 替换成 docker.for.mac.host.internal</span><span class="token comment"># mac docker 版本在 v17.06-v18.11 需要替换成 docker.for.mac.localhost</span><span class="token function">docker</span> run <span class="token parameter variable">-it</span> --add-host<span class="token operator">=</span>host.docker.internal:host-gateway <span class="token punctuation">{</span>image<span class="token punctuation">}</span> <span class="token function">sh</span><span class="token comment"># 进入容器中，可以通过 ping 进行测试：</span><span class="token function">ping</span> host.docker.internal<span class="token comment"># 比如在容器中连接宿主机中的 mysql 时，那么则需要设置为</span>host.docker.internal:3306<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 容器关联的几种方式</title>
      <link href="posts/775a3bbf.html"/>
      <url>posts/775a3bbf.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-通过-link-容器关联"><a href="#1-通过-link-容器关联" class="headerlink" title="1. 通过 link 容器关联"></a>1. 通过 link 容器关联</h2><p>通过 <code>--link</code>，可以在容器内直接使用其关联的容器别名进行访问，而不通过 IP，但是 –link 只能解决单机容器间的关联，在分布式多机的情况下，需要通过别的方式进行连接。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -- link &lt;容器名称&gt;:&lt;容器别名（可以通过容器别名直接访问到对方容器的 ip，设置了容器别名同样也可以通过对方容器的 ip 访问）&gt;</span><span class="token comment"># alex-mysql 为 mysql 实例的容器名称</span><span class="token comment"># 在服务中可以直接通过 mysql-service 去访问到 alex-mysql 容器的 IP</span><span class="token parameter variable">--link</span> alex-mysql:mysql-service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-通过容器使用同一个-network-网络进行关联"><a href="#2-通过容器使用同一个-network-网络进行关联" class="headerlink" title="2. 通过容器使用同一个 network 网络进行关联"></a>2. 通过容器使用同一个 network 网络进行关联</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建一个 some-network 网络</span><span class="token function">docker</span> network create <span class="token punctuation">{</span>some-network<span class="token punctuation">}</span><span class="token comment"># 指定桥接模式创建（不指定时，默认就是桥接模式）</span><span class="token function">docker</span> network create <span class="token parameter variable">-d</span> bridge <span class="token punctuation">{</span>some-network<span class="token punctuation">}</span><span class="token comment"># 通过 --network 将当前容器加入到此网络中</span><span class="token function">docker</span> run <span class="token parameter variable">--name</span> <span class="token punctuation">{</span>redis-server<span class="token punctuation">}</span> <span class="token parameter variable">--network</span> <span class="token punctuation">{</span>some-network<span class="token punctuation">}</span> <span class="token parameter variable">-d</span> redis<span class="token comment"># 访问时，可以直接使用容器名称进行访问，比如这里：redis-server</span><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--network</span> <span class="token punctuation">{</span>some-network<span class="token punctuation">}</span> <span class="token parameter variable">--rm</span> redis redis-cli <span class="token parameter variable">-h</span> <span class="token punctuation">{</span>redis-server<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看已存在的网络</span><span class="token function">docker</span> network list<span class="token comment"># 删除自定义网络</span><span class="token function">docker</span> network <span class="token function">rm</span> <span class="token punctuation">{</span>network-id or some-network<span class="token punctuation">}</span><span class="token comment"># 将已有容器连接到 docker 网络</span><span class="token function">docker</span> network connect <span class="token punctuation">{</span>some-network<span class="token punctuation">}</span> <span class="token punctuation">{</span>container-name<span class="token punctuation">}</span><span class="token comment"># 查看网络情况</span><span class="token function">docker</span> network inspect <span class="token punctuation">{</span>some-network<span class="token punctuation">}</span><span class="token comment"># 断开网络</span><span class="token function">docker</span> network disconnect <span class="token punctuation">{</span>some-network<span class="token punctuation">}</span> <span class="token punctuation">{</span>container-name<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一起来了解下Docker-compose</title>
      <link href="posts/2d05cf8b.html"/>
      <url>posts/2d05cf8b.html</url>
      
        <content type="html"><![CDATA[<p>Docker Compose是一个用于定义和运行多容器Docker应用程序的工具。通过Compose，你可以使用 YAML 文件来配置应用程序的服务。然后，只需一个简单的命令，就可以创建并启动配置中的所有服务。这使得部署多容器应用变得简单快捷。</p><h3 id="核心特性"><a href="#核心特性" class="headerlink" title="核心特性"></a>核心特性</h3><ul><li><p><strong>多容器编排</strong>：Docker Compose 允许你在单个文件中定义一组相关联的容器作为项目。这些容器通过网络连接在一起，形成一个整体服务。</p></li><li><p><strong>易于配置</strong>：使用 YAML 文件定义服务配置，使其易于编写、读取和维护。</p></li><li><p><strong>一键部署</strong>：只需一个<code>docker-compose up</code>命令，就可以启动和运行整个应用环境。</p></li><li><p><strong>环境隔离</strong>：Docker Compose 使用项目名称来隔离不同的环境，您可以在同一台机器上运行多个环境，而不会产生冲突。</p></li><li><p><strong>可重复性</strong>：由于服务定义在文件中，因此可以在不同环境中重复部署相同的应用配置，确保环境之间的一致性。</p></li></ul><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li><p><strong>开发环境</strong>：在开发过程中，使用 Docker Compose 来定义和运行应用的所有依赖服务，例如数据库、缓存等，可以快速搭建和拆解开发环境。</p></li><li><p><strong>自动化测试</strong>：通过定义包含应用及其依赖服务的 Compose 文件，可以轻松地在 CI/CD 管道中进行自动化测试。</p></li><li><p><strong>小规模生产部署</strong>：对于小型项目或初期阶段的产品，Docker Compose 提供了一种简单的方式来部署和管理多容器应用。</p></li></ul><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ol><li><p><strong>定义服务</strong>：在<code>docker-compose.yml</code>文件中定义应用所需的服务，包括构建镜像的配置、容器运行时配置（如端口映射、卷挂载）等。</p></li><li><p><strong>启动服务</strong>：运行<code>docker-compose up</code>命令来启动并运行定义的所有服务。Compose 会按照依赖关系顺序启动服务，并确保所需的网络和卷已正确设置。</p></li><li><p><strong>管理服务</strong>：使用<code>docker-compose</code>命令可以管理服务的生命周期，如启动、停止、重建等。</p></li></ol><h3 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h3><p>要开始使用 Docker Compose，您需要：</p><ol><li><p><strong>安装Docker</strong>：确保您的系统上安装了 Docker。</p></li><li><p><strong>安装Docker Compose</strong>：在大多数情况下，Docker Compose 可以与 Docker 一起安装。</p></li><li><p><strong>编写<code>docker-compose.yml</code>文件</strong>：定义您的多容器应用。</p></li><li><p><strong>运行<code>docker-compose up</code>命令</strong>：启动并运行您的应用。</p></li></ol><p>介于篇幅有限，今天暂时介绍 docker-compose 的安装方式，后面有时间了再讲具体的使用。</p><h3 id="安装-docker-compose"><a href="#安装-docker-compose" class="headerlink" title="安装 docker-compose"></a>安装 docker-compose</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用源码安装（推荐方式）</span><span class="token punctuation">[</span>最新发行的版本地址<span class="token punctuation">]</span><span class="token punctuation">(</span>https://github.com/docker/compose/releases<span class="token punctuation">)</span><span class="token comment"># 安装 1.27.4 版本的 docker-compose （下载了源码，并改名为 docker-compose）</span><span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-L</span> https://github.com/docker/compose/releases/download/1.27.4/docker-compose-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">`</span></span>-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">`</span></span> <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose<span class="token comment"># 增加执行权限</span><span class="token function">sudo</span> <span class="token function">chmod</span> u+x /usr/local/bin/docker-compose<span class="token comment"># 建立软连接到 /usr/bin 目录</span><span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/local/bin/docker-compose /usr/bin/docker-compose<span class="token comment"># 查看 docker-compose 版本</span><span class="token function">docker-compose</span> version---------------------------------<span class="token comment"># 如果是在 centos 系统中</span><span class="token comment"># 安装扩展源</span><span class="token function">sudo</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> epel-release<span class="token comment"># 安装 python-pip 模块</span><span class="token function">sudo</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> python-pip<span class="token comment"># 如果是在 ubuntu 系统中</span><span class="token comment"># 安装 python-pip 模块</span><span class="token function">apt</span> <span class="token function">install</span> python-pip<span class="token comment"># 使用 pip 安装 docker-compose</span>pip <span class="token function">install</span> <span class="token function">docker-compose</span><span class="token comment"># 删除掉旧的环境变量 docker-compose</span><span class="token function">sudo</span> <span class="token function">rm</span> /usr/bin/docker-compose<span class="token function">sudo</span> <span class="token function">rm</span> /usr/local/bin/docker-compose<span class="token comment"># 或者使用 pip 命令卸载 docker-compose</span>pip uninstall <span class="token function">docker-compose</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h3><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># 启动容器</span>docker-compose up -d<span class="token comment"># 查看容器列表</span>docker-compose ps<span class="token comment"># 查看日志</span>docker-compose logs<span class="token comment"># 关闭容器</span>docker-compose stop<span class="token comment"># 启动容器</span>docker-compose start<span class="token comment"># 重启容器</span>docker-compose restart<span class="token comment"># 关闭并删除容器</span>docker-compose down<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch 聚合查询</title>
      <link href="posts/25480f12.html"/>
      <url>posts/25480f12.html</url>
      
        <content type="html"><![CDATA[<h2 id="聚合的基本语法结构"><a href="#聚合的基本语法结构" class="headerlink" title="聚合的基本语法结构"></a>聚合的基本语法结构</h2><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"aggregations"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"{aggregations_name_1}"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"{aggregations_type}"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token punctuation">{</span>aggregations_body<span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"{aggregations_name_2}"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"{aggregations_type}"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token punctuation">{</span>aggregations_body<span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>aggregations</code> 表示聚合查询语句，可以简写为 <code>aggs</code></li><li><code>{aggregations_name_1}</code> 表示一个聚合计算的名称，可以随意命名，因为 es 支持一次进行多次统计分析查询，后面需要通过这个名字在查询结果中找到我们想要的计算结果</li><li><code>{aggregations_type}</code> 表示聚合类型，代表我们想要怎么统计数据，主要有两大类聚合类型，<strong>桶聚合</strong> 和 <strong>指标聚合</strong>，这两类聚合又包括多种聚合类型。指标聚合：sum、avg 桶聚合：terms</li><li><code>{aggregations_body}</code> 聚合类型的参数，选择不同的聚合类型，有不同的参数</li><li><code>{aggregations_name_2}</code> 表示其他聚合计算的名字，可以进行多种类型的统计</li></ul><h3 id="value-count-值聚合"><a href="#value-count-值聚合" class="headerlink" title="value count 值聚合"></a>value count 值聚合</h3><p>value count 值聚合，主要用于统计文档总数，类似 sql 中的 <code>count</code> 函数</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">GET /rcp_goods_img_checks/_search<span class="token punctuation">{</span>  <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token property">"aggs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"alex_count"</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">// 聚合查询的名字，可以随便取一个名字</span>      <span class="token property">"value_count"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">// 聚合类型为：value_count</span>        <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"app_name1"</span>  <span class="token comment">// 计算 app_name1 这个字段值的总数</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span># 返回值示例<span class="token punctuation">{</span>  <span class="token property">"took"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"timed_out"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"_shards"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"successful"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"skipped"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"failed"</span> <span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token property">"relation"</span> <span class="token operator">:</span> <span class="token string">"eq"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"max_score"</span> <span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"aggregations"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"alex_count"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">2</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="cardinality"><a href="#cardinality" class="headerlink" title="cardinality"></a>cardinality</h3><p>cardinality 基数聚合，也用于统计文档的总数，跟 value count 的区别是，基数聚合会去重，不会统计重复的值，类似 sql 中的 <code>count(DISTINCT field)</code> 用法</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">GET /rcp_goods_img_checks/_search<span class="token punctuation">{</span>  <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token property">"aggs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"alex_count"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"cardinality"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"check_status"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span># 返回值示例<span class="token punctuation">{</span>  <span class="token property">"took"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"timed_out"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"_shards"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"successful"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"skipped"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"failed"</span> <span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token property">"relation"</span> <span class="token operator">:</span> <span class="token string">"eq"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"max_score"</span> <span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"aggregations"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"alex_count"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="avg"><a href="#avg" class="headerlink" title="avg"></a>avg</h3><p>求平均值</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">GET /rcp_goods_img_checks/_search<span class="token punctuation">{</span>  <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token property">"aggs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"alex_avg"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"avg"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"check_status"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span># 返回值示例<span class="token punctuation">{</span>  <span class="token property">"took"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"timed_out"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"_shards"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"successful"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"skipped"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"failed"</span> <span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>      <span class="token property">"relation"</span> <span class="token operator">:</span> <span class="token string">"eq"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"max_score"</span> <span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"aggregations"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"alex_avg"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">2.6666666666666665</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="sum"><a href="#sum" class="headerlink" title="sum"></a>sum</h3><p>求和</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">GET /rcp_goods_img_checks/_search<span class="token punctuation">{</span>  <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token property">"aggs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"alex_sum"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"sum"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"check_status"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span># 返回值示例<span class="token punctuation">{</span>  <span class="token property">"took"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token property">"timed_out"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"_shards"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"successful"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"skipped"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"failed"</span> <span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>      <span class="token property">"relation"</span> <span class="token operator">:</span> <span class="token string">"eq"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"max_score"</span> <span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"aggregations"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"alex_sum"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">8.0</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="max"><a href="#max" class="headerlink" title="max"></a>max</h3><p>求最大值</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">GET /rcp_goods_img_checks/_search<span class="token punctuation">{</span>  <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token property">"aggs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"alex_max"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"max"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"check_status"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span># 返回值示例<span class="token punctuation">{</span>  <span class="token property">"took"</span> <span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token property">"timed_out"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"_shards"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"successful"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"skipped"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"failed"</span> <span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>      <span class="token property">"relation"</span> <span class="token operator">:</span> <span class="token string">"eq"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"max_score"</span> <span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"aggregations"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"alex_max"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">3.0</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="min"><a href="#min" class="headerlink" title="min"></a>min</h3><p>求最小值</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">GET /rcp_goods_img_checks/_search<span class="token punctuation">{</span>  <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>   <span class="token property">"aggs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"alex_min"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"min"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"check_status"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span># 返回值示例<span class="token punctuation">{</span>  <span class="token property">"took"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token property">"timed_out"</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"_shards"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"successful"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"skipped"</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"failed"</span> <span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"total"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>      <span class="token property">"relation"</span> <span class="token operator">:</span> <span class="token string">"eq"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"max_score"</span> <span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>    <span class="token property">"hits"</span> <span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"aggregations"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"alex_max"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"value"</span> <span class="token operator">:</span> <span class="token number">2.0</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch 查询语法</title>
      <link href="posts/65a50e61.html"/>
      <url>posts/65a50e61.html</url>
      
        <content type="html"><![CDATA[<h2 id="查询的基本语法结构"><a href="#查询的基本语法结构" class="headerlink" title="查询的基本语法结构"></a>查询的基本语法结构</h2><pre class="line-numbers language-json" data-language="json"><code class="language-json">GET /<span class="token punctuation">{</span>index<span class="token punctuation">}</span>/<span class="token punctuation">{</span>type<span class="token punctuation">}</span>/_search<span class="token punctuation">{</span>    <span class="token property">"from"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment">// 搜索结果的开始位置</span>    <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token comment">// 分页大小，每页显示数量</span>    <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"field_1"</span><span class="token punctuation">,</span> <span class="token string">"field_2"</span><span class="token punctuation">,</span> <span class="token string">"field_3"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// 需要返回的字段数组</span>    <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"must"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// must 条件，类似 sql 中的 and，代表必须匹配条件</span>            <span class="token property">"must_not"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// must_not 条件，跟 must 相反，必须不匹配条件，相当于 sql 语句中的 `!=`</span>            <span class="token property">"should"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// should 条件，类似 sql 中的 or，代表匹配其中一个条件</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// query 子句</span>    <span class="token property">"aggs"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// aggs 子句，主要用来编写统计分析语句，类似 sql 的 group by 子句</span>    <span class="token property">"sort"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"{field1}"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">// 需要排序的字段</span>                <span class="token property">"order"</span><span class="token operator">:</span> <span class="token string">"desc"</span>  <span class="token comment">// 排序的规则，asc 升序，desc 降序</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"{field2}"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"order"</span><span class="token operator">:</span> <span class="token string">"asc"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token comment">// 排序子句</span><span class="token punctuation">}</span># 也可以多个索引同时查询# 多个索引同时查询时，用逗号分隔，比如：GET /<span class="token punctuation">{</span>index1<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>index2<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>index3<span class="token punctuation">}</span>/_doc/_search# 或者使用前缀模糊匹配，比如：GET /rcp_goods_img_*/_doc/_search<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Filter-和-Query"><a href="#Filter-和-Query" class="headerlink" title="Filter 和 Query"></a>Filter 和 Query</h2><p>任何一个 document 对于 filter 来说，就是 <strong>match 与否</strong> 的问题，是个二值问题，0 和 1 没有 <strong>scroing</strong> 的过程，但是使用 query 的时候，是表示 <strong>match 程度问题，有 scroing 过程</strong>。</p><p>es 底层对 filter 做了很多优化，会对过滤结果进行缓存，同时，filter 没有相关性计算过程，所以 filter 比 query 快。</p><p>所以，官网推荐，作为一条比较通用的规则：<em><strong>仅在全文检索时，使用 Query，其它时候都用 Filter</strong></em>，但是还是得按照我们的实际情况来看，毕竟有些时候用空间换时间不一定划算。</p><h2 id="match-和-term"><a href="#match-和-term" class="headerlink" title="match 和 term"></a>match 和 term</h2><p>match 查询的时候，es 会根据你给定的字段提供合适的分析器，而 term 查询不会有分析器分析的过程，match 查询相当于模糊匹配，只包含其中一部分关键词就行。<strong>match 系列匹配时，datatype 要设置为 text ，否则不会开启分词</strong></p><h3 id="match-all"><a href="#match-all" class="headerlink" title="match_all"></a>match_all</h3><p>表示取出所有 documents，在与 filter 结合使用时，会经常用到 match_all</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"># 查询所有数据（查询所有的索引对应的所有文档）GET _search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match_all"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span># 查指定索引下所有的数据GET /rcp_goods_img_*/_doc/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match_all"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="match"><a href="#match" class="headerlink" title="match"></a>match</h3><p>一般在全文检索时使用，首先利用 analyzer（分词器）对具体查询字符串进行分析，然后进行查询。但是在查询，比如说数值型字段、日期型字段、布尔字段或者不需要分词的字符串上进行查询时，表示精确匹配</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"># 示例# select goods_id<span class="token punctuation">,</span> app_name from rcp_goods_img_checks._doc where goods_id = m43337929006 order by app_name descGET /rcp_goods_img_checks/_doc/_search<span class="token punctuation">{</span>  <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"goods_id"</span><span class="token punctuation">,</span>    <span class="token string">"app_name"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"goods_id"</span><span class="token operator">:</span> <span class="token string">"m43337929006"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"sort"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"app_name"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"order"</span><span class="token operator">:</span> <span class="token string">"desc"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="multi-match"><a href="#multi-match" class="headerlink" title="multi_match"></a>multi_match</h3><p>同时对查询的关键词进行多字段同时匹配，只要其中一个字段匹配到值就返回结果</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"># 示例# 只要查询的字段 check_status 、app_name 、site_id 这三个字段中任意一个字段为 <span class="token number">19</span> 那么就返回结果# select * from rcp_goods_img_checks._doc where check_status = <span class="token number">19</span> or app_name = <span class="token number">19</span> or site_id = <span class="token number">19</span>GET /rcp_goods_img_checks/_doc/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"multi_match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"query"</span><span class="token operator">:</span> <span class="token number">19</span><span class="token punctuation">,</span>      <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"check_status"</span><span class="token punctuation">,</span> <span class="token string">"app_name"</span><span class="token punctuation">,</span> <span class="token string">"site_id"</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="match-phrase-prefix"><a href="#match-phrase-prefix" class="headerlink" title="match_phrase_prefix"></a>match_phrase_prefix</h3><p>左前缀匹配，类似 sql 中的 like <code>field%</code></p><pre class="line-numbers language-json" data-language="json"><code class="language-json"># 示例# select * from rcp_goods_img_checks._doc where goods_id like 'm%'GET /rcp_goods_img_checks/_doc/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"match_phrase_prefix"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"goods_id"</span><span class="token operator">:</span> <span class="token string">"m"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="term"><a href="#term" class="headerlink" title="term"></a>term</h3><p>term 用于精确查找，可用于数值、日期、布尔值或者不需要分词的字符串，当使用 term 时，不会对查询字符串进行分析，进行的是精确查找</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"># 示例# 字段只有一个值时，精确查询# select * from rcp_goods_img_checks._doc where site_id = <span class="token number">18</span>GET /rcp_goods_img_checks/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"term"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"site_id"</span><span class="token operator">:</span> <span class="token string">"18"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span># 因为是精确查询，因此不需要查询进行评分计算# 使用 constant_score 查询以非评分模式来执行 term 查询，并作为统一评分GET /rcp_goods_img_checks/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"constant_score"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"filter"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"term"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"site_id"</span><span class="token operator">:</span> <span class="token string">"18"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="terms"><a href="#terms" class="headerlink" title="terms"></a>terms</h3><p>terms 和 term 类似，terms 可以指定多个值，只要 doc 满足 terms 里的任意值，就是满足查询条件的，属于精确查找</p><p><strong>terms 表示的是 contains 关系，而不是 equals 关系</strong></p><pre class="line-numbers language-json" data-language="json"><code class="language-json"># 示例# 字段有多个值时# select * from rcp_goods_img_checks._doc where site_id in (<span class="token string">"18"</span><span class="token punctuation">,</span> <span class="token string">"20"</span>)GET /rcp_goods_img_checks/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"terms"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"site_id"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"18"</span><span class="token punctuation">,</span> <span class="token string">"20"</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span># 使用 constant_score 查询以非评分模式来执行 terms 查询，并作为统一评分GET /rcp_goods_img_checks/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"constant_score"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"filter"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"term"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"site_id"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"18"</span><span class="token punctuation">,</span> <span class="token string">"20"</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="range"><a href="#range" class="headerlink" title="range"></a>range</h3><p>范围查找</p><p>操作符可以是：</p><ul><li><strong>gt</strong>：大于</li><li><strong>gte</strong>：大于等于</li><li><strong>lt</strong>：小于</li><li><strong>lte</strong>：小于等于</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"># select * from rcp_goods_img_checks._doc where site_id &gt;= <span class="token number">19</span> and site_id &lt; <span class="token number">30</span>GET /rcp_goods_img_checks/_doc/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"range"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"site_id"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"gte"</span><span class="token operator">:</span> <span class="token number">19</span><span class="token punctuation">,</span>        <span class="token property">"lt"</span><span class="token operator">:</span> <span class="token number">30</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="exists-和-missing"><a href="#exists-和-missing" class="headerlink" title="exists 和 missing"></a>exists 和 missing</h3><p>exists 用于查找某个字段含有一个或者多个值对应的 document，而 missing 用于查找某个字段不存在值对应的 document，类比关系数据库中的 <strong>is not null 等同于 exists</strong> 和 <strong>is null 等同于 missing</strong></p><pre class="line-numbers language-json" data-language="json"><code class="language-json"># select * from rcp_goods_img_checks._doc where title is not <span class="token null keyword">null</span><span class="token punctuation">{</span>    <span class="token property">"exists"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"title"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span># select * from rcp_goods_img_checks._doc where title is <span class="token null keyword">null</span><span class="token punctuation">{</span>    <span class="token property">"missing"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"title"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="bool"><a href="#bool" class="headerlink" title="bool"></a>bool</h3><p>使用 bool 子句来将各种子查询关联起来，组建布尔表达式，实现复合查询，bool 子句可以随意组合、嵌套。</p><p>bool 子句主要包括：</p><ul><li>must：表示必须匹配，与 and 等价（贡献算分）</li><li>must_not：表示一定不能匹配，与 not 等价（不贡献算分）</li><li>should：表示可以匹配，类似于布尔运算里面的<strong>逻辑或</strong> 与 or 等价（贡献算分）</li><li>filter：过滤子句，必须匹配（不贡献算分）</li></ul><p>如果 bool 子句里，没有 must 子句，那么，should 子句里至少匹配一个，如果有 must 子句，那么，should 子句至少匹配 0 个。可以使用 <code>minimum_should_match</code> 来对最小匹配数进行设置。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"bool"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"must"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"term"</span> <span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"name"</span> <span class="token operator">:</span> <span class="token string">"kimchy"</span> <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"must_not"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"range"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"from"</span> <span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token property">"to"</span> <span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"should"</span> <span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token property">"term"</span> <span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"tag"</span> <span class="token operator">:</span> <span class="token string">"v1"</span> <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                <span class="token property">"term"</span> <span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">"tag"</span> <span class="token operator">:</span> <span class="token string">"v1.0.2"</span> <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"minimum_should_match"</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"boost"</span> <span class="token operator">:</span> <span class="token number">1.0</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span># select * from rcp_goods_img_checks._doc where app_name = <span class="token number">2</span> and site_id = <span class="token number">18</span> and updated_at between <span class="token number">0</span> and <span class="token number">1659695794</span> order by updated_at desc limit <span class="token number">100</span>GET /rcp_goods_img_checks/_doc/_search<span class="token punctuation">{</span>  <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"must"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"term"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"app_name"</span><span class="token operator">:</span> <span class="token number">2</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"term"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"site_id"</span><span class="token operator">:</span> <span class="token number">18</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"filter"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"range"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"updated_at"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"from"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>              <span class="token property">"to"</span><span class="token operator">:</span> <span class="token number">1659695794</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"size"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>  <span class="token property">"sort"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"updated_at"</span><span class="token operator">:</span> <span class="token string">"desc"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 pyenv 管理多个版本 Python</title>
      <link href="posts/9fc3a49a.html"/>
      <url>posts/9fc3a49a.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/pyenv/pyenv">pyenv</a> 是 Python 的版本管理工具，利用它可以在同一台电脑上安装多个版本的 Python。</p><h2 id="安装方式"><a href="#安装方式" class="headerlink" title="安装方式"></a>安装方式</h2><p>方式一：MacOS 下可以直接通过 Homebrew 来安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew update<span class="token comment"># 安装 pyenv</span>brew <span class="token function">install</span> pyenv<span class="token comment"># 如果是升级时</span>brew upgrade pyenv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方式二：通过自动程序来安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> https://pyenv.run <span class="token operator">|</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>方式三：通过源码的方式来安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/pyenv/pyenv.git ~/.pyenv<span class="token comment"># 可选的：可以尝试编译一个动态的 bash 扩展来加速 Pyenv ，如果失败了也不用担心，Pyenv 仍然可以正常工作</span><span class="token builtin class-name">cd</span> <span class="token variable"><span class="token variable">$(</span>pyenv root<span class="token variable">)</span></span> <span class="token operator">&amp;&amp;</span> src/configure <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token parameter variable">-C</span> src<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果是通过源码来安装的话，需要升级 pyenv 时，可通过</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token variable"><span class="token variable">$(</span>pyenv root<span class="token variable">)</span></span><span class="token function">git</span> fetch<span class="token function">git</span> tag<span class="token function">git</span> checkout <span class="token punctuation">{</span>tag_name<span class="token punctuation">}</span><span class="token comment"># eg：git checkout v0.1.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h2><p>如果你是用的 <code>Bash</code> 则需要：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'export PYENV_ROOT="$HOME/.pyenv"'</span> <span class="token operator">&gt;&gt;</span> ~/.bashrc<span class="token builtin class-name">echo</span> <span class="token string">'command -v pyenv &gt;/dev/null || export PATH="$PYENV_ROOT/bin:$PATH"'</span> <span class="token operator">&gt;&gt;</span> ~/.bashrc<span class="token builtin class-name">echo</span> <span class="token string">'eval "$(pyenv init -)"'</span> <span class="token operator">&gt;&gt;</span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果你是用的 <code>Zsh</code> 则需要：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">'export PYENV_ROOT="$HOME/.pyenv"'</span> <span class="token operator">&gt;&gt;</span> ~/.zshrc<span class="token builtin class-name">echo</span> <span class="token string">'[[ -d $PYENV_ROOT/bin ]] &amp;&amp; export PATH="$PYENV_ROOT/bin:$PATH"'</span> <span class="token operator">&gt;&gt;</span> ~/.zshrc<span class="token builtin class-name">echo</span> <span class="token string">'eval "$(pyenv init -)"'</span> <span class="token operator">&gt;&gt;</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="pyenv-使用"><a href="#pyenv-使用" class="headerlink" title="pyenv 使用"></a>pyenv 使用</h2><p>检查 pyenv 是否安装成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pyenv <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看 pyenv 指令列表</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pyenv commands<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看所有可选的 python 版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pyenv <span class="token function">install</span> <span class="token parameter variable">-l</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看已经安装的所有 python 版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 版本号前面带有 * 号的，则证明当前使用的就是这个版本</span>pyenv versions<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>显示当前的 Python 版本及其本地路径</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pyenv version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>下载指定版本的 Python</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 比如这里下载 python 3.9.6</span>pyenv <span class="token function">install</span> <span class="token number">3.9</span>.6<span class="token comment"># 安装完毕之后记得刷新 pyenv shims</span>pyenv rehash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果安装 python 比较慢时的解决方案：</p><p>首先在 pyenv 的根目录创建一个 cache 文件夹</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token variable"><span class="token variable">$(</span>pyenv root<span class="token variable">)</span></span>/cache/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后我们先执行一下安装命令，比如 <code>pyenv install 3.9.6</code> 它会显示出下载链接，此时，我们直接复制下载链接地址，通过浏览器下载，然后将下载后的 <code>Python-3.9.6.tar.xz</code> 文件放到 <code>$(pyenv root)/cache/</code> 文件夹中，然后再次执行 <code>pyenv install 3.9.6</code> 命令即可，它会自动使用 cache 文件夹中的安装包。</p><p><strong>下载后的 Python 直接在 <code>$(pyenv root)/versions/</code> 目录下。</strong></p><p>卸载指定版本的 Python</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 比如这里卸载 python 3.9.6</span>pyenv uninstall <span class="token number">3.9</span>.6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>切换 Python 版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 全局切换（系统全局用系统默认的 Python 比较好，不建议直接对其操作）</span>pyenv global <span class="token number">3.9</span>.6<span class="token comment"># 通过查看 Python 版本来确定是否切换成功</span>python <span class="token parameter variable">-V</span><span class="token comment"># 切换回系统版本</span>pyenv global system<span class="token comment"># 用 local 进行指定版本切换，一般开发环境使用（只影响当前所在文件夹）</span>pyenv <span class="token builtin class-name">local</span> <span class="token number">3.9</span>.6<span class="token comment"># 解除 local 设置</span>pyenv <span class="token builtin class-name">local</span> <span class="token parameter variable">--unset</span><span class="token comment"># 当前 shell 会话切换，退出 shell 会话后失效</span>pyenv shell <span class="token number">3.9</span>.6<span class="token comment"># 解除 shell 设置</span>pyenv shell <span class="token parameter variable">--unset</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="卸载-pyenv"><a href="#卸载-pyenv" class="headerlink" title="卸载 pyenv"></a>卸载 pyenv</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 如果是使用 homebrew 下载的 pyenv 时，卸载为</span>brew uninstall pyenv<span class="token comment"># 如果是使用 git 拉取源码安装的 pyenv 时，卸载为</span><span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token variable"><span class="token variable">$(</span>pyenv root<span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结合-pyenv-为每个项目建立自己的虚拟环境"><a href="#结合-pyenv-为每个项目建立自己的虚拟环境" class="headerlink" title="结合 pyenv 为每个项目建立自己的虚拟环境"></a>结合 pyenv 为每个项目建立自己的虚拟环境</h2><h3 id="如果用的是-pipenv-时"><a href="#如果用的是-pipenv-时" class="headerlink" title="如果用的是 pipenv 时"></a>如果用的是 pipenv 时</h3><p>Pipenv 是个包管理工具，它综合了 virtualenv，pip 和 pyenv 三者的功能。可以使用 pipenv 这个工具来安装、卸载、跟踪和记录依赖性，并创建、使用和组织你的虚拟环境。</p><p>使用 Homebrew 安装 pipenv</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装 pipenv</span>brew update <span class="token operator">&amp;&amp;</span> brew <span class="token function">install</span> pipenv<span class="token comment"># 更新 pipenv</span>brew update <span class="token operator">&amp;&amp;</span> brew upgrade pipenv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>也可以使用 pip 来安装和升级 pipenv</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装 pipenv</span>pip <span class="token function">install</span> pipenv<span class="token comment"># 更新 pipenv</span>pip <span class="token function">install</span> <span class="token parameter variable">--upgrade</span> pipenv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用 pipenv 建立虚拟环境</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 如果系统中没有你想要的 Python 版本 {python_version} 时，pipenv 会调用 pyenv 来安装对应的 Python 版本</span><span class="token builtin class-name">cd</span> <span class="token punctuation">{</span>your_project_dir<span class="token punctuation">}</span> <span class="token operator">&amp;&amp;</span> pipenv <span class="token parameter variable">--python</span> <span class="token punctuation">{</span>python_version<span class="token punctuation">}</span><span class="token comment"># eg：pipenv --python 3.9.6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们可以通过 <code>pipenv --venv</code> 来查看项目的虚拟环境目录，可以通过 <code>pipenv --rm</code> 来删除虚拟环境。</p><h3 id="如果用的是-virtualenv-时"><a href="#如果用的是-virtualenv-时" class="headerlink" title="如果用的是 virtualenv 时"></a>如果用的是 <a href="https://github.com/pypa/virtualenv">virtualenv</a> 时</h3><p>如果我们安装了 pyenv 时，其实已经自动以 plugin 的形式安装好了 virtualenv 我们只需直接使用就好了。</p><p>如果没有安装 virtualenv 时，则可以使用以下命令进行安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用 pip 进行安装</span>pip <span class="token function">install</span> virtualenv<span class="token comment"># 或者使用 homebrew 安装</span>brew <span class="token function">install</span> pyenv-virtualenv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使用 virtualenv 建立虚拟环境</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pyenv virtualenv <span class="token punctuation">{</span>python_version<span class="token punctuation">}</span> <span class="token punctuation">{</span>virtual_env_name<span class="token punctuation">}</span><span class="token comment"># eg：pyenv virtualenv 3.9.6 envdemo396</span><span class="token comment"># 查看虚拟环境目录</span><span class="token function">ls</span> <span class="token parameter variable">-al</span> <span class="token variable"><span class="token variable">$(</span>pyenv root<span class="token variable">)</span></span>/versions<span class="token comment"># 也可以直接通过 pyenv 命令进行查看</span>pyenv versions<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看当前有哪些虚拟环境</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pyenv virtualenvs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>激活新创建的虚拟环境</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 以 envdemo396 虚拟环境为例</span>pyenv activate envdemo396<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>手动退出虚拟环境</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pyenv deactivate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除虚拟环境</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 以 envdemo396 虚拟环境为例</span><span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token variable"><span class="token variable">$(</span>pyenv root<span class="token variable">)</span></span>/versions/envdemo396<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git bug 分支</title>
      <link href="posts/56cac605.html"/>
      <url>posts/56cac605.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git-bug-分支"><a href="#Git-bug-分支" class="headerlink" title="Git bug 分支"></a>Git bug 分支</h1><blockquote><p>修复 bug 时，我们会通过创建新的 bug 分支进行修复，然后合并，最后删除；<br>当手头工作没有完成时，先把工作现场 git stash 一下，然后去修复 bug，修复后，再 git stash pop，回到工作现场；<br>在 master 分支上修复的 bug，想要合并到当前 dev 分支，可以用 git cherry-pick <commit id=""> 命令，把 bug 提交的修改“复制”到当前分支，避免重复劳动。</commit></p></blockquote><p>应用场景如下：<br>当你需要修改一个 bug，但是你当前的开发功能还不想提交到远程版本库中，又必须要先将 bug 提交。</p><ol><li>查看当前工作区的状态（假设当前在 <code>dev</code> 分支）</li></ol><pre class="line-numbers language-git" data-language="git"><code class="language-git"><span class="token comment"># 工作区的文件还没有提交</span>git status<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>存储当前的工作现场</li></ol><pre class="line-numbers language-git" data-language="git"><code class="language-git">git stash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>再次查看工作区的状态，应该是干净的</li><li>如果需要在 <code>master</code> 分支上修复 bug，那么就需要从 <code>master</code> 分支上创建临时分支</li></ol><pre class="line-numbers language-git" data-language="git"><code class="language-git"><span class="token comment"># 切换到 master 分支</span>git checkout master<span class="token comment"># 创建修复 bug 的分支为 issue-1</span>git checkout -b issue-1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>在 <code>issue-1</code> 分支上修复 bug</li><li>在 <code>issue-1</code> 分支上提交代码</li></ol><pre class="line-numbers language-git" data-language="git"><code class="language-git">git add -A &amp;&amp; git commit -m <span class="token string">'fixed bug 1'</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="7"><li>切换到 <code>master</code> 分支</li></ol><pre class="line-numbers language-git" data-language="git"><code class="language-git">git switch master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="8"><li>从 <code>master</code> 分支上合并 <code>issue-1</code> 分支的代码，并添加了合并信息</li></ol><pre class="line-numbers language-git" data-language="git"><code class="language-git">git merge --no-ff -m <span class="token string">"merged bug fix 1"</span> issue-1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="9"><li>原来是在 <code>dev</code> 分支上干活，现在切换到 <code>dev</code> 分支上继续干活</li></ol><pre class="line-numbers language-git" data-language="git"><code class="language-git">git checkout dev<span class="token comment"># 如果此时用 git status 命令查看的话，此时的工作区是干净的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="10"><li>查看之前临时存储的工作现场</li></ol><pre class="line-numbers language-git" data-language="git"><code class="language-git">git stash list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="11"><li>恢复工作现场（有两种方法）</li></ol><pre class="line-numbers language-git" data-language="git"><code class="language-git"><span class="token comment"># 第一种方法：</span><span class="token comment"># 恢复工作现场</span>git stash apply<span class="token comment"># 删除之前临时存储的工作现场</span>git stash drop<span class="token comment"># 第二种方法：</span><span class="token comment"># 恢复的同时把 stash 内容也删了</span>git stash pop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="12"><li>如果需要恢复指定的工作现场</li></ol><pre class="line-numbers language-git" data-language="git"><code class="language-git"><span class="token comment"># 查看所有的工作现场</span>git stash list<span class="token comment"># 恢复名称为 「stash@{0}」 的工作现场</span>git stash apply stash@{0}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="13"><li>将修复好的 bug 同步到其他的分支</li></ol><blockquote><p>可以通过直接将修复 bug 的文件修改内容复制到其他分支，比如在 <code>issue-1</code> 分支上修复的提交版本号为 <code>c55ae16d5b1a</code>，现在只需要将这个版本号的所有修改内容复制到 dev 分支上即可。</p></blockquote><pre class="line-numbers language-git" data-language="git"><code class="language-git"><span class="token comment"># 当前分支为 dev</span>git checkout dev<span class="token comment"># 复制一个特定的提交到当前分支（此操作会自动提交一个版本号）</span>git cherry-pick c55ae16d5b1a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建 GitLab Git 服务器</title>
      <link href="posts/34b62620.html"/>
      <url>posts/34b62620.html</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://about.gitlab.com/install/?version=ce#centos-7">官方安装文档</a></p></blockquote><p>GitLab是Ruby开发的自托管的Git项目仓库，可通过Web界面访问公开的或者私人的项目。</p><blockquote><p>版本：GitLab 分为社区版（CE）和企业版（EE）<br>此次安装的 gitlab 版本为：14.10.0</p></blockquote><h2 id="Ubuntu-系统下"><a href="#Ubuntu-系统下" class="headerlink" title="Ubuntu 系统下"></a>Ubuntu 系统下</h2><ul><li>更新软件源</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 推荐使用 apt 工具，其实使用 apt-get 也行</span><span class="token function">apt</span> update <span class="token operator">&amp;&amp;</span> <span class="token function">apt</span> upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>安装依赖包，如果系统已经安装，就不需要再次安装</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">curl</span> openssh-server ca-certificates tzdata perl<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>添加 gitlab 软件包仓库</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 这里添加的是企业版（EE）地址</span><span class="token function">curl</span> https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>安装 Postfix 来发送通知邮件</li></ul><pre class="line-numbers language-none"><code class="language-none">apt install -y postfix<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>安装 gitlab 企业版（EE）</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装企业版 gitlab</span><span class="token function">apt</span> <span class="token function">install</span> gitlab-ee<span class="token comment"># 查看可用的版本</span><span class="token function">sudo</span> <span class="token function">apt-cache</span> madison gitlab-ee<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>修改配置文件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 配置很简单，一看就懂，就不做介绍</span><span class="token function">vim</span> /etc/gitlab/gitlab.rb<span class="token comment"># 需要注意的是：需要将 `external_url` 后面的值修改成你自己访问 gitlab 的地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>重新编译配置文件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gitlab-ctl reconfigure<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>重启 gitlab</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gitlab-ctl restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看默认的 root 密码</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /etc/gitlab/initial_root_password<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="CentOS-7-系统下"><a href="#CentOS-7-系统下" class="headerlink" title="CentOS 7 系统下"></a>CentOS 7 系统下</h2><ul><li>安装依赖包，如果系统已经安装，就不需要再次安装</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装 curl 和 ssh 程序，（一般系统都会自带，因此可以忽略）</span><span class="token comment"># policycoreutils-python 依赖包不影响部署 gitlab 因此也可以不安装</span><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">curl</span> policycoreutils-python openssh-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>配置 ssh 服务</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动 ssh 服务</span><span class="token function">sudo</span> systemctl start sshd<span class="token comment"># 设置 ssh 服务为开机自动启动</span><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> sshd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>配置 Postfix 来发送通知邮件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装 Postfix</span><span class="token function">sudo</span> yum <span class="token function">install</span> postfix<span class="token comment"># 设置 Postfix 服务为开机自动启动</span><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> postfix<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动 Postfix 服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 打开 Postfix 的配置文件</span><span class="token function">vim</span> /etc/postfix/main.cf<span class="token comment"># 修改 `inet_interfaces = localhost` 为 `inet_interfaces = all`</span><span class="token comment"># 启动 Postfix 服务</span><span class="token function">sudo</span> systemctl start postfix<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>添加 gitlab 软件包仓库</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 这里添加的是社区版（CE）地址</span><span class="token function">curl</span> https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>安装 gitlab 社区版（CE）</li></ul><pre class="line-numbers language-none"><code class="language-none">sudo EXTERNAL_URL="你的 GitLab 服务器的公网 IP 地址或者域名" yum install -y gitlab-ce# 比如：sudo EXTERNAL_URL="http://127.0.0.1:8099" yum install -y gitlab-ce<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用浏览器访问 <code>你的 GitLab 服务器的公网 IP 地址或者域名</code> ，账号为 <code>root</code> 密码通过以下命令进行查看初始密码</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /etc/gitlab/initial_root_password<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="如果不想做过多的配置时，直接执行以下两步骤即可："><a href="#如果不想做过多的配置时，直接执行以下两步骤即可：" class="headerlink" title="如果不想做过多的配置时，直接执行以下两步骤即可："></a>如果不想做过多的配置时，直接执行以下两步骤即可：</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">bash</span><span class="token comment"># 默认安装的是最新版</span><span class="token function">sudo</span> <span class="token assign-left variable">EXTERNAL_URL</span><span class="token operator">=</span><span class="token string">"你的 GitLab 服务器的公网 IP 地址或者域名"</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> gitlab-ce<span class="token comment"># 如果需要安装指定版本的话 </span>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> gitlab-ce-14.10.1-ce.0.el7.x86_64<span class="token comment"># 或者</span>yum <span class="token function">install</span> <span class="token parameter variable">-y</span> gitlab-ce-14.10.1-ce.0.el7<span class="token comment"># 查看可用的版本</span>yum <span class="token parameter variable">--showduplicates</span> list gitlab-ce<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>出现以下界面，则表示安装成功</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-fd85b0c1dd3a1e17.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="安装成功界面"></p><h3 id="gitlab-常用命令"><a href="#gitlab-常用命令" class="headerlink" title="gitlab 常用命令"></a>gitlab 常用命令</h3><pre class="line-numbers language-none"><code class="language-none"># 启动所有 gitlab 组件gitlab-ctl start# 停止所有 gitlab 组件gitlab-ctl stop# 重启所有 gitlab 组件gitlab-ctl restart# 查看服务状态gitlab-ctl status# 修改 gitlab 配置文件vim /etc/gitlab/gitlab.rb# 重新编译 gitlab 的配置gitlab-ctl reconfigure # 查看 gitlab 配置信息gitlab-ctl show-config# 检查 gitlabgitlab-rake gitlab:check SANITIZE=true --trace# 查看日志gitlab-ctl tailgitlab-ctl tail nginx/gitlab_access.log# 日志地址 /var/log/gitlab# 服务地址 /var/opt/gitlab# nginx 配置路径 /var/opt/gitlab/nginx/conf/nginx.conf# 查看 gitlab 的版本cat /opt/gitlab/embedded/service/gitlab-rails/VERSION<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重置账号密码"><a href="#重置账号密码" class="headerlink" title="重置账号密码"></a>重置账号密码</h3><blockquote><p><a href="https://docs.gitlab.com/ee/security/reset_user_password.html">官方文档重置用户密码</a></p></blockquote><h4 id="使用-Rake-任务"><a href="#使用-Rake-任务" class="headerlink" title="使用 Rake 任务"></a>使用 Rake 任务</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gitlab-rake <span class="token string">"gitlab:password:reset"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如下所示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@iZ447rdnsv9nreZ ~<span class="token punctuation">]</span><span class="token comment"># gitlab-rake "gitlab:password:reset"</span>Enter username: rootEnter password: Confirm password: Password successfully updated <span class="token keyword">for</span> user with username root.<span class="token punctuation">[</span>root@iZ447rdnsv9nreZ ~<span class="token punctuation">]</span><span class="token comment"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用-Rails-控制台"><a href="#使用-Rails-控制台" class="headerlink" title="使用 Rails 控制台"></a>使用 Rails 控制台</h4><pre class="line-numbers language-none"><code class="language-none"># 打开交互模式gitlab-rails console -e production# 如果是低版本的 gitlab 可以尝试使用以下命令gitlab-rails console production# 定位到 gitlab 数据库中 Users 表中的一个用户user = User.where(id:1).first# 或者通过用户名进行查找user = User.find_by_username 'root'# 或者通过邮箱地址查找user = User.find_by(email: 'user@example.com')# 如果用户 id、用户名、邮箱地址都不记得，那么可以尝试使用以下命令查看所有用户User.all# 密码必须不小于 8 个字符，密码后面加不加单引号都可以# 重置管理员密码为 12345678user.password=12345678# 确认管理员的密码为 12345678user.password_confirmation=12345678# 保存更改信息，必须要有后面的感叹号user.save!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如下所示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@iZ447rdnsv9nreZ gitlab<span class="token punctuation">]</span><span class="token comment"># gitlab-rails console -e production</span>-------------------------------------------------------------------------------- Ruby:         ruby <span class="token number">2.7</span>.5p203 <span class="token punctuation">(</span><span class="token number">2021</span>-11-24 revision f69aeb8314<span class="token punctuation">)</span> <span class="token punctuation">[</span>x86_64-linux<span class="token punctuation">]</span> GitLab:       <span class="token number">14.10</span>.0 <span class="token punctuation">(</span>88da5554d96<span class="token punctuation">)</span> FOSS GitLab Shell: <span class="token number">13.25</span>.1 PostgreSQL:   <span class="token number">12.7</span>-----------------------------------------------------------<span class="token punctuation">[</span> booted <span class="token keyword">in</span> <span class="token number">606</span>.21s <span class="token punctuation">]</span>Loading production environment <span class="token punctuation">(</span>Rails <span class="token number">6.1</span>.4.7<span class="token punctuation">)</span>irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:005:<span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span> user <span class="token operator">=</span> User.where<span class="token punctuation">(</span>id:1<span class="token punctuation">)</span>.first<span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token comment">#&lt;User id:1 @root&gt;</span>irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:006:<span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span> <span class="token assign-left variable">user.password</span><span class="token operator">=</span><span class="token number">12345678</span><span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">12345678</span>irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:007:<span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span> <span class="token assign-left variable">user.password_confirmation</span><span class="token operator">=</span><span class="token number">12345678</span><span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">12345678</span>irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:008:<span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span> user.save<span class="token operator">!</span><span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token boolean">true</span>irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:009:<span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者这样：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@iZ447rdnsv9nreZ ~<span class="token punctuation">]</span><span class="token comment"># gitlab-rails console -e production</span>-------------------------------------------------------------------------------- Ruby:         ruby <span class="token number">2.7</span>.5p203 <span class="token punctuation">(</span><span class="token number">2021</span>-11-24 revision f69aeb8314<span class="token punctuation">)</span> <span class="token punctuation">[</span>x86_64-linux<span class="token punctuation">]</span> GitLab:       <span class="token number">14.10</span>.0 <span class="token punctuation">(</span>88da5554d96<span class="token punctuation">)</span> FOSS GitLab Shell: <span class="token number">13.25</span>.1 PostgreSQL:   <span class="token number">12.7</span>------------------------------------------------------------<span class="token punctuation">[</span> booted <span class="token keyword">in</span> <span class="token number">41</span>.21s <span class="token punctuation">]</span>Loading production environment <span class="token punctuation">(</span>Rails <span class="token number">6.1</span>.4.7<span class="token punctuation">)</span>irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:001:<span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span> User.all<span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token comment">#&lt;ActiveRecord::Relation [#&lt;User id:1 @root&gt;]&gt;</span>irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:002:<span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span> user <span class="token operator">=</span> User.find_by_username <span class="token string">'root'</span><span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token comment">#&lt;User id:1 @root&gt;</span>irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:003:<span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span> <span class="token assign-left variable">user.password</span><span class="token operator">=</span><span class="token string">'alex123456'</span><span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">"alex123456"</span>irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:004:<span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span> <span class="token assign-left variable">user.password_confirmation</span><span class="token operator">=</span><span class="token string">'alex123456'</span><span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">"alex123456"</span>irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:005:<span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span> user.save<span class="token operator">!</span><span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token boolean">true</span>irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:006:<span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span> <span class="token builtin class-name">exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="备份与恢复"><a href="#备份与恢复" class="headerlink" title="备份与恢复"></a>备份与恢复</h3><p>需要注意，两台服务器上的 gitlab 必须版本一致，才可以进行恢复。可以使用以下命令进行查看 gitlab 的版本号</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /opt/gitlab/embedded/service/gitlab-rails/VERSION<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 执行以下命令生成备份文件</span>/usr/bin/gitlab-rake gitlab:backup:create<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>生成的备份文件位于 <code>/var/opt/gitlab/backups</code> 目录。<br>可以通过修改配置文件 <code>vim /etc/gitlab/gitlab.rb</code> 中的 <code>gitlab_rails['backup_path']</code> 项，来调整默认的备份目录。</p><p>生成的文件类似于 <code>1651390965_2022_05_01_14.10.0_gitlab_backup.tar</code></p><h4 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h4><blockquote><p>账号密码、git 仓库、以及个人设置啥的都会被恢复过来</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 停止 unicorn 和 sidekiq，保证数据库没有新的连接，不会有写数据情况</span><span class="token function">sudo</span> gitlab-ctl stop unicorn<span class="token function">sudo</span> gitlab-ctl stop sidekiq<span class="token comment"># 进入备份目录进行恢复，1651390965_2022_05_01_14.10.0 为备份文件的时间以及 gitlab 版本号</span><span class="token builtin class-name">cd</span> /var/opt/gitlab/backupsgitlab-rake gitlab:backup:restore <span class="token assign-left variable">BACKUP</span><span class="token operator">=</span>1651390965_2022_05_01_14.10.0<span class="token comment"># 启动 unicorn 和 sidekiq</span><span class="token function">sudo</span> gitlab-ctl start unicorn<span class="token function">sudo</span> gitlab-ctl start sidekiq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="降级"><a href="#降级" class="headerlink" title="降级"></a>降级</h3><p>降级只建议在次要版本和补丁版本之间降级。<a href="https://docs.gitlab.com/ee/update/package/downgrade.html">官方文档</a> 比如以下将 <code>14.10.1</code> 版本降低到 <code>14.10.0</code> 版本</p><ol><li>停止 gitlab 并删除当前包</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># If running Puma</span><span class="token function">sudo</span> gitlab-ctl stop puma<span class="token comment"># Stop sidekiq</span><span class="token function">sudo</span> gitlab-ctl stop sidekiq<span class="token comment"># If on Ubuntu: remove the current package</span><span class="token function">sudo</span> dpkg <span class="token parameter variable">-r</span> gitlab-ce<span class="token comment"># If on Centos: remove the current package</span><span class="token function">sudo</span> yum remove gitlab-ce<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>确定要降级到的 gitlab 版本</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># (Replace with gitlab-ce if you have GitLab FOSS installed)</span><span class="token comment"># Ubuntu</span><span class="token function">sudo</span> <span class="token function">apt-cache</span> madison gitlab-ce<span class="token comment"># CentOS:</span><span class="token function">sudo</span> yum <span class="token parameter variable">--showduplicates</span> list gitlab-ce<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>将 gitlab 降级到所需版本</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># (Replace with gitlab-ce if you have GitLab FOSS installed)</span><span class="token comment"># Ubuntu</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> gitlab-ce<span class="token operator">=</span><span class="token number">14.10</span>.0-ce.0<span class="token comment"># CentOS:</span><span class="token function">sudo</span> yum <span class="token function">install</span> gitlab-ce-14.10.0-ce.0.el7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>重新配置 gitlab</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gitlab-ctl reconfigure<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Git 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用 Docker 安装 Gitlab</title>
      <link href="posts/bd835025.html"/>
      <url>posts/bd835025.html</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://hub.docker.com/r/gitlab/gitlab-ce">Gitlab 官方 docker</a><br><a href="https://docs.gitlab.com/ee/install/docker.html">官方 docker 安装文档</a></p></blockquote><p><strong>内存小于 4GB 的机器最好不要安装！GitLab 超级占内存！</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /srv/gitlab<span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token punctuation">\</span><span class="token parameter variable">--hostname</span> <span class="token punctuation">{</span>your_github_hostname or your_ip<span class="token punctuation">}</span> <span class="token punctuation">\</span><span class="token parameter variable">--publish</span> <span class="token number">443</span>:443 <span class="token parameter variable">--publish</span> <span class="token number">80</span>:80 <span class="token parameter variable">--publish</span> <span class="token number">22</span>:22 <span class="token punctuation">\</span><span class="token parameter variable">--name</span> gitlab <span class="token punctuation">\</span><span class="token comment"># docker 重启后，容器也会重启</span><span class="token parameter variable">--restart</span> always <span class="token punctuation">\</span><span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token punctuation">\</span><span class="token comment"># gitlab 配置</span><span class="token parameter variable">--volume</span> /srv/gitlab/config:/etc/gitlab <span class="token punctuation">\</span><span class="token comment"># gitlab 日志</span><span class="token parameter variable">--volume</span> /srv/gitlab/logs:/var/log/gitlab <span class="token punctuation">\</span><span class="token comment"># gitlab 应用数据</span><span class="token parameter variable">--volume</span> /srv/gitlab/data:/var/opt/gitlab <span class="token punctuation">\</span><span class="token comment"># 设置共享内存大小</span>--shm-size 256m <span class="token punctuation">\</span>gitlab/gitlab-ce:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看容器启动日志</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> logs <span class="token parameter variable">-f</span> gitlab<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认用户名为 <code>root</code> ，初始密码可以执行以下命令获取。<strong>24小时内要修改默认密码</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> gitlab <span class="token function">grep</span> <span class="token string">'Password:'</span> /etc/gitlab/initial_root_password<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改配置文件</p><blockquote><p>因为我们将 docker 中的配置映射到宿主机的 <code>/srv/gitlab/config</code> 目录下，因此可直接在该目录中编辑配置文件</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看启用的配置</span><span class="token function">cat</span> /srv/gitlab/config/gitlab.rb <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token string">'^#'</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token string">'^$'</span><span class="token comment"># 编辑配置文件</span><span class="token function">vim</span> /srv/gitlab/config/gitlab.rb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可能需要修改的内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置时区</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'time_zone'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Asia/Shanghai'</span><span class="token comment"># 设置访问地址，没有域名则可以直接设置宿主机的 IP</span>external_url <span class="token string">'http://127.0.0.1'</span><span class="token comment"># 设置 ssh 访问 host，没有域名则可以直接设置宿主机的 IP</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'gitlab_ssh_host'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'127.0.0.1'</span><span class="token comment"># 设置 ssh 端口</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'gitlab_shell_ssh_port'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2222</span><span class="token comment"># 禁用内建的 nginx</span>nginx<span class="token punctuation">[</span><span class="token string">'enable'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token comment"># 取消掉这里的注释</span><span class="token comment"># 太占用内存了</span>puma<span class="token punctuation">[</span><span class="token string">'worker_processes'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>postgresql<span class="token punctuation">[</span><span class="token string">'shared_buffers'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"256MB"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何运用 systemd 管理 Linux 中的服务</title>
      <link href="posts/ad8a576e.html"/>
      <url>posts/ad8a576e.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-systemd"><a href="#什么是-systemd" class="headerlink" title="什么是 systemd"></a>什么是 systemd</h2><p><code>systemd</code> 是 Linux 系统中用于系统和服务管理的一种工具，它是一个初始化系统，用于启动和管理整个系统。从 Linux kernel 完成自我启动后，systemd 是第一个被启动的用户级进程，它的进程 ID 为 1。它的主要职责包括启动系统服务，管理系统资源，以及处理系统关机、重启等操作。</p><h2 id="系统服务和-systemd"><a href="#系统服务和-systemd" class="headerlink" title="系统服务和 systemd"></a>系统服务和 systemd</h2><p>在 Linux 中, 一个服务通常被定义为一个常驻的长时运行程序，比如 web 服务器, 数据库服务器等。在使用 systemd 的系统中，每个服务都被定义为一个独立的 unit，这些 unit 会被 systemd 管理和监视。所有被 systemd 管理的服务的配置文件都在 <code>/etc/systemd/system</code> 和 <code>/usr/lib/systemd/system</code> 目录下。</p><h2 id="管理-systemd-服务"><a href="#管理-systemd-服务" class="headerlink" title="管理 systemd 服务"></a>管理 systemd 服务</h2><p>你可以通过 <code>systemctl</code> 命令来管理被 systemd 控制的服务。以下是一些常用的 <code>systemctl</code> 发令：</p><ul><li>查看所有被 systemd 控制的服务: <code>systemctl list-units --type=service</code></li><li>启动一个服务: <code>systemctl start [service-name]</code></li><li>停止一个服务: <code>systemctl stop [service-name]</code></li><li>重启一个服务: <code>systemctl restart [service-name]</code></li><li>查看某个服务的状态: <code>systemctl status [service-name]</code></li><li>使服务在启动时自启动: <code>systemctl enable [service-name]</code></li><li>禁止服务在启动时自启动: <code>systemctl disable [service-name]</code></li></ul><h2 id="创建-systemd-服务"><a href="#创建-systemd-服务" class="headerlink" title="创建 systemd 服务"></a>创建 systemd 服务</h2><p>创建自定义的 systemd 服务也很简单。主要是创建一个以 <code>.service</code> 结尾的文件，这个文件中定义了服务的执行程序，启动方式等信息。以下是一个简单的例子:</p><p>Systemd 的 Service 配置在 <code>/etc/systemd/system/</code> 目录中，可以创建一个 <code>echo.service</code> 文件，实际项目应当改为对应的名称。编辑此文件，添加下列内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span><span class="token assign-left variable">Description</span><span class="token operator">=</span>Echo Http Server<span class="token assign-left variable">After</span><span class="token operator">=</span>network.target<span class="token assign-left variable">After</span><span class="token operator">=</span>syslog.target<span class="token punctuation">[</span>Service<span class="token punctuation">]</span><span class="token assign-left variable">Type</span><span class="token operator">=</span>simple<span class="token assign-left variable">LimitNOFILE</span><span class="token operator">=</span><span class="token number">65535</span><span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/bin/php /opt/servers/echo/server.php<span class="token assign-left variable">ExecReload</span><span class="token operator">=</span>/bin/kill <span class="token parameter variable">-USR1</span> <span class="token variable">$MAINPID</span><span class="token assign-left variable">Restart</span><span class="token operator">=</span>always<span class="token punctuation">[</span>Install<span class="token punctuation">]</span><span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target graphical.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>After 指令约定了启动的顺序，必须在 network 和 syslog 启动后才启动 echo 服务</li><li>Service 中填写了应用程序的路径信息，请修改为实际项目对应的路径</li><li>Restart=always 表示如果进程挂掉会自动拉起</li><li>WantedBy 约定了在哪些环境下启动，multi-user.target graphical.target 表示在图形界面和命令行环境都会启动</li></ul><p>编写完成后需要 reload 守护进程使其生效</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl <span class="token parameter variable">--system</span> daemon-reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>管理服务示例</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动服务</span><span class="token function">sudo</span> systemctl start echo.service<span class="token comment"># reload 服务</span><span class="token function">sudo</span> systemctl reload echo.service<span class="token comment"># 关闭服务</span><span class="token function">sudo</span> systemctl stop echo.service<span class="token comment"># 查看服务状态</span><span class="token function">sudo</span> systemctl status echo.service<span class="token comment"># 查看所有的启动项</span><span class="token function">sudo</span> systemctl list-unit-files<span class="token comment"># 禁用开机启动</span><span class="token function">sudo</span> systemctl disable echo.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>systemd</code> 是 Linux 发行版中的标准工具，用于管理系统启动和服务。其 <code>systemctl</code> 子命令也为管理服务提供了强大而灵活的工具。理解和掌握 <code>systemctl</code> 的使用必将使你能更好的理解和控制你的 Linux 系统。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一文讲懂 HTTP 协议知识</title>
      <link href="posts/d8b21c9b.html"/>
      <url>posts/d8b21c9b.html</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h1><h2 id="HTTP是什么？"><a href="#HTTP是什么？" class="headerlink" title="HTTP是什么？"></a>HTTP是什么？</h2><p>一种规范，统一了双方的沟通方法。<br>浏览器中所显示的内容都是需要从服务器下载到客户端才可以在浏览器中显示。（每刷新一次网页都会产生下载。）</p><h2 id="两大重点。"><a href="#两大重点。" class="headerlink" title="两大重点。"></a>两大重点。</h2><ul><li>请求体（request）<ul><li>发什么？<br>请求报文。</li></ul></li><li>响应体（response）<ul><li>收什么？<br>响应报文。</li></ul></li></ul><h2 id="http-格式"><a href="#http-格式" class="headerlink" title="http 格式"></a>http 格式</h2><p>每个 http 请求和响应都遵循相同的格式，一个 http 包含 header 和 body 两部分，其中 body 是可选的。</p><h3 id="request"><a href="#request" class="headerlink" title="request"></a>request</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 第一行为请求行// GET 请求// 请求的url// http/1.1 协议版本GET http://sodevel.com/course/res/95/104 HTTP/1.1// 以下都是请求头Host: sodevel.comProxy-Connection: keep-aliveCache-Control: max-age<span class="token operator">=</span><span class="token number">0</span>Upgrade-Insecure-Requests: <span class="token number">1</span>User-Agent: Mozilla/5.0 <span class="token punctuation">(</span>Windows NT <span class="token number">6.1</span><span class="token punctuation">;</span> WOW64<span class="token punctuation">)</span> AppleWebKit/537.36 <span class="token punctuation">(</span>KHTML, like Gecko<span class="token punctuation">)</span> Chrome/69.0.3497.100 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.9</span>,image/webp,image/apng,*/*<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.8</span>Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh<span class="token punctuation">;</span><span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0.9</span>Cookie: XSRF-TOKEN<span class="token operator">=</span>eyJpdiI6IlphTmxTVXROaGkySTdYdk9xUnc5cUE9PSIsInZhbHVlIjoidWVVRDBiSWxzYVB6ZDk3VmlQSzhuSGF6THI3R2lzOGVodUxXM1I2aWt4WWdmTGw0R1JXbkFvY0NId00xdlhHSSIsIm1hYyI6IjVhMGFhNDY0NjExMTgxZjU4ZGM4NTM0ZGIwYjdiZmY2ZjMzN2YzY2U5YmZjN2NjZmZmZjNjMTg1NjhjNzZiZTQifQ%3D%3D<span class="token punctuation">;</span> <span class="token assign-left variable">laravel_session</span><span class="token operator">=</span>eyJpdiI6IkJYR3NSUXRtTHVURzFSVXRyZDNHXC93PT0iLCJ2YWx1ZSI6IjhscEdQc2IxMjNEaTBzMjRlNXM5eE1QOUNOeXdENXBTMWpBMFdoMk5oSzc0N1REVGVUVmdWYmhrc05MWEpZSWMiLCJtYWMiOiJmNzcwNjYwYjZmNDFlYzlmOWIwZjQ1MDM0MzA5NzQ2NjYzNTUzMzI5ZjIzMmIzYTAyMjQ4M2UzZGZhNGEzOWZhIn0%3D// 当遇到连续的两个 <span class="token punctuation">\</span>r<span class="token punctuation">\</span>n 时，header 部分结束，后面的数据全部是 body<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-505d729ac85418fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="请求流程"></p><h3 id="reponse"><a href="#reponse" class="headerlink" title="reponse"></a>reponse</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 响应行// 协议版本// 请求状态HTTP/1.1 <span class="token number">200</span> OK// 响应头开始Server: nginxContent-Type: text/html<span class="token punctuation">;</span> <span class="token assign-left variable">charset</span><span class="token operator">=</span>UTF-8Transfer-Encoding: chunkedConnection: closeVary: Accept-EncodingX-Powered-By: PHP/7.2.6Cache-Control: no-cache, privateDate: Mon, <span class="token number">31</span> Dec <span class="token number">2018</span> 06:54:59 GMTSet-Cookie: XSRF-TOKEN<span class="token operator">=</span>eyJpdiI6IjFUVHVvOVwvMURRT1BTbmFzczhNTWhnPT0iLCJ2YWx1ZSI6IkhNdmtmcTcyWGNlSUNRTjVDU0hUcU1QenY3K1pDcHAzdTVHUGFXMVNhMlp4clg3bVNidzArMzhhaE1wSHJVVXciLCJtYWMiOiIxZmNhZmY2OGYwYmEzNzFhZDhlOGViYjE4YzRjNmExMTE2MjhiODI5M2Q2NWFmZjM2NWM2MDAwYzg0NzJkOTRlIn0%3D<span class="token punctuation">;</span> <span class="token assign-left variable">expires</span><span class="token operator">=</span>Mon, <span class="token number">31</span>-Dec-2018 08:54:59 GMT<span class="token punctuation">;</span> Max-Age<span class="token operator">=</span><span class="token number">7200</span><span class="token punctuation">;</span> <span class="token assign-left variable">path</span><span class="token operator">=</span>/Set-Cookie: <span class="token assign-left variable">laravel_session</span><span class="token operator">=</span>eyJpdiI6ImtqdG9sa0lIZ3hNRWhkNGpFM08rSXc9PSIsInZhbHVlIjoiSkZjeWlOcCtVdks4VlFHRVB5KzRoUzZQZFUyMWd1YzRDNmdmUHhUU1IwVEhyaUZ5eXdcL0NWREk5THFEQndzNEkiLCJtYWMiOiI1ZmViNDU0ZDVkNDFlYzU0ZjZjMGRjNGYyYWFjZGFjYjg2OGMyZWFlODI3ZDY1NzBhOWE5MjAyMmU5ZWVkNjQ1In0%3D<span class="token punctuation">;</span> <span class="token assign-left variable">expires</span><span class="token operator">=</span>Mon, <span class="token number">31</span>-Dec-2018 08:54:59 GMT<span class="token punctuation">;</span> Max-Age<span class="token operator">=</span><span class="token number">7200</span><span class="token punctuation">;</span> <span class="token assign-left variable">path</span><span class="token operator">=</span>/<span class="token punctuation">;</span> httponlyContent-Encoding: <span class="token function">gzip</span>Proxy-Connection: keep-alive// 响应头结束// 当遇到连续的两个 <span class="token punctuation">\</span>r<span class="token punctuation">\</span>n 时，响应头部分结束，后面的数据全部是 body<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-911fe20dbfb82de8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="响应流程"></p><p><strong>这里需要注意的是：</strong></p><p><code>响应头和响应正文（标准的网页html代码或者图片）中间有一个空行，只不过Chrome浏览器将中间的空行</code></p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$fp</span> <span class="token operator">=</span> <span class="token function">fsockopen</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"www.example.com"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token variable">$errno</span><span class="token punctuation">,</span> <span class="token variable">$errstr</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$fp</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$errstr</span></span> (<span class="token interpolation"><span class="token variable">$errno</span></span>)&lt;br /&gt;\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">// 一个 \r\n 代表换行</span>    <span class="token variable">$out</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"GET / HTTP/1.1\r\n"</span><span class="token punctuation">;</span>    <span class="token variable">$out</span> <span class="token operator">.=</span> <span class="token string double-quoted-string">"Host: www.example.com\r\n"</span><span class="token punctuation">;</span>    <span class="token variable">$out</span> <span class="token operator">.=</span> <span class="token string double-quoted-string">"Connection: Close\r\n\r\n"</span><span class="token punctuation">;</span>    <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> <span class="token variable">$out</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token function">fgets</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="状态码："><a href="#状态码：" class="headerlink" title="状态码："></a>状态码：</h3><blockquote><p>1– 已经接受请求，处理中<br>2– 请求成功<br>3– 涉及跳转网址<br>4– 客户端错误，比如请求了不存在的网址<br>5– 服务器错误，服务器端可能出现问题</p></blockquote><ul><li>100~199：表示服务端成功接收客户端请求，要求客户端继续提交下一次请求才能完成整个处理过程。</li><li>200~299：表示服务端成功接收请求并已完成整个处理过程。最常用就是：200</li><li>300~399：为完成请求，客户端需进一步细化请求。比较常用的如：客户端请求的资源已经移动一个新地址使用 302 表示将资源重定向，客户端请求的资源未发生改变，使用 304，告诉客户端从本地缓存中获取。</li><li>400~499：客户端的请求有错误，如：404 表示你请求的资源在 web 服务器中找不到，403 表示服务器拒绝客户端的访问，一般是权限不够。</li><li>500~599：服务器端出现错误，最常用的是：500</li></ul><h3 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">setcookie<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 和 header<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 前不能有任何输出。原因是：这两个函数是用于设置头信息的，http协议必须是先设置头信息后才会有输出内容。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-69402ab4b1507951.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="http协议"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-d334afce5c97f48b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="http协议"></p><ol><li>浏览器通过http协议发起请求到服务器（Apache或者nginx）</li><li>服务器（Apache或者nginx）根据不同的需求交给php文件处理。</li><li>php可能会需要请求MySQL</li><li>如果需要请求mysql，mysql将结果返回给php文件</li><li>php文件将结果返还给服务器（Apache或者nginx）</li><li>服务器（Apache或者nginx）将最终结果通过http协议发送给浏览器。</li></ol><h3 id="http协议特点"><a href="#http协议特点" class="headerlink" title="http协议特点"></a>http协议特点</h3><ol><li>无状态：不能记住本次请求产生的数据，不同请求之间，数据不能共享。</li><li>有会话：session和cookie。</li><li>缓存：通过Cache-Control标记，可通知浏览器如何缓存该页面。</li><li>同源：浏览器为了防止跨域攻击，多数要求同源策略，HTTP可以通过标记来开放限制。</li><li>认证：通过Authenticate标记，可实现基于http的认证。</li><li>代理</li></ol><ul><li><h3 id="资料文档"><a href="#资料文档" class="headerlink" title="资料文档"></a>资料文档</h3></li></ul><blockquote><p><a href="https://www.cnblogs.com/ranyonsue/p/5984001.html">https://www.cnblogs.com/ranyonsue/p/5984001.html</a><br>或者<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP">https://developer.mozilla.org/zh-CN/docs/Web/HTTP</a></p></blockquote><ul><li><h3 id="http-动词"><a href="#http-动词" class="headerlink" title="http 动词"></a>http 动词</h3></li></ul><table><thead><tr><th>动词</th><th>描述</th><th>是否幂等</th></tr></thead><tbody><tr><td>GET</td><td>获取资源，单个或多个</td><td>是</td></tr><tr><td>POST</td><td>创建资源</td><td>否</td></tr><tr><td>PUT</td><td>更新资源，客户端提供完整的资源数据</td><td>是</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/PATCH">PATCH</a></td><td>更新资源，客户端提供部分的资源数据</td><td>否</td></tr><tr><td>DELETE</td><td>删除资源</td><td>是</td></tr></tbody></table><p><code>幂等性</code>，指一次和多次请求某一个资源应该具有同样的副作用，也就是一次访问与多次访问，对这个资源带来的变化是相同的。</p><blockquote><p>为什么 PUT 是幂等的而 PATCH 是非幂等的，因为 PUT 是根据客户端提供了完整的资源数据，客户端提交什么就替换为什么，而 PATCH 有可能是根据客户端提供的参数，动态的计算出某个值，例如每次请求后资源的某个参数减1，所以多次调用，资源会有不同的变化。</p></blockquote><h3 id="http-状态码"><a href="#http-状态码" class="headerlink" title="http 状态码"></a>http 状态码</h3><blockquote><p>http 状态码详细讲解：<a href="https://httpstatuses.com/">https://httpstatuses.com/</a><br>json.api 格式规范化：<a href="http://jsonapi.org.cn/format/">http://jsonapi.org.cn/format/</a></p></blockquote><table><thead><tr><th>状态码</th><th>状态</th><th>说明</th></tr></thead><tbody><tr><td>200</td><td>OK</td><td>对成功的 GET、PUT、PATCH 或 DELETE 操作进行响应。也可以被用在不创建新资源的 POST 操作上</td></tr><tr><td>201</td><td>Created</td><td>对创建新资源的 POST 操作进行响应。应该带着指向新资源地址的 Location 头</td></tr><tr><td>202</td><td>Accepted</td><td>服务器接受了请求，但是还未处理，响应中应该包含相应的指示信息，告诉客户端该去哪里查询关于本次请求的信息</td></tr><tr><td>204</td><td>No Content</td><td>对不会返回响应体的成功请求进行响应（比如 DELETE 请求）</td></tr><tr><td>304</td><td>Not Modified</td><td>HTTP缓存header生效的时候用</td></tr><tr><td>400</td><td>Bad Request</td><td>请求异常，比如请求中的body无法解析</td></tr><tr><td>401</td><td>Unauthorized</td><td>没有进行认证或者认证非法</td></tr><tr><td>403</td><td>Forbidden</td><td>服务器已经理解请求，但是拒绝执行它</td></tr><tr><td>404</td><td>Not Found</td><td>请求一个不存在的资源</td></tr><tr><td>405</td><td>Method Not Allowed</td><td>所请求的 HTTP 方法不允许当前认证用户访问</td></tr><tr><td>410</td><td>Gone</td><td>表示当前请求的资源不再可用。当调用老版本 API 的时候很有用</td></tr><tr><td>415</td><td>Unsupported Media Type</td><td>如果请求中的内容类型是错误的</td></tr><tr><td>422</td><td>Unprocessable Entity</td><td>用来表示校验错误</td></tr><tr><td>429</td><td>Too Many Requests</td><td>由于请求频次达到上限而被拒绝访问</td></tr></tbody></table><h3 id="http-提交数据常用的有两种方式"><a href="#http-提交数据常用的有两种方式" class="headerlink" title="http 提交数据常用的有两种方式"></a>http 提交数据常用的有两种方式</h3><ol><li>application/x-www-form-urlencoded(默认值)</li><li>multipart/form-data （form 表单提交文件的时候，需要增加 enctype=”multipart/form-data”）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 科普 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 用户、用户组、权限</title>
      <link href="posts/41bc9f3e.html"/>
      <url>posts/41bc9f3e.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-用户、用户组、权限"><a href="#Linux-用户、用户组、权限" class="headerlink" title="Linux 用户、用户组、权限"></a>Linux 用户、用户组、权限</h1><h2 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h2><table><thead><tr><th>命令介绍</th><th>命令行</th></tr></thead><tbody><tr><td>查看所有用户</td><td>cat /etc/passwd  或者 cat /etc/shadow</td></tr><tr><td>添加账号</td><td>useradd 比如添加 alex 账号: useradd alex</td></tr><tr><td>修改密码</td><td>passwd 比如修改 alex 账号的密码： passwd alex</td></tr><tr><td>修改账号</td><td>usermod</td></tr><tr><td>删除账号</td><td>userdel</td></tr><tr><td>查询账号</td><td>id 比如查询 alex 的账号：id alex</td></tr><tr><td>切换账号</td><td>su 比如切换到 alex 账号：su alex</td></tr></tbody></table><h2 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h2><table><thead><tr><th>命令介绍</th><th>命令行</th></tr></thead><tbody><tr><td>查询所有用户组</td><td>cat /etc/group 或者 cat /etc/gshadow</td></tr><tr><td>添加用户组</td><td>groupadd</td></tr><tr><td>修改组信息</td><td>groupmod</td></tr><tr><td>删除用户组</td><td>groupdel</td></tr></tbody></table><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>groupadd -g 4000 adminuser</td><td>新建 adminuser 用户组，且 id 为 4000</td></tr><tr><td>useradd -G adminuser natasha</td><td>新建 natasha 用户，且 adminuser 作为其附属组</td></tr><tr><td>useradd -s /sbin/nologin sarah</td><td>新建 sarah 用户，且在系统中没有任何可交互的 shell （不允许该用户登录系统）</td></tr><tr><td>useradd -u 123 jay</td><td>新建 jay 用户，且 id 为 123</td></tr><tr><td>echo redhat | passwd –stdin harry</td><td>新建 harry 用户，且密码为 redhat</td></tr></tbody></table><h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><ul><li><h3 id="读、写、执行"><a href="#读、写、执行" class="headerlink" title="读、写、执行"></a>读、写、执行</h3></li></ul><p>数字表达形式：读（4） 写（2） 执行（1）<br>字母表达形式：读（r） 写（w） 执行（x）</p><ul><li><h3 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h3></li></ul><p>chmod 比如修改a文件的权限为最高权限chmod  0777 a<br>修改aaa文件夹下面所有的文件为最大权限chmod 0777 -R aaa (-R代表递归)<br>(或者使用chmod -R 777 aaa)</p><ul><li><h3 id="修改资源的所有者"><a href="#修改资源的所有者" class="headerlink" title="修改资源的所有者"></a>修改资源的所有者</h3>chown</li><li><h3 id="修改资源所属的用户组"><a href="#修改资源所属的用户组" class="headerlink" title="修改资源所属的用户组"></a>修改资源所属的用户组</h3>chgrp</li><li><h3 id="查看权限信息"><a href="#查看权限信息" class="headerlink" title="查看权限信息"></a>查看权限信息</h3>ll</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@iZuf6aig35m8ho0xq75ijnZ wwwroot<span class="token punctuation">]</span><span class="token comment"># ll</span>total <span class="token number">8</span>drwxr-xr-x <span class="token number">4</span> www www <span class="token number">4096</span> Jun <span class="token number">23</span> 01:55 defaultdrwxrwxrwx <span class="token number">9</span> www www <span class="token number">4096</span> Jun <span class="token number">23</span> <span class="token number">17</span>:26 www.drling.xin<span class="token comment"># 对于 default 文件夹权限的解读</span><span class="token comment"># drwxr-xr-x</span><span class="token comment"># d 表示 default 为文件夹，如果是文件的话前面会是 -</span><span class="token comment"># rwx 第2个字母到第4个字母 代表着文件所有者的权限，也就是说 可读可写可执行</span><span class="token comment"># r-x 第5个字母到第7个字母 表示着文件所在的用户组的其他用户的权限，也就是说 可读不可写可执行</span><span class="token comment"># r-x 第8个字母到第10个字母 表示用户组其他的人的权限，也可以理解成陌生人的权限，也就是说 可读不可写可执行</span><span class="token comment"># 4 代表连接数</span><span class="token comment"># www 第一个 www 代表 default 这个文件所在的用户</span><span class="token comment"># www 第二个 www 代表 default 这个文件所在的用户组</span><span class="token comment"># 4096 代表档案容量</span><span class="token comment"># Jun 23 01:55 代表档案最后被修改的时间</span><span class="token comment"># default 文件夹对应的数字权限为 755</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>更改 <code>/var/www/test</code> 文件所属者为 harry，所属组为 alex</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chown</span> harry:alex /var/www/test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>所有人都不能执行 <code>/var/www/test</code> 文件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> a-x /var/www/test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>为特定用户设定特殊权限</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">setfacl <span class="token parameter variable">-Rm</span> u:natasha:rw,u:harry:- /var/www/test<span class="token comment"># 查看特定权限</span>getfacl /var/www/test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>切换用户并执行命令</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 切换成 www-data 用户，并执行 php artisan tinker 命令</span><span class="token function">sudo</span> <span class="token parameter variable">-H</span> <span class="token parameter variable">-u</span> www-data <span class="token function">sh</span> <span class="token parameter variable">-c</span> <span class="token string">'php artisan tinker'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解Vim保存命令“:w !sudo tee %”</title>
      <link href="posts/c1413261.html"/>
      <url>posts/c1413261.html</url>
      
        <content type="html"><![CDATA[<p>在 Linux 世界中，Vim 编辑器是一个广受欢迎的文本编辑器，它强大的功能和丰富的命令集合赋予了它无与伦比的生命力。今天我们要来探讨的是 Vim 中的一个<strong>很常用但可能初学者易于忽略</strong>的命令——<code>:w !sudo tee %</code>。这个命令整体上的含义是当你打开一个需要 root 权限<strong>才能修改</strong>的文件，而你修改文件后又不想退出 Vim 编辑器，然后再使用 sudo 命令来启动 Vim，这时你就可以使用这个命令来获取临时的权限，保存你的更改。</p><p>我们首先拆分这个命令的每一个部分来理解它是如何工作的。</p><ol><li><p><code>:</code>：这在 Vim 中意味着我们将要输入一条命令。在命令模式下，你可以在标题栏中用<code>: </code>来开始。</p></li><li><p><code>w</code>：”:w” 是一个常见的 Vim 命令，代表着 “write”。这个命令单独使用的话，会将你在 Vim 中所做的改动写入到文件中。这里的写入并不直接涉及文件系统，而是写入给 Vim 的缓冲区。</p></li><li><p><code>!</code>：在 Vim 中，感叹号(‘!’)表示我们要在 shell 环境下执行接下来的命令。它告诉 Vim 去调用一个外部的程序。</p></li><li><p><code>sudo</code>：在 Linux 命令中，<code>sudo</code> 命令（Su”do”（superuser; substitute user; switch user do））通常表示位”以超级用户身份去做”的意义。之所以需要 <code>sudo</code> 是因为原本你可能没有写入这个文件需要的权限。</p></li><li><p><code>tee</code>：<code>tee</code> 是一个标准的 UNIX 命令，它可以接受输入，并将结果重定向到文件和屏幕（stdout）。</p></li><li><p><code>%</code>：在 Vim 中，’%’ 符号表示当前正在编辑的文件。</p></li></ol><p>所以，这个命令的整体含义就代表着： <strong>把当前的缓冲区内容输出到屏幕，并以超级用户的身份通过 <code>tee</code> 命令写入到当前正在编辑的文件中</strong>。</p><p>主要用于：<strong>在没有文件写入权限却需要保存的情况下，赋予用户以超级用户的身份保存正在编辑的文件。</strong></p><p>事实上，这个命令背后的原理更为高深。当你在命令行界面中输入一条带有管道（|）的命令，Shell 会按照顺序一一处理你的命令。在我们的这个命令中，首先它被<code>:</code>解释为 Vim 命令，此时的 <code>w</code>  指定我们将缓冲区的数据写出。而参数 <code>!sudo tee %</code> 被构造为一个传给 Shell 的命令并被执行。<code>%</code> 在 Shell 语境下又被 Vim 具体化为当前编辑的文件名，于是 Shell 会执行 <code>tee</code> 命令，将缓冲区的数据简单复制到指定的文件和控制台。</p><p>这个在 Vim 中绝妙的命令背后的原理包含了多个琐碎的信息，每个都是程序员在日复一日的操作中形成的最佳实践。</p><p>掌握了这个命令，也就是说我们对 Vim，对 Shell，对 Linux 文件权限管理有了更深一层的理解。这也是 Vim 为何如此迷人的原因之一，在 Vim 中，有着无数这样的小技巧等你去发掘，正如一位大师曾经说过，“Vim就像一个无尽宝藏，总有你未曾发现的新世界。” 是的，这是我刚刚说的，哈哈……</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown：解放排版，简洁高效的文字创作神器！</title>
      <link href="posts/23b678b6.html"/>
      <url>posts/23b678b6.html</url>
      
        <content type="html"><![CDATA[<p>Markdown 是一种轻量级的标记语言，它允许人们使用<strong>易读易写</strong>的纯文本格式编写文档，借助可实现快速排版且转换成格式丰富的 HTML 页面。目前被越来越多的写作爱好者及工作者使用。它在写作、博客、文档等领域得到了广泛应用，因其<strong>简洁、易读、易写</strong>的特点而备受欢迎，一旦掌握这种标记语言，将极大提高效率。但是若需要复杂排版如左右对齐缩进等，还是选择 word 等专业软件。</p><p>Markdown 用简洁的语法代替排版，而不像常用文字处理软件 Word 或 Pages 等进行排版、字体、插入等设置。标记语言可以通过键盘即实现字体大小、插入表格，图片，超链接，脚注等。</p><p>在本文中，我们将深入介绍 Markdown 语法的各个方面，帮助你更好地理解和运用这一强大的文本标记工具。</p><blockquote><p>是的，这篇教程就是采用的 markdown 语法写的。</p></blockquote><h2 id="为什么选择-Markdown"><a href="#为什么选择-Markdown" class="headerlink" title="为什么选择 Markdown"></a>为什么选择 Markdown</h2><ul><li>最大好处是：<strong>快速掌握</strong>（通常而言，你看完这篇文章，你就完全掌握了）；</li><li>简单，适合所有人群，方便打开，不至于出现低版本 word 打不开高版本 word 的文档；</li><li>避免软件不同，如对方是 wps，看到的 word 文档效果和你不一样；</li><li>方便快速排版，节省时间；</li><li>轻松的导出为 HTML、PDF 格式或其他格式；</li><li>纯文本内容，兼容所有的文本编辑器与文字处理软件，几乎可以在所有的文本编辑器中编写；</li><li>支持 Markdown 语法的编辑器有很多，部分网站也支持；</li><li>它基于纯文本，方便修改和共享；</li><li>有众多编程语言的实现，以及应用的相关扩展；</li><li>在 GitHub 等网站中有很好的应用；</li><li>适合用来编写文档、记录笔记、撰写文章。</li></ul><h2 id="Markdown的基础语法"><a href="#Markdown的基础语法" class="headerlink" title="Markdown的基础语法"></a>Markdown的基础语法</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>Markdown 提供了六级标题，通过在文本前面添加相应数量的井号<code>#</code>来表示不同级别的标题。例如：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> 一级标题</span><span class="token title important"><span class="token punctuation">##</span> 二级标题</span><span class="token title important"><span class="token punctuation">###</span> 三级标题</span><span class="token title important"><span class="token punctuation">####</span> 四级标题</span><span class="token title important"><span class="token punctuation">#####</span> 五级标题</span><span class="token title important"><span class="token punctuation">######</span> 六级标题</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h3><p>段落之间使用<strong>空行</strong>进行分隔。Markdown 会自动识别换行，但如果需要强制换行，可以<strong>在行末添加两个空格。</strong></p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>Markdown 支持有序列表和无序列表。   有序列表使用<strong>数字加英文句点</strong>，无序列表使用<strong>星号</strong>、<strong>加号</strong>或<strong>减号</strong>。例如：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 有序列表项1<span class="token list punctuation">2.</span> 有序列表项2<span class="token list punctuation">*</span> 无序列表项A<span class="token list punctuation">+</span> 无序列表项B<span class="token list punctuation">-</span> 无序列表项C<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>插入超链接的语法如下：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url">[<span class="token content">链接文本</span>](<span class="token url">链接地址</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url">[<span class="token content">点我直接访问百度</span>](<span class="token url">https://www.baidu.com</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>插入图片的语法与链接类似，只需在链接语法前加一个感叹号：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url"><span class="token operator">!</span>[<span class="token content">图片描述</span>](<span class="token url">图片地址</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token url"><span class="token operator">!</span>[<span class="token content">我的博客图标</span>](<span class="token url">https://pudongping.github.io/medias/favicon.png</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>引用他人的文字可以使用大于号 <code>&gt;</code>，例如：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token blockquote punctuation">&gt;</span> 这是引用的文字。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="文本格式化"><a href="#文本格式化" class="headerlink" title="文本格式化"></a>文本格式化</h2><h3 id="粗体和斜体"><a href="#粗体和斜体" class="headerlink" title="粗体和斜体"></a>粗体和斜体</h3><p>要使文字显示为<strong>粗体</strong>，可以使用<strong>两个星号</strong>：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token bold"><span class="token punctuation">**</span><span class="token content">这是粗体文字</span><span class="token punctuation">**</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要使文字显示为<em>斜体</em>，可以使用<em>一个星号</em>：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token italic"><span class="token punctuation">*</span><span class="token content">这是斜体文字</span><span class="token punctuation">*</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你还可以组合使用<em><strong>粗体和斜体</strong></em>，可以使用<em>三个星号</em>：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token bold"><span class="token punctuation">**</span><span class="token content"><span class="token italic"><span class="token punctuation">*</span><span class="token content">这是粗体加斜体文字</span><span class="token punctuation">*</span></span></span><span class="token punctuation">**</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>要在文字上添加<del>删除线</del>效果，可以使用两个波浪线：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token strike"><span class="token punctuation">~~</span><span class="token content">这是带删除线的文字</span><span class="token punctuation">~~</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上是 Markdown 中常用的文本格式化方法，它们使文本更具表现力和可读性。</p><h2 id="代码块和行内代码"><a href="#代码块和行内代码" class="headerlink" title="代码块和行内代码"></a>代码块和行内代码</h2><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>要插入代码块，可以使用三个反引号，后面跟上编程语言（可选），然后是代码内容。例如：</p><p>```go<br>package main</p><p>import (<br>“fmt”<br>)</p><p>func SayHi() {<br>fmt.Println(“Hello Alex!”)<br>}<br>```</p><p>显示效果：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">SayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello Alex!"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不指定编程语言，可以直接使用三个反引号：</p><p>```<br>这是普通的代码块<br>可以包含多行代码<br>```</p><h3 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h3><p>要在文本中插入行内代码，可以使用单个反引号将代码包裹起来：</p><p>`这是行内代码`</p><p>Markdown 的代码块和行内代码功能使得展示和分享代码变得非常方便。</p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><h3 id="创建表格的语法和基本结构"><a href="#创建表格的语法和基本结构" class="headerlink" title="创建表格的语法和基本结构"></a>创建表格的语法和基本结构</h3><p>Markdown 支持创建简单的表格，语法如下：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token table"><span class="token table-header-row"><span class="token punctuation">|</span><span class="token table-header important"> 表头1 </span><span class="token punctuation">|</span><span class="token table-header important"> 表头2 </span><span class="token punctuation">|</span><span class="token table-header important"> 表头3 </span><span class="token punctuation">|</span></span><span class="token table-line"><span class="token punctuation">|</span><span class="token punctuation">---</span><span class="token punctuation">|</span><span class="token punctuation">---</span><span class="token punctuation">|</span><span class="token punctuation">---</span><span class="token punctuation">|</span></span><span class="token table-data-rows"><span class="token punctuation">|</span><span class="token table-data"> 单元格1 </span><span class="token punctuation">|</span><span class="token table-data"> 单元格2 </span><span class="token punctuation">|</span><span class="token table-data"> 单元格3 </span><span class="token punctuation">|</span><span class="token punctuation">|</span><span class="token table-data"> 单元格4 </span><span class="token punctuation">|</span><span class="token table-data"> 单元格5 </span><span class="token punctuation">|</span><span class="token table-data"> 单元格6 </span><span class="token punctuation">|</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中，<code>|</code> 用于分隔不同的列，表头下的分隔线 <code>---</code> 用于区分表头和表格内容。</p><h3 id="表格的对齐和格式设置"><a href="#表格的对齐和格式设置" class="headerlink" title="表格的对齐和格式设置"></a>表格的对齐和格式设置</h3><p>可以通过在表头下方的<strong>冒号位置</strong>来设置表格中文本的对齐方式：</p><ul><li>冒号在左侧：左对齐</li><li>冒号在右侧：右对齐</li><li>冒号在两侧：居中对齐</li></ul><p>例如：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token table"><span class="token table-header-row"><span class="token punctuation">|</span><span class="token table-header important"> 左对齐 </span><span class="token punctuation">|</span><span class="token table-header important"> 居中对齐 </span><span class="token punctuation">|</span><span class="token table-header important"> 右对齐 </span><span class="token punctuation">|</span></span><span class="token table-line"><span class="token punctuation">|</span><span class="token punctuation">:------</span><span class="token punctuation">|</span><span class="token punctuation">:-------:</span><span class="token punctuation">|</span><span class="token punctuation">-------:</span><span class="token punctuation">|</span></span><span class="token table-data-rows"><span class="token punctuation">|</span><span class="token table-data"> 文本1  </span><span class="token punctuation">|</span><span class="token table-data"> 文本2   </span><span class="token punctuation">|</span><span class="token table-data"> 文本3  </span><span class="token punctuation">|</span><span class="token punctuation">|</span><span class="token table-data"> 文本4  </span><span class="token punctuation">|</span><span class="token table-data"> 文本5   </span><span class="token punctuation">|</span><span class="token table-data"> 文本6  </span><span class="token punctuation">|</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>效果：</p><table><thead><tr><th align="left">左对齐</th><th align="center">居中对齐</th><th align="right">右对齐</th></tr></thead><tbody><tr><td align="left">文本1</td><td align="center">文本2</td><td align="right">文本3</td></tr><tr><td align="left">文本4</td><td align="center">文本5</td><td align="right">文本6</td></tr></tbody></table><p>这是 Markdown 中简单但实用的表格语法，能够满足日常文档和博客的排版需求。</p><h2 id="扩展功能"><a href="#扩展功能" class="headerlink" title="扩展功能"></a>扩展功能</h2><h3 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h3><p>要插入水平分隔线，可以在一行中使用三个以上的<strong>星号</strong>、<strong>减号</strong>或<strong>下划线</strong>，例如：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important">***<span class="token punctuation">---</span></span>___<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>效果：</p><hr><p>这将在文档中创建一条水平线，用于分隔不同部分的内容。</p><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>Markdown 使用反斜杠 <code>\</code> 作为转义字符，可以用来处理一些特殊字符，使其显示原本的意义。例如：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">\*这是普通的星号\*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述语法将显示为：*这是普通的星号*</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>Markdown 没有原生支持注释的语法，但可以使用 HTML 的注释标签，如：</p><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token comment">&lt;!-- 这是一个注释 --&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这些扩展功能能够进一步提升 Markdown 的灵活性和适用性。</p><h2 id="实际应用与示例"><a href="#实际应用与示例" class="headerlink" title="实际应用与示例"></a>实际应用与示例</h2><p>Markdown 的简洁和易读性使其在各种场景下都得到了广泛应用。</p><h3 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h3><p>Markdown 非常适合撰写文章、博客和笔记。通过使用标题、列表和代码块，可以轻松地组织和展示内容。</p><h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><p>许多博客平台支持 Markdown，比如：<strong>简书</strong>、<strong>博客园</strong>、<strong>思否</strong> ……因为它简化了博客文章的编辑过程。创作者可以专注于内容创作，而无需过多关注排版。</p><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p>许多开发者使用 Markdown 来编写技术文档。表格、代码块和行内代码等功能使得编写和分享文档变得更加便捷。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>以下是一个简单的 Markdown 示例，展示了如何组合使用各种元素：</p><blockquote><p>你完全可以将以下内容，复制，然后直接粘贴到<strong>任何</strong>一个支持 markdown 语法的编辑平台上，即可看到和我一模一样的排版内容。再也不用担心，共同协作时，文本排版错位的尴尬啦！</p></blockquote><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token title important"><span class="token punctuation">#</span> Markdown示例</span><span class="token blockquote punctuation">&gt;</span> 这里仅仅提供一个简单的示例内容，以供体验。<span class="token title important"><span class="token punctuation">##</span> 列表</span><span class="token list punctuation">-</span> 项目1<span class="token list punctuation">-</span> 项目2  <span class="token list punctuation">-</span> 子项目A  <span class="token list punctuation">-</span> 子项目B<span class="token title important"><span class="token punctuation">##</span> 代码块</span>\```pythondef hello_world():    print("Hello, World!")\```<span class="token title important"><span class="token punctuation">##</span> 链接</span><span class="token url">[<span class="token content">点我打开百度</span>](<span class="token url">https://www.baidu.com</span>)</span><span class="token title important"><span class="token punctuation">##</span> 图片</span><span class="token url"><span class="token operator">!</span>[<span class="token content">我的博客图标</span>](<span class="token url">https://pudongping.github.io/medias/favicon.png</span>)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="编辑器和工具"><a href="#编辑器和工具" class="headerlink" title="编辑器和工具"></a>编辑器和工具</h2><h3 id="Markdown-编辑器"><a href="#Markdown-编辑器" class="headerlink" title="Markdown 编辑器"></a>Markdown 编辑器</h3><p>有许多编辑器专门支持 Markdown 语法，提供更好的编辑体验和预览效果。以下是一些常用的 Markdown 编辑器：</p><ul><li><strong>有道云笔记</strong>：这个也是我用了好几年的云笔记软件，有大厂背书，可靠稳定。</li><li><strong>语雀</strong>：阿里推出的一款云笔记软件，属于后起之秀，markdown 所见所得都支持的很好。</li><li><strong>Visual Studio Code</strong>: 强大的代码编辑器，内置 Markdown 支持，并有丰富的扩展插件。</li><li><strong>Typora</strong>: 专注于 Markdown 编辑的所见即所得编辑器，界面简洁易用。</li><li><strong>Atom</strong>: 开源的文本编辑器，具有丰富的社区插件，支持 Markdown 编辑。</li></ul><h3 id="在线工具"><a href="#在线工具" class="headerlink" title="在线工具"></a>在线工具</h3><p>如果你不想下载安装编辑器，也可以使用在线的 Markdown 编辑工具，例如：</p><ul><li><strong>Dillinger</strong>: 在线 Markdown 编辑器，支持实时预览，无需注册。 体验地址：<code>https://dillinger.io/</code></li><li><strong>StackEdit</strong>: 提供离线编辑和云同步功能，可在浏览器中使用。体验地址：<code>https://stackedit.io/</code></li><li><strong>简书</strong>：算是我比较喜欢的在线写作平台了，网站排版简洁大气，专注内容输出。体验地址：<code>https://jianshu.com/</code></li></ul><h2 id="注意事项和常见问题"><a href="#注意事项和常见问题" class="headerlink" title="注意事项和常见问题"></a>注意事项和常见问题</h2><p>在使用 Markdown 时，有一些注意事项和常见问题需要注意：</p><h3 id="文本编辑器的差异"><a href="#文本编辑器的差异" class="headerlink" title="文本编辑器的差异"></a>文本编辑器的差异</h3><p>不同的文本编辑器<strong>可能</strong>对 Markdown 的渲染结果有轻微的差异。在发布前，建议在不同的编辑器中预览，确保最终效果符合预期。但是一般而言，差异不会很大。</p><h3 id="图片路径问题"><a href="#图片路径问题" class="headerlink" title="图片路径问题"></a>图片路径问题</h3><p>当插入图片时，确保图片路径是正确的。相对路径和绝对路径都是可行的，但需要注意文件结构和位置。</p><h3 id="排版的一致性"><a href="#排版的一致性" class="headerlink" title="排版的一致性"></a>排版的一致性</h3><p>为了保持文档的一致性，建议在排版时使用相同的标准。例如，统一使用相同数量的空格缩进代码块，避免出现排版混乱的情况。</p><h3 id="特殊字符的处理"><a href="#特殊字符的处理" class="headerlink" title="特殊字符的处理"></a>特殊字符的处理</h3><p>有些特殊字符可能在 Markdown 中具有特殊的意义，如果需要显示原本的字符，请使用<strong>转义字符</strong>（反斜杠）进行处理。</p><hr><p>通过本文的介绍，我们了解了 Markdown 的基础语法和一些高级功能，包括标题、列表、链接、图片、代码块、表格等。Markdown以其简洁、直观的语法，广泛应用于写作、博客、文档等领域。</p><p>总体而言，Markdown 是一种<strong>强大而灵活</strong>的文本标记语言，使得文本编辑变得更加轻松和愉快。它不仅适用于个人写作，也是团队协作和技术文档编写的理想选择。</p><p>在选择编辑器时，可以根据个人的喜好和需求选择合适的工具，同时注意在不同编辑器之间的渲染差异。使用 Markdown 时，还要留意一些常见问题，如排版一致性、图片路径和特殊字符的处理。</p><p>Markdown 的学习和应用可以提高文本编辑的效率，同时为用户提供了更好的写作和展示体验。至少，当我使用了 markdown 之后，我做笔记、写博客、写文章都没能离开它。</p><p>希望本文能够帮助你更好地掌握 Markdown，让你在文本编辑的道路上越走越远。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手摸手教你安装 Redis</title>
      <link href="posts/b76f1d2.html"/>
      <url>posts/b76f1d2.html</url>
      
        <content type="html"><![CDATA[<h1 id="安装-Redis"><a href="#安装-Redis" class="headerlink" title="安装 Redis"></a>安装 Redis</h1><ul><li><a href="https://redis.io/">redis官网</a></li><li><a href="https://www.redis.net.cn/">redis 中文网</a></li><li><a href="http://redisdoc.com/">Redis 命令参考</a></li></ul><h2 id="Redis-的优点"><a href="#Redis-的优点" class="headerlink" title="Redis 的优点"></a>Redis 的优点</h2><ol><li>简单的 key-value 存储，性能极高。</li><li>Redis 拥有更多的数据结构和并支持更丰富的数据操作。</li><li>Redis 支持数据持久化和数据恢复。</li><li>Redis 的所有操作都是原子性的。</li><li>服务器支持 AUTH 密码验证。</li></ol><h2 id="Ubuntu-下安装-Redis"><a href="#Ubuntu-下安装-Redis" class="headerlink" title="Ubuntu 下安装 Redis"></a>Ubuntu 下安装 Redis</h2><ul><li>安装命令</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 更新本地源</span><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token comment"># 安装 Redis 服务端</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> redis-server<span class="token comment"># 安装 php-redis 扩展程序</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> php-redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>启动 Redis</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看 Redis 是否启动</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上命令将打开以下终端</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>127.0.0.1 是本机 IP ，6379 是 redis 服务端口。现在我们输入 PING 命令。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token function">ping</span>PONG<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>证明已经成功安装 Redis！</p><h3 id="redis-连接方式"><a href="#redis-连接方式" class="headerlink" title="redis 连接方式"></a>redis 连接方式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-cli <span class="token parameter variable">-h</span> <span class="token punctuation">{</span>host<span class="token punctuation">}</span> <span class="token parameter variable">-p</span> <span class="token punctuation">{</span>port<span class="token punctuation">}</span> <span class="token parameter variable">-a</span> <span class="token punctuation">{</span>password<span class="token punctuation">}</span><span class="token comment"># eg：</span>redis-cli <span class="token parameter variable">-h</span> <span class="token number">127.0</span>.0.1 <span class="token parameter variable">-p</span> <span class="token number">6379</span> <span class="token parameter variable">-a</span> <span class="token string">"mypass"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用安装包编译安装"><a href="#使用安装包编译安装" class="headerlink" title="使用安装包编译安装"></a>使用安装包编译安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://download.redis.io/releases/redis-5.0.4.tar.gz<span class="token function">tar</span> <span class="token parameter variable">-xzvf</span> redis-4.0.9.tar.gz<span class="token builtin class-name">cd</span> redis-4.0.9/ll<span class="token function">make</span><span class="token comment"># 下载最新稳定版 6.2.1</span><span class="token function">wget</span> https://download.redis.io/releases/redis-6.2.1.tar.gz<span class="token function">tar</span> xzf redis-6.2.1.tar.gz<span class="token builtin class-name">cd</span> redis-6.2.1<span class="token function">make</span><span class="token comment"># 启动 redis 服务端</span>src/redis-erver<span class="token comment"># 使用 redis 客户端作为测试</span>src/redis-cli 或者 <span class="token builtin class-name">cd</span> src <span class="token operator">&amp;&amp;</span> ./redis-cli<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装-phpredis-扩展"><a href="#安装-phpredis-扩展" class="headerlink" title="安装 phpredis 扩展"></a>安装 phpredis 扩展</h2><blockquote><p>可以参考这篇文章 <a href="https://learnku.com/articles/33412">Homestead 安装 PHP Redis 扩展</a></p></blockquote><ol><li>下载 phpredis 源代码</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~ <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> clone https://github.com/phpredis/phpredis.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>从源码编译安装</li></ol><blockquote><p>ubuntu 没有安装 phpize 可执行命令：sudo apt-get install php-dev 来安装 phpize</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~/phpredis <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>phpize <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>./configure <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span><span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>查看 <code>php.ini</code> 文件绝对路径</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">php <span class="token parameter variable">-i</span> <span class="token operator">|</span> <span class="token function">grep</span> php.ini<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="4"><li>需要在 <code>php.ini</code> 中加入一行 <code>extension=redis.so</code> 来启用 <code>redis</code> 扩展</li><li>重启 php 服务</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 本人使用的是 ubuntu18.04，php 版本为 7.2</span><span class="token function">service</span> php7.2-fpm status<span class="token function">service</span> php7.2-fpm restart<span class="token comment"># 查看是否安装成功了 redis 扩展</span>php <span class="token parameter variable">-m</span> <span class="token operator">|</span> <span class="token function">grep</span> redis<span class="token comment"># 查看扩展所在目录</span>php <span class="token parameter variable">-i</span> <span class="token operator">|</span> <span class="token function">grep</span> extension_dir<span class="token comment"># 安装完毕的 redis.so 扩展文件在 /usr/lib/php/20170718/ 目录下</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Cache </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 高频常用命令列表</title>
      <link href="posts/d7e52b6f.html"/>
      <url>posts/d7e52b6f.html</url>
      
        <content type="html"><![CDATA[<h1 id="Redis-的数据类型"><a href="#Redis-的数据类型" class="headerlink" title="Redis 的数据类型"></a>Redis 的数据类型</h1><h2 id="redis-cli-命令"><a href="#redis-cli-命令" class="headerlink" title="redis-cli 命令"></a>redis-cli 命令</h2><table><thead><tr><th>命令</th><th>说明</th><th>cli 命令示例</th></tr></thead><tbody><tr><td>del</td><td>删除 key</td><td>del key_name</td></tr><tr><td>exists</td><td>检查给定 key 是否存在</td><td>exists key_name</td></tr><tr><td>keys</td><td>查找所有符合给定模式 pattern 的 key</td><td>keys pattern</td></tr><tr><td>type</td><td>返回 key 所存储的值的类型</td><td>type key_name</td></tr><tr><td>expire</td><td>设置 key 的过期时间</td><td>expire key_name time_in_seconds</td></tr><tr><td>ttl</td><td>返回 key 的剩余过期时间</td><td>ttl key_name</td></tr><tr><td>save</td><td>RDB 持久化</td><td>save</td></tr><tr><td>info</td><td>Redis 服务器的各种信息和统计数值</td><td>inro [section]</td></tr><tr><td>shutdown</td><td>保存并停止所有客户端</td><td>shutdown [nosave] [save]</td></tr><tr><td>flushall</td><td>清空整个 redis 服务器的数据</td><td>flushall</td></tr><tr><td>flushdb</td><td>清空当前库中所有的 key</td><td>flushdb</td></tr><tr><td>select</td><td>切换到指定的数据库</td><td>select db_number</td></tr></tbody></table><h2 id="Redis-字段类型"><a href="#Redis-字段类型" class="headerlink" title="Redis 字段类型"></a>Redis 字段类型</h2><ul><li>字符串 String</li><li>散列/哈希 Hash</li><li>列表 List</li><li>无序集合 Set</li><li>可排序集合 Zset</li></ul><h3 id="字符串-String"><a href="#字符串-String" class="headerlink" title="字符串 String"></a>字符串 String</h3><blockquote><p>最大容量为 512M</p></blockquote><table><thead><tr><th>命令</th><th>说明</th><th>Cli 命令示例</th><th>PHP 写法</th></tr></thead><tbody><tr><td>set</td><td>赋值</td><td>set key value</td><td>$redis-&gt;set(‘key’, ‘value’);</td></tr><tr><td>setex</td><td>赋值并添加过期时间</td><td>setex key expire value</td><td>$redis-&gt;setex(‘key’, ‘expire’, ‘value’);</td></tr><tr><td>get</td><td>取值</td><td>get key</td><td>$redis-&gt;get(‘key’);</td></tr><tr><td>incr</td><td>递增数字</td><td>incr key</td><td>$redis-&gt;incr(‘int_key’);</td></tr><tr><td>incrby</td><td>增加指定的数字</td><td>incrby key increment</td><td>$redis-&gt;incrBy(‘int_key’, number);</td></tr><tr><td>decr</td><td>递减数字</td><td>decr key</td><td>$redis-&gt;decr(‘key1’);</td></tr><tr><td>decrby</td><td>减少指定的数字</td><td>decrby key decrement</td><td>$redis-&gt;decrBy(‘key1’, number);</td></tr><tr><td>incrbyfloat</td><td>增加指定浮点数</td><td>incrbyfloat key increment</td><td>$redis-&gt;incrByFloat(‘key1’, 1.5);</td></tr><tr><td>append</td><td>向尾部追加值</td><td>append key value</td><td>$redis-&gt;append(‘key’, ‘value2’);</td></tr><tr><td>strlen</td><td>获取字符串长度</td><td>strlen key</td><td>$redis-&gt;strlen(‘key’);</td></tr><tr><td>mset</td><td>同时设置多个 key 的值</td><td>mset key1 value1 [key2 value2 …]</td><td>$redis-&gt;mSet(array(‘key0’ =&gt; ‘value0’, ‘key1’ =&gt; ‘value1’));</td></tr><tr><td>mget</td><td>同时获取多个 key 的值</td><td>mget key1 [key2 …]</td><td>$redis-&gt;mGet(array(‘key1’, ‘key2’, ‘key3’));</td></tr></tbody></table><h3 id="散列-哈希-Hash"><a href="#散列-哈希-Hash" class="headerlink" title="散列/哈希 Hash"></a>散列/哈希 Hash</h3><blockquote><p>1、与 php 的 array 相似；2、可以保存多个 key-value 对，每个 k-v 都是字符串类型；3、最多 2^32-1 个字段。</p></blockquote><table><thead><tr><th>命令</th><th>说明</th><th>Cli 命令示例</th><th>PHP 写法</th></tr></thead><tbody><tr><td>hset</td><td>赋值</td><td>hset key field value</td><td>$redis-&gt;hSet(key, field, value);</td></tr><tr><td>hmset</td><td>赋值多个字段</td><td>hmset key field1 value1 [field2 values]</td><td>$redis-&gt;hMset(key, array(‘field1’ =&gt; ‘value1’, ‘field2’ =&gt; ‘value2’));</td></tr><tr><td>hget</td><td>取值</td><td>hset key field</td><td>$redis-&gt;hGet(key, field);</td></tr><tr><td>hmget</td><td>取多个字段的值</td><td>hmset key field1 [field2]</td><td>$redis-&gt;hmGet(key, array(‘field1’, ‘field2’));</td></tr><tr><td>hgetall</td><td>取所有字段的值</td><td>hgetall key</td><td>$redis-&gt;hGetAll(key);</td></tr><tr><td>hlen</td><td>获取字段的数量</td><td>hlen key</td><td>$redis-&gt;hLen(key);</td></tr><tr><td>hexists</td><td>判断字段是否存在</td><td>hexists key field</td><td>$redis-&gt;hExists(key, field);</td></tr><tr><td>hsetnx</td><td>当字段不存在时赋值</td><td>hsetnx key field value</td><td>$redis-&gt;hSetNx(key, field, value);</td></tr><tr><td>hincrby</td><td>增加数字</td><td>hincrby key field increment</td><td>$redis-&gt;hIncrBy(key, field, num);</td></tr><tr><td>hdel</td><td>删除字段</td><td>hdel key field</td><td>$redis-&gt;hDel(key, field);</td></tr><tr><td>hkeys</td><td>获取所有字段名</td><td>hkeys key</td><td>$redis-&gt;hKeys(key);</td></tr><tr><td>hvals</td><td>获取所有字段值</td><td>hvals key</td><td>$redis-&gt;hVals(key);</td></tr></tbody></table><h3 id="列表-List"><a href="#列表-List" class="headerlink" title="列表 List"></a>列表 List</h3><blockquote><p>1、实现方式为双向链表；2、用于存储一个有序的字符串列表；3、从队列两端添加和弹出元素；4、特别适合于做消息队列。</p></blockquote><table><thead><tr><th>命令</th><th>说明</th><th>Cli 命令示例</th><th>PHP 写法</th></tr></thead><tbody><tr><td>lpush</td><td>向列表左端添加元素</td><td>lpush key value</td><td>$redis-&gt;lPush(key, value);</td></tr><tr><td>rpush</td><td>向列表右端添加元素</td><td>rpush key value</td><td>$redis-&gt;rPush(key, value);</td></tr><tr><td>lpop</td><td>从列表左端弹出元素</td><td>lpop key</td><td>$redis-&gt;lPop(key);</td></tr><tr><td>rpop</td><td>从列表右端弹出元素</td><td>rpop key</td><td>$redis-&gt;rPop(key);</td></tr><tr><td>llen</td><td>获取列表中元素个数</td><td>llen key</td><td>$redis-&gt;lSize(key);</td></tr><tr><td>lrange</td><td>获取列表中某一片段的元素</td><td>lrange key start stop</td><td>$redis-&gt;lRange(key, start, end);</td></tr><tr><td>lrem</td><td>删除列表中指定的值</td><td>lrem key count value</td><td>$redis-&gt;lRem(key, value, count);</td></tr><tr><td>lindex</td><td>获取指定索引的元素值</td><td>lindex key index</td><td>$redis-&gt;lGet(key, index);</td></tr><tr><td>lset</td><td>设置指定索引的元素值</td><td>lset key index value</td><td>$redis-&gt;lSet(key, index, value);</td></tr><tr><td>ltrim</td><td>值保留列表指定片段</td><td>ltrim key start stop</td><td>$redis-&gt;lTrim(key, start, end);</td></tr><tr><td>linsert</td><td>向列表中插入元素</td><td>linsert key before/after existing_value value</td><td>$redis-&gt;lInsert(key, Redis::BEFORE, existing_value, value);</td></tr></tbody></table><h3 id="无序集合-Set"><a href="#无序集合-Set" class="headerlink" title="无序集合 Set"></a>无序集合 Set</h3><blockquote><p>1、集合中每个元素都是不同的；2、元素最多为 2^32-1；3、元素没有顺序</p></blockquote><table><thead><tr><th>命令</th><th>说明</th><th>Cli 命令示例</th><th>PHP 写法</th></tr></thead><tbody><tr><td>sadd</td><td>添加元素</td><td>sadd key value1 [value2 value3 …]</td><td>$redis-&gt;sAdd(‘key1’, ‘set1’);</td></tr><tr><td>srem</td><td>删除元素</td><td>srem key value2 [value2 value3 …]</td><td>$redis-&gt;sRem(‘key’, ‘set2’);</td></tr><tr><td>smembers</td><td>获得集合中所有元素</td><td>smembers key</td><td>$redis-&gt;sMembers(‘key’);</td></tr><tr><td>sismember</td><td>判断元素是否在集合中</td><td>sismember key value</td><td>$redis-&gt;slsMember(key, value);</td></tr><tr><td>sdiff</td><td>对集合做差集运算</td><td>sdiff key1 key2 [key3 …]</td><td>$redis-&gt;sDiff(key1, key2, key3);</td></tr><tr><td>sinter</td><td>对集合做交集运算</td><td>sinter key1 key2 [key3 …]</td><td>$redis-&gt;sInter(‘key1’, ‘key2’, ‘key3’);</td></tr><tr><td>sunion</td><td>对集合做并集运算</td><td>sunion key1 key2 [key3 …]</td><td>$redis-&gt;sUnion(‘key1’, ‘key2’, ‘key3’);</td></tr><tr><td>scard</td><td>获得集合中元素的个数</td><td>scard key</td><td>$redis-&gt;sCard(‘key1’);</td></tr><tr><td>sdiffstore</td><td>对集合做差集运算并将结果存储</td><td>sdiffstore destination key1 key2 [key3 …]</td><td>$redis-&gt;sDiffStore(‘output’, key1, key2, key3);</td></tr><tr><td>sinterstore</td><td>对集合做交集运算并将结果存储</td><td>sinterstore destination key1 key2 [key3 …]</td><td>$redis-&gt;sInterStore(‘output’, ‘key1’, ‘key2’, ‘key3’);</td></tr><tr><td>sunionstore</td><td>对集合做并集运算并将结果存储</td><td>sunionstore destination key1 key2 [key3 …]</td><td>$redis-&gt;sUnionStore(‘output’, ‘key1’, ‘key2’, ‘key3’);</td></tr><tr><td>srandmember</td><td>随机获取集合中的元素</td><td>srandmember key [count]</td><td>$redis-&gt;sRandMember(‘key1’, 2);</td></tr><tr><td>spop</td><td>随机弹出一个元素</td><td>spop key</td><td>$redis-&gt;sPop(‘key1’);</td></tr></tbody></table><h3 id="可排序集合-Zset"><a href="#可排序集合-Zset" class="headerlink" title="可排序集合 Zset"></a>可排序集合 Zset</h3><blockquote><p>1、集合是有序的；2、支持插入，删除，判断元素是否存在；3、可以获取分数最高/最低的前 N 个元素。</p></blockquote><table><thead><tr><th>命令</th><th>说明</th><th>Cli 命令示例</th><th>PHP 写法</th></tr></thead><tbody><tr><td>zadd</td><td>添加元素</td><td>zadd key score1 value1 [score2 value2 score3 value3 …]</td><td>$redis-&gt;zAdd(‘key’, 1, ‘val1’);</td></tr><tr><td>zscore</td><td>获取元素的分数</td><td>zscore key value</td><td>$redis-&gt;zScore(key, val2);</td></tr><tr><td>zrange</td><td>获取正序排名在某索引区间范围的元素</td><td>zrange key start stop [withscore]</td><td>$redis-&gt;zRange(‘key1’, 0, -1);</td></tr><tr><td>zrevrange</td><td>获取倒序排名在某索引区间范围的元素</td><td>zrevrange key start stop [withscore]</td><td>$redis-&gt;zRevRange(‘key1’, 0, -1);</td></tr><tr><td>zrangebyscore</td><td>获取指定分数范围内的元素</td><td>zrangebyscore key min max</td><td>$redis-&gt;zRangeByScore(key, start, end, array(withscores, limit));</td></tr><tr><td>zincrby</td><td>增加某个元素的分数</td><td>zcard key</td><td>$redis-&gt;zSize(‘key’);</td></tr><tr><td>zcount</td><td>获取指定分数范围内的元素个数</td><td>zcount key min max</td><td>$redis-&gt;zCount(key, start, end);</td></tr><tr><td>zrem</td><td>删除一个或多个元素</td><td>zrem key value1 [value2 …]</td><td>$redis-&gt;zDelete(‘key’, ‘val2’);</td></tr><tr><td>zremrangebyrank</td><td>按照排名索引区间范围删除元素</td><td>zremrangebyrank key start stop</td><td>$redis-&gt;zRemRangeByRank(‘key’, 0, 1);</td></tr><tr><td>zremrangebyscore</td><td>按照分数范围删除元素</td><td>zremrangebyscore key min max</td><td>$redis-&gt;zRemRangeByScore(‘key’, 0, 3);</td></tr><tr><td>zrank</td><td>获取正序排序的元素的排名</td><td>zrank key value</td><td>$redis-&gt;zRank(key, value);</td></tr><tr><td>zrevrank</td><td>获取逆序排序的元素的排名</td><td>zrevrank key value</td><td>$redis-&gt;zRevRank(key, value);</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Cache </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>M1 安装 Homebrew 和 php 开发环境</title>
      <link href="posts/b12a8007.html"/>
      <url>posts/b12a8007.html</url>
      
        <content type="html"><![CDATA[<p>先安装 homebrew 方便下载软件。</p><blockquote><p>如果使用官网推荐的方式下载时提示以下错误信息时，则表示网络超时，建议直接使用源码包的形式安装</p></blockquote><p>错误信息如下所示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">curl: <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> Failed to connect to raw.githubusercontent.com port <span class="token number">443</span>: Connection refused<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="直接使用包安装"><a href="#直接使用包安装" class="headerlink" title="直接使用包安装"></a>直接使用包安装</h2><ol><li>进入 <a href="https://github.com/Homebrew/brew/tags">Homebrew 的 GitHub 仓库 tag 地址</a> 下载最新的 tag</li><li>根据系统选择下载：mac、windows 可以下载 zip 文件， linux 可以下载 tar.gz 的文件。</li><li>下载后解压。</li><li>在 <code>/usr/local</code> 文件夹下创建 <code>Homebrew</code> 文件夹，然后将解压后的内容全部复制到 <code>Homebrew</code> 文件夹下</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 我这里下载的是 brew-3.3.3 版本</span><span class="token comment"># 下载地址为：https://github.com/Homebrew/brew/archive/refs/tags/3.3.3.zip</span><span class="token function">wget</span> <span class="token builtin class-name">cd</span> /usr/local <span class="token operator">&amp;&amp;</span> <span class="token function">mkdir</span> Homebrew<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>建立软连接</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/local/Homebrew/bin/brew /usr/local/bin/brew<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="4"><li>进入本地 <code>Homebrew</code> 的存放路径，如果找不到的话，可以直接在 <code>terminal</code> 下输入以下命令</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入  usr/local 目录</span><span class="token builtin class-name">cd</span> /usr/local<span class="token comment"># 使用访达(finder) 打开当前目录</span><span class="token function">open</span> <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>查看 <code>/usr/local</code> 目录下是否有 <code>Homebrew</code> 文件夹（注意大小写），如果你发现没有 <code>Homebrew</code> 文件夹，则执行以下命令创建 <code>Homebrew</code> 文件夹</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /usr/local/Homebrew<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="6"><li><p>将第三步中解压后的内容全部复制到 <code>/usr/local/Homebrew</code> 目录</p></li><li><p>重启命令行窗口，输入 <code>brew</code> 命令，出现 brew 相关的 help 页面，即表示已经安装成功</p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># /usr/local/bin/brew -&gt; /usr/local/Homebrew/bin/brew</span><span class="token builtin class-name">cd</span> /usr/local/Homebrew <span class="token operator">&amp;&amp;</span> brew<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>敲击 <code>brew</code> 命令时，出现以下内容时，表示已经安装 Homebrew 成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Example usage:  brew search <span class="token punctuation">[</span>TEXT<span class="token operator">|</span>/REGEX/<span class="token punctuation">]</span>  brew info <span class="token punctuation">[</span>FORMULA<span class="token punctuation">..</span>.<span class="token punctuation">]</span>  brew <span class="token function">install</span> FORMULA<span class="token punctuation">..</span>.  brew update  brew upgrade <span class="token punctuation">[</span>FORMULA<span class="token punctuation">..</span>.<span class="token punctuation">]</span>  brew uninstall FORMULA<span class="token punctuation">..</span>.  brew list <span class="token punctuation">[</span>FORMULA<span class="token punctuation">..</span>.<span class="token punctuation">]</span>Troubleshooting:  brew config  brew doctor  brew <span class="token function">install</span> <span class="token parameter variable">--verbose</span> <span class="token parameter variable">--debug</span> FORMULAContributing:  brew create <span class="token punctuation">[</span>URL <span class="token punctuation">[</span>--no-fetch<span class="token punctuation">]</span><span class="token punctuation">]</span>  brew edit <span class="token punctuation">[</span>FORMULA<span class="token punctuation">..</span>.<span class="token punctuation">]</span>Further help:  brew commands  brew <span class="token builtin class-name">help</span> <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span>  <span class="token function">man</span> brew  https://docs.brew.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="8"><li>安装完成后，一定要下载一个软件测试下，比如下载 <code>wget</code></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token function">wget</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="9"><li>更换 brew 的下载源</li></ol><ul><li><p><a href="http://mirrors.ustc.edu.cn/help/brew.git.html">Homebrew 源</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 替换 USTC 镜像</span><span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--repo</span><span class="token variable">)</span></span>"</span><span class="token function">git</span> remote set-url origin https://mirrors.ustc.edu.cn/brew.git<span class="token comment"># 重置为官方地址</span><span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--repo</span><span class="token variable">)</span></span>"</span><span class="token function">git</span> remote set-url origin https://github.com/Homebrew/brew.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><a href="http://mirrors.ustc.edu.cn/help/homebrew-bottles.html">Homebrew Bottles 源</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 请在运行 brew 前设置环境变量 HOMEBREW_BOTTLE_DOMAIN ，值为 https://mirrors.ustc.edu.cn/homebrew-bottles</span><span class="token comment"># 对于 bash 用户</span><span class="token builtin class-name">echo</span> <span class="token string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles'</span> <span class="token operator">&gt;&gt;</span> ~/.bash_profile<span class="token builtin class-name">source</span> ~/.bash_profile<span class="token comment"># 对于 zsh 用户</span><span class="token builtin class-name">echo</span> <span class="token string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles'</span> <span class="token operator">&gt;&gt;</span> ~/.zshrc<span class="token builtin class-name">source</span> ~/.zshrc<span class="token comment"># 如果想恢复成官方 Homebrew Bottles 源，则直接注释掉 HOMEBREW_BOTTLE_DOMAIN 变量即可</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><a href="http://mirrors.ustc.edu.cn/help/homebrew-core.git.html">Homebrew Core 源</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 替换 USTC 镜像</span><span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--repo</span><span class="token variable">)</span></span>/Library/Taps/homebrew/homebrew-core"</span><span class="token function">git</span> remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git<span class="token comment"># 重置为官方地址</span><span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--repo</span><span class="token variable">)</span></span>/Library/Taps/homebrew/homebrew-core"</span><span class="token function">git</span> remote set-url origin https://github.com/Homebrew/homebrew-core<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><a href="http://mirrors.ustc.edu.cn/help/homebrew-cask.git.html">Homebrew Cask 源</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 替换为 USTC 镜像</span><span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--repo</span><span class="token variable">)</span></span>"</span>/Library/Taps/homebrew/homebrew-cask<span class="token function">git</span> remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git<span class="token comment"># 重置为官方地址</span><span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--repo</span><span class="token variable">)</span></span>"</span>/Library/Taps/homebrew/homebrew-cask<span class="token function">git</span> remote set-url origin https://github.com/Homebrew/homebrew-cask<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><a href="http://mirrors.ustc.edu.cn/help/homebrew-cask-versions.git.html">Homebrew Cask Versions 源</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 替换为 USTC 镜像</span><span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--repo</span><span class="token variable">)</span></span>"</span>/Library/Taps/homebrew/homebrew-cask-versions<span class="token function">git</span> remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask-versions.git<span class="token comment"># 重置为官方地址</span><span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--repo</span><span class="token variable">)</span></span>"</span>/Library/Taps/homebrew/homebrew-cask-versions<span class="token function">git</span> remote set-url origin https://github.com/Homebrew/homebrew-cask-versions.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="下载-php"><a href="#下载-php" class="headerlink" title="下载 php"></a>下载 php</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用 homebrew 搜索 php</span>brew search php<span class="token comment"># 使用 homebrew 安装 php7.4</span>brew <span class="token function">install</span> php@7.4<span class="token comment"># 安装之后的 php7.4 在 /opt/homebrew/etc/php/7.4/ 目录下</span><span class="token comment"># 因为 mac 下默认已经安装了 php7.3 ，如果你想首先使用 php7.4 版本时，需要执行</span><span class="token builtin class-name">echo</span> <span class="token string">'export PATH="/opt/homebrew/opt/php@7.4/bin:$PATH"'</span> <span class="token operator">&gt;&gt;</span> ~/.zshrc<span class="token builtin class-name">echo</span> <span class="token string">'export PATH="/opt/homebrew/opt/php@7.4/sbin:$PATH"'</span> <span class="token operator">&gt;&gt;</span> ~/.zshrc  <span class="token comment"># 如果想要让编译器找到 php7.4 那么还需要设置</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">LDFLAGS</span><span class="token operator">=</span><span class="token string">"-L/opt/homebrew/opt/php@7.4/lib"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">CPPFLAGS</span><span class="token operator">=</span><span class="token string">"-I/opt/homebrew/opt/php@7.4/include"</span><span class="token comment"># 写入 .zshrc 文件之后，需要执行 source 命令，重新加载配置信息</span><span class="token builtin class-name">source</span> ~/.zshrc<span class="token comment"># 可以使用 homebrew 来管理 php7.4 的服务状态，比如重启</span>brew services restart php@7.4<span class="token comment"># 如果不需要守护进程运行 php7.4 时，可以执行</span>/opt/homebrew/opt/php@7.4/sbin/php-fpm <span class="token parameter variable">--nodaemonize</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="切换多个-php-版本"><a href="#切换多个-php-版本" class="headerlink" title="切换多个 php 版本"></a>切换多个 php 版本</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 直接切换到 php7.4</span>brew <span class="token function">link</span> <span class="token parameter variable">--overwrite</span> php@7.4<span class="token comment"># 或者先取消链接</span>brew unlink php<span class="token comment"># 然后再链接</span>brew <span class="token function">link</span> php@7.4 <span class="token parameter variable">--force</span>php <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装-composer"><a href="#安装-composer" class="headerlink" title="安装 composer"></a>安装 composer</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token function">composer</span><span class="token comment"># 查看 composer 是否安装成功</span><span class="token function">composer</span> <span class="token parameter variable">-V</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>brew update</td><td>更新 Homebrew 自身</td></tr><tr><td>brew outdated</td><td>查看哪些安装包需要更新</td></tr><tr><td>brew upgrade</td><td>更新所有的包</td></tr><tr><td>brew upgrade $FORMULA</td><td>更新指定的包</td></tr><tr><td>brew cleanup</td><td>清理所有包的旧版本</td></tr><tr><td>brew cleanup $FORMULA</td><td>清理指定包的旧版本</td></tr><tr><td>brew cleanup -n</td><td>查看可清理的旧版本包，不执行实际操作</td></tr><tr><td>brew pin $FORMULA</td><td>锁定某个包</td></tr><tr><td>brew unpin $FORMULA</td><td>取消锁定</td></tr><tr><td>brew info $FORMULA</td><td>显示某个包的信息</td></tr><tr><td>brew info</td><td>显示安装了包数量，文件数量，和总占用空间</td></tr><tr><td>brew deps –installed –tree</td><td>查看已安装的包的依赖，树形显示</td></tr><tr><td>brew list</td><td>列出已安装的包</td></tr><tr><td>brew rm $FORMULA</td><td>删除某个包</td></tr><tr><td>brew install {package-name}</td><td>下载某个包</td></tr><tr><td>brew uninstall –force $FORMULA</td><td>删除所有版本</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Homebrew </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不花一分钱也可以用上 JetBrains 正版全家桶</title>
      <link href="posts/b3af447c.html"/>
      <url>posts/b3af447c.html</url>
      
        <content type="html"><![CDATA[<p>昨天，发现正在使用的 idea 要到期了，于是自己得马上去续约，免得影响自己的工作。</p><p>其实，我体验过不少的编辑器，Notepad++、Sublime Text、Apache NetBeans、Vim、Neovim、再就是大名鼎鼎的 Visual Studio Code 和巨强大的 JetBrains IDE。最终体验下来，在工作中的主要编辑器还是使用了 IDE。除了确实比较占用内存以外，没有其他可挑剔的。</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-dcae6b5c4b3eafc8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="价格不菲"></p><p><img src="/medias/loading.gif" data-original="https://img-blog.csdnimg.cn/img_convert/db879ed091daa570863771c473f61c70.png"></p><p>但是，要是直接去购买正版授权的话，价格确实不便宜，光一个 IDE 每月也要 24.9 美元，折合人民币小两百来块了，更别说全家桶了，要 77.9 美元。对于个人用户而言，估计一般都会出门右转去某宝上花个 9.9 买账号了。用确实可以用，但是就是不太稳定。</p><p>那么，有没有办法既想使用正版授权，又不想掏钱呢？还真有，<strong>开源开发许可证——JetBrains 通过为核心项目贡献者免费提供一套一流的开发者工具来支持非商业开源项目。</strong></p><p>别看他写的条件那么多，其实总结下来也就几点：</p><ol><li>你得有一个开源项目，且近期三个月有一定的活跃度，也就是在近三个月有定期提交代码就行。</li><li>在你的项目根目录下得有一个开源许可证，  项目为公开代码。</li><li>并且此仓库还不能是博客和一些示例代码。（这一点好像是今年加上的吧，去年我续约的时候，貌似都还没有这一点）</li></ol><p>具体满足条件可通过访问 <a href="https://www.jetbrains.com/zh-cn/community/opensource/#support">https://www.jetbrains.com/zh-cn/community/opensource/#support</a> 地址进行查看。</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-eff4930bcc518842.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="满足条件"></p><p>接下来讲如何申请这个免费的许可证。</p><h2 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h2><p>先访问 <a href="https://account.jetbrains.com/licenses">https://account.jetbrains.com/licenses</a> 地址，在 JetBrains 官网上注册一个账号。</p><h2 id="申请"><a href="#申请" class="headerlink" title="申请"></a>申请</h2><p>直接访问官方的申请地址 <a href="https://www.jetbrains.com/shop/eform/opensource">https://www.jetbrains.com/shop/eform/opensource</a></p><p>这个页面有三个模块，我们大致讲解一下。</p><ol><li>Do we know you?</li></ol><p><strong>No</strong>：之前从来没有申请过的，就选这个。<strong>Yes</strong>：之前弄过开源许可的，就直接选这个，然后填上自己的 License ID 即可。</p><ol start="2"><li>Tell us about your project</li></ol><p>这里就根据你项目的实际情况填写就行了，没有太多的滑头。</p><ol start="3"><li>Tell us about yourself</li></ol><ul><li>Email address: 比较重要的是这一项，这个邮箱要和你 GitHub 主页上的邮箱地址一致。</li><li>A link to your profile on GitHub,etc: 这个填你 GitHub 的主页地址即可。</li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-ebea11272aecf962.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="11.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-fb0937c35ce4e7aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="22.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-7330fa398a713aa3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="33.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-4bf839e7eda63932.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="44.png"></p><p>好了，填写完毕之后，直接提交就可以等着了。一般需要等两周左右，其实很快，基本上在一周内就会有邮件通知你具体的申请结果。</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-7b6bb5cd1b97bf7c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="55.png"></p><h2 id="通过申请后"><a href="#通过申请后" class="headerlink" title="通过申请后"></a>通过申请后</h2><p>申请之后，你要留心你的邮箱里面标题为 <strong>License Certificate for JetBrains</strong> 开头的邮件。然后你需要点击 <strong>Take me to my license(s)</strong> 这个许可证可以直接和你的 JetBrains 账号直接绑定，使用 IDE 的时候直接通过你的账号登录即可。你也可以直接下载离线激活码，通过激活码的形式去激活 IDE。这个就看自己的喜好了。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p><strong>在你的 GitHub 首页，需要把你的邮箱显示出来，</strong> 这里主要是为了方便审查人员判断这是否为你自己的账号。人家都免费给你使用了，肯定也是希望你不要太鬼呀。</p><p>另外这个许可证是可以反复申请的，每一次的有效期是一年。也就是说，第一次申请成功之后，如果第二年你的仓库还满足申请条件，那么你还可以继续申请。</p><p>感叹开源的伟大！感叹 JetBrains 的伟大！</p>]]></content>
      
      
      <categories>
          
          <category> 科普 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JetBrains </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何找到 Redis 的 Big key？</title>
      <link href="posts/fe9e07a8.html"/>
      <url>posts/fe9e07a8.html</url>
      
        <content type="html"><![CDATA[<h1 id="如何找到-Redis-的-Big-key？"><a href="#如何找到-Redis-的-Big-key？" class="headerlink" title="如何找到 Redis 的 Big key？"></a>如何找到 Redis 的 Big key？</h1><h2 id="1-什么是-Redis-的-Big-key？"><a href="#1-什么是-Redis-的-Big-key？" class="headerlink" title="1. 什么是 Redis 的 Big key？"></a>1. 什么是 Redis 的 Big key？</h2><p>Redis 的 Big key 是指占用内存较大的 key，通常是大 List、大 Set、大 Hash、大 String 等等。</p><p>比如说：</p><ul><li>字符串类型。如：超过 1 MB 的 key，就是一个 Big key。</li><li>非字符串类型。如：一个包含 100 万个元素的 List，占用内存 100 MB，那么这个 List 就是一个 Big key。</li></ul><p><strong>具体的规定根据每个公司的实际情况而定。</strong></p><h2 id="2-为什么要找到-Redis-的-Big-key？"><a href="#2-为什么要找到-Redis-的-Big-key？" class="headerlink" title="2. 为什么要找到 Redis 的 Big key？"></a>2. 为什么要找到 Redis 的 Big key？</h2><ul><li>内存空间不均匀：如果 Redis 的 Big key 占用了大量的内存，那么就会导致内存空间不均匀，从而导致 Redis 的内存不足。</li><li>查询时阻塞：因为 Redis 单线程特性，如果操作某个 Big key，耗时比较久，则后面的请求会被阻塞。</li><li>过期时阻塞：如果 Big key 设置了过期时间，当过期后，这个 key 会被删除，假如没有使用过期异步删除，就会存在阻塞 Redis 的可能性，并且慢查询中查不到（因为这个删除是内部循环事件）</li></ul><h2 id="3-如何找到-Redis-的-Big-key？"><a href="#3-如何找到-Redis-的-Big-key？" class="headerlink" title="3. 如何找到 Redis 的 Big key？"></a>3. 如何找到 Redis 的 Big key？</h2><h3 id="直接使用-redis-cli-命令，分析大致的情况"><a href="#直接使用-redis-cli-命令，分析大致的情况" class="headerlink" title="直接使用 redis-cli 命令，分析大致的情况"></a>直接使用 <code>redis-cli</code> 命令，分析大致的情况</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 我这里在第二个数据库上做的测试，因此需要指定数据库 `-n 2`</span>$ redis-cli <span class="token parameter variable">-p</span> <span class="token number">6379</span> <span class="token parameter variable">-n</span> <span class="token number">2</span> <span class="token parameter variable">--bigkeys</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>大致的结果如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Scanning the entire keyspace to find biggest keys as well as</span><span class="token comment"># average sizes per key type.  You can use -i 0.1 to sleep 0.1 sec</span><span class="token comment"># per 100 SCAN commands (not usually needed).</span><span class="token punctuation">[</span>00.00%<span class="token punctuation">]</span> Biggest <span class="token builtin class-name">set</span>    found so far <span class="token string">'"large_set_key"'</span> with <span class="token number">201</span> members<span class="token punctuation">[</span>00.00%<span class="token punctuation">]</span> Biggest list   found so far <span class="token string">'"large_list_key"'</span> with <span class="token number">201</span> items<span class="token punctuation">[</span>00.00%<span class="token punctuation">]</span> Biggest string found so far <span class="token string">'"large_string_key"'</span> with <span class="token number">5242880</span> bytes<span class="token punctuation">[</span>00.00%<span class="token punctuation">]</span> Biggest <span class="token builtin class-name">hash</span>   found so far <span class="token string">'"large_hash_key"'</span> with <span class="token number">201</span> fields<span class="token punctuation">[</span>00.00%<span class="token punctuation">]</span> Biggest zset   found so far <span class="token string">'"large_zset_key"'</span> with <span class="token number">201</span> members-------- summary -------<span class="token comment"># 一共扫描了 5 个 key</span>Sampled <span class="token number">5</span> keys <span class="token keyword">in</span> the keyspace<span class="token operator">!</span><span class="token comment"># 所有 key 的总长度是 71 字节，平均长度为 14.20 字节</span>Total key length <span class="token keyword">in</span> bytes is <span class="token number">71</span> <span class="token punctuation">(</span>avg len <span class="token number">14.20</span><span class="token punctuation">)</span>Biggest   list found <span class="token string">'"large_list_key"'</span> has <span class="token number">201</span> itemsBiggest   <span class="token builtin class-name">hash</span> found <span class="token string">'"large_hash_key"'</span> has <span class="token number">201</span> fieldsBiggest string found <span class="token string">'"large_string_key"'</span> has <span class="token number">5242880</span> bytesBiggest    <span class="token builtin class-name">set</span> found <span class="token string">'"large_set_key"'</span> has <span class="token number">201</span> membersBiggest   zset found <span class="token string">'"large_zset_key"'</span> has <span class="token number">201</span> members<span class="token comment"># 每一种 key 情况的总览，某种类型的 key 占用内存的百分比，平均大小</span><span class="token number">1</span> lists with <span class="token number">201</span> items <span class="token punctuation">(</span><span class="token number">20.00</span>% of keys, avg size <span class="token number">201.00</span><span class="token punctuation">)</span><span class="token number">1</span> hashs with <span class="token number">201</span> fields <span class="token punctuation">(</span><span class="token number">20.00</span>% of keys, avg size <span class="token number">201.00</span><span class="token punctuation">)</span><span class="token number">1</span> strings with <span class="token number">5242880</span> bytes <span class="token punctuation">(</span><span class="token number">20.00</span>% of keys, avg size <span class="token number">5242880.00</span><span class="token punctuation">)</span><span class="token number">0</span> streams with <span class="token number">0</span> entries <span class="token punctuation">(</span>00.00% of keys, avg size <span class="token number">0.00</span><span class="token punctuation">)</span><span class="token number">1</span> sets with <span class="token number">201</span> members <span class="token punctuation">(</span><span class="token number">20.00</span>% of keys, avg size <span class="token number">201.00</span><span class="token punctuation">)</span><span class="token number">1</span> zsets with <span class="token number">201</span> members <span class="token punctuation">(</span><span class="token number">20.00</span>% of keys, avg size <span class="token number">201.00</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-a06d75c4c7c12cef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="redis-cli 扫描 big key"></p><p>然后可以使用 <code>memory usage</code> 命令查看具体的内存占用情况：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">localhost:<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>MEMORY USAGE large_string_key<span class="token string">"6291520"</span>localhost:<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>MEMORY USAGE large_list_key<span class="token string">"2240"</span>localhost:<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>MEMORY USAGE large_set_key<span class="token string">"11264"</span>localhost:<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>MEMORY USAGE large_hash_key<span class="token string">"4269"</span>localhost:<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>MEMORY USAGE large_zset_key<span class="token string">"18968"</span>localhost:<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-fd87710c7404b132.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="通过代码脚本找到具体的-Big-key"><a href="#通过代码脚本找到具体的-Big-key" class="headerlink" title="通过代码脚本找到具体的 Big key"></a>通过代码脚本找到具体的 Big key</h3><p>详见代码。<a href="https://github.com/pudongping/golang-tutorial/blob/main/project/redis_big_key/big_key.go">源码地址</a></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> redis_big_key<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"io/ioutil"</span><span class="token string">"log"</span><span class="token string">"math/rand"</span><span class="token string">"strings"</span><span class="token string">"sync"</span><span class="token string">"time"</span><span class="token string">"github.com/go-redis/redis"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">NewRedisClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span>redis<span class="token punctuation">.</span>Client <span class="token punctuation">{</span>client <span class="token operator">:=</span> redis<span class="token punctuation">.</span><span class="token function">NewClient</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>redis<span class="token punctuation">.</span>Options<span class="token punctuation">{</span>Addr<span class="token punctuation">:</span>     <span class="token string">"localhost:6379"</span><span class="token punctuation">,</span>Password<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>DB<span class="token punctuation">:</span>       <span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">return</span> client<span class="token punctuation">}</span><span class="token comment">// GenerateRandomString 生成指定大小的随机字符串</span><span class="token keyword">func</span> <span class="token function">GenerateRandomString</span><span class="token punctuation">(</span>size <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> size <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">}</span>rand<span class="token punctuation">.</span><span class="token function">Seed</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>chars <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"</span><span class="token punctuation">)</span>result <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> chars<span class="token punctuation">[</span>rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// WriteBigKey 写入大 key</span><span class="token keyword">func</span> <span class="token function">WriteBigKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>start <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>client <span class="token operator">:=</span> <span class="token function">NewRedisClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 使用完毕后，关闭连接</span><span class="token keyword">defer</span> client<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> err <span class="token builtin">error</span><span class="token comment">// 写入字符串类型的键，大小为 5M</span>largeStringValue <span class="token operator">:=</span> <span class="token function">GenerateRandomString</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"large_string_key"</span><span class="token punctuation">,</span> largeStringValue<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"写入字符串类型的键失败，错误信息为：%s"</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 写入哈希类型的键，元素个数大于 200</span>hashData <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">var</span> hashLock sync<span class="token punctuation">.</span>RWMutex<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">200</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>field <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"field_%d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>value <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"value_%d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>hashLock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>hashData<span class="token punctuation">[</span>field<span class="token punctuation">]</span> <span class="token operator">=</span> valuehashLock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> err <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">HMSet</span><span class="token punctuation">(</span><span class="token string">"large_hash_key"</span><span class="token punctuation">,</span> hashData<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"写入哈希类型的键失败，错误信息为：%s"</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 写入列表类型的键，元素个数大于 200</span>listData <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">200</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>listData <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>listData<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"value_%d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> err <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">LPush</span><span class="token punctuation">(</span><span class="token string">"large_list_key"</span><span class="token punctuation">,</span> listData<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"写入列表类型的键失败，错误信息为：%s"</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 写入集合类型的键，元素个数大于 200</span>setData <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">200</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>setData <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>setData<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> err <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">SAdd</span><span class="token punctuation">(</span><span class="token string">"large_set_key2"</span><span class="token punctuation">,</span> setData<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"写入集合类型的键失败，错误信息为：%s"</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 写入有序集合类型的键，元素个数大于 200</span>zsetData <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>redis<span class="token punctuation">.</span>Z<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">200</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>zsetData <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>zsetData<span class="token punctuation">,</span> redis<span class="token punctuation">.</span>Z<span class="token punctuation">{</span>Score<span class="token punctuation">:</span>  <span class="token function">float64</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>Member<span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"value_%d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> err <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">ZAdd</span><span class="token punctuation">(</span><span class="token string">"large_zset_key"</span><span class="token punctuation">,</span> zsetData<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Err</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"写入有序集合类型的键失败，错误信息为：%s"</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"写入大 key 总耗时：%s"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// ScanBigKey 扫描大 key</span><span class="token comment">// maxMemory 单位为 b</span><span class="token keyword">func</span> <span class="token function">ScanBigKey</span><span class="token punctuation">(</span>maxMemory <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token punctuation">{</span><span class="token keyword">if</span> maxMemory <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span class="token keyword">var</span> cursor <span class="token builtin">uint64</span><span class="token keyword">var</span> keys <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span>client <span class="token operator">:=</span> <span class="token function">NewRedisClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> client<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>start <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>maxKeys <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">{</span><span class="token keyword">var</span> err <span class="token builtin">error</span>keys<span class="token punctuation">,</span> cursor<span class="token punctuation">,</span> err <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span>cursor<span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"扫描大 key 失败，错误信息为：%s"</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 检查每个键的内存占用情况</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> key <span class="token operator">:=</span> <span class="token keyword">range</span> keys <span class="token punctuation">{</span><span class="token comment">// memory 单位为 byte</span>memory<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">MemoryUsage</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"获取键 %s 的内存占用失败，错误信息为：%s"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 如果内存占用超过指定最大内存时，则打印出来</span><span class="token keyword">if</span> memory <span class="token operator">&gt;</span> maxMemory <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"键 %s 的内存占用为 %f MB"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token function">float64</span><span class="token punctuation">(</span>memory<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span>maxKeys <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>maxKeys<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 如果 cursor 为 0，说明已经遍历完成，退出循环</span><span class="token keyword">if</span> cursor <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">break</span><span class="token punctuation">}</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"扫描大 key 总耗时：%s"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> maxKeys<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">ClearKeys</span><span class="token punctuation">(</span>keys <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">==</span> <span class="token function">len</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span>start <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>client <span class="token operator">:=</span> <span class="token function">NewRedisClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">defer</span> client<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>pipe <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span>pipe<span class="token punctuation">.</span><span class="token function">Unlink</span><span class="token punctuation">(</span>keys<span class="token operator">...</span><span class="token punctuation">)</span><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">:=</span> pipe<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>log<span class="token punctuation">.</span><span class="token function">Fatalf</span><span class="token punctuation">(</span><span class="token string">"删除 key 失败，错误信息为：%s"</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"删除 key 总耗时：%s"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">WriteKeysToFile</span><span class="token punctuation">(</span>keys <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token number">0</span> <span class="token operator">==</span> <span class="token function">len</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span>content <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>keys<span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">WriteFile</span><span class="token punctuation">(</span><span class="token string">"./bigKey.txt"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0644</span><span class="token punctuation">)</span><span class="token keyword">return</span> err<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-如何优化-Redis-的-Big-key？"><a href="#4-如何优化-Redis-的-Big-key？" class="headerlink" title="4. 如何优化 Redis 的 Big key？"></a>4. 如何优化 Redis 的 Big key？</h2><h3 id="数据结构优化"><a href="#数据结构优化" class="headerlink" title="数据结构优化"></a>数据结构优化</h3><ul><li>拆分数据：将大 key 拆分为更小的键，这可以通过拆分数据结构或者对数据进行分片来实现。</li><li>选择合适的数据结构：使用更适合你数据和使用场景的数据结构，比如将列表（list）转换为集合（set）、哈希（hash）或有序集合（sorted set）等。</li></ul><h3 id="数据清理"><a href="#数据清理" class="headerlink" title="数据清理"></a>数据清理</h3><ul><li>定期清理过期数据：确保过期数据及时清理，避免无用数据占用空间。</li><li>删除不必要的数据：定期清理不再需要的数据，确保 Redis 中保留的数据时真正有用的。但是要注意的是：如果直接 del，可能会导致阻塞 Redis 服务。大致有以下处理方式：<ul><li>使用异步删除：使用 <code>unlink</code> 异步删除，可以避免阻塞 Redis 服务，但是会导致内存占用变大。</li><li>使用分批删除：将大量的删除操作分批进行，每次删除一部分，直到删除完毕。</li></ul></li></ul><h3 id="内存优化"><a href="#内存优化" class="headerlink" title="内存优化"></a>内存优化</h3><ul><li>内存淘汰策略：调整 Redis 的内存淘汰策略，比如设置 LRU（最近最少使用）策略来淘汰不常用的键。</li><li>内存优化配置：调整 Redis 的内存配置参数，比如适当调整 <code>maxmemory</code> 参数，避免内存超限问题。</li></ul><blockquote><p><a href="pudongping.github.io">原文地址</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 使用虚拟环境</title>
      <link href="posts/ddef4649.html"/>
      <url>posts/ddef4649.html</url>
      
        <content type="html"><![CDATA[<h1 id="Python-使用虚拟环境"><a href="#Python-使用虚拟环境" class="headerlink" title="Python 使用虚拟环境"></a>Python 使用虚拟环境</h1><p>Python 需要使用虚拟环境的主要原因包括：</p><ol><li>隔离项目依赖：虚拟环境允许您在不同的项目之间隔离依赖关系。这意味着您可以为每个项目创建一个独立的虚拟环境，以确保项目的依赖不会相互干扰。这对于开发多个项目或维护项目的不同版本非常重要，因为它可以防止依赖冲突。</li><li>版本管理：虚拟环境允许您在不同的项目中使用不同的 Python 版本。这对于需要支持不同 Python 版本的项目非常有用，因为您可以在不同的虚拟环境中安装和使用特定版本的 Python。</li><li>防止全局依赖污染：如果您在全局 Python 环境中安装依赖项，可能会导致全局依赖项的混乱，甚至可能破坏系统依赖项。虚拟环境将项目的依赖项隔离到项目本身的目录中，从而避免了这种情况。</li><li>管理依赖项：虚拟环境允许您在项目级别管理依赖项。您可以使用 pip 来安装、升级和卸载依赖项，而不会影响全局 Python 环境。</li><li>简化部署：使用虚拟环境，您可以轻松地将项目及其依赖项打包并部署到其他环境中，而不必担心依赖冲突或版本问题。</li></ol><h2 id="Pipenv"><a href="#Pipenv" class="headerlink" title="Pipenv"></a><a href="https://github.com/pypa/pipenv">Pipenv</a></h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 全局安装，如果只想在当前用户模式下安装，可添加参数 `--user`</span>pip3 <span class="token function">install</span> pipenv<span class="token comment"># 更新 pipenv</span>pip3 <span class="token function">install</span> <span class="token parameter variable">--user</span> <span class="token parameter variable">--upgrade</span> pipenv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看 python3 版本</span>python3 <span class="token parameter variable">--version</span><span class="token comment"># 假设是 Python 3.11.4</span><span class="token comment"># 指定使用 python 3.11.4 创建虚拟环境</span>pipenv <span class="token parameter variable">--python</span> <span class="token number">3.11</span>.4<span class="token comment"># 激活虚拟环境</span>pipenv shell<span class="token comment"># 退出当前虚拟环境</span><span class="token builtin class-name">exit</span><span class="token comment"># 删除当前虚拟环境</span>pipenv <span class="token parameter variable">--rm</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="下载依赖包"><a href="#下载依赖包" class="headerlink" title="下载依赖包"></a>下载依赖包</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载 Pipfile 文件中的所有包</span>pipenv <span class="token function">install</span><span class="token comment"># 安装 requests 插件包并加入到 Pipfile</span>pipenv <span class="token function">install</span> requests<span class="token comment"># 安装固定版本的 requests</span>pipenv <span class="token function">install</span> <span class="token assign-left variable">requests</span><span class="token operator">==</span><span class="token number">2.22</span>.0<span class="token comment"># 只安装开发环境才会使用到的包</span>pipenv <span class="token function">install</span> <span class="token punctuation">{</span>package-name<span class="token punctuation">}</span> <span class="token parameter variable">--dev</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="更新依赖包"><a href="#更新依赖包" class="headerlink" title="更新依赖包"></a>更新依赖包</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看所有需要更新的依赖</span>pipenv update <span class="token parameter variable">--outdated</span><span class="token comment"># 更新所有包的依赖项</span>pipenv update<span class="token comment"># 更新指定包的依赖项</span>pipenv update <span class="token punctuation">{</span>package-name<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="卸载依赖包"><a href="#卸载依赖包" class="headerlink" title="卸载依赖包"></a>卸载依赖包</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 卸载指定模块</span>pipenv uninstall <span class="token punctuation">{</span>package-name<span class="token punctuation">}</span><span class="token comment"># 卸载全部包</span>pipenv uninstall <span class="token parameter variable">--all</span><span class="token comment"># 卸载全部开发环境所需要依赖的包</span>pipenv uninstall --all-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 显示目录信息</span>pipenv <span class="token parameter variable">--where</span><span class="token comment"># 显示虚拟环境信息</span>pipenv <span class="token parameter variable">--venv</span><span class="token comment"># 显示 python 解释器信息</span>pipenv <span class="token parameter variable">--py</span><span class="token comment"># 查看当前安装的库及其依赖</span>pipenv graph<span class="token comment"># 检查安全漏洞</span>pipenv check<span class="token comment"># 生成 Pipfile.lock 文件</span>pipenv lock<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="requirements-txt"><a href="#requirements-txt" class="headerlink" title="requirements.txt"></a>requirements.txt</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将 Pipfile 和 Pipfile.lock 文件里面的包导出为 requirements.txt 文件</span>pipenv run pip freeze <span class="token operator">&gt;</span> requirements.txt<span class="token comment"># 或者</span>pipenv requirements <span class="token operator">&gt;</span> requirements.txt<span class="token comment"># 只使用 `pipenv install` 时会自动检测当前目录下的 requirements.txt 并生成 Pipfile 文件</span><span class="token comment"># 通过 requirements.txt 安装包</span>pipenv <span class="token function">install</span> <span class="token parameter variable">-r</span> requirements.txt<span class="token comment"># 只安装开发环境所需要的包</span>pipenv <span class="token function">install</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">--dev</span> requirements.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python3 </tag>
            
            <tag> Pip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>认识下 JWT</title>
      <link href="posts/22722346.html"/>
      <url>posts/22722346.html</url>
      
        <content type="html"><![CDATA[<h1 id="认识下-JWT"><a href="#认识下-JWT" class="headerlink" title="认识下 JWT"></a>认识下 JWT</h1><p><a href="https://jwt.io/">JWT</a> 是 JSON Web Token 的缩写，是一个非常轻巧的规范，这个规范允许我们使用 JWT 在用户和服务器之间传递安全可靠的信息。<br>JWT 由头部（header）、载荷（payload）与签名（signature）组成，一个 JWT 类似下面这样：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">{</span>    <span class="token string">"typ"</span><span class="token builtin class-name">:</span><span class="token string">"JWT"</span>,    <span class="token string">"alg"</span><span class="token builtin class-name">:</span><span class="token string">"HS256"</span><span class="token punctuation">}</span><span class="token punctuation">{</span>    <span class="token string">"iss"</span><span class="token builtin class-name">:</span><span class="token string">"http://localhost"</span>,    <span class="token string">"iat"</span>:1587000625,    <span class="token string">"exp"</span>:1618536625,    <span class="token string">"nbf"</span>:1587000625,    <span class="token string">"jti"</span><span class="token builtin class-name">:</span><span class="token string">"iCxsfo97UVUijjjP"</span>,    <span class="token string">"sub"</span>:1,    <span class="token string">"prv"</span><span class="token builtin class-name">:</span><span class="token string">"13e8d028b391f3b7b63f21933dbad458ff21072e"</span><span class="token punctuation">}</span>signature<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>头部声明了加密算法；</li><li>载荷中有两个比较重要的数据，<code>exp</code> 是过期时间，<code>sub</code> 是 JWT 的主体，这里就是用户的 id；<ul><li>aud（Audience）：受众，也就是接受 JWT 的一方。</li><li>exp（ExpiresAt）：所签发的 JWT 过期时间，过期时间必须大于签发时间。</li><li>jti（JWT Id）：JWT 的唯一标识。</li><li>iat（IssuedAt）：签发时间</li><li>iss（Issuer）：JWT 的签发者。</li><li>nbf（Not Before）：JWT 的生效时间，如果未到这个时间则为不可用。</li><li>sub（Subject）：主题</li></ul></li><li>最后的 signature 是由服务器进行的签名，保证了 token 不被篡改。</li></ul><p>signature 签名的生成公式示例如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">HMACSHA256<span class="token punctuation">(</span>  base64UrlEncode<span class="token punctuation">(</span>header<span class="token punctuation">)</span> + <span class="token string">"."</span> +  base64UrlEncode<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>,  secret<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>JWT 最后是通过 Base64 编码的，也就是说，它可以被翻译回原来的样子来的。所以不要在 JWT 中存放一些敏感信息。</p></blockquote><p>用户 id，过期时间等数据都保存在 Token 中了，所以并不需要将 Token 保存在服务器中，客户端请求的时候在 Header 中携带 Token，服务器获取 Token 后，进行 <code>base64_decode</code>  即可获取数据进行校验，由于已经有了签名，所以不用担心数据被篡改。</p><h3 id="Token-验证"><a href="#Token-验证" class="headerlink" title="Token 验证"></a>Token 验证</h3><p>有了 token 之后该如何验证 token 的有效性，并得到 token 对应的用户呢？其实原理很简单，Laravel 为我们准备好了 <code>auth</code> 这个中间件</p><ol><li>获取客户端提交的 token</li><li>检测 token 中的签名 signature 是否正确</li><li>判断 payload 数据中的 exp，是否已经过期</li><li>根据 payload 数据中的 sub，取数据库中验证用户是否存在</li><li>上述检测不正确，则抛出相应异常</li></ol><h3 id="安装-jwt-auth"><a href="#安装-jwt-auth" class="headerlink" title="安装 jwt-auth"></a>安装 jwt-auth</h3><p><a href="https://github.com/tymondesigns/jwt-auth">jwt-auth</a> 是 Laravel 和 lumen 的 JWT 组件，首先来安装一下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">composer</span> require tymon/jwt-auth<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装完成后，我们需要设置一下 JWT 的 secret，这个 secret 很重要，用于最后的签名，更换这个 secret 会导致之前生成的所有 token 无效。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">php artisan jwt:secret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以看到在 .env 文件中，增加了一行 <code>JWT_SECRET</code>。<br>修改 config/auth.php，将 <code>api guard</code> 的 <code>driver</code> 改为 <code>jwt</code>。</p><p>config/auth.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token string single-quoted-string">'guards'</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>    <span class="token string single-quoted-string">'web'</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>        <span class="token string single-quoted-string">'driver'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'session'</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'provider'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'users'</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'api'</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>        <span class="token string single-quoted-string">'driver'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'jwt'</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'provider'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'users'</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>user 模型需要继承 <code>Tymon\JWTAuth\Contracts\JWTSubject</code> 接口，并实现接口的两个方法 <code>getJWTIdentifier()</code> 和 <code>getJWTCustomClaims()</code>。</p><p>app\Models\User.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Models</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Auth</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Spatie<span class="token punctuation">\</span>Permission<span class="token punctuation">\</span>Traits<span class="token punctuation">\</span>HasRoles</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Tymon<span class="token punctuation">\</span>JWTAuth<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>JWTSubject</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Notifications<span class="token punctuation">\</span>Notifiable</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Foundation<span class="token punctuation">\</span>Auth<span class="token punctuation">\</span>User</span> <span class="token keyword">as</span> Authenticatable<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Auth<span class="token punctuation">\</span>MustVerifyEmail</span> <span class="token keyword">as</span> MustVerifyEmailTrait<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\</span>Contracts<span class="token punctuation">\</span>Auth<span class="token punctuation">\</span>MustVerifyEmail</span> <span class="token keyword">as</span> MustVerifyEmailContract<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span> <span class="token keyword">extends</span> <span class="token class-name">Authenticatable</span> <span class="token keyword">implements</span> <span class="token class-name">MustVerifyEmailContract</span><span class="token punctuation">,</span> JWTSubject    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getJWTIdentifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getJWTCustomClaims</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>getJWTIdentifier</code> 返回了 User 的 id，<code>getJWTCustomClaims</code> 是我们需要额外在 JWT 载荷中增加的自定义内容，这里返回空数组。打开 tinker，执行如下代码，尝试生成一个 token。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$user</span> <span class="token operator">=</span> <span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name static-context">Auth</span><span class="token operator">::</span><span class="token function">guard</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'api'</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>jwt-auth</code> 有两个重要的参数，可以在 .env 中进行设置</p><ul><li><code>JWT_TTL</code> 生成的 token 在多少分钟后过期，默认 60 分钟</li><li><code>JWT_REFRESH_TTL</code>   生成的 token，在多少分钟内，可以刷新获取一个新 token，默认 20160 分钟，14 天。</li></ul><p>这里需要理解一下 JWT 的过期和刷新机制，过期很好理解，超过了这个时间，token 就无效了。刷新时间一般比过期时间长，只要在这个刷新时间内，即使 token 过期了， 依然可以换取一个新的 token，以达到应用长期可用，不需要重新登录的目的。</p>]]></content>
      
      
      <categories>
          
          <category> 科普 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> JWT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>你愿意花半个小时时间得到一个终身受益的技能吗</title>
      <link href="posts/7c4e8ab6.html"/>
      <url>posts/7c4e8ab6.html</url>
      
        <content type="html"><![CDATA[<p>首先我们用 3 秒时间来闭目思考一下，半个小时我们可以做哪些事情？3 2 1 好，时间到。相信你已经有了你自己的答案，而今天我要给大家介绍的是可以用半个小时就能够快速掌握的一项技能：用双拼打字。</p><h2 id="什么是双拼？"><a href="#什么是双拼？" class="headerlink" title="什么是双拼？"></a>什么是双拼？</h2><blockquote><p>双拼是汉语拼音输入法的一种编码方案。相对于全拼而言，使用双拼输入汉字时只需输入一个代表声母的字母，一个代表韵母的字母，就可以打出任意一个中文字了。（摘抄自维基百科）</p></blockquote><p>听着还是有些懵？别慌，我举个例子就更好理解了。我们都知道汉字的拼音是由声母和韵母组合而成，比如说，「双拼」 这个词的完整拼音为「shuang pin」，假设我们不借助任何智能拼音输入法，我们用全拼将这个词打出来要按 6 + 3 = 9 次键盘。是不是还是有点费劲儿来着？好，此时我们就会想，既然我们都已经知道拼音是由声母和韵母组合而成，那么是不是就可以考虑用一些键位表示声母，一些键位表示韵母，打字的时候只需要将二者俩俩组合起来即可呢？事实上，真可以这么做，这就是双拼。以「shuang pin」 为例，假设键位 <code>u</code> 代表 <code>sh</code>、<code>l</code> 表示 <code>uang</code>、<code>p</code> 代表 <code>p</code>、<code>b</code> 代表 <code>in</code>，那么当我们想打「双拼」二字时，我们就只需要按「ulpb」这四个键位，按 4 次键盘即可，这相比原来按 9 次键盘还是高效了不少。</p><h2 id="给我一个使用双拼的理由？"><a href="#给我一个使用双拼的理由？" class="headerlink" title="给我一个使用双拼的理由？"></a>给我一个使用双拼的理由？</h2><p>如果你是文字工作者，选择双拼可以让你不用像以前一样高强度的大量击键，打字时，节奏更加齐整。（使用双拼打字的节奏类似：咚咚哒，咚咚哒……，全拼的节奏类似：咚哒、咚咚哒、哒哒……）</p><p>如果你是一个热爱尝试新鲜事物的人，那么学会双拼会让你又增加一项新技能。就像学霸针对一道数学题有好几种解法一样。</p><p>双拼虽不是某项基础生存必备能力，你不学并不会损失什么，但是它确实是一项你不需要花费多大努力就可以轻松学会的技能。不妨试试，看一看学会双拼能给你和你的生活带来多少变化。</p><h2 id="双拼和全拼各自优缺点？"><a href="#双拼和全拼各自优缺点？" class="headerlink" title="双拼和全拼各自优缺点？"></a>双拼和全拼各自优缺点？</h2><p>说到这个问题，我们先回顾一下日常打字时的流程：</p><ol><li>认读</li><li>输入拼音</li><li>翻页</li><li>选字</li></ol><p>根据以上的流程可看出，影响打字速度快慢主要取决于第二点和第三点。打一个字时，使用全拼，这个字的拼音长度有多少，那么则需要敲击多少次键位，而双拼永远固定的只需要敲击两次键位，这让击键的节奏更加齐整。打字时，适当的节奏可以让输出更加流畅。但是在选字阶段时，因为拼音打字重码率本身就比较高，比如当我们打 「yi」时，候选项就会出现很多个，这是全拼和双拼都会存在的痛点。但是不管全拼还是双拼都属于拼音打字，因此只要你会拼音，那么学习成本就不会太高。</p><h2 id="如何使用双拼打字？"><a href="#如何使用双拼打字？" class="headerlink" title="如何使用双拼打字？"></a>如何使用双拼打字？</h2><p>我们先抓住双拼的核心：基于拼音，用两个键位对应声母和韵母。打字时，先将原来的全拼拆分成声母部分和韵母部分，双拼的第一个键用来输入声母，第二个键用来输入韵母，总共敲击 2 次键位即可成字。</p><p>第一个键 —— 声母</p><ul><li>单声母：如q、w、r、t、y等等，这些直接与键盘上的按键相对应。</li><li>双声母：zh、ch、sh，使用某个单韵母的键与之对应，比如 zh-v、ch-i、sh-u。因为双拼的原则是第一个键为声母，所以用户如果在第一个键上按了韵母，那么一定就是需要转换的非单声母了。</li><li>无声母：有一些拼音没有声母，比如，「安」（an），由于双拼的原则是一定要用两个键输入一个字，不能把声母的位置空出来，所以必须给这种类型的拼音单独考虑。一般有两种处理方法：第一种是微软双拼等采用的，固定设定一个韵母键做「零声母」键来补全声母；第二种是小鹤双拼等采用的分情况考虑：1、如果是单声母，如：哦（o），连输两遍韵母（oo）。2、如果是双声母，如：爱（ai），直接打拼音（ai）。3、如果是两位以上的韵母，如：昂（ang），用韵母部分的第一个字符键补全声母，第二个键按非单韵母转换（ah）。（这里韵母 <code>ang</code> 映射的键位为 <code>h</code>）。</li></ul><p>第二个键 —— 韵母</p><ul><li>单韵母：如a、o、e、i等等，与单声母的处理方式一样，直接与键盘上的按键相对应。</li><li>其它的韵母：均由单声母的键与之对应。某些键还可以与多个韵母对应，如：以小鹤双拼为例 x-ia/ua。为什么可以这么设计呢？因为这些韵母都是互斥的，能与 <code>ia</code> 组合的声母一定不能与 <code>ua</code> 组合，反之亦然。如：花（hua），但是 <code>hia</code> 打不出字；家（jia），但是 <code>jua</code> 打不出字。</li></ul><p>举个例子，如果我们想要打「爱双拼」这三个字时：</p><ul><li>爱 ai —— 没有声母，韵母为非单韵母。小鹤双拼采用<strong>分情况考虑</strong>，因为韵母为两位，所以直接打拼音（ai）；微软双拼采用<strong>单独设定零声母键</strong>，微软双拼设定的零键为 <code>o</code>、韵母 <code>ai</code> 映射的键位为 <code>l</code>，所以为（ol）。</li><li>双 shuang —— 声母为双声母，韵母为非单韵母，则均需转换。以小鹤双拼为例，声母 <code>sh</code> 映射为 <code>u</code>，韵母 <code>uang</code> 映射为 <code>l</code> 所以为 <code>ul</code>。</li><li>拼 pin —— 声母为单声母，不用转换，韵母为非单韵母，需要转换。以小鹤双拼为例，声母 <code>p</code> 映射为 <code>p</code>，韵母 <code>in</code> 映射为 <code>b</code> 所以为 <code>pb</code>。</li></ul><h2 id="双拼方案有哪些？"><a href="#双拼方案有哪些？" class="headerlink" title="双拼方案有哪些？"></a>双拼方案有哪些？</h2><ul><li>常见的双拼方案：微软、智能ABC、加加、小鹤、搜狗、紫光、自然码……</li><li>不太常见的双拼方案：国标（中华人民共和国国家标准）、雅歌、徐氏……</li><li>爱好者双拼方案：小浪、大牛、星空……</li></ul><h2 id="为什么会有这么多不同的方案呢？"><a href="#为什么会有这么多不同的方案呢？" class="headerlink" title="为什么会有这么多不同的方案呢？"></a>为什么会有这么多不同的方案呢？</h2><p>双拼的输入概念是：将全拼拆分成声母部分和韵母部分，然后用一套规则去规定各个声韵母与各个键的对应关系，这是每一套方案都遵循的核心原则。那么，在这个核心概念的约束下，具体的对应关系就仁者见仁，智者见智了，每一个人都可以给自己制定一套规则。所以，就会有各种各样的双拼方案了。</p><h2 id="那么多方案，如何选定一套适合自己的双拼方案？"><a href="#那么多方案，如何选定一套适合自己的双拼方案？" class="headerlink" title="那么多方案，如何选定一套适合自己的双拼方案？"></a>那么多方案，如何选定一套适合自己的双拼方案？</h2><p>关于双拼方案的选择，你需要先确定你所用的平台、你所用的输入法是否支持该方案，且该方案是否还保持维护。不然你学会了某方案之后没法输入就比较尴尬啦！（在 2018 年的时候，我就了解过双拼，但由于那时我手机默认输入法不支持双拼，因此后面就不了了之了。）</p><p>目前<strong>主流</strong>的输入法基本上都会自带这些双拼方案：自然码双拼、微软双拼、搜狗双拼、小鹤双拼、拼音加加双拼、智能ABC。<strong>不同的双拼方案有不同的风格，没有绝对的孰优孰劣之分</strong>。</p><p>在所有的主流方案中，我个人最推荐的是小鹤双拼和自然码双拼。如果你是 iOS/MacOS 用户，这个推荐范围再缩窄到小鹤双拼这一种。除去这两种都是系统输入法的原生支持之外，主要还有以下原因：</p><p><img src="/medias/loading.gif" data-original="https://cdn.sspai.com/editor/u_/c9akdr5b34ta61ljn9k0.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="小鹤双拼方案"></p><p><img src="/medias/loading.gif" data-original="https://cdn.sspai.com/editor/u_/c9akdr5b34ta7netbujg.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="自然码双拼方案"></p><ul><li>这两种方案都避开了采用 <code>;</code> 键安放韵母。（如微软双拼、搜狗双拼、紫光双拼都将 <code>;</code> 键映射成了韵母 <code>ing</code>）这样破坏了我们常规拼音记忆思维。（标点符号就应该是标点符号键位。）</li><li>这两种方案都没有采用固定零声母方案。所谓「零声母」指的是将键盘上一个特定的键指定为零声母，搭配韵母键以输入纯韵母组成的字，如微软双拼中输入「安」为<code>oj</code>。小鹤和自然码将零声母设定成韵母的首字母，这样一来，双字母组成的纯韵母字可以与全拼完全一致，如「安」为<code>an</code>，单字母的纯韵母字双击按键即可，如「哦」为<code>oo</code>，降低了适应难度。</li></ul><p>在设计上，小鹤双拼脱胎于较为古老的自然码双拼，调整了部分韵母的位置，但基本上把使用频率较高的韵母放在了比较易于发力的食指和中指上。</p><p>之前在讨论全拼和双拼的优缺点时，说到过拼音打字时的重码率高，不像五笔输入法一样，可以做到「四码唯一」，适合盲打。那有没有办法可以做到拼音输入法和五笔输入法相结合，且也可以减少重码率呢？还真可以，那就是「小鹤音形」。学好了小鹤双拼之后很容易上手小鹤音形，因此，在众多双拼方案中，我最推荐的就是<strong>小鹤双拼</strong>。当然，选择适合自己的，才是最好的！</p><h2 id="双拼方案的练习"><a href="#双拼方案的练习" class="headerlink" title="双拼方案的练习"></a>双拼方案的练习</h2><h3 id="如何快速记忆键位？"><a href="#如何快速记忆键位？" class="headerlink" title="如何快速记忆键位？"></a>如何快速记忆键位？</h3><p>记忆某些事物时，一般我会先考虑理解优先，其次再「连连看」和「找不同」，最后再是死记硬背。下面我分享一下我通过<strong>十分钟左右的时间记完小鹤双拼方案键位</strong>的方法。</p><h4 id="声母"><a href="#声母" class="headerlink" title="声母"></a>声母</h4><ul><li>单声母：直接与键盘上的键位相对应；</li><li>三个双声母 zh-v、ch-i、sh-u 可以直接死记硬背；</li><li>零声母（拼音中全部是韵母时）：<ul><li>单韵母、三韵母时：韵母首字母 + 韵母所在键。如：啊 a-aa、哦 o-oo、额 e-ee、昂 ang-ah、鞥 eng-eg</li><li>双韵母时：直接打拼音。如：爱 ai-ai、安 an-an、傲 ao-ao、诶 ei-ei、嗯 en-en、耳 er-er、偶 ou-ou</li></ul></li></ul><h4 id="韵母"><a href="#韵母" class="headerlink" title="韵母"></a>韵母</h4><ul><li>先一起记忆 en、eng、ang、an 这四个韵母。 我们发现这几个韵母还是有一点儿对称的，刚好我们在使用键盘时，正确的指法是将左手食指放在 <code>f</code> 键上，右手食指放在 <code>j</code> 键上，这样 f-en、g-eng、h-ang、j-an 并且在按键盘的过程中，我们也可以发现从外往内韵母更长，如左手食指从左往右时 f-en、g-eng，右手食指从右往左时 j-an、h-ang；</li><li>然后一并记忆 s-iong/ong、l-iang、uang 同样你也可以发现，在正确的指法时，我们左手的无名指刚好就放在 <code>s</code> 键上，右手的无名指刚好放在 <code>l</code> 键上。且我们可以大致记忆以 <code>ong</code> 结尾的就是在 <code>s</code> 键上，以 <code>ang</code> 结尾的就是在 <code>l</code> 键上更进一步记忆。</li><li>其他的韵母，我是直接通过键位上的声母和韵母组成某些音来记忆的，因为声母键位在使用全拼时，我就会盲打，因此简单，现在就是要确定韵母键位，那就直接通过声母键位找韵母键位就可以更快上手了。接下来我一个一个讲解。<ul><li>q-iu ——我直接记忆「秋」的音，这样我就很快可以通过 <code>q</code> 找到 <code>iu</code></li><li>w-ei —— 同理「为」</li><li>r-uan —— 软</li><li>y-yun —— 晕</li><li>p-ie —— 撇</li><li>d-ai —— 呆</li><li>z-ou —— 走</li><li>c-ao —— 草</li><li>b-in —— 斌</li><li>n-iao —— 鸟</li><li>m-ian —— 面</li><li>t-ue/ve —— 这个无法直接组成拼音，可通过 ue 和 ve「长得像」来将二者记在一起</li><li>o-o/uo —— 这个我是直接通过「o」的读音「哦」来记忆的</li><li>k-ing/uai —— 这个我是通过英文单词 king 和 kuai（快）来记忆</li><li>x-ia/ua —— 这个我是通过 xia（虾），然后 ia 和 ua「长得像」来记忆</li><li>v-ui/v —— 这个我是直接通过「微」的读音来记忆的</li></ul></li></ul><p>以上是我的记忆方式，供各位参考。总之适合自己的方式才是最好的方式，只要能够记住就行。</p><h3 id="如何快速练习？"><a href="#如何快速练习？" class="headerlink" title="如何快速练习？"></a>如何快速练习？</h3><h4 id="可以通过一些练习站点来学习"><a href="#可以通过一些练习站点来学习" class="headerlink" title="可以通过一些练习站点来学习"></a>可以通过一些练习站点来学习</h4><p>这里推荐使用 <a href="https://api.ihint.me/shuang/">https://api.ihint.me/shuang/</a> 这个在线网站来学习，支持 17 种双拼方案，并且还有微信小程序版（可以搜索小程序「双拼学习」来使用）</p><p><img src="/medias/loading.gif" data-original="https://cdn.nlark.com/yuque/0/2023/png/26208023/1698650234532-d5f0ee18-85f1-4132-894b-7a212039c336.png?x-oss-process=image/resize,w_1500,limit_0"></p><h4 id="强化韵母练习"><a href="#强化韵母练习" class="headerlink" title="强化韵母练习"></a>强化韵母练习</h4><p>这个就像我们上学的时候暴力记单词一样，只要你一个动作重复的多了，你就自然而然的会记住，那么什么样的文字内容韵母重复率会比较高呢？那肯定就是得押韵嘛，比如如下</p><p>tm qk se dg yj yu （tian qing se deng yan yu）<br>er wo zd dg ni （er wo zai deng ni）<br>iv yj nn nn ug qi （chui yan niao niao sheng qi）<br>ge jl qm wj li （ge jiang qian wan li）<br>zd pk di uu hj li （zai ping di shu han li）<br>fh qm ic de pn yi （fang qian chao de piao yi）<br>jq dh wo ww yu jm ni fu bi （jiu dang wo wei yu jian ni fu bi）</p><p>因此通过打歌词或者押韵比较多的诗歌都是一个不错的选择。</p><h4 id="多练习"><a href="#多练习" class="headerlink" title="多练习"></a>多练习</h4><p>学以致用才有用，平时无论是聊天还是工作，都尽可能使用双拼。刚开始使用时肯定不是那么顺畅，这很正常，这篇文章我就是使用双拼写的，当然打字速度并没有我使用全拼快。但是，只要不断的用，那么肯定会熟能生巧。聊天时，如果记不太清键位，还可以将键位图设定为聊天背景。因为我使用的是「小鹤双拼」这里我提供一张小鹤双拼方案的壁纸供各位参考。</p><p><img src="/medias/loading.gif" data-original="https://cdn.nlark.com/yuque/0/2023/jpeg/26208023/1698653500731-34b243ec-7659-4dfa-bd90-339494be30e4.jpeg" alt="小鹤双拼1284×2778壁纸"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>学习肯定是痛苦的，但受益也是终身的。既然你都能够看到这里，那么我建议你还是坚持将双拼学会吧。之所以没有推荐学习五笔，那是因为学习五笔确实学习曲线比较陡峭，而双拼算是一个打字较快、学习曲线较平缓的一个折中方案了。希望没有浪费你的时间，也希望这篇文章能够给你带来帮助。</p><h2 id="关联阅读"><a href="#关联阅读" class="headerlink" title="关联阅读"></a>关联阅读</h2><ul><li><a href="https://zh.wikipedia.org/zh-hans/%E5%8F%8C%E6%8B%BC">双拼-维基百科</a></li><li><a href="https://sspai.com/post/72622">二〇二二年，来试试双拼输入法吧</a></li><li><a href="https://sspai.com/post/42667">让双拼不再是只属于少数人的输入方式</a></li><li><a href="https://sspai.com/post/56134">双拼输入法的进阶：小鹤音形</a></li></ul><p>我是 Alex，三观比五官更正，思想比套路更深的编程爱好者。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wise-locksmith PHP 互斥锁库</title>
      <link href="posts/1e08f87d.html"/>
      <url>posts/1e08f87d.html</url>
      
        <content type="html"><![CDATA[<h1 id="PHP-互斥锁库"><a href="#PHP-互斥锁库" class="headerlink" title="PHP 互斥锁库"></a>PHP 互斥锁库</h1><p><a href="https://github.com/pudongping/wise-locksmith">wise-locksmith</a> 是一个不局限于框架的互斥锁库，用于在高并发场景下提供 PHP 代码的互斥执行。<br>如果你是使用 <a href="https://hyperf.wiki/">hyperf</a> 框架，那么你可以直接使用 <a href="https://github.com/pudongping/hyperf-wise-locksmith">hyperf-wise-locksmith</a> 适配库。</p><h2 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h2><ul><li>PHP &gt;= 7.1 或以上版本</li><li>Redis &gt;= 2.6.12 或以上版本（如果需要使用到分布式锁或者红锁的情况下）</li><li>Swoole &gt;= 4.5 或以上版本 （如果需要使用协程级别的互斥锁的情况下）</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">composer</span> require pudongping/wise-locksmith<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">require</span> <span class="token string single-quoted-string">'vendor/autoload.php'</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Pudongping<span class="token punctuation">\</span>WiseLocksmith<span class="token punctuation">\</span>Locker</span><span class="token punctuation">;</span><span class="token variable">$redisHosts</span> <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span>        <span class="token string single-quoted-string">'host'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'127.0.0.1'</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'port'</span> <span class="token operator">=&gt;</span> <span class="token number">6379</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>        <span class="token string single-quoted-string">'host'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'127.0.0.1'</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'port'</span> <span class="token operator">=&gt;</span> <span class="token number">6380</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>        <span class="token string single-quoted-string">'host'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'127.0.0.1'</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'port'</span> <span class="token operator">=&gt;</span> <span class="token number">6381</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>        <span class="token string single-quoted-string">'host'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'127.0.0.1'</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'port'</span> <span class="token operator">=&gt;</span> <span class="token number">6382</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>        <span class="token string single-quoted-string">'host'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'127.0.0.1'</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'port'</span> <span class="token operator">=&gt;</span> <span class="token number">6383</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 如果需要使用到分布式锁或者红锁时，则需要初始化 redis 实例，否则可跳过这一步</span><span class="token variable">$redisInstances</span> <span class="token operator">=</span> <span class="token function">array_map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$redis</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>Redis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$redis</span><span class="token operator">-&gt;</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$v</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'port'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$redis</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token variable">$redisHosts</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 创建一个锁实例</span><span class="token variable">$locker</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Locker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="flock-文件锁"><a href="#flock-文件锁" class="headerlink" title="flock - 文件锁"></a>flock - 文件锁</h3><p>文件锁没有任何依赖。可通过可选的第 3 个参数参数设置锁的超时时间，单位：秒。（支持浮点型，比如 1.5 表示 1500ms 也就是最多会等待 1500ms，如果没有抢占到锁，那么则主动放弃抢锁，同时会抛出 <code>Pudongping\WiseLocksmith\Exception\TimeoutException</code> 异常）<br>设置成 <code>Pudongping\WiseLocksmith\Lock\File\Flock::INFINITE_TIMEOUT</code> 时，表示永不过期，则当前一直会阻塞式抢占锁，直到抢占到锁为止。默认值为：<code>Pudongping\WiseLocksmith\Lock\File\Flock::INFINITE_TIMEOUT</code>。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$path</span> <span class="token operator">=</span> <span class="token function">tempnam</span><span class="token punctuation">(</span><span class="token function">sys_get_temp_dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'wise-locksmith-flock-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$fileHandler</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$locker</span><span class="token operator">-&gt;</span><span class="token function">flock</span><span class="token punctuation">(</span><span class="token variable">$fileHandler</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 这里写你想保护的代码</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token variable">$res</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="redisLock-分布式锁"><a href="#redisLock-分布式锁" class="headerlink" title="redisLock - 分布式锁"></a>redisLock - 分布式锁</h3><p>需要依赖 <code>redis</code> 扩展。可通过可选的第 3 个参数设置锁的超时时间，单位：秒。（支持浮点型，比如 1.5 表示 1500ms 也就是最多会等待 1500ms，如果没有抢占到锁，那么则主动放弃抢锁，同时会抛出 <code>Pudongping\WiseLocksmith\Exception\TimeoutException</code> 异常）<br>默认值为：<code>5</code>。第 4 个参数为当前锁的具有唯一性的值，除非有特殊情况下需要设置，一般不需要设置。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$locker</span><span class="token operator">-&gt;</span><span class="token function">redisLock</span><span class="token punctuation">(</span><span class="token variable">$redisInstances</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'redisLock'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 这里写你想保护的代码</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token variable">$res</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="redLock-红锁（redis-集群环境时，分布式锁的实现）"><a href="#redLock-红锁（redis-集群环境时，分布式锁的实现）" class="headerlink" title="redLock - 红锁（redis 集群环境时，分布式锁的实现）"></a>redLock - 红锁（redis 集群环境时，分布式锁的实现）</h3><p>redLock 锁所需要设置的参数和 redisLock 锁除了第一个参数有区别以外，其他几个参数完全一致。redLock 锁是 redisLock 锁的集群实现。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$locker</span><span class="token operator">-&gt;</span><span class="token function">redLock</span><span class="token punctuation">(</span><span class="token variable">$redisInstances</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'redLock'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 这里写你想保护的代码</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token variable">$res</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="channelLock-协程级别的互斥锁"><a href="#channelLock-协程级别的互斥锁" class="headerlink" title="channelLock - 协程级别的互斥锁"></a>channelLock - 协程级别的互斥锁</h3><p>使用此锁时，需要安装 <code>swoole</code> 扩展。且版本必须大于等于 <code>4.5</code>。可通过可选的第 3 个参数设置锁的超时时间，单位：秒。（支持浮点型，比如 1.5 表示 1500ms 也就是最多会等待 1500ms，如果没有抢占到锁，那么则主动放弃抢锁，同时直接返回 <code>false</code> 表示没有抢占到锁）<br>设置成 <code>-1</code> 时，表示永不过期，则当前一直会阻塞式抢占锁，直到抢占到锁为止。默认值为：<code>-1</code>。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$locker</span><span class="token operator">-&gt;</span><span class="token function">channelLock</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'channelLock'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">// 这里写你想保护的代码</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token variable">$res</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 互斥锁 </tag>
            
            <tag> 锁 </tag>
            
            <tag> PHP </tag>
            
            <tag> Mutex </tag>
            
            <tag> Lock </tag>
            
            <tag> 红锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 GRPC</title>
      <link href="posts/8a377bf8.html"/>
      <url>posts/8a377bf8.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用-GRPC"><a href="#使用-GRPC" class="headerlink" title="使用 GRPC"></a>使用 GRPC</h1><h2 id="安装-protobuf"><a href="#安装-protobuf" class="headerlink" title="安装 protobuf"></a>安装 <a href="https://github.com/protocolbuffers/protobuf">protobuf</a></h2><blockquote><p><a href="https://grpc.io/docs/protoc-installation/">官方安装地址</a></p></blockquote><ul><li>第一种方式：Mac 下使用 Homebrew 安装</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> protobuf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>第二种方式：指定版本号安装</li></ul><blockquote><p>这里指定安装 <code>3.17.0</code> 版本</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">PROTOC_ZIP</span><span class="token operator">=</span>protoc-3.17.0-osx-x86_64.zip<span class="token function">curl</span> <span class="token parameter variable">-OL</span> https://github.com/protocolbuffers/protobuf/releases/download/v3.17.0/<span class="token variable">$PROTOC_ZIP</span><span class="token function">sudo</span> <span class="token function">unzip</span> <span class="token parameter variable">-o</span> <span class="token variable">$PROTOC_ZIP</span> <span class="token parameter variable">-d</span> /usr/local bin/protoc<span class="token function">sudo</span> <span class="token function">unzip</span> <span class="token parameter variable">-o</span> <span class="token variable">$PROTOC_ZIP</span> <span class="token parameter variable">-d</span> /usr/local <span class="token string">'include/*'</span><span class="token function">rm</span> <span class="token parameter variable">-f</span> <span class="token variable">$PROTOC_ZIP</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者使用如下方式安装</p><blockquote><p>这里示范的是安装 Linux 环境下的 protobuf</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载编译好的二进制包</span><span class="token function">wget</span> https://github.com/protocolbuffers/protobuf/releases/download/v3.17.0-rc1/protoc-3.17.0-rc-1-linux-x86_64.zip<span class="token comment"># 创建文件夹并解压缩到指定文件夹中</span><span class="token function">mkdir</span> protoc <span class="token operator">&amp;&amp;</span> <span class="token function">tar</span> <span class="token parameter variable">-xzvf</span> protoc-3.17.0-rc-1-linux-x86_64.zip <span class="token parameter variable">-C</span> protoc<span class="token comment"># 将解压后的文件移动到 /usr/local 文件夹下</span><span class="token function">sudo</span> <span class="token function">mv</span> protoc /usr/local/protoc<span class="token comment"># 创建软连接，方便在任意目录下使用 protoc 命令</span><span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/local/protoc/bin/protoc /usr/local/bin/protoc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第三种方式：编译安装</li></ul><blockquote><p>这里安装的是 <code>3.19.1</code> 版本</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载安装包</span><span class="token function">wget</span> https://github.com/protocolbuffers/protobuf/releases/download/v3.19.1/protobuf-all-3.19.1.zip<span class="token comment"># 解压缩</span><span class="token function">unzip</span> protobuf-all-3.19.1.zip <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> protobuf-3.19.1./configure<span class="token function">make</span><span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第四种方式：直接使用二进制文件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 根据你自己的系统下载对应的源码包 （比如我这里使用的是 mac book，我就要下载 osx 压缩包）</span><span class="token builtin class-name">cd</span> ~/go-tools <span class="token operator">&amp;&amp;</span> <span class="token function">wget</span> https://github.com/protocolbuffers/protobuf/releases/download/v3.19.1/protoc-3.19.1-osx-x86_64.zip<span class="token comment"># 解压缩</span><span class="token function">unzip</span> protoc-3.19.1-osx-x86_64.zip<span class="token comment"># 编辑配置文件</span><span class="token function">vim</span> ~/.zshrc<span class="token comment"># 写入以下配置信息</span><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token string">"/Users/pudongping/go-tools/protoc-3.19.1-osx-x86_64/bin:<span class="token environment constant">$PATH</span>"</span><span class="token builtin class-name">source</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>通过查看版本号，检查是否安装成功</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># protoc 是 Protobuf 的编译器，其主要功能是用于编译 .proto 文件</span>protoc <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>如果出现 <code>protoc: error while loading shared libraries: libprotobuf.so.15: cannot open shared object file: No such file or directory</code> 那么则需要在命令行中执行 <code>ldconfig</code> 命令后，再次运行即可成功。</p></blockquote><h2 id="安装-protoc-插件"><a href="#安装-protoc-插件" class="headerlink" title="安装 protoc 插件"></a>安装 protoc 插件</h2><blockquote><p>仅安装 protoc 编译器是不够的，针对不同的语言，还需要安装运行时的 protoc 插件，而对应 Go 语言的是 protoc-gen-go 插件。</p></blockquote><p>可以执行以下命令进行安装，但是<strong>不推荐</strong>，因为 protoc-gen-go 是需要与 proto 软件包版本相匹配的，必须要锁定版本号</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装的二进制文件在 `$GOPATH/bin` 目录下</span><span class="token comment"># 安装 protobuf 3.17.0 版本之后直接执行 go get -u github.com/golang/protobuf/protoc-gen-go 命令后，</span><span class="token comment"># 貌似安装的 protoc-gen-go 版本是 v1.27.1，但是指定 protoc-gen-go@v1.27.1 貌似又找不到 v1.27.1 的版本，不知为何，暂且记录下。</span><span class="token comment"># 在项目根目录下执行</span>go get <span class="token parameter variable">-u</span> github.com/golang/protobuf/protoc-gen-go@v1.3.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>推荐的安装方式如下：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">GIT_TAG</span><span class="token operator">=</span><span class="token string">"v1.3.3"</span>go get <span class="token parameter variable">-d</span> <span class="token parameter variable">-u</span> github.com/golang/protobuf/protoc-gen-go<span class="token function">git</span> <span class="token parameter variable">-C</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>go <span class="token function">env</span> GOPATH<span class="token variable">)</span></span>"</span>/src/github.com/golang/protobuf checkout <span class="token variable">$GIT_TAG</span>go <span class="token function">install</span> github.com/golang/protobuf/protoc-gen-go<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后还可以将其移动到 bin 目录下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> <span class="token variable">$GOPATH</span>/bin/protoc-gen-go /usr/local/go/bin/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装-grpc-go-库"><a href="#安装-grpc-go-库" class="headerlink" title="安装 grpc-go 库"></a>安装 grpc-go 库</h2><p>grpc-go 包含了 Go 的 grpc 库，我们可以使用如下方式安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go get <span class="token parameter variable">-u</span> google.golang.org/grpc@v1.29.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果使用以上方式安装，发现无法安装（可能会被墙掉了），我们可以使用如下方式手动安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/grpc/grpc-go.git <span class="token variable">$GOPATH</span>/src/google.golang.org/grpc<span class="token function">git</span> clone https://github.com/golang/net.git <span class="token variable">$GOPATH</span>/src/golang.org/x/net<span class="token function">git</span> clone https://github.com/golang/text.git <span class="token variable">$GOPATH</span>/src/golang.org/x/text<span class="token function">git</span> clone https://github.com/google/go-genproto.git <span class="token variable">$GOPATH</span>/src/google.golang.org/genproto<span class="token builtin class-name">cd</span> <span class="token variable">$GOPATH</span>/src/go <span class="token function">install</span> google.golang.org/grpc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="生成-proto-文件（生成接口库）"><a href="#生成-proto-文件（生成接口库）" class="headerlink" title="生成 proto 文件（生成接口库）"></a>生成 proto 文件（生成接口库）</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 加载 protoc-gen-go 插件 生成 grpc 的 go 服务端/客户端</span><span class="token comment"># 注意：必须要先安装好 protoc-gen-go 插件</span><span class="token comment"># 这里将 .proto 文件写到 proto 目录，执行此命令后将会把对应的 .pb.go 文件也会生成到 proto 目录</span>protoc <span class="token parameter variable">--go_out</span><span class="token operator">=</span>plugins<span class="token operator">=</span>grpc:. ./proto/*.proto<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>-I</code> 参数：格式为 <code>-IPATH</code> 作用是指定 import 搜索的目录（也就是 Proto 文件中的 import 命令），可指定多个，编译时按照顺序查找，如果不指定则默认当前工作目录，比如：<code>-I.</code> 、<code>-I/usr/local</code> 、<code>-I$GOPATH/src</code></li><li><code>M</code> 参数：指定导入的 <code>.proto</code> 文件路径编译后对应的 golang 包名（不指定默认以 .proto 文件中 import 语句路径），格式为：Mfoo/bar.proto=quux/shme，则在生成、编译 Proto 时将所指定的包名替换为所要求的名字（如：foo/bar.proto 编译后为包名为 quux/shme）</li><li><code>--go_out</code>：设置所生成的 Go 代码输出的目录。该指令会加载 protoc-gen-go 插件，以达到生成 Go 代码的目的。生成的文件以 .pb.go 为文件后缀，这里的 <code>:</code> （冒号）有分隔符的作用，后跟命令所需要的参数集，这意味着把生成的 Go 代码输出到指向的 protoc 编译的当前目录。</li><li><code>plugins=plugin1+plugin2</code>：指定要加载的子插件列表。我们定义的 proto 文件是涉及了 RPC 服务的，而默认是不会生成 RPC 代码的，因此需要在 go_out 中给出 plugins 参数，将其传递给 protoc-gen-go 插件，即告诉编译器，请支持 RPC。</li></ul>]]></content>
      
      
      <categories>
          
          <category> RPC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RPC </tag>
            
            <tag> GRPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 合并多个 commit</title>
      <link href="posts/d05f7a67.html"/>
      <url>posts/d05f7a67.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git-合并多个-commit"><a href="#Git-合并多个-commit" class="headerlink" title="Git 合并多个 commit"></a>Git 合并多个 commit</h1><h2 id="查看提交历史-git-log"><a href="#查看提交历史-git-log" class="headerlink" title="查看提交历史 git log"></a>查看提交历史 <code>git log</code></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 最近的第 1 条</span>commit ddc9e34424e8764357d086ad103219fa2c87e2dd<span class="token comment"># 最近的第 2 条</span>commit 3cccd5d8696b91163b47a8be045e8bbf9c443ddd<span class="token comment"># 最近的第 3 条</span>commit d70ae2c4c1c6d2edd16c6b11a8e334663a3dade5<span class="token comment"># 最近的第 4 条</span>commit fed4fe30dbc89ccc7ae72b917b2a600ecf249d4e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="git-rebase"><a href="#git-rebase" class="headerlink" title="git rebase"></a>git rebase</h2><p>如果想要合并最近的 1 到最近的第 3 条，有两个方法：</p><ol><li>从 <code>HEAD</code> 版本开始往过去数 3 个版本，比如：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> rebase <span class="token parameter variable">-i</span> HEAD~3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>指定要合并的版本之前的一个版本号，比如：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 比如我想要将最近的 1 条 commit 和最近的第 3 条 commit 进行合并，那么</span><span class="token comment"># 我这里是需要写最近第 4 条 commit 的 commit_id `fed4fe30db` </span><span class="token comment"># fed4fe30db 不参与合并</span><span class="token function">git</span> rebase <span class="token parameter variable">-i</span> fed4fe30db<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="选取要合并的提交"><a href="#选取要合并的提交" class="headerlink" title="选取要合并的提交"></a>选取要合并的提交</h2><ol><li>执行了 <code>git rebase</code> 命令之后，会弹出一个窗口，比如大致如下：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pick 3cccd5d 对词库加上读写锁pick ddc9e34 debug<span class="token comment"># Rebase d70ae2c..ddc9e34 onto d70ae2c (2 commands)</span><span class="token comment">#</span><span class="token comment"># Commands:</span><span class="token comment"># p, pick &lt;commit&gt; = use commit</span><span class="token comment"># r, reword &lt;commit&gt; = use commit, but edit the commit message</span><span class="token comment"># e, edit &lt;commit&gt; = use commit, but stop for amending</span><span class="token comment"># s, squash &lt;commit&gt; = use commit, but meld into previous commit</span><span class="token comment"># f, fixup &lt;commit&gt; = like "squash", but discard this commit's log message</span><span class="token comment"># x, exec &lt;command&gt; = run command (the rest of the line) using shell</span><span class="token comment"># b, break = stop here (continue rebase later with 'git rebase --continue')</span><span class="token comment"># d, drop &lt;commit&gt; = remove commit</span><span class="token comment"># l, label &lt;label&gt; = label current HEAD with a name</span><span class="token comment"># t, reset &lt;label&gt; = reset HEAD to a label</span><span class="token comment"># m, merge [-C &lt;commit&gt; | -c &lt;commit&gt;] &lt;label&gt; [# &lt;oneline&gt;]</span><span class="token comment"># .       create a merge commit using the original merge commit's</span><span class="token comment"># .       message (or the oneline, if no original merge commit was</span><span class="token comment"># .       specified). Use -c &lt;commit&gt; to reword the commit message.</span><span class="token comment">#</span><span class="token comment"># These lines can be re-ordered; they are executed from top to bottom.</span><span class="token comment">#</span><span class="token comment"># If you remove a line here THAT COMMIT WILL BE LOST.</span><span class="token comment">#</span><span class="token comment"># However, if you remove everything, the rebase will be aborted.</span><span class="token comment">#</span><span class="token comment"># Note that empty commits are commented out</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>pick：正常选中</li><li>reword：选中，并且修改提交信息</li><li>edit：选中，rebase 时会暂停，允许你修改这个 commit</li><li>squash：选中，会将当前 commit 与上一个 commit 合并</li><li>fixup：与 squash 相同，但不会保存当前 commit 的提交信息</li><li>exec：执行其他 shell 命令</li></ul><ol start="2"><li>需要将 commit_id 前面的 <code>pick</code> 改为 <code>s</code> 或者 <code>squash</code> 之后保存并关闭文本编辑窗口，改完之后的内容如下：（这里仅仅展示了内容变动情况）</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pick 3cccd5d 对词库加上读写锁s ddc9e34 debug <span class="token comment"># 这一行做了改动</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>然后保存并退出，git 就会压缩提交历史，如果有冲突，则需要解决冲突，解决冲突的时候需要注意，保留最新的历史，不然我们的修改就丢弃了，修改之后要记得敲下面的命令</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token comment"># 确认 rebase</span><span class="token function">git</span> rebase <span class="token parameter variable">--continue</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你想放弃这次压缩的话，那么可以执行以下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 取消 rebase</span><span class="token function">git</span> rebase <span class="token parameter variable">--abort</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="4"><li>如果没有冲突，或者冲突已经解决，则会出现如下编辑窗口，比如：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pick 3cccd5d 对词库加上读写锁<span class="token comment"># This is a combination of 2 commits.</span><span class="token comment"># This is the 1st commit message:</span>对词库加上读写锁<span class="token comment"># This is the commit message #2:</span>debug<span class="token comment"># Please enter the commit message for your changes. Lines starting</span><span class="token comment"># with '#' will be ignored, and an empty message aborts the commit.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>输入 <code>:wq</code> 保存并退出，然后查看 <code>git log --oneline</code> 查看 <code>commit</code> 历史信息，你就会发现 commit 已经被合并了</li><li>强制推送到远程服务器 <code>git push -f</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 下解压缩文件</title>
      <link href="posts/1ee32f49.html"/>
      <url>posts/1ee32f49.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-下解压缩文件"><a href="#Linux-下解压缩文件" class="headerlink" title="Linux 下解压缩文件"></a>Linux 下解压缩文件</h1><p><strong>建议不要添加成 rar 的压缩文件，不然在服务器上面解压缩的时候很麻烦，可以直接添加成 zip 的压缩文件</strong></p><h2 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h2><p>优点：各系统平台都可以用，缺点：压缩率不是很高</p><p>zip 命令常用选项及含义</p><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-r</td><td>递归压缩目录，及将制定目录下的所有文件以及子目录全部压缩。</td></tr><tr><td>-m</td><td>将文件压缩之后，删除原始文件，相当于把文件移到压缩文件中。</td></tr><tr><td>-v</td><td>显示详细的压缩过程信息。</td></tr><tr><td>-q</td><td>在压缩的时候不显示命令的执行过程。</td></tr><tr><td>-压缩级别</td><td>压缩级别是从 1~9 的数字，-1 代表压缩速度更快，-9 代表压缩效果更好。</td></tr><tr><td>-u</td><td>更新压缩文件，即往压缩文件中添加新文件。</td></tr></tbody></table><p>unzip 命令常用选项及含义</p><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-d 目录名</td><td>将压缩文件解压到指定目录下。</td></tr><tr><td>-n</td><td>解压时并不覆盖已经存在的文件。</td></tr><tr><td>-o</td><td>解压时覆盖已经存在的文件，并且无需用户确认。</td></tr><tr><td>-v</td><td>查看压缩文件的详细信息，包括压缩文件中包含的文件大小、文件名以及压缩比等，但并不做解压操作。</td></tr><tr><td>-t</td><td>测试压缩文件有无损坏，但并不解压。</td></tr><tr><td>-x 文件列表</td><td>解压文件，但不包含文件列表中指定的文件。</td></tr></tbody></table><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 压缩 tt 目录为 zip 格式</span><span class="token function">zip</span> <span class="token parameter variable">-r</span> tt.zip tt<span class="token comment"># 解压缩</span><span class="token function">unzip</span> tt.zip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h2><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-c</td><td>创建压缩文件</td></tr><tr><td>-x</td><td>解开压缩文件</td></tr><tr><td>-t</td><td>查看压缩包内有哪些文件</td></tr><tr><td>-z</td><td>用Gzip压缩或解压</td></tr><tr><td>-j</td><td>用bzip2压缩或解压</td></tr><tr><td>-v</td><td>显示压缩或解压的过程</td></tr><tr><td>-f</td><td>目标文件名</td></tr><tr><td>-p</td><td>保留原始的权限与属性</td></tr><tr><td>-P</td><td>使用绝对路径来压缩</td></tr><tr><td>-C</td><td>指定解压到的目录</td></tr></tbody></table><p>优点：CPU 消耗少，缺点：仅仅是打包工具，不负责压缩</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 压缩 tt 目录为 tar 格式</span><span class="token function">tar</span> <span class="token parameter variable">-cvf</span> tt.tar tt<span class="token comment"># 解压缩</span><span class="token function">tar</span> <span class="token parameter variable">-xvf</span> tt.tar <span class="token parameter variable">-C</span> /home/alex/tt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="tar-gz"><a href="#tar-gz" class="headerlink" title="tar.gz"></a>tar.gz</h2><p>优点：CPU 占用少，压缩率很理想</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 压缩 tt 目录为 tar.gz 格式</span><span class="token function">tar</span> <span class="token parameter variable">-czvf</span> tt.tar.gz tt<span class="token comment"># 解压缩</span><span class="token function">tar</span> <span class="token parameter variable">-xzvf</span> tt.tar.gz<span class="token comment"># 解压缩到指定目录 /home/alex 目录下</span><span class="token function">tar</span> <span class="token parameter variable">-xzvf</span> tt.tar.gz <span class="token parameter variable">-C</span> /home/alex<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="tar-bz2"><a href="#tar-bz2" class="headerlink" title="tar.bz2"></a>tar.bz2</h2><p>优点：所有方式中压缩率最好，缺点：更加占用 CPU 和时间</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 压缩 tt 目录为 tar.bz2 格式</span><span class="token function">tar</span> <span class="token parameter variable">-cjvf</span> tt.tar.bz2 tt<span class="token comment"># 解压缩</span><span class="token function">tar</span> <span class="token parameter variable">-xjvf</span> tt.tar.bz2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> tar </tag>
            
            <tag> zip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 systemd 管理服务</title>
      <link href="posts/9a5708c9.html"/>
      <url>posts/9a5708c9.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用-systemd-管理服务"><a href="#使用-systemd-管理服务" class="headerlink" title="使用 systemd 管理服务"></a>使用 systemd 管理服务</h1><h2 id="编写-Service-脚本"><a href="#编写-Service-脚本" class="headerlink" title="编写 Service 脚本"></a>编写 Service 脚本</h2><p>Systemd 的 Service 配置在 <code>/etc/systemd/system/</code> 目录中，可以创建一个 <code>echo.service</code> 文件，实际项目应当改为对应的名称。编辑此文件，添加下列内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span><span class="token assign-left variable">Description</span><span class="token operator">=</span>Echo Http Server<span class="token assign-left variable">After</span><span class="token operator">=</span>network.target<span class="token assign-left variable">After</span><span class="token operator">=</span>syslog.target<span class="token punctuation">[</span>Service<span class="token punctuation">]</span><span class="token assign-left variable">Type</span><span class="token operator">=</span>simple<span class="token assign-left variable">LimitNOFILE</span><span class="token operator">=</span><span class="token number">65535</span><span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/usr/bin/php /opt/servers/echo/server.php<span class="token assign-left variable">ExecReload</span><span class="token operator">=</span>/bin/kill <span class="token parameter variable">-USR1</span> <span class="token variable">$MAINPID</span><span class="token assign-left variable">Restart</span><span class="token operator">=</span>always<span class="token punctuation">[</span>Install<span class="token punctuation">]</span><span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target graphical.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>After 指令约定了启动的顺序，必须在 network 和 syslog 启动后才启动 echo 服务</li><li>Service 中填写了应用程序的路径信息，请修改为实际项目对应的路径</li><li>Restart=always 表示如果进程挂掉会自动拉起</li><li>WantedBy 约定了在哪些环境下启动，multi-user.target graphical.target 表示在图形界面和命令行环境都会启动</li></ul><p>编写完成后需要 reload 守护进程使其生效</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl <span class="token parameter variable">--system</span> daemon-reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="管理服务"><a href="#管理服务" class="headerlink" title="管理服务"></a>管理服务</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动服务</span><span class="token function">sudo</span> systemctl start echo.service<span class="token comment"># reload 服务</span><span class="token function">sudo</span> systemctl reload echo.service<span class="token comment"># 关闭服务</span><span class="token function">sudo</span> systemctl stop echo.service<span class="token comment"># 查看服务状态</span><span class="token function">sudo</span> systemctl status echo.service<span class="token comment"># 查看所有的启动项</span><span class="token function">sudo</span> systemctl list-unit-files<span class="token comment"># 禁用开机启动</span><span class="token function">sudo</span> systemctl disable echo.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> systemd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何基于 PHP 搭建 GRPC 服务</title>
      <link href="posts/e4a23e35.html"/>
      <url>posts/e4a23e35.html</url>
      
        <content type="html"><![CDATA[<h1 id="PHP7-4-搭建-GRPC-客户端服务"><a href="#PHP7-4-搭建-GRPC-客户端服务" class="headerlink" title="PHP7.4 搭建 GRPC 客户端服务"></a>PHP7.4 搭建 GRPC 客户端服务</h1><blockquote><p>本地系统：MacBook M1 arm64<br>为了下载软件方便，统一采用 Homebrew 安装软件<br><strong>php 目前只能搭建 gRPC 客户端</strong>，详见 <a href="https://grpc.io/docs/languages/php/quickstart/">gRPC官方文档</a>，<br>不过你要是想使用 php 搭建 grpc 客户端和服务端，你可以使用 php 基于 swoole 的 <a href="https://hyperf.io/">hyperf框架</a><br>如果你想使用 hyperf 搭建 grpc 客户端和服务端，你可以参考我的另一个 demo 项目 <a href="https://github.com/pudongping/hyperf-grpc-demo">hyperf-grpc-demo</a><br>本文示例代码 <a href="https://github.com/pudongping/php-grpc-demo">php-grpc-demo</a></p></blockquote><h2 id="M1-下安装-php7-4-开发环境"><a href="#M1-下安装-php7-4-开发环境" class="headerlink" title="M1 下安装 php7.4 开发环境"></a>M1 下安装 php7.4 开发环境</h2><h3 id="下载-php"><a href="#下载-php" class="headerlink" title="下载 php"></a>下载 php</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用 homebrew 搜索 php</span>brew search php<span class="token comment"># 使用 homebrew 安装 php7.4</span>brew <span class="token function">install</span> php@7.4<span class="token comment"># 安装之后的 php7.4 在 /opt/homebrew/etc/php/7.4/ 目录下</span><span class="token comment"># 因为 mac 下默认已经安装了 php7.3 ，如果你想首先使用 php7.4 版本时，需要执行</span><span class="token builtin class-name">echo</span> <span class="token string">'export PATH="/opt/homebrew/opt/php@7.4/bin:$PATH"'</span> <span class="token operator">&gt;&gt;</span> ~/.zshrc<span class="token builtin class-name">echo</span> <span class="token string">'export PATH="/opt/homebrew/opt/php@7.4/sbin:$PATH"'</span> <span class="token operator">&gt;&gt;</span> ~/.zshrc  <span class="token comment"># 如果想要让编译器找到 php7.4 那么还需要设置</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">LDFLAGS</span><span class="token operator">=</span><span class="token string">"-L/opt/homebrew/opt/php@7.4/lib"</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">CPPFLAGS</span><span class="token operator">=</span><span class="token string">"-I/opt/homebrew/opt/php@7.4/include"</span><span class="token comment"># 写入 .zshrc 文件之后，需要执行 source 命令，重新加载配置信息</span><span class="token builtin class-name">source</span> ~/.zshrc<span class="token comment"># 可以使用 homebrew 来管理 php7.4 的服务状态，比如重启</span>brew services restart php@7.4<span class="token comment"># 如果不需要守护进程运行 php7.4 时，可以执行</span>/opt/homebrew/opt/php@7.4/sbin/php-fpm <span class="token parameter variable">--nodaemonize</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装-composer"><a href="#安装-composer" class="headerlink" title="安装 composer"></a>安装 composer</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token function">composer</span><span class="token comment"># 查看 composer 是否安装成功</span><span class="token function">composer</span> <span class="token parameter variable">-V</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装-GRPC-扩展"><a href="#安装-GRPC-扩展" class="headerlink" title="安装 GRPC 扩展"></a>安装 GRPC 扩展</h2><ul><li>安装 grpc 扩展</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pecl <span class="token function">install</span> grpc<span class="token comment"># 查看 grpc 扩展是否安装成功</span>php <span class="token parameter variable">-m</span> <span class="token operator">|</span> <span class="token function">grep</span> grpc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>安装 protobuf 扩展</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pecl <span class="token function">install</span> protobuf<span class="token comment"># 查看 protobuf 扩展是否安装成功</span>php <span class="token parameter variable">-m</span> <span class="token operator">|</span> <span class="token function">grep</span> protobuf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果提示报错，报错信息如下所示</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/opt/homebrew/Cellar/php@7.4/7.4.25/include/php/ext/pcre/php_pcre.h:25:10: fatal error: <span class="token string">'pcre2.h'</span> <span class="token function">file</span> not found<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以参考这条 <a href="https://github.com/swoole/swoole-src/issues/3926">issue</a> 去解决</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 我这里使用的是 php7.4 版本</span><span class="token comment"># pcre2 版本是 10.39</span><span class="token comment"># 因此我这里需要执行如下命令即可，需要注意我这里使用的是 m1 ，intel 芯片的 Mac homebrew 安装 php 的路径和 m1 芯片的路径不一致，需要按照你自己的实际路径去建立软连接</span><span class="token function">ln</span> <span class="token parameter variable">-s</span> /opt/homebrew/Cellar/pcre2/10.39/include/pcre2.h /opt/homebrew/Cellar/php@7.4/7.4.25/include/php/ext/pcre/pcre2.h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="生成-php-plugins-插件"><a href="#生成-php-plugins-插件" class="headerlink" title="生成 php-plugins 插件"></a>生成 php-plugins 插件</h2><blockquote><p>这里因为 grpc/grpc 这个包非常大，有可能下载会不成功，因此我已经将编译好的 <code>grpc_php_plugin</code> 二进制文件以及 <code>protoc</code> 二进制文件上传到了 <code>tools</code> 目录下<br>方便各位同学可以直接使用</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone <span class="token parameter variable">-b</span> v1.27.x https://github.com/grpc/grpc.git<span class="token comment"># 如果速度慢的话，可以考虑 gitee 提供的镜像</span><span class="token function">git</span> clone <span class="token parameter variable">-b</span> v1.27.x https://gitee.com/mirrors/grpc.git<span class="token comment"># 安装 grpc 在 github 上的其他依赖</span><span class="token function">git</span> submodule update <span class="token parameter variable">--init</span><span class="token comment"># 编译生成 grpc php 插件，生成 proto 文件时需要用到</span><span class="token comment"># 执行成功之后会提示</span><span class="token comment"># 比如我的生成之后提示了：[HOSTLD]  Linking /Users/pudongping/php-tools/grpc/bins/opt/grpc_php_plugin</span><span class="token comment"># 这里我们只编译了 php 的插件，如果你需要编译所有的插件，你需要执行 `make &amp;&amp; make install`</span><span class="token function">make</span> grpc_php_plugin<span class="token comment"># 生成的 grpc_php_plugin 插件在 `bins/opt/` 目录下</span><span class="token comment"># 并且还会自动生成 protoc 文件，在 `bins/opt/protobuf` 目录下</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行 <code>make grpc_php_plugin</code> 时， 如果提示错误如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>AUTOGEN<span class="token punctuation">]</span> Preparing protobufCan't <span class="token builtin class-name">exec</span> <span class="token string">"aclocal"</span><span class="token builtin class-name">:</span> No such <span class="token function">file</span> or directory at /opt/homebrew/Cellar/autoconf/2.71/share/autoconf/Autom4te/FileUtils.pm line <span class="token number">274</span>.autoreconf: error: aclocal failed with <span class="token builtin class-name">exit</span> status: <span class="token number">2</span>make: *** <span class="token punctuation">[</span>third_party/protobuf/configure<span class="token punctuation">]</span> Error <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>那么需要安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> automake<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><ul><li>项目初始化</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 先使用 composer 初始化项目</span><span class="token function">composer</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>安装 grpc composer 扩展包</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">composer</span> require grpc/grpc<span class="token function">composer</span> require google/protobuf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>使用 proto 文件生成 php 代码</li></ul><blockquote><p>以下命令在项目根目录下执行</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 当然你也可以将 protoc 二进制文件和 grpc_php_plugin 二进制文件移动到 `/usr/local/bin` 目录下，这样就不需要像我这样写绝对路径了</span><span class="token comment"># 不会有 client stub 类</span>/Users/pudongping/php-tools/grpc/bins/opt/protobuf/protoc <span class="token parameter variable">--php_out</span><span class="token operator">=</span>plugins<span class="token operator">=</span>grpc:./grpc ./proto/meet.proto<span class="token comment"># 会有 client stub 类，我这里需要生成 client stub 类</span>/Users/pudongping/php-tools/grpc/bins/opt/protobuf/protoc <span class="token parameter variable">--php_out</span><span class="token operator">=</span>./grpc <span class="token parameter variable">--grpc_out</span><span class="token operator">=</span>./grpc <span class="token parameter variable">--plugin</span><span class="token operator">=</span>protoc-gen-grpc<span class="token operator">=</span>/Users/pudongping/php-tools/grpc/bins/opt/grpc_php_plugin ./proto/meet.proto<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>如果你想运行我的这个 demo ，你需要先下载 composer 依赖</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 在项目根目录下执行</span><span class="token function">composer</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>你需要先启动服务端</p><blockquote><p><a href="https://github.com/pudongping/go-micro-demo">服务端代码</a></p></blockquote><p>然后再启动 php 客户端</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">php index.php<span class="token comment"># string(14) " 你好，Alex"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> RPC </tag>
            
            <tag> GRPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 redis 中通过 redis-cli 调试 lua 脚本</title>
      <link href="posts/81563347.html"/>
      <url>posts/81563347.html</url>
      
        <content type="html"><![CDATA[<h1 id="在-redis-中通过-redis-cli-调试-lua-脚本"><a href="#在-redis-中通过-redis-cli-调试-lua-脚本" class="headerlink" title="在 redis 中通过 redis-cli 调试 lua 脚本"></a>在 redis 中通过 redis-cli 调试 lua 脚本</h1><h2 id="假设我有如下一段-lua-脚本"><a href="#假设我有如下一段-lua-脚本" class="headerlink" title="假设我有如下一段 lua 脚本"></a>假设我有如下一段 lua 脚本</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$redis</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>Redis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$redis</span><span class="token operator">-&gt;</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'192.168.10.194'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$lua</span> <span class="token operator">=</span> <span class="token string heredoc-string"><span class="token delimiter symbol"><span class="token punctuation">&lt;&lt;&lt;</span>EOF</span>local k1 = KEYS[1]local k2 = KEYS[2]local v1 = redis.call('get', k1)local v2 = redis.call('get', k2)if v1 and v2 then    local v1ttl = redis.call('ttl', k1)    local v2ttl = redis.call('ttl', k2)    return {true, k1, v1, k2, v2, v1ttl, v2ttl, v1..v2}else    local now = tonumber(ARGV[1])    redis.call('hsetnx', 'hash_table', k1, now)    redis.call('hsetnx', 'hash_table', k2, now)    local hash_all = redis.call('hgetall', 'hash_table')    return {false, hash_all}end<span class="token delimiter symbol">EOF<span class="token punctuation">;</span></span></span><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$redis</span><span class="token operator">-&gt;</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$lua</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'age'</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第一种调试方式：使用-–eval-选项直接调试"><a href="#第一种调试方式：使用-–eval-选项直接调试" class="headerlink" title="第一种调试方式：使用 –eval 选项直接调试"></a>第一种调试方式：使用 –eval 选项直接调试</h2><p>先创建一个 <code>.lua</code> 脚本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@a72e6809fb18:/tmp<span class="token comment"># cat &gt; test.lua &lt;&lt;EOF</span> <span class="token builtin class-name">local</span> k1 <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token builtin class-name">local</span> k2 <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token builtin class-name">local</span> v1 <span class="token operator">=</span> redis.call<span class="token punctuation">(</span><span class="token string">'get'</span>, k1<span class="token punctuation">)</span> <span class="token builtin class-name">local</span> v2 <span class="token operator">=</span> redis.call<span class="token punctuation">(</span><span class="token string">'get'</span>, k2<span class="token punctuation">)</span> <span class="token keyword">if</span> v1 and v2 <span class="token keyword">then</span>     <span class="token builtin class-name">local</span> v1ttl <span class="token operator">=</span> redis.call<span class="token punctuation">(</span><span class="token string">'ttl'</span>, k1<span class="token punctuation">)</span>     <span class="token builtin class-name">local</span> v2ttl <span class="token operator">=</span> redis.call<span class="token punctuation">(</span><span class="token string">'ttl'</span>, k2<span class="token punctuation">)</span>     <span class="token builtin class-name">return</span> <span class="token punctuation">{</span>true, k1, v1, k2, v2, v1ttl, v2ttl, v1<span class="token punctuation">..</span>v2<span class="token punctuation">}</span> <span class="token keyword">else</span>     <span class="token builtin class-name">local</span> now <span class="token operator">=</span> tonumber<span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     redis.call<span class="token punctuation">(</span><span class="token string">'hsetnx'</span>, <span class="token string">'hash_table'</span>, k1, now<span class="token punctuation">)</span>     redis.call<span class="token punctuation">(</span><span class="token string">'hsetnx'</span>, <span class="token string">'hash_table'</span>, k2, now<span class="token punctuation">)</span>     <span class="token builtin class-name">local</span> hash_all <span class="token operator">=</span> redis.call<span class="token punctuation">(</span><span class="token string">'hgetall'</span>, <span class="token string">'hash_table'</span><span class="token punctuation">)</span>     <span class="token builtin class-name">return</span> <span class="token punctuation">{</span>false, hash_all<span class="token punctuation">}</span> end EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果 k1 和 k2 有值时</p><p><strong>注意：参数和值之间有一个英文逗号，并且英文逗号左右均有一个空格！</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@a72e6809fb18:/tmp<span class="token comment"># redis-cli --eval test.lua name age , 12345</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"name"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"alex"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"age"</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"18"</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token parameter variable">-1</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">70535</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token string">"alex18"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果 k1 和 k2 不存在时</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@a72e6809fb18:/tmp<span class="token comment"># redis-cli --eval test.lua name1 age1 , 12345</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"name1"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"1682404163"</span>   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"age1"</span>   <span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"1682404163"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通过增加-ldb-选项启用-Lua-调试器来调试"><a href="#通过增加-ldb-选项启用-Lua-调试器来调试" class="headerlink" title="通过增加 --ldb 选项启用 Lua 调试器来调试"></a>通过增加 <code>--ldb</code> 选项启用 Lua 调试器来调试</h3><blockquote><p>注意：使用 <code>--ldb</code> 选项后，执行到最后一步，数据会自动回滚，也就是不会被持久化到 redis 中。你可以观察到，执行到命令最后会有一行 <code>(Lua debugging session ended -- dataset changes rolled back)</code> 提示信息。</p></blockquote><p>使用 Redis 内置的 Lua 调试器来调试 Lua 脚本，可以查看变量和命令的结果输出。通过 <code>--ldb</code> 选项来启动一个调试会话，可以使用以下命令来控制调试过程：</p><ul><li>step: 执行当前行，并停在下一行。</li><li>continue: 继续执行直到遇到下一个断点或者脚本结束。</li><li>list: 显示当前行周围的源代码。</li><li>break: 设置或删除一个断点。你可以指定一个行号或者不指定任何参数来删除所有断点。</li><li>watch: 查看一个变量的值。你可以指定一个变量名或者不指定任何参数来查看所有变量。</li><li>trace: 查看脚本执行过程中调用的 Redis 命令。</li><li>quit: 退出调试会话。</li></ul><p>执行效果如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@a72e6809fb18:/tmp<span class="token comment"># redis-cli --ldb --eval test.lua name1 age1 , 12345</span>Lua debugging session started, please use:quit    -- End the session.restart -- Restart the script <span class="token keyword">in</span> debug mode again.<span class="token builtin class-name">help</span>    -- Show Lua script debugging commands.* Stopped at <span class="token number">1</span>, stop reason <span class="token operator">=</span> step over-<span class="token operator">&gt;</span> <span class="token number">1</span>   <span class="token builtin class-name">local</span> k1 <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>lua debugger<span class="token operator">&gt;</span> step* Stopped at <span class="token number">2</span>, stop reason <span class="token operator">=</span> step over-<span class="token operator">&gt;</span> <span class="token number">2</span>   <span class="token builtin class-name">local</span> k2 <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>lua debugger<span class="token operator">&gt;</span> step* Stopped at <span class="token number">4</span>, stop reason <span class="token operator">=</span> step over-<span class="token operator">&gt;</span> <span class="token number">4</span>   <span class="token builtin class-name">local</span> v1 <span class="token operator">=</span> redis.call<span class="token punctuation">(</span><span class="token string">'get'</span>, k1<span class="token punctuation">)</span>lua debugger<span class="token operator">&gt;</span> restartLua debugging session started, please use:quit    -- End the session.restart -- Restart the script <span class="token keyword">in</span> debug mode again.<span class="token builtin class-name">help</span>    -- Show Lua script debugging commands.* Stopped at <span class="token number">1</span>, stop reason <span class="token operator">=</span> step over-<span class="token operator">&gt;</span> <span class="token number">1</span>   <span class="token builtin class-name">local</span> k1 <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>lua debugger<span class="token operator">&gt;</span> step* Stopped at <span class="token number">2</span>, stop reason <span class="token operator">=</span> step over-<span class="token operator">&gt;</span> <span class="token number">2</span>   <span class="token builtin class-name">local</span> k2 <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>lua debugger<span class="token operator">&gt;</span> step* Stopped at <span class="token number">4</span>, stop reason <span class="token operator">=</span> step over-<span class="token operator">&gt;</span> <span class="token number">4</span>   <span class="token builtin class-name">local</span> v1 <span class="token operator">=</span> redis.call<span class="token punctuation">(</span><span class="token string">'get'</span>, k1<span class="token punctuation">)</span>lua debugger<span class="token operator">&gt;</span> step<span class="token operator">&lt;</span>redis<span class="token operator">&gt;</span> get name1<span class="token operator">&lt;</span>reply<span class="token operator">&gt;</span> NULL* Stopped at <span class="token number">5</span>, stop reason <span class="token operator">=</span> step over-<span class="token operator">&gt;</span> <span class="token number">5</span>   <span class="token builtin class-name">local</span> v2 <span class="token operator">=</span> redis.call<span class="token punctuation">(</span><span class="token string">'get'</span>, k2<span class="token punctuation">)</span>lua debugger<span class="token operator">&gt;</span> step<span class="token operator">&lt;</span>redis<span class="token operator">&gt;</span> get age1<span class="token operator">&lt;</span>reply<span class="token operator">&gt;</span> NULL* Stopped at <span class="token number">7</span>, stop reason <span class="token operator">=</span> step over-<span class="token operator">&gt;</span> <span class="token number">7</span>   <span class="token keyword">if</span> v1 and v2 <span class="token keyword">then</span>lua debugger<span class="token operator">&gt;</span> step* Stopped at <span class="token number">12</span>, stop reason <span class="token operator">=</span> step over-<span class="token operator">&gt;</span> <span class="token number">12</span>      <span class="token builtin class-name">local</span> now <span class="token operator">=</span> tonumber<span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>lua debugger<span class="token operator">&gt;</span> <span class="token builtin class-name">continue</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"name1"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"1682404163"</span>   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"age1"</span>   <span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"1682404163"</span><span class="token punctuation">(</span>Lua debugging session ended -- dataset changes rolled back<span class="token punctuation">)</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="再进一步，通过使用-redis-debug-函数打印调试信息"><a href="#再进一步，通过使用-redis-debug-函数打印调试信息" class="headerlink" title="再进一步，通过使用 redis.debug() 函数打印调试信息"></a>再进一步，通过使用 <code>redis.debug()</code> 函数打印调试信息</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@a72e6809fb18:/tmp<span class="token comment"># cat &gt; redis_debug.lua &lt;&lt;EOF</span> <span class="token builtin class-name">local</span> k1 <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> redis.debug<span class="token punctuation">(</span><span class="token string">'k1 =&gt; '</span>, k1<span class="token punctuation">)</span> <span class="token builtin class-name">local</span> k2 <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> redis.debug<span class="token punctuation">(</span><span class="token string">'k2 =&gt; '</span>, k1<span class="token punctuation">)</span> <span class="token builtin class-name">local</span> v1 <span class="token operator">=</span> redis.call<span class="token punctuation">(</span><span class="token string">'get'</span>, k1<span class="token punctuation">)</span> redis.debug<span class="token punctuation">(</span><span class="token string">'v1 =&gt; '</span>, type<span class="token punctuation">(</span>v1<span class="token punctuation">))</span> <span class="token builtin class-name">local</span> v2 <span class="token operator">=</span> redis.call<span class="token punctuation">(</span><span class="token string">'get'</span>, k2<span class="token punctuation">)</span> redis.debug<span class="token punctuation">(</span><span class="token string">'v2 =&gt; '</span>, type<span class="token punctuation">(</span>v2<span class="token punctuation">))</span> <span class="token keyword">if</span> v1 and v2 <span class="token keyword">then</span>      <span class="token builtin class-name">local</span> v1_ttl <span class="token operator">=</span> redis.call<span class="token punctuation">(</span><span class="token string">'ttl'</span>, k1<span class="token punctuation">)</span>     <span class="token builtin class-name">local</span> v2_ttl <span class="token operator">=</span> redis.call<span class="token punctuation">(</span><span class="token string">'ttl'</span>, k2<span class="token punctuation">)</span>     redis.debug<span class="token punctuation">(</span><span class="token string">'k1 =&gt; '</span>, v1, type<span class="token punctuation">(</span>v1_ttl<span class="token punctuation">))</span>     redis.debug<span class="token punctuation">(</span><span class="token string">'k2 =&gt; '</span>, v2, type<span class="token punctuation">(</span>v2_ttl<span class="token punctuation">))</span>     <span class="token builtin class-name">return</span> <span class="token punctuation">{</span>true, k1, v1, k2, v2, v1_ttl, v2_ttl, v1<span class="token punctuation">..</span>v2<span class="token punctuation">}</span> <span class="token keyword">else</span>     redis.debug<span class="token punctuation">(</span><span class="token string">'both v1 and v2 of not exists'</span>, v1, v2<span class="token punctuation">)</span>     <span class="token builtin class-name">local</span> now <span class="token operator">=</span> tonumber<span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     redis.call<span class="token punctuation">(</span><span class="token string">'hsetnx'</span>, <span class="token string">'hash_table'</span>, k1, now<span class="token punctuation">)</span>     redis.call<span class="token punctuation">(</span><span class="token string">'hsetnx'</span>, <span class="token string">'hash_table'</span>, k2, now<span class="token punctuation">)</span>     <span class="token builtin class-name">local</span> hash_all <span class="token operator">=</span> redis.call<span class="token punctuation">(</span><span class="token string">'hgetall'</span>, <span class="token string">'hash_table'</span><span class="token punctuation">)</span>     redis.debug<span class="token punctuation">(</span><span class="token string">'reset the value is ==&gt; '</span>, hash_all, <span class="token string">'hasl_all type is ==&gt; '</span>, type<span class="token punctuation">(</span>hash_all<span class="token punctuation">))</span>     <span class="token builtin class-name">return</span> <span class="token punctuation">{</span>false, hash_all<span class="token punctuation">}</span> end EOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调试</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@a72e6809fb18:/tmp<span class="token comment"># redis-cli --ldb --eval redis_debug.lua name age , 12345</span>Lua debugging session started, please use:quit    -- End the session.restart -- Restart the script <span class="token keyword">in</span> debug mode again.<span class="token builtin class-name">help</span>    -- Show Lua script debugging commands.* Stopped at <span class="token number">1</span>, stop reason <span class="token operator">=</span> step over-<span class="token operator">&gt;</span> <span class="token number">1</span>   <span class="token builtin class-name">local</span> k1 <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>lua debugger<span class="token operator">&gt;</span> step* Stopped at <span class="token number">2</span>, stop reason <span class="token operator">=</span> step over-<span class="token operator">&gt;</span> <span class="token number">2</span>   redis.debug<span class="token punctuation">(</span><span class="token string">'k1 =&gt; '</span>, k1<span class="token punctuation">)</span>lua debugger<span class="token operator">&gt;</span> step<span class="token operator">&lt;</span>debug<span class="token operator">&gt;</span> line <span class="token number">2</span>: <span class="token string">"k1 =&gt; "</span>, <span class="token string">"name"</span>* Stopped at <span class="token number">4</span>, stop reason <span class="token operator">=</span> step over-<span class="token operator">&gt;</span> <span class="token number">4</span>   <span class="token builtin class-name">local</span> k2 <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>lua debugger<span class="token operator">&gt;</span> step* Stopped at <span class="token number">5</span>, stop reason <span class="token operator">=</span> step over-<span class="token operator">&gt;</span> <span class="token number">5</span>   redis.debug<span class="token punctuation">(</span><span class="token string">'k2 =&gt; '</span>, k1<span class="token punctuation">)</span>lua debugger<span class="token operator">&gt;</span> step<span class="token operator">&lt;</span>debug<span class="token operator">&gt;</span> line <span class="token number">5</span>: <span class="token string">"k2 =&gt; "</span>, <span class="token string">"name"</span>* Stopped at <span class="token number">7</span>, stop reason <span class="token operator">=</span> step over-<span class="token operator">&gt;</span> <span class="token number">7</span>   <span class="token builtin class-name">local</span> v1 <span class="token operator">=</span> redis.call<span class="token punctuation">(</span><span class="token string">'get'</span>, k1<span class="token punctuation">)</span>lua debugger<span class="token operator">&gt;</span> step<span class="token operator">&lt;</span>redis<span class="token operator">&gt;</span> get name<span class="token operator">&lt;</span>reply<span class="token operator">&gt;</span> <span class="token string">"alex"</span>* Stopped at <span class="token number">8</span>, stop reason <span class="token operator">=</span> step over-<span class="token operator">&gt;</span> <span class="token number">8</span>   redis.debug<span class="token punctuation">(</span><span class="token string">'v1 =&gt; '</span>, type<span class="token punctuation">(</span>v1<span class="token punctuation">))</span>lua debugger<span class="token operator">&gt;</span> step<span class="token operator">&lt;</span>debug<span class="token operator">&gt;</span> line <span class="token number">8</span>: <span class="token string">"v1 =&gt; "</span>, <span class="token string">"string"</span>* Stopped at <span class="token number">10</span>, stop reason <span class="token operator">=</span> step over-<span class="token operator">&gt;</span> <span class="token number">10</span>  <span class="token builtin class-name">local</span> v2 <span class="token operator">=</span> redis.call<span class="token punctuation">(</span><span class="token string">'get'</span>, k2<span class="token punctuation">)</span>lua debugger<span class="token operator">&gt;</span> step<span class="token operator">&lt;</span>redis<span class="token operator">&gt;</span> get age<span class="token operator">&lt;</span>reply<span class="token operator">&gt;</span> <span class="token string">"18"</span>* Stopped at <span class="token number">11</span>, stop reason <span class="token operator">=</span> step over-<span class="token operator">&gt;</span> <span class="token number">11</span>  redis.debug<span class="token punctuation">(</span><span class="token string">'v2 =&gt; '</span>, type<span class="token punctuation">(</span>v2<span class="token punctuation">))</span>lua debugger<span class="token operator">&gt;</span> step<span class="token operator">&lt;</span>debug<span class="token operator">&gt;</span> line <span class="token number">11</span>: <span class="token string">"v2 =&gt; "</span>, <span class="token string">"string"</span>* Stopped at <span class="token number">13</span>, stop reason <span class="token operator">=</span> step over-<span class="token operator">&gt;</span> <span class="token number">13</span>  <span class="token keyword">if</span> v1 and v2 <span class="token keyword">then</span>lua debugger<span class="token operator">&gt;</span> step* Stopped at <span class="token number">14</span>, stop reason <span class="token operator">=</span> step over-<span class="token operator">&gt;</span> <span class="token number">14</span>      <span class="token builtin class-name">local</span> v1_ttl <span class="token operator">=</span> redis.call<span class="token punctuation">(</span><span class="token string">'ttl'</span>, k1<span class="token punctuation">)</span>lua debugger<span class="token operator">&gt;</span> step<span class="token operator">&lt;</span>redis<span class="token operator">&gt;</span> ttl name<span class="token operator">&lt;</span>reply<span class="token operator">&gt;</span> <span class="token parameter variable">-1</span>* Stopped at <span class="token number">15</span>, stop reason <span class="token operator">=</span> step over-<span class="token operator">&gt;</span> <span class="token number">15</span>      <span class="token builtin class-name">local</span> v2_ttl <span class="token operator">=</span> redis.call<span class="token punctuation">(</span><span class="token string">'ttl'</span>, k2<span class="token punctuation">)</span>lua debugger<span class="token operator">&gt;</span> step<span class="token operator">&lt;</span>redis<span class="token operator">&gt;</span> ttl age<span class="token operator">&lt;</span>reply<span class="token operator">&gt;</span> <span class="token number">68213</span>* Stopped at <span class="token number">16</span>, stop reason <span class="token operator">=</span> step over-<span class="token operator">&gt;</span> <span class="token number">16</span>      redis.debug<span class="token punctuation">(</span><span class="token string">'k1 =&gt; '</span>, v1, type<span class="token punctuation">(</span>v1_ttl<span class="token punctuation">))</span>lua debugger<span class="token operator">&gt;</span> step<span class="token operator">&lt;</span>debug<span class="token operator">&gt;</span> line <span class="token number">16</span>: <span class="token string">"k1 =&gt; "</span>, <span class="token string">"alex"</span>, <span class="token string">"number"</span>* Stopped at <span class="token number">17</span>, stop reason <span class="token operator">=</span> step over-<span class="token operator">&gt;</span> <span class="token number">17</span>      redis.debug<span class="token punctuation">(</span><span class="token string">'k2 =&gt; '</span>, v2, type<span class="token punctuation">(</span>v2_ttl<span class="token punctuation">))</span>lua debugger<span class="token operator">&gt;</span> step<span class="token operator">&lt;</span>debug<span class="token operator">&gt;</span> line <span class="token number">17</span>: <span class="token string">"k2 =&gt; "</span>, <span class="token string">"18"</span>, <span class="token string">"number"</span>* Stopped at <span class="token number">18</span>, stop reason <span class="token operator">=</span> step over-<span class="token operator">&gt;</span> <span class="token number">18</span>      <span class="token builtin class-name">return</span> <span class="token punctuation">{</span>true, k1, v1, k2, v2, v1_ttl, v2_ttl, v1<span class="token punctuation">..</span>v2<span class="token punctuation">}</span>lua debugger<span class="token operator">&gt;</span> step<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"name"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"alex"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"age"</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"18"</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token parameter variable">-1</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">68213</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token string">"alex18"</span><span class="token punctuation">(</span>Lua debugging session ended -- dataset changes rolled back<span class="token punctuation">)</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@a72e6809fb18:/tmp<span class="token comment"># redis-cli --ldb --eval redis_debug.lua name2 age2 , 55333</span>Lua debugging session started, please use:quit    -- End the session.restart -- Restart the script <span class="token keyword">in</span> debug mode again.<span class="token builtin class-name">help</span>    -- Show Lua script debugging commands.* Stopped at <span class="token number">1</span>, stop reason <span class="token operator">=</span> step over-<span class="token operator">&gt;</span> <span class="token number">1</span>   <span class="token builtin class-name">local</span> k1 <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>lua debugger<span class="token operator">&gt;</span> step* Stopped at <span class="token number">2</span>, stop reason <span class="token operator">=</span> step over-<span class="token operator">&gt;</span> <span class="token number">2</span>   redis.debug<span class="token punctuation">(</span><span class="token string">'k1 =&gt; '</span>, k1<span class="token punctuation">)</span>lua debugger<span class="token operator">&gt;</span> step<span class="token operator">&lt;</span>debug<span class="token operator">&gt;</span> line <span class="token number">2</span>: <span class="token string">"k1 =&gt; "</span>, <span class="token string">"name2"</span>* Stopped at <span class="token number">4</span>, stop reason <span class="token operator">=</span> step over-<span class="token operator">&gt;</span> <span class="token number">4</span>   <span class="token builtin class-name">local</span> k2 <span class="token operator">=</span> KEYS<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>lua debugger<span class="token operator">&gt;</span> step* Stopped at <span class="token number">5</span>, stop reason <span class="token operator">=</span> step over-<span class="token operator">&gt;</span> <span class="token number">5</span>   redis.debug<span class="token punctuation">(</span><span class="token string">'k2 =&gt; '</span>, k1<span class="token punctuation">)</span>lua debugger<span class="token operator">&gt;</span> step<span class="token operator">&lt;</span>debug<span class="token operator">&gt;</span> line <span class="token number">5</span>: <span class="token string">"k2 =&gt; "</span>, <span class="token string">"name2"</span>* Stopped at <span class="token number">7</span>, stop reason <span class="token operator">=</span> step over-<span class="token operator">&gt;</span> <span class="token number">7</span>   <span class="token builtin class-name">local</span> v1 <span class="token operator">=</span> redis.call<span class="token punctuation">(</span><span class="token string">'get'</span>, k1<span class="token punctuation">)</span>lua debugger<span class="token operator">&gt;</span> step<span class="token operator">&lt;</span>redis<span class="token operator">&gt;</span> get name2<span class="token operator">&lt;</span>reply<span class="token operator">&gt;</span> NULL* Stopped at <span class="token number">8</span>, stop reason <span class="token operator">=</span> step over-<span class="token operator">&gt;</span> <span class="token number">8</span>   redis.debug<span class="token punctuation">(</span><span class="token string">'v1 =&gt; '</span>, type<span class="token punctuation">(</span>v1<span class="token punctuation">))</span>lua debugger<span class="token operator">&gt;</span> step<span class="token operator">&lt;</span>debug<span class="token operator">&gt;</span> line <span class="token number">8</span>: <span class="token string">"v1 =&gt; "</span>, <span class="token string">"boolean"</span>* Stopped at <span class="token number">10</span>, stop reason <span class="token operator">=</span> step over-<span class="token operator">&gt;</span> <span class="token number">10</span>  <span class="token builtin class-name">local</span> v2 <span class="token operator">=</span> redis.call<span class="token punctuation">(</span><span class="token string">'get'</span>, k2<span class="token punctuation">)</span>lua debugger<span class="token operator">&gt;</span> step<span class="token operator">&lt;</span>redis<span class="token operator">&gt;</span> get age2<span class="token operator">&lt;</span>reply<span class="token operator">&gt;</span> NULL* Stopped at <span class="token number">11</span>, stop reason <span class="token operator">=</span> step over-<span class="token operator">&gt;</span> <span class="token number">11</span>  redis.debug<span class="token punctuation">(</span><span class="token string">'v2 =&gt; '</span>, type<span class="token punctuation">(</span>v2<span class="token punctuation">))</span>lua debugger<span class="token operator">&gt;</span> step<span class="token operator">&lt;</span>debug<span class="token operator">&gt;</span> line <span class="token number">11</span>: <span class="token string">"v2 =&gt; "</span>, <span class="token string">"boolean"</span>* Stopped at <span class="token number">13</span>, stop reason <span class="token operator">=</span> step over-<span class="token operator">&gt;</span> <span class="token number">13</span>  <span class="token keyword">if</span> v1 and v2 <span class="token keyword">then</span>lua debugger<span class="token operator">&gt;</span> step* Stopped at <span class="token number">20</span>, stop reason <span class="token operator">=</span> step over-<span class="token operator">&gt;</span> <span class="token number">20</span>      redis.debug<span class="token punctuation">(</span><span class="token string">'both v1 and v2 of not exists'</span>, v1, v2<span class="token punctuation">)</span>lua debugger<span class="token operator">&gt;</span> step<span class="token operator">&lt;</span>debug<span class="token operator">&gt;</span> line <span class="token number">20</span>: <span class="token string">"both v1 and v2 of not exists"</span>, false, <span class="token boolean">false</span>* Stopped at <span class="token number">21</span>, stop reason <span class="token operator">=</span> step over-<span class="token operator">&gt;</span> <span class="token number">21</span>      <span class="token builtin class-name">local</span> now <span class="token operator">=</span> tonumber<span class="token punctuation">(</span>ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>lua debugger<span class="token operator">&gt;</span> step* Stopped at <span class="token number">22</span>, stop reason <span class="token operator">=</span> step over-<span class="token operator">&gt;</span> <span class="token number">22</span>      redis.call<span class="token punctuation">(</span><span class="token string">'hsetnx'</span>, <span class="token string">'hash_table'</span>, k1, now<span class="token punctuation">)</span>lua debugger<span class="token operator">&gt;</span> step<span class="token operator">&lt;</span>redis<span class="token operator">&gt;</span> hsetnx hash_table name2 <span class="token number">55333</span><span class="token operator">&lt;</span>reply<span class="token operator">&gt;</span> <span class="token number">1</span>* Stopped at <span class="token number">23</span>, stop reason <span class="token operator">=</span> step over-<span class="token operator">&gt;</span> <span class="token number">23</span>      redis.call<span class="token punctuation">(</span><span class="token string">'hsetnx'</span>, <span class="token string">'hash_table'</span>, k2, now<span class="token punctuation">)</span>lua debugger<span class="token operator">&gt;</span> step<span class="token operator">&lt;</span>redis<span class="token operator">&gt;</span> hsetnx hash_table age2 <span class="token number">55333</span><span class="token operator">&lt;</span>reply<span class="token operator">&gt;</span> <span class="token number">1</span>* Stopped at <span class="token number">24</span>, stop reason <span class="token operator">=</span> step over-<span class="token operator">&gt;</span> <span class="token number">24</span>      <span class="token builtin class-name">local</span> hash_all <span class="token operator">=</span> redis.call<span class="token punctuation">(</span><span class="token string">'hgetall'</span>, <span class="token string">'hash_table'</span><span class="token punctuation">)</span>lua debugger<span class="token operator">&gt;</span> step<span class="token operator">&lt;</span>redis<span class="token operator">&gt;</span> hgetall hash_table<span class="token operator">&lt;</span>reply<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token string">"name1"</span>,<span class="token string">"1682404163"</span>,<span class="token string">"age1"</span>,<span class="token string">"1682404163"</span>,<span class="token string">"name2"</span>,<span class="token string">"55333"</span>,<span class="token string">"age2"</span>,<span class="token string">"55333"</span><span class="token punctuation">]</span>* Stopped at <span class="token number">25</span>, stop reason <span class="token operator">=</span> step over-<span class="token operator">&gt;</span> <span class="token number">25</span>      redis.debug<span class="token punctuation">(</span><span class="token string">'reset the value is ==&gt; '</span>, hash_all, <span class="token string">'hasl_all type is ==&gt; '</span>, type<span class="token punctuation">(</span>hash_all<span class="token punctuation">))</span>lua debugger<span class="token operator">&gt;</span> step<span class="token operator">&lt;</span>debug<span class="token operator">&gt;</span> line <span class="token number">25</span>: <span class="token string">"reset the value is ==&gt; "</span>, <span class="token punctuation">{</span><span class="token string">"name1"</span><span class="token punctuation">;</span> <span class="token string">"1682404163"</span><span class="token punctuation">;</span> <span class="token string">"age1"</span><span class="token punctuation">;</span> <span class="token string">"1682404163"</span><span class="token punctuation">;</span> <span class="token string">"name2"</span><span class="token punctuation">;</span> <span class="token string">"55333"</span><span class="token punctuation">;</span> <span class="token string">"age2"</span><span class="token punctuation">;</span> <span class="token string">"55333"</span><span class="token punctuation">}</span>, <span class="token string">"hasl_all type is ==&gt; "</span>, <span class="token string">"table"</span>* Stopped at <span class="token number">26</span>, stop reason <span class="token operator">=</span> step over-<span class="token operator">&gt;</span> <span class="token number">26</span>      <span class="token builtin class-name">return</span> <span class="token punctuation">{</span>false, hash_all<span class="token punctuation">}</span>lua debugger<span class="token operator">&gt;</span> step<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"name1"</span>   <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"1682404163"</span>   <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"age1"</span>   <span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"1682404163"</span>   <span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"name2"</span>   <span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">"55333"</span>   <span class="token number">7</span><span class="token punctuation">)</span> <span class="token string">"age2"</span>   <span class="token number">8</span><span class="token punctuation">)</span> <span class="token string">"55333"</span><span class="token punctuation">(</span>Lua debugging session ended -- dataset changes rolled back<span class="token punctuation">)</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第二种调试方式：使用-eval-redis-命令进行调试"><a href="#第二种调试方式：使用-eval-redis-命令进行调试" class="headerlink" title="第二种调试方式：使用 eval redis 命令进行调试"></a>第二种调试方式：使用 eval redis 命令进行调试</h2><blockquote><p>使用这种方式数据会被持久化，但是如果 lua 脚本比较复杂，那么命令行写起来就比较麻烦，不太直观。</p></blockquote><p>先进入 redis cli 中</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">redis-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行命令</p><pre class="line-numbers language-none"><code class="language-none">eval "local k1 = KEYS[1] \local k2 = KEYS[2] \local v1 = redis.call('get', k1) \local v2 = redis.call('get', k2) \if v1 and v2 then \    local v1ttl = redis.call('ttl', k1) \    local v2ttl = redis.call('ttl', k2) \    return {true, k1, v1, k2, v2, v1ttl, v2ttl, v1..v2} \else \    local now = tonumber(ARGV[1]) \    redis.call('hsetnx', 'hash_table', k1, now) \    redis.call('hsetnx', 'hash_table', k2, now) \    local hash_all = redis.call('hgetall', 'hash_table') \    return {false, hash_all} \end" 2 name age 78675<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>执行效果</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">eval</span> <span class="token string">"local k1 = KEYS[1] \local k2 = KEYS[2] \local v1 = redis.call('get', k1) \local v2 = redis.call('get', k2) \if v1 and v2 then \    local v1ttl = redis.call('ttl', k1) \    local v2ttl = redis.call('ttl', k2) \    return {true, k1, v1, k2, v2, v1ttl, v2ttl, v1..v2} <span class="token entity" title="\e">\e</span>lse \    local now = tonumber(ARGV[1]) \    redis.call('hsetnx', 'hash_table', k1, now) \    redis.call('hsetnx', 'hash_table', k2, now) \    local hash_all = redis.call('hgetall', 'hash_table') \    return {false, hash_all} <span class="token entity" title="\e">\e</span>nd"</span> <span class="token number">2</span> name age <span class="token number">78675</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">1</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"name"</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"alex"</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"age"</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"18"</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token parameter variable">-1</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> <span class="token number">65267</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token string">"alex18"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> <span class="token builtin class-name">eval</span> <span class="token string">"local k1 = KEYS[1] \local k2 = KEYS[2] \local v1 = redis.call('get', k1) \local v2 = redis.call('get', k2) \if v1 and v2 then \    local v1ttl = redis.call('ttl', k1) \    local v2ttl = redis.call('ttl', k2) \    return {true, k1, v1, k2, v2, v1ttl, v2ttl, v1..v2} <span class="token entity" title="\e">\e</span>lse \    local now = tonumber(ARGV[1]) \    redis.call('hsetnx', 'hash_table', k1, now) \    redis.call('hsetnx', 'hash_table', k2, now) \    local hash_all = redis.call('hgetall', 'hash_table') \    return {false, hash_all} <span class="token entity" title="\e">\e</span>nd"</span> <span class="token number">2</span> name4 age4 <span class="token number">78675</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>nil<span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token number">1</span><span class="token punctuation">)</span> <span class="token string">"name2"</span>    <span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"55333"</span>    <span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"age2"</span>    <span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"55333"</span>    <span class="token number">5</span><span class="token punctuation">)</span> <span class="token string">"name3"</span>    <span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">"1682408424"</span>    <span class="token number">7</span><span class="token punctuation">)</span> <span class="token string">"age3"</span>    <span class="token number">8</span><span class="token punctuation">)</span> <span class="token string">"1682408424"</span>    <span class="token number">9</span><span class="token punctuation">)</span> <span class="token string">"name4"</span>   <span class="token number">10</span><span class="token punctuation">)</span> <span class="token string">"78675"</span>   <span class="token number">11</span><span class="token punctuation">)</span> <span class="token string">"age4"</span>   <span class="token number">12</span><span class="token punctuation">)</span> <span class="token string">"78675"</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="lua-脚本自身错误，如何处理？"><a href="#lua-脚本自身错误，如何处理？" class="headerlink" title="lua 脚本自身错误，如何处理？"></a>lua 脚本自身错误，如何处理？</h2><p>那，假设我写的 lua 脚本自身就是有问题的呢？那应该如何排查？</p><blockquote><p>因为不管是 lua 脚本自身语法有错误，还是因为 lua 脚本根本就没有返回值时，均会返回 <code>false</code> 所以有时候你根本搞不清楚 lua 脚本到底有没有执行成功，当然你完全可以通过返回一个固定值来进行判断，也是可行的。</p></blockquote><p>比如我将代码调整成以下：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$redis</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>Redis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$redis</span><span class="token operator">-&gt;</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'192.168.10.194'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$lua</span> <span class="token operator">=</span> <span class="token string heredoc-string"><span class="token delimiter symbol"><span class="token punctuation">&lt;&lt;&lt;</span>EOF</span>local k1 = KEYS[1]local k2 = KEYS[2]-- 故意将 get 命令写成 get1 以便引发一个 lua 脚本错误local v1 = redis.call('get1', k1)local v2 = redis.call('get', k2)if v1 and v2 then    local v1_ttl = redis.call('ttl', k1)    local v2_ttl = redis.call('ttl', k2)    return {true, k1, v1, k2, v2, v1_ttl, v2_ttl, v1..v2}else    local now = tonumber(ARGV[1])    redis.call('hsetnx', 'hash_table', k1, now)    redis.call('hsetnx', 'hash_table', k2, now)    local hash_all = redis.call('hgetall', 'hash_table')    return {false, hash_all}end<span class="token delimiter symbol">EOF<span class="token punctuation">;</span></span></span><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$redis</span><span class="token operator">-&gt;</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$lua</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'age'</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行情况</p><blockquote><p>其实这里返回 <code>false</code> 是因为 lua 脚本执行失败，并不是因为 lua 脚本执行成功，但是没有返回值导致。</p></blockquote><pre class="line-numbers language-none"><code class="language-none">bash-5.0# php demo.php bool(false)bash-5.0# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="使用-lua-脚本中的-pcall-函数处理错误与异常"><a href="#使用-lua-脚本中的-pcall-函数处理错误与异常" class="headerlink" title="使用 lua 脚本中的 pcall 函数处理错误与异常"></a>使用 lua 脚本中的 <code>pcall</code> 函数处理错误与异常</h3><blockquote><p><a href="https://www.lua.org/pil/8.4.html">lua 错误处理和异常</a></p></blockquote><p>代码更改为如下：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$redis</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>Redis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$redis</span><span class="token operator">-&gt;</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'192.168.10.194'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$lua</span> <span class="token operator">=</span> <span class="token string heredoc-string"><span class="token delimiter symbol"><span class="token punctuation">&lt;&lt;&lt;</span>EOF</span>local ok, res = pcall(function()local k1 = KEYS[1]local k2 = KEYS[2]-- 故意将 get 命令写成 get1 以便引发一个 lua 脚本错误local v1 = redis.call('get1', k1)local v2 = redis.call('get', k2)if v1 and v2 then    local v1_ttl = redis.call('ttl', k1)    local v2_ttl = redis.call('ttl', k2)    return {true, k1, v1, k2, v2, v1_ttl, v2_ttl, v1..v2}else    local now = tonumber(ARGV[1])    redis.call('hsetnx', 'hash_table', k1, now)    redis.call('hsetnx', 'hash_table', k2, now)    local hash_all = redis.call('hgetall', 'hash_table')    return {false, hash_all}endend)return {ok, res}<span class="token delimiter symbol">EOF<span class="token punctuation">;</span></span></span><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$redis</span><span class="token operator">-&gt;</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$lua</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'age'</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>返回结果</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 可以通过返回值中的第一个值来进行判断 lua 脚本是否执行成功，如果为 false ，第二个值即为错误提示信息</span>bash-5.0<span class="token comment"># php demo.php </span>array<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&gt;</span>  bool<span class="token punctuation">(</span>false<span class="token punctuation">)</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&gt;</span>  string<span class="token punctuation">(</span><span class="token number">61</span><span class="token punctuation">)</span> <span class="token string">"@user_script: 6: Unknown Redis command called from Lua script"</span><span class="token punctuation">}</span>bash-5.0<span class="token comment"># </span><span class="token comment"># lua 脚本无异常时，第一个值为 1，第二个值即为匿名函数中返回的值</span>bash-5.0<span class="token comment"># php demo.php </span>array<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&gt;</span>  int<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&gt;</span>  array<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&gt;</span>    int<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&gt;</span>    string<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"name"</span>    <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&gt;</span>    string<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token string">"alex"</span>    <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&gt;</span>    string<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token string">"age"</span>    <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&gt;</span>    string<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token string">"18"</span>    <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&gt;</span>    int<span class="token punctuation">(</span>-1<span class="token punctuation">)</span>    <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&gt;</span>    int<span class="token punctuation">(</span><span class="token number">62010</span><span class="token punctuation">)</span>    <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">&gt;</span>    string<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token string">"alex18"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 缓存 </tag>
            
            <tag> Lua </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 数据备份与恢复</title>
      <link href="posts/c14e496.html"/>
      <url>posts/c14e496.html</url>
      
        <content type="html"><![CDATA[<h1 id="Redis-数据备份与恢复"><a href="#Redis-数据备份与恢复" class="headerlink" title="Redis 数据备份与恢复"></a>Redis 数据备份与恢复</h1><h2 id="1-命令行执行-save-手动开启-RDB-持久化"><a href="#1-命令行执行-save-手动开启-RDB-持久化" class="headerlink" title="1. 命令行执行 save 手动开启 RDB 持久化"></a>1. 命令行执行 save 手动开启 RDB 持久化</h2><p>使用 RDB 文件做迁移时，需要注意需要先关闭掉目标 redis 的 aof 功能，因为如果二者同时存在的话，会优先于 aof 的方式进行数据恢复。</p><pre class="line-numbers language-none"><code class="language-none">redis-cli -h {target-host} -a {target-password} config set appendonly no<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 会阻塞主进程</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> saveOK<span class="token comment"># 通过 fork 一个专门 save 的子进程，从而不会阻塞主进程</span><span class="token number">127.0</span>.0.1:637<span class="token operator"><span class="token file-descriptor important">9</span>&gt;</span> bgsaveBackground saving started<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h3><pre class="line-numbers language-none"><code class="language-none"># 查看 redis 默认存放备份文件的目录路径127.0.0.1:6379&gt; config get dir# 查看备份 RDB 文件的名称，默认为 `dump.rdb`127.0.0.1:6379&gt; config get dbfilename<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将备份之后的 <code>dump.rdb</code> 文件放到 <code>config get dir</code> 命令得出的目录路径下，然后重启 redis 即可恢复。（建议备份的时候，可以将 redis 暂时关闭）</p><h2 id="2-通过命令行手动开启-AOF-持久化"><a href="#2-通过命令行手动开启-AOF-持久化" class="headerlink" title="2. 通过命令行手动开启 AOF 持久化"></a>2. 通过命令行手动开启 AOF 持久化</h2><h3 id="备份-1"><a href="#备份-1" class="headerlink" title="备份"></a>备份</h3><pre class="line-numbers language-none"><code class="language-none"># 先清空目标 redis 中全部数据redis-cli -h {target-host} -a {target-password} flushall# 然后在源 redis 中生成 aof 备份文件redis-cli -h {source-host} -a {source-password} config set appendonly yes# 查看生成后的 appendonly.aof 文件所在目录127.0.0.1:6379&gt; config get dir# 查看备份的 aof 文件的名称，默认为 `appendonly.aof`127.0.0.1:6379&gt; config get appendfilename<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="恢复-1"><a href="#恢复-1" class="headerlink" title="恢复"></a>恢复</h3><pre class="line-numbers language-none"><code class="language-none"># 将 `appendonly.aof` 文件放在当前路径下redis-cli -h {target-host} -a {target-password} --pipe &lt; appendonly.aof# 源 redis 关闭 aof 功能redis-cli -h {source-host} -a {source-password} config set appendonly no<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>将备份之后的 <code>appendonly.aof</code> 文件放到 <code>config get dir</code> 命令得出的目录路径下，然后重启 redis 也应该可恢复（具体我没有实操，看资料所说如此）。</p><h2 id="3-使用-redis-dump"><a href="#3-使用-redis-dump" class="headerlink" title="3. 使用 redis-dump"></a>3. 使用 <a href="https://github.com/delano/redis-dump">redis-dump</a></h2><p>redis-dump 是一个用于 redis 数据导入导出的工具（可以以新增的形式导入），是基于 Ruby 实现的，因此需要先安装 Ruby 环境，建议安装 2.6.1 版本以上的 Ruby。</p><h3 id="MAC-上使用-Homebrew-安装-Ruby"><a href="#MAC-上使用-Homebrew-安装-Ruby" class="headerlink" title="MAC 上使用 Homebrew 安装 Ruby"></a>MAC 上使用 Homebrew 安装 Ruby</h3><pre class="line-numbers language-none"><code class="language-none">brew install ruby<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="使用-rvm-（ruby-版本管理器）安装-ruby"><a href="#使用-rvm-（ruby-版本管理器）安装-ruby" class="headerlink" title="使用 rvm （ruby 版本管理器）安装 ruby"></a>使用 <a href="https://rvm.io/">rvm</a> （ruby 版本管理器）安装 ruby</h3><h4 id="centos-7-上安装-rvm"><a href="#centos-7-上安装-rvm" class="headerlink" title="centos 7 上安装 rvm"></a>centos 7 上安装 rvm</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-sSL</span> https://rvm.io/mpapis.asc <span class="token operator">|</span> gpg2 <span class="token parameter variable">--import</span> -<span class="token function">curl</span> <span class="token parameter variable">-sSL</span> https://rvm.io/pkuczynski.asc <span class="token operator">|</span> gpg2 <span class="token parameter variable">--import</span> -<span class="token comment"># 安装成功之后退出终端，然后可以通过 `rvm help` 进行查看</span><span class="token punctuation">\</span>curl <span class="token parameter variable">-sSL</span> https://get.rvm.io <span class="token operator">|</span> <span class="token function">bash</span> <span class="token parameter variable">-s</span> stable<span class="token comment"># 如果不想退出终端，可以直接重载配置文件</span><span class="token builtin class-name">source</span> /etc/profile.d/rvm.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="rvm-常用命令"><a href="#rvm-常用命令" class="headerlink" title="rvm 常用命令"></a>rvm 常用命令</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 列出已知的 ruby 版本</span>rvm list known<span class="token comment"># 安装指定版本的 ruby</span>rvm <span class="token function">install</span> <span class="token number">2.3</span>.0<span class="token comment"># 更新 rvm</span>rvm get stable<span class="token comment"># 切换到指定 ruby 版本</span>rvm use <span class="token number">2.2</span>.1<span class="token comment"># 设置指定 ruby 版本为默认版本</span>rvm use <span class="token number">2.2</span>.2 <span class="token parameter variable">--default</span><span class="token comment"># 查询已经安装的 ruby 版本</span>rvm list<span class="token comment"># 卸载指定的 ruby 版本</span>rvm remove <span class="token number">1.9</span>.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装-redis-dump"><a href="#安装-redis-dump" class="headerlink" title="安装 redis-dump"></a>安装 redis-dump</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装 ruby 2.6.1</span>rvm <span class="token function">install</span> <span class="token number">2.6</span>.1<span class="token comment"># 使用 2.6.1</span>rvm use <span class="token number">2.6</span>.1rvm use <span class="token number">2.6</span>.1 <span class="token parameter variable">--default</span><span class="token comment"># 查看 ruby 版本</span>ruby <span class="token parameter variable">--version</span><span class="token comment"># 替换 gem 镜像地址</span>gem sources <span class="token parameter variable">--add</span> https://gems.ruby-china.org/ <span class="token parameter variable">--remove</span> https://rubygems.org/<span class="token comment"># 查看镜像地址是否更换成功</span>gem sources <span class="token parameter variable">-l</span><span class="token comment"># 安装 redis-dump</span>gem <span class="token function">install</span> redis-dump <span class="token parameter variable">-V</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="redis-dump-备份与恢复"><a href="#redis-dump-备份与恢复" class="headerlink" title="redis-dump 备份与恢复"></a>redis-dump 备份与恢复</h3><blockquote><p>以增量的形式恢复</p></blockquote><h4 id="备份-2"><a href="#备份-2" class="headerlink" title="备份"></a>备份</h4><pre class="line-numbers language-none"><code class="language-none"># 数据导出redis-dump -u 127.0.0.1:6379 &gt; data.json# 导出指定数据库中的数据，比如说 8 号数据库redis-dump -u 127.0.0.1:6379 -d 8 &gt; data8.json# 如果 redis 设置了有密码redis-dump -u {host} -a {password} &gt; data.jsonredis-dump -u :{password}@127.0.0.1:6379 &gt; data.json# 如果需要导出的 redis 是一个 URL 连接地址时，貌似可以这样（没有实操过，具体不清楚）redis-dump -u :{password}@{domain}:{port}# eg: redis-dump -u :123456@www.alex.com:9055<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="恢复-2"><a href="#恢复-2" class="headerlink" title="恢复"></a>恢复</h4><pre class="line-numbers language-none"><code class="language-none"># 导入命令cat data.json | redis-load# 或者&lt; data.json redis-load# 导入数据到 8 号数据库cat data8.json | redis-load -u 127.0.0.1:6379 -a 123456 -d 8# 或者&lt; data8.json redis-load -u 127.0.0.1:6379 -a 123456 -d 8# 如果以上命令是因为 utf-8 格式报错时，可以加上 `-n` 参数cat data8.json | redis-load -n -u 127.0.0.1:6379 -a 123456 -d 8# 如果 redis 设置了有密码cat data.json | redis-load -u :password@127.0.0.1:6379<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-通过脚本实现迁移"><a href="#4-通过脚本实现迁移" class="headerlink" title="4. 通过脚本实现迁移"></a>4. 通过脚本实现迁移</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#!/bin/bash</span><span class="token comment"># 通过这个脚本执行备份有两个缺点，一是使用了 `keys *` ，二是那就是会将 source_host 中所有的 key</span><span class="token comment"># 同步到 target_host 时，会自动改成永不过期</span><span class="token comment"># 详见 `restore` 命令</span><span class="token comment"># 后期有时间了，再考虑优化的事情吧</span><span class="token comment"># document link: https://www.redis.com.cn/commands/restore.html</span><span class="token assign-left variable">source_host</span><span class="token operator">=</span><span class="token number">127.0</span>.0.1<span class="token assign-left variable">source_port</span><span class="token operator">=</span><span class="token number">6379</span><span class="token assign-left variable">source_password</span><span class="token operator">=</span><span class="token string">''</span><span class="token assign-left variable">source_db</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">target_host</span><span class="token operator">=</span><span class="token number">127.0</span>.0.1<span class="token assign-left variable">target_port</span><span class="token operator">=</span><span class="token number">6379</span><span class="token assign-left variable">target_password</span><span class="token operator">=</span><span class="token string">''</span><span class="token assign-left variable">target_db</span><span class="token operator">=</span><span class="token number">2</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token variable">$source_password</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token variable">$target_password</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">then</span>  redis-cli <span class="token parameter variable">-h</span> <span class="token variable">${source_host}</span> <span class="token parameter variable">-p</span> <span class="token variable">${source_port}</span> <span class="token parameter variable">-n</span> <span class="token variable">${source_db}</span> keys <span class="token string">'*'</span> <span class="token operator">|</span> <span class="token keyword">while</span> <span class="token builtin class-name">read</span> key  <span class="token keyword">do</span>      redis-cli <span class="token parameter variable">-h</span> <span class="token variable">${source_host}</span> <span class="token parameter variable">-p</span> <span class="token variable">${source_port}</span> <span class="token parameter variable">-n</span> <span class="token variable">${source_db}</span> <span class="token parameter variable">--raw</span> dump <span class="token variable">$key</span> <span class="token operator">|</span> perl <span class="token parameter variable">-pe</span> <span class="token string">'chomp if eof'</span> <span class="token operator">|</span> redis-cli <span class="token parameter variable">-h</span> <span class="token variable">${target_host}</span> <span class="token parameter variable">-p</span> <span class="token variable">${target_port}</span> <span class="token parameter variable">-n</span> <span class="token variable">${target_db}</span> <span class="token parameter variable">-x</span> restore <span class="token variable">$key</span> <span class="token number">0</span>      <span class="token builtin class-name">echo</span> <span class="token string">"migrate key <span class="token variable">$key</span>"</span>  <span class="token keyword">done</span><span class="token keyword">elif</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token variable">$source_password</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token variable">$target_password</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">then</span>  redis-cli <span class="token parameter variable">-h</span> <span class="token variable">${source_host}</span> <span class="token parameter variable">-p</span> <span class="token variable">${source_port}</span> <span class="token parameter variable">-n</span> <span class="token variable">${source_db}</span> keys <span class="token string">'*'</span> <span class="token operator">|</span> <span class="token keyword">while</span> <span class="token builtin class-name">read</span> key  <span class="token keyword">do</span>      redis-cli <span class="token parameter variable">-h</span> <span class="token variable">${source_host}</span> <span class="token parameter variable">-p</span> <span class="token variable">${source_port}</span> <span class="token parameter variable">-n</span> <span class="token variable">${source_db}</span> <span class="token parameter variable">--raw</span> dump <span class="token variable">$key</span> <span class="token operator">|</span> perl <span class="token parameter variable">-pe</span> <span class="token string">'chomp if eof'</span> <span class="token operator">|</span> redis-cli <span class="token parameter variable">-h</span> <span class="token variable">${target_host}</span> <span class="token parameter variable">-p</span> <span class="token variable">${target_port}</span> <span class="token parameter variable">-a</span> <span class="token variable">${target_password}</span> <span class="token parameter variable">-n</span> <span class="token variable">${target_db}</span> <span class="token parameter variable">-x</span> restore <span class="token variable">$key</span> <span class="token number">0</span>      <span class="token builtin class-name">echo</span> <span class="token string">"migrate key <span class="token variable">$key</span>"</span>  <span class="token keyword">done</span><span class="token keyword">elif</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-n</span> <span class="token variable">$source_password</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token variable">$target_password</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">then</span>  redis-cli <span class="token parameter variable">-h</span> <span class="token variable">${source_host}</span> <span class="token parameter variable">-p</span> <span class="token variable">${source_port}</span> <span class="token parameter variable">-a</span> <span class="token variable">${source_password}</span> <span class="token parameter variable">-n</span> <span class="token variable">${source_db}</span> keys <span class="token string">'*'</span> <span class="token operator">|</span> <span class="token keyword">while</span> <span class="token builtin class-name">read</span> key  <span class="token keyword">do</span>      redis-cli <span class="token parameter variable">-h</span> <span class="token variable">${source_host}</span> <span class="token parameter variable">-p</span> <span class="token variable">${source_port}</span> <span class="token parameter variable">-a</span> <span class="token variable">${source_password}</span> <span class="token parameter variable">-n</span> <span class="token variable">${source_db}</span> <span class="token parameter variable">--raw</span> dump <span class="token variable">$key</span> <span class="token operator">|</span> perl <span class="token parameter variable">-pe</span> <span class="token string">'chomp if eof'</span> <span class="token operator">|</span> redis-cli <span class="token parameter variable">-h</span> <span class="token variable">${target_host}</span> <span class="token parameter variable">-p</span> <span class="token variable">${target_port}</span> <span class="token parameter variable">-n</span> <span class="token variable">${target_db}</span> <span class="token parameter variable">-x</span> restore <span class="token variable">$key</span> <span class="token number">0</span>      <span class="token builtin class-name">echo</span> <span class="token string">"migrate key <span class="token variable">$key</span>"</span>  <span class="token keyword">done</span><span class="token keyword">else</span>  redis-cli <span class="token parameter variable">-h</span> <span class="token variable">${source_host}</span> <span class="token parameter variable">-p</span> <span class="token variable">${source_port}</span> <span class="token parameter variable">-a</span> <span class="token variable">${source_password}</span> <span class="token parameter variable">-n</span> <span class="token variable">${source_db}</span> keys <span class="token string">'*'</span> <span class="token operator">|</span> <span class="token keyword">while</span> <span class="token builtin class-name">read</span> key  <span class="token keyword">do</span>      redis-cli <span class="token parameter variable">-h</span> <span class="token variable">${source_host}</span> <span class="token parameter variable">-p</span> <span class="token variable">${source_port}</span> <span class="token parameter variable">-a</span> <span class="token variable">${source_password}</span> <span class="token parameter variable">-n</span> <span class="token variable">${source_db}</span> <span class="token parameter variable">--raw</span> dump <span class="token variable">$key</span> <span class="token operator">|</span> perl <span class="token parameter variable">-pe</span> <span class="token string">'chomp if eof'</span> <span class="token operator">|</span> redis-cli <span class="token parameter variable">-h</span> <span class="token variable">${target_host}</span> <span class="token parameter variable">-p</span> <span class="token variable">${target_port}</span> <span class="token parameter variable">-a</span> <span class="token variable">${target_password}</span> <span class="token parameter variable">-n</span> <span class="token variable">${target_db}</span> <span class="token parameter variable">-x</span> restore <span class="token variable">$key</span> <span class="token number">0</span>      <span class="token builtin class-name">echo</span> <span class="token string">"migrate key <span class="token variable">$key</span>"</span>  <span class="token keyword">done</span><span class="token keyword">fi</span><span class="token comment"># 其实就是利用了 redis 的 dump 和 restore 命令</span><span class="token comment"># eg：</span><span class="token comment"># 127.0.0.1:6379[1]&gt; set hello "hello, dumping world!"</span><span class="token comment"># OK</span><span class="token comment"># 127.0.0.1:6379[1]&gt; dump hello</span><span class="token comment"># "\x00\x15hello, dumping world!\t\x00\x03\xbfc\xcey\xa1\x9e\xfc"</span><span class="token comment"># 127.0.0.1:6379[1]&gt; restore hello1 0 "\x00\x15hello, dumping world!\t\x00\x03\xbfc\xcey\xa1\x9e\xfc"</span><span class="token comment"># OK</span><span class="token comment"># 127.0.0.1:6379[1]&gt; get hello1</span><span class="token comment"># "hello, dumping world!"</span><span class="token comment"># 127.0.0.1:6379[1]&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-redis-使用-migrate-命令迁移数据脚本"><a href="#5-redis-使用-migrate-命令迁移数据脚本" class="headerlink" title="5. redis 使用 migrate 命令迁移数据脚本"></a>5. redis 使用 migrate 命令迁移数据脚本</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#!/bin/bash</span><span class="token assign-left variable">src_redis</span><span class="token operator">=</span><span class="token string">"10.8.163.1"</span><span class="token assign-left variable">src_port</span><span class="token operator">=</span><span class="token string">"6379"</span><span class="token assign-left variable">dest_redis</span><span class="token operator">=</span><span class="token string">"10.8.132.13"</span><span class="token assign-left variable">dest_port</span><span class="token operator">=</span><span class="token string">"6379"</span><span class="token keyword">for</span> <span class="token for-or-select variable">y</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span>redis-cli <span class="token parameter variable">-h</span> $<span class="token punctuation">{</span>src_redis<span class="token punctuation">}</span> <span class="token parameter variable">-p</span> $<span class="token punctuation">{</span>src_port<span class="token punctuation">}</span> keys <span class="token string">"*"</span><span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>   redis-cli <span class="token parameter variable">-h</span> <span class="token variable">${src_redis}</span> <span class="token parameter variable">-p</span> <span class="token variable">${src_port}</span> migrate <span class="token variable">${dest_redis}</span> <span class="token variable">${dest_port}</span> <span class="token variable">${y}</span> <span class="token number">0</span> <span class="token number">1000</span> copy replace   <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%F<span class="token punctuation">\</span> %T<span class="token variable">)</span></span> Copy key <span class="token variable">${y}</span> to new redis...."</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 打包和部署</title>
      <link href="posts/5c09a73d.html"/>
      <url>posts/5c09a73d.html</url>
      
        <content type="html"><![CDATA[<h1 id="Go-打包和部署"><a href="#Go-打包和部署" class="headerlink" title="Go 打包和部署"></a>Go 打包和部署</h1><h2 id="打包相关命令"><a href="#打包相关命令" class="headerlink" title="打包相关命令"></a>打包相关命令</h2><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>go run</td><td>编译并马上运行 go 程序（只接收 main 包下的文件作为参数）</td></tr><tr><td>go build</td><td>编译指定的源文件、软件包及其依赖项，但它不会运行编译后的二进制文件。(如果想要指定所生成的二进制文件为其他名称，则可以通过 <code>-o</code> 参数进行调整)</td></tr><tr><td>go install</td><td>编译并安装源文件、软件包到 <code>$GOBIN</code> 目录下。 可以执行 <code>go install -x</code> 查看它的编译过程。文件名称为 Go modules 的项目名，而不是目录名</td></tr></tbody></table><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-x</td><td>打印编译过程中的所有执行命令，执行生成的二进制文件，比如：<code>go run -x main.go</code> 和 <code>go build -x</code></td></tr><tr><td>-n</td><td>打印编译过程中的所有执行命令，不执行生成的二进制文件</td></tr><tr><td>-a</td><td>强制重新编译所有涉及的依赖，简单来说，就是不利用缓存或已编译好的部分文件，直接所有包都是最新的代码重新编译和关联</td></tr><tr><td>-o</td><td>指定生成的二进制文件名称</td></tr><tr><td>-p</td><td>指定编译过程中可以并发运行程序的数量，默认值为可用的 CPU 数量（Go 语言默认是支持并发编译的）</td></tr><tr><td>-work</td><td>打印临时工作目录的完整路径，在退出时不删除该目录</td></tr><tr><td>-race</td><td>启用数据竞争检测，目前仅支持 Linux/amd64、FreeBSD/amd64、Darwin/amd64 和 Windows/amd64 平台</td></tr><tr><td>-installsuffix</td><td>在软件包安装的目录中增加后缀标识，以保持输出与默认版本分开</td></tr></tbody></table><h2 id="跨平台交叉编译"><a href="#跨平台交叉编译" class="headerlink" title="跨平台交叉编译"></a>跨平台交叉编译</h2><p>Go 语言支持跨平台交叉编译，也就是说我们可以在 Windows 或 Mac 平台下编写代码，最后将代码编译成能够在 Linux amd64 服务器上运行的程序。</p><p>根目录使用以下指令可以静态编译 <code>Linux</code> 平台 <code>amd64</code> 架构的可执行文件：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">CGO_ENABLED</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">GOOS</span><span class="token operator">=</span>linux <span class="token assign-left variable">GOARCH</span><span class="token operator">=</span>amd64 go build <span class="token parameter variable">-o</span> <span class="token operator">&lt;</span>application-name<span class="token operator">&gt;</span><span class="token comment"># 比如</span><span class="token assign-left variable">CGO_ENABLED</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">GOOS</span><span class="token operator">=</span>linux go build <span class="token parameter variable">-a</span> <span class="token parameter variable">-installsuffix</span> cgo <span class="token parameter variable">-o</span> <span class="token operator">&lt;</span>application-name<span class="token operator">&gt;</span> <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Windows 依次执行以下四个命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">SET <span class="token assign-left variable">CGO_ENABLED</span><span class="token operator">=</span><span class="token number">0</span>SET <span class="token assign-left variable">GOOS</span><span class="token operator">=</span>linuxSET <span class="token assign-left variable">GOARCH</span><span class="token operator">=</span>amd64go build <span class="token parameter variable">-o</span> <span class="token operator">&lt;</span>application-name<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>参数名</th><th>含义</th></tr></thead><tbody><tr><td>CGO_ENABLED</td><td>设置是否在 Go 代码中调用 C 代码。0 为关闭，采用纯静态编译。可通过执行 go env 进行查看</td></tr><tr><td>GOOS</td><td>目标操作系统，如 Linux 、Darwin、Windows</td></tr><tr><td>GOARCH</td><td>目标操作系统的架构，若不设置，则默认值为程序运行环境的目标计算架构一致</td></tr><tr><td>GOHOSTOS</td><td>用于标识程序运行环境的目标操作系统</td></tr><tr><td>GOHOSTARCH</td><td>用于标识程序运行环境的目标计算架构</td></tr></tbody></table><p><strong>可以通过如下命令查看 Go 支持 OS 和平台列表</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go tool dist list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>系统</th><th>GOOS</th><th>GOARCH</th></tr></thead><tbody><tr><td>Windows 32位</td><td>windows</td><td>386</td></tr><tr><td>Windows 64位</td><td>windows</td><td>amd64</td></tr><tr><td>OS X 32位</td><td>darwin</td><td>386</td></tr><tr><td>OS X 64位</td><td>darwin</td><td>amd64</td></tr><tr><td>Linux 32位</td><td>linux</td><td>386</td></tr><tr><td>Linux 64位</td><td>linux</td><td>amd64</td></tr></tbody></table><h2 id="第三方打包工具"><a href="#第三方打包工具" class="headerlink" title="第三方打包工具"></a>第三方打包工具</h2><p>以下几个第三方打包工具可以将静态文件（JS、CSS、图片）或者模版文件等非 <code>.go</code> 文件打包到一个二进制文件中， <a href="https://pkg.go.dev/embed">Embed</a> 标准库也可以，但是得使用 go 1.16 版本以后的版本才行。</p><ul><li><a href="https://github.com/go-bindata/go-bindata">go-bindata/go-bindata</a>：推荐使用这个</li><li><a href="https://github.com/gobuffalo/packr">gobuffalo/packr</a></li><li><a href="https://github.com/markbates/pkger">markbates/pkger</a></li><li><a href="https://github.com/rakyll/statik">rakyll/statik</a></li><li><a href="https://github.com/knadh/stuffbin">knadh/stuffbin</a></li><li><a href="https://github.com/go-bindata/go-bindata">github.com/go-bindata/go-bindata</a></li><li><a href="https://github.com/elazarl/go-bindata-assetfs">elazarl/go-bindata-assetfs</a></li><li><a href="https://github.com/GeertJohan/go.rice">GeertJohan/go.rice</a></li></ul><h3 id="将数据文件转换成-go-代码"><a href="#将数据文件转换成-go-代码" class="headerlink" title="将数据文件转换成 go 代码"></a>将数据文件转换成 go 代码</h3><blockquote><p><a href="https://github.com/go-bindata/go-bindata">go-bindata</a> 库可以将数据文件转换为 Go 代码。例如：常见的配置文件、资源文件（如 swagger ui）<br>因此读取配置信息也可以通过 <a href="https://github.com/go-bindata/go-bindata/">go-bindata/go-bindata</a> 包提供的方式来读取。使用方式如下：</p></blockquote><ol><li>安装 <code>go-bindata/go-bindata</code> 包</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go get <span class="token parameter variable">-u</span> github.com/go-bindata/go-bindata/<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>将配置文件生成 go 代码</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 执行这条命令后，会将 `configs/config.yaml` 文件打包，并通过 `-o` 参数选择指定的路径输出到 `configs/config.go` 文件中</span><span class="token comment"># 再通过 `-pkg` 选项指定生成的包名为 `configs`</span>go-bindata <span class="token parameter variable">-o</span> configs/config.go -pkg-configs configs/config.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>读取文件中的配置信息</li></ol><pre class="line-numbers language-go" data-language="go"><code class="language-go">data<span class="token punctuation">,</span> err <span class="token operator">:=</span> configs<span class="token punctuation">.</span><span class="token function">Asset</span><span class="token punctuation">(</span><span class="token string">"configs/config.yaml"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="编译缓存"><a href="#编译缓存" class="headerlink" title="编译缓存"></a>编译缓存</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看编译缓存所在的目录</span>go <span class="token function">env</span> GOCACHE<span class="token comment"># 清理编译缓存</span>go clean <span class="token parameter variable">-cache</span><span class="token comment"># 查看程序编译的时间</span><span class="token function">time</span> go build<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="压缩编译后的二进制文件"><a href="#压缩编译后的二进制文件" class="headerlink" title="压缩编译后的二进制文件"></a>压缩编译后的二进制文件</h2><blockquote><p><strong>如非必要情况，不建议压缩</strong></p></blockquote><ul><li>方式一：去掉 DWARF 调试信息和符号表信息</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go build <span class="token parameter variable">-ldflags</span><span class="token operator">=</span><span class="token string">"-w -s"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><table><thead><tr><th>参数名</th><th>含义</th><th>副作用</th></tr></thead><tbody><tr><td>-w</td><td>去除 DWARF 调试信息</td><td>会导致异常 panic 抛出时，调用堆栈信息没有文件名、行号信息</td></tr><tr><td>-s</td><td>去除符号表信息</td><td>无法使用 gdb 调试</td></tr></tbody></table><ul><li>方式二：使用 <a href="https://github.com/upx/upx">upx</a>、 <a href="https://niconiconi.fun/2019/01/10/upx-tutorial/">upx 教程</a> 工具对可执行文件进行压缩</li></ul><h2 id="编译信息写入（使用-ldflags-设置编译信息）"><a href="#编译信息写入（使用-ldflags-设置编译信息）" class="headerlink" title="编译信息写入（使用 ldflags 设置编译信息）"></a>编译信息写入（使用 ldflags 设置编译信息）</h2><blockquote><p><a href="https://ms2008.github.io/2018/10/08/golang-build-version/">go version 信息注入</a></p></blockquote><ul><li>先在 <code>main.go</code> 文件中写入代码</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> <span class="token punctuation">(</span>buildTime    <span class="token builtin">string</span> <span class="token comment">// 二进制文件编译时间</span>buildVersion <span class="token builtin">string</span> <span class="token comment">// 二进制文件编译版本</span>goVersion    <span class="token builtin">string</span> <span class="token comment">// 打包二进制文件时的 go 版本信息</span>gitCommitID  <span class="token builtin">string</span> <span class="token comment">// 二进制文件编译时的 git 提交版本号</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>args <span class="token operator">:=</span> os<span class="token punctuation">.</span>Args<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"--version"</span> <span class="token operator">||</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"-v"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Build Time: %s \n"</span><span class="token punctuation">,</span> buildTime<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Build Version: %s \n"</span><span class="token punctuation">,</span> buildVersion<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Build Go Version: %s \n"</span><span class="token punctuation">,</span> goVersion<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Build Git Commit Hash ID: %s \n"</span><span class="token punctuation">,</span> gitCommitID<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>编译代码时执行如下命令</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go build <span class="token parameter variable">-o</span> app-service <span class="token parameter variable">-ldflags</span> <span class="token punctuation">\</span><span class="token string">"-X main.buildTime=<span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%Y-%m-%d,%H:%M:%S<span class="token variable">`</span></span> -X main.buildVersion=1.0.0 -X 'main.goVersion=<span class="token variable"><span class="token variable">$(</span>go version<span class="token variable">)</span></span>' -X main.gitCommitID=<span class="token variable"><span class="token variable">`</span><span class="token function">git</span> rev-parse HEAD<span class="token variable">`</span></span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>在上述命令中，通过 <code>-ldflags</code> 命令的 <code>-X</code> 参数可以在链接时将信息写入变量中，其格式为：<code>package_name.variable_name=value</code></p></blockquote><ul><li>查看编译后的二进制文件和版本信息</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./app-service <span class="token parameter variable">-version</span><span class="token comment"># output is:</span><span class="token comment"># Build Time: 2022-03-27,13:50:26</span><span class="token comment"># Build Version: 1.0.0</span><span class="token comment"># Build Go Version: go version go1.16.3 darwin/amd64</span><span class="token comment"># Build Git Commit Hash ID: b3473e9cc98148f5c94b53c1cada7de133143462</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h3 id="关于守护进程"><a href="#关于守护进程" class="headerlink" title="关于守护进程"></a>关于守护进程</h3><ul><li><code>nohup</code> —— linux 系统内置，直接使用 <code>nohup ./&lt;executable-file&gt; &amp;</code> 即可</li><li><code>systemctl</code> —— linux 系统内置，需要配置 systemctl 管理配置文件</li><li><code>supervisor</code></li><li><a href="https://github.com/ochinchina/supervisord">go-supervisor</a> —— Go 语言实现但 supervisor，好处是不需要安装 Python 环境</li></ul><h4 id="1-使用-supervisor-部署："><a href="#1-使用-supervisor-部署：" class="headerlink" title="1. 使用 supervisor 部署："></a>1. 使用 supervisor 部署：</h4><pre class="line-numbers language-none"><code class="language-none"># 假设关闭一个监听端口为 3000 的服务kill -9 $(lsof -ti:3000)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建 supervisor 相关配置信息</p><p>vim /etc/supervisor/conf.d/alex-blog.conf</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 程序名称，stop start 等管理时使用</span><span class="token punctuation">[</span>program:alex-blog<span class="token punctuation">]</span><span class="token comment"># 进入该目录运行命令，确保了和项目相关的一些配置文件可以得到加载，比如 .env 文件</span><span class="token assign-left variable">directory</span><span class="token operator">=</span>/data/www/blog<span class="token comment"># 以绝对路径的方式执行 alex-blog 二进制文件</span><span class="token assign-left variable">command</span><span class="token operator">=</span>/data/www/blog/alex-blog<span class="token comment"># 重启时发送的信号，确保端口正常关闭</span><span class="token assign-left variable">stopsignal</span><span class="token operator">=</span><span class="token environment constant">TERM</span><span class="token comment"># 是否自启动</span><span class="token assign-left variable">autostart</span><span class="token operator">=</span>true<span class="token comment"># 是否自动重启</span><span class="token assign-left variable">autorestart</span><span class="token operator">=</span>true<span class="token comment"># 执行程序的用户</span><span class="token assign-left variable">user</span><span class="token operator">=</span>www-data<span class="token comment"># 输出日志位置</span><span class="token assign-left variable">stdout_logfile</span><span class="token operator">=</span>/data/log/supervisor/blog/stdout.log<span class="token comment"># 错误输出日志</span><span class="token assign-left variable">stderr_logfile</span><span class="token operator">=</span>/data/log/supervisor/blog/stderr.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重载 Supervisor 配置文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 重载 supervisor 配置文件</span>supervisorctl reload<span class="token comment"># 查看程序名称为 alex-blog 的程序状态</span><span class="token comment"># 如果直接执行 `supervisorctl status` 命令的话，则是查看所有任务的状态</span>supervisorctl status alex-blog<span class="token comment"># 关闭所有任务</span>supervisorctl <span class="token function">shutdown</span><span class="token comment"># 启动任务</span>supervisorctl start <span class="token operator">&lt;</span>程序名<span class="token operator">&gt;</span><span class="token comment"># 关闭任务</span>supervisorctl stop <span class="token operator">&lt;</span>程序名<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-使用-docker-部署："><a href="#2-使用-docker-部署：" class="headerlink" title="2. 使用 docker 部署："></a>2. 使用 docker 部署：</h4><h5 id="编译后的二进制文件放在-docker-中运行"><a href="#编译后的二进制文件放在-docker-中运行" class="headerlink" title="编译后的二进制文件放在 docker 中运行"></a>编译后的二进制文件放在 docker 中运行</h5><p>先要在宿主机中项目根目录下进行编译</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 交叉编译生成 Linux 平台的可执行文件</span><span class="token assign-left variable">CGO_ENABLED</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">GOOS</span><span class="token operator">=</span>linux go build <span class="token parameter variable">-a</span> <span class="token parameter variable">-installsuffix</span> cgo <span class="token parameter variable">-o</span> hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编写 Dockerfile 文件</p><pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># 基础镜像</span><span class="token instruction"><span class="token keyword">FROM</span> alpine:3.12</span><span class="token comment"># 或者使用 Scratch 镜像</span><span class="token comment"># FROM scratch</span><span class="token comment"># 维护者</span><span class="token instruction"><span class="token keyword">MAINTAINER</span> alex</span><span class="token comment"># docker build 时执行命令</span><span class="token instruction"><span class="token keyword">RUN</span> mkdir -p /go-project/demo <span class="token operator">\</span>&amp;&amp; ln -sf /dev/stdout /go-project/demo/storage/service.log</span><span class="token comment"># 工作目录</span><span class="token instruction"><span class="token keyword">WORKDIR</span> /go-project/demo</span><span class="token comment"># 拷贝</span><span class="token instruction"><span class="token keyword">COPY</span> hello-world /go-project/demo/hello-world</span><span class="token comment"># 或者直接将当前目录下所有的文件拷贝到容器中</span><span class="token comment"># COPY . /go-project/demo</span><span class="token comment"># 这里暴露端口与否都行</span><span class="token comment"># EXPOSE 8501</span><span class="token comment"># docker run 时执行的命令</span><span class="token instruction"><span class="token keyword">ENTRYPOINT</span> [<span class="token string">"./hello-world"</span>]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构建镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> build <span class="token parameter variable">-t</span> go-project:v1.0.0 <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行容器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 宿主机的 9501 端口映射到了容器的 8501 端口</span><span class="token comment"># -d 用于该程序在后台运行</span><span class="token comment"># -p 用于映射端口</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">9501</span>:8501 go-project:v1.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="nginx-配置信息"><a href="#nginx-配置信息" class="headerlink" title="nginx 配置信息"></a>nginx 配置信息</h4><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">upstream</span> go-project</span> <span class="token punctuation">{</span>    <span class="token comment"># go-project HTTP Server 的 IP 及 端口</span>    <span class="token directive"><span class="token keyword">server</span> 127.0.0.1:9501</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token directive"><span class="token keyword">server</span></span><span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server_name</span> goblog.com</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">access_log</span>   /data/log/nginx/goblog/access.log</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">error_log</span>    /data/log/nginx/goblog/error.log</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">location</span> /static/</span> <span class="token punctuation">{</span>      <span class="token directive"><span class="token keyword">alias</span> /www/wwwroot/gitlab/go-project/public/uploads/</span><span class="token punctuation">;</span> <span class="token comment">#静态资源路径</span>    <span class="token punctuation">}</span>        <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>        <span class="token comment"># 将客户端的 Host 和 IP 信息一并转发到对应节点</span>        <span class="token directive"><span class="token keyword">proxy_redirect</span>             <span class="token boolean">off</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span>           Host             <span class="token variable">$http_host</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span>           X-Real-IP        <span class="token variable">$remote_addr</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">proxy_set_header</span>           X-Forwarded-For  <span class="token variable">$proxy_add_x_forwarded_for</span></span><span class="token punctuation">;</span>                <span class="token comment"># 转发Cookie，设置 SameSite</span>        <span class="token directive"><span class="token keyword">proxy_cookie_path</span> / <span class="token string">"/; secure; HttpOnly; SameSite=strict"</span></span><span class="token punctuation">;</span>                <span class="token comment"># 执行代理访问真实服务器</span>        <span class="token directive"><span class="token keyword">proxy_pass</span>                 http://go-project</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在 Go 项目中可靠的获取项目根目录</title>
      <link href="posts/7c9ed3a3.html"/>
      <url>posts/7c9ed3a3.html</url>
      
        <content type="html"><![CDATA[<h1 id="如何在-Go-项目中可靠的获取项目根目录"><a href="#如何在-Go-项目中可靠的获取项目根目录" class="headerlink" title="如何在 Go 项目中可靠的获取项目根目录"></a>如何在 Go 项目中可靠的获取项目根目录</h1><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"os"</span><span class="token string">"path"</span><span class="token string">"path/filepath"</span><span class="token string">"runtime"</span><span class="token string">"strings"</span><span class="token punctuation">)</span><span class="token comment">// getRootPath 获取项目根目录</span><span class="token keyword">func</span> <span class="token function">getRootPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span><span class="token comment">// 第一种方式：获取当前执行程序所在的绝对路径</span><span class="token comment">// 这种仅在 `go build` 时，才可以获取正确的路径</span><span class="token comment">// 获取当前执行的二进制文件的全路径，包括二进制文件名</span><span class="token comment">// eg: exePath = "/var/folders/hr/2rqppbcx4kv8_3qc_ky1qcy80000gn/T/go-build265586886/b001/exe/main"</span>exePath<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Executable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// eg: rootPathByExecutable = "/private/var/folders/hr/2rqppbcx4kv8_3qc_ky1qcy80000gn/T/go-build265586886/b001/exe"</span>rootPathByExecutable<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">EvalSymlinks</span><span class="token punctuation">(</span>filepath<span class="token punctuation">.</span><span class="token function">Dir</span><span class="token punctuation">(</span>exePath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 第二种方式：获取当前执行文件绝对路径</span><span class="token comment">// 这种方式在 `go run` 和 `go build` 时，都可以获取到正确的路径</span><span class="token comment">// 但是交叉编译后，执行的结果是错误的结果</span><span class="token keyword">var</span> rootPathByCaller <span class="token builtin">string</span><span class="token comment">// eg: filename = "/Users/pudongping/glory/codes/golang/gin-biz-web-api/main.go"</span><span class="token boolean">_</span><span class="token punctuation">,</span> filename<span class="token punctuation">,</span> <span class="token boolean">_</span><span class="token punctuation">,</span> ok <span class="token operator">:=</span> runtime<span class="token punctuation">.</span><span class="token function">Caller</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">// eg: rootPathByCaller = "/Users/pudongping/glory/codes/golang/gin-biz-web-api"</span><span class="token keyword">if</span> ok <span class="token punctuation">{</span>rootPathByCaller <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">Dir</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 可以通过 `echo $TMPDIR` 查看当前系统临时目录</span><span class="token comment">// eg: tmpDir = "/private/var/folders/hr/2rqppbcx4kv8_3qc_ky1qcy80000gn/T"</span>tmpDir<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> filepath<span class="token punctuation">.</span><span class="token function">EvalSymlinks</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span><span class="token function">TempDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 对比通过 `os.Executable()` 获取到的路径是否与 `TMPDIR` 环境变量设置的路径相同</span><span class="token comment">// 相同，则说明是通过 `go run` 命令启动的</span><span class="token comment">// 不同，则是通过 `go build` 命令启动的</span><span class="token keyword">if</span> strings<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>rootPathByExecutable<span class="token punctuation">,</span> tmpDir<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> rootPathByCaller<span class="token punctuation">}</span><span class="token keyword">return</span> rootPathByExecutable<span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 当然还有其他的方式，比如可以自己先在系统里设置诸如 `PROJECT_ROOT_DIR` 之类的环境变量，将</span><span class="token comment">// 根目录放到环境变量中，然后再在程序中通过 `os.Getenv("PROJECT_ROOT_DIR")` 也行</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">getRootPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/pudongping/golang-tutorial/blob/main/project/get_root_path/main.go">代码地址</a></li><li><a href="https://mp.weixin.qq.com/s/ws0fcHi-DzCN5PrJNDNKog">三种获取Go项目根目录的方式，让你做架构，选哪种？</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go Modules 模式</title>
      <link href="posts/2f3aad3a.html"/>
      <url>posts/2f3aad3a.html</url>
      
        <content type="html"><![CDATA[<h1 id="Go-Modules-模式"><a href="#Go-Modules-模式" class="headerlink" title="Go Modules 模式"></a>Go Modules 模式</h1><h2 id="GOPATH-目录"><a href="#GOPATH-目录" class="headerlink" title="GOPATH 目录"></a>GOPATH 目录</h2><p>GOPATH 目录下一共包含三个子目录：</p><ul><li>bin：存储所编译生成的二进制文件。</li><li>pkg：存储预编译的目标文件，以加快程序的后续编译速度。</li><li>src：存储所有 <code>.go</code> 文件或源代码。在编写 Go 应用程序，程序包和库时，一般会以 <code>$GOPATH/src/github.com/foo/bar</code> 的路径进行存放。</li></ul><blockquote><p>使用 <code>go get</code> 来拉取外部依赖时，会自动下载并安装到 <code>$GOPATH</code> 目录下。</p></blockquote><h2 id="go-mod-命令"><a href="#go-mod-命令" class="headerlink" title="go mod 命令"></a>go mod 命令</h2><p>查看 go mod 都有哪些命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Go 的所有工具都可以使用 `go help` 来查看使用方法</span>go <span class="token builtin class-name">help</span> mod<span class="token comment"># 查看 go mod download 有哪些参数</span>go <span class="token builtin class-name">help</span> mod download<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="left">命令</th><th align="center">作用</th></tr></thead><tbody><tr><td align="left">go mod help</td><td align="center">查看帮助信息</td></tr><tr><td align="left">go mod init</td><td align="center">初始化当前文件夹，生成 go.mod 文件</td></tr><tr><td align="left">go mod download</td><td align="center">下载 go.mod 文件中指明的所有依赖到本地（默认为 <code>$GOPATH/pkg/mod</code> 目录）增加 <code>-x</code> 参数 <code>go mod download -x</code> 会打印下载信息；<code>go mod download -json</code> 用来查看模块下载的 zip 存放位置，以及解压后的位置；</td></tr><tr><td align="left">go mod tidy</td><td align="center">整理现有的依赖，执行时会把未使用的 module 移除掉，同时也会增加缺少的包</td></tr><tr><td align="left">go mod graph</td><td align="center">查看现有的依赖结构图</td></tr><tr><td align="left">go mod edit</td><td align="center">编辑 go.mod 文件，比如修改项目中使用的 go 版本 <code>go mod edit -go=1.17</code></td></tr><tr><td align="left">go mod vendor</td><td align="center">导出项目所有的依赖到 vendor 目录（需要执行 go build -mod=vendor 才可以使用 vendor 作为依赖来编译，但是在 v1.14 及以后的版本中，如果 golang 项目根目录下存在 vendor 目录，go build 命令会默认优先基于 vendor 目录缓存的三方依赖包构建 golang 程序，除非我们在 go build 命令后面加上 -mod=mod 参数）</td></tr><tr><td align="left">go mod verify</td><td align="center">校验一个模块是否被篡改过，校验从 GOPROXY 服务器上下载的 zip 文件与 GOSUMDB 服务器下载下来的哈希值，是否匹配。</td></tr><tr><td align="left">go mod why</td><td align="center">查看为什么需要依赖某模块，比如 <code>go mod why gopkg.in/yaml.v2 gopkg.in/yaml.v3</code></td></tr><tr><td align="left">go clean -modcache</td><td align="center">可以清空本地下载的 Go Modules 缓存 （会清空 <code>$GOPATH/pkg/mod</code> 目录）</td></tr></tbody></table><h2 id="go-mod-环境变量"><a href="#go-mod-环境变量" class="headerlink" title="go mod 环境变量"></a>go mod 环境变量</h2><p>和 <code>go mod</code> 比较关联的几个环境变量</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> envGO111MODULE<span class="token operator">=</span><span class="token string">"auto"</span>GOPROXY<span class="token operator">=</span><span class="token string">"https://goproxy.cn,direct"</span>GOSUMDB<span class="token operator">=</span><span class="token string">"sum.golang.org"</span>GONOPROXY<span class="token operator">=</span><span class="token string">""</span>GONOSUMDB<span class="token operator">=</span><span class="token string">""</span>GOPRIVATE<span class="token operator">=</span><span class="token string">""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="GO111MODULE"><a href="#GO111MODULE" class="headerlink" title="GO111MODULE"></a>GO111MODULE</h3><p>Go 语言提供了 GO111MODULE 这个环境变量来作为 Go modules 的开关，其允许设置以下参数：</p><ul><li>auto：只要项目包含了 go.mod 文件的话启用 Go modules，目前在 Go1.11 至 Go 1.14 中仍然是默认值</li><li>on：启用 Go modules，推荐设置，将会是未来版本中的默认值</li><li>off：禁用 Go modules，不推荐设置</li></ul><h4 id="设置方式"><a href="#设置方式" class="headerlink" title="设置方式"></a>设置方式</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token function">env</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">GO111MODULE</span><span class="token operator">=</span>on<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以直接在 shell 环境变量中设置，比如我这里使用的是 Mac，且使用的 zsh，则在 <code>vim ~/.zshrc</code> 然后添加以下内容，如果是其它 Linux 系列系统，则需要在 <code>~/.bash_profile</code> 文件中进行设置。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">GO111MODULE</span><span class="token operator">=</span>on<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后要记得 <code>source ~/.zshrc</code></p><h3 id="GOPROXY"><a href="#GOPROXY" class="headerlink" title="GOPROXY"></a>GOPROXY</h3><p>这个环境变量主要是用于设置 Go 模块代理（Go module proxy），其作用是用于使 Go 在后续拉取模块版本时直接通过镜像站点来快速拉取</p><p>GOPROXY 的默认值是：<code>https://proxy.golang.org,direct</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1. 七牛 CDN</span>go <span class="token function">env</span> <span class="token parameter variable">-w</span>  <span class="token assign-left variable">GOPROXY</span><span class="token operator">=</span>https://goproxy.cn,direct<span class="token comment"># 2. 阿里云</span>go <span class="token function">env</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">GOPROXY</span><span class="token operator">=</span>https://mirrors.aliyun.com/goproxy/,direct<span class="token comment"># 3. 官方</span>go <span class="token function">env</span> <span class="token parameter variable">-w</span>  <span class="token assign-left variable">GOPROXY</span><span class="token operator">=</span>https://goproxy.io,direct<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>direct</code> 是一个特殊指示符，用于指示 Go 在获取源码包时，先尝试在设置 GOPROXY 的地址下抓取，如果遇到 404 或 410 等错误时，再回溯到模块版本的源地址去抓取 （比如 GitHub 等）。</p><h3 id="GOSUMDB"><a href="#GOSUMDB" class="headerlink" title="GOSUMDB"></a>GOSUMDB</h3><p>它的值是一个 Go checksum database，用于在拉取模块版本时（无论是从源站拉取还是通过 Go module proxy 拉取）保证拉取到的模块版本数据未经过篡改，若发现不一致，也就是可能存在篡改，将会立即终止。</p><p>GOSUMDB 的默认值为：<code>sum.golang.org</code>，在国内也是无法访问的，但是 GOSUMDB 可以被 Go 模块代理所代理，因此我们可以通过设置 <code>GOPROXY</code> 来解决，而先前我们所设置的模块代理 <code>goproxy.cn</code> （七牛云的 CDN）就能支持代理 <code>sum.golang.org</code>，所以这一个问题在设置 GOPROXY 后，可以不需要过度关心。</p><p>也可以将其设置为 <code>off</code> ，也就是禁止 Go 在后续操作中校验模块版本。但是不建议关闭校验。</p><h3 id="GONOPROXY-GONOSUMDB-GOPRIVATE"><a href="#GONOPROXY-GONOSUMDB-GOPRIVATE" class="headerlink" title="GONOPROXY/GONOSUMDB/GOPRIVATE"></a>GONOPROXY/GONOSUMDB/GOPRIVATE</h3><ul><li>GONOPROXY —— 设置不走 Go Proxy 的 URL 规则；</li><li>GONOSUMDB —— 设置不检查哈希的 URL 规则；</li><li>GOPRIVATE —— 设置私有模块的 URL 规则，会同时设置以上两个变量。</li></ul><p>这三个环境变量都是用在当前项目依赖了私有模块，例如自己公司部署的私有 git 仓库或者是 GitHub 中的私有仓库，都是需要进行设置的，否则会拉取失败。</p><p>设置 GOPRIVATE 之后，表示该地址为私有仓库，不会从 GOPROXY 所对应的地址上去下载。</p><p><strong>而一般建议直接设置 GOPRIVATE，它的值将作为 GONOPROXY 和 GONOSUMDB 的默认值，所以建议直接设置 GOPRIVATE 即可。</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 以下表示 git.example.com 和 github.com/username/package 都是私有仓库，不会进行 GOPROXY 下载和校验</span>go <span class="token function">env</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">GOPRIVATE</span><span class="token operator">=</span><span class="token string">"git.example.com,github.com/username/package"</span><span class="token comment"># 设置后，前缀为 `git.example.com` 和 `github.com/username/package` 的模块都会被认为是私有模块</span><span class="token comment"># 表示所有模块路径为 example.com 的子域名都不进行 GOPROXY 下载和校验</span><span class="token comment"># 需要注意的是不包括 example.com 本身</span>go <span class="token function">env</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">GOPRIVATE</span><span class="token operator">=</span><span class="token string">"*.example.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用-Go-Modules-初始化项目"><a href="#使用-Go-Modules-初始化项目" class="headerlink" title="使用 Go Modules 初始化项目"></a>使用 Go Modules 初始化项目</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 开启 Go Modules 模块，保证 GO111MODULE=on</span>go <span class="token function">env</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">GO111MODULE</span><span class="token operator">=</span>on<span class="token comment"># 在任意文件夹下创建一个项目（不要求在 $GOPATH/src 目录下创建）</span><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token environment constant">$HOME</span>/modules_test<span class="token builtin class-name">cd</span> <span class="token environment constant">$HOME</span>/modules_test<span class="token comment"># 创建 go.mod 文件，同时起当前项目的模块名称</span><span class="token comment"># 如果你是在 `$GOPATH/src` 目录下创建的文件夹可以直接执行 `go mod init` 命令初始化，不需要加模块名称</span>go mod init github.com/pudongping/moudles_test<span class="token comment"># 在该项目下编写源代码，并下载依赖库</span><span class="token comment"># 也可以不加 `-v` 参数</span>go get <span class="token parameter variable">-v</span> XXXXXXXXeg: go get <span class="token parameter variable">-v</span> github.com/pudongping/moudles_test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>下载的包其实被缓存在 <code>$GOPATH/pkg/mod</code> 目录和 <code>$GOPATH/pkg/sumdb</code> 目录下</p></blockquote><ul><li><strong><code>go.mod</code> 文件中：</strong></li></ul><ol><li>module：用于定义当前项目的模块路径。</li><li>go：用于标识当前模块的 Go 语言版本，值为初始化模块时的版本。</li><li>require：用于设置一个特定的模块版本。</li><li>exclude：用于从使用中排除一个特定的模块版本。</li><li>replace：用于将一个模块版本替换为另外一个模块版本。</li></ol><pre class="line-numbers language-none"><code class="language-none"># v0.0.0 表示版本信息# 20190718012654 表示所拉取版本的 commit 时间# fb15b899a751 表示所拉取版本的 commit 哈希值github.com/alecthomas/template v0.0.0-20190718012654-fb15b899a751<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong><code>go.sum</code> 文件中：</strong></li></ul><p>go.sum 文件的作用是：罗列当前项目直接或间接依赖的所有模块版本，保证今后项目依赖的版本不会被篡改。间接依赖的包的哈希值也会被保存。</p><p>go.sum 文件中有两种 hash 的形式：</p><ol><li><code>h1:&lt;hash&gt;</code> 将目标模块版本的 zip 文件开包后，针对所有包内文件依次进行 hash，然后再把它们的 hash 结果按照固定格式和算法组成总的 hash 值，如果不存在，表示可能依赖的库用不上</li><li><code>xxx/go.mod h1.&lt;hash&gt;</code> 表示 go.mod 文件做的 hash</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将目标模块版本的 zip 文件开包后，针对包内所有文件依次进行 hash，然后再将 它们的 hash 结果汇总组成 hash</span>github.com/gorilla/mux v1.7.4 h1:VuZ8uybHlWmqV03+zRzdwKL4tUnIp1MAQtp1mIFE1bc<span class="token operator">=</span><span class="token comment"># 针对 go.mod 文件的 hash 值</span>github.com/gorilla/mux v1.7.4/go.mod h1:DVbg23sWSpFRCP0SfiEN6jmj59UnW/n46BH5rLB71So<span class="token operator">=</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="go-get-拉取命令"><a href="#go-get-拉取命令" class="headerlink" title="go get 拉取命令"></a>go get 拉取命令</h2><blockquote><p>下载的模块会被放置于 <code>$GOPATH/pkg/mod</code> 目录中</p></blockquote><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>go get</td><td>拉取依赖，会进行指定性拉取（更新），并不会更新所依赖的其它模块。（如果本地已存在要下载的包，将会直接使用本地已存在的包）</td></tr><tr><td>go get -u</td><td>更新现有的依赖，会强制更新它所依赖的其它全部模块，不包括自身。</td></tr><tr><td>go get -u -t ./…</td><td>更新所有直接依赖和间接依赖的模块版本，包括单元测试中用到的。</td></tr><tr><td>go get golang.org/x/text@latest</td><td>拉取最新的版本，若存在 tag，则优先使用。</td></tr><tr><td>go get golang.org/x/text@master</td><td>拉取 master 分支的最新 commit。</td></tr><tr><td>go get golang.org/x/<a href="mailto:text@v0.3.2">text@v0.3.2</a></td><td>拉取 tag 为 v0.3.2 的 commit。</td></tr><tr><td>go get golang.org/x/text@342b2e</td><td>拉取 hash 为 342b231 的 commit，最终会被转换为 v0.3.2。</td></tr></tbody></table><h3 id="go-get-子参数说明"><a href="#go-get-子参数说明" class="headerlink" title="go get 子参数说明"></a>go get 子参数说明</h3><table><thead><tr><th>子命令</th><th>描述</th></tr></thead><tbody><tr><td>-d</td><td>仅下载，不安装</td></tr><tr><td>-f</td><td>和 -u 配合，强制更新，不检查是否过期</td></tr><tr><td>-t</td><td>下载测试代码所需的依赖包</td></tr><tr><td>-u</td><td>更新包，包括他们的依赖项</td></tr><tr><td>-v</td><td>输出详细信息</td></tr><tr><td>insecure</td><td>使用 http 等非安全协议</td></tr></tbody></table><h2 id="修改项目模块的版本依赖关系"><a href="#修改项目模块的版本依赖关系" class="headerlink" title="修改项目模块的版本依赖关系"></a>修改项目模块的版本依赖关系</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go mod edit <span class="token parameter variable">-replace</span><span class="token operator">=</span><span class="token operator">&lt;</span>老版本<span class="token operator">&gt;=</span><span class="token operator">&lt;</span>需要替换的版本<span class="token operator">&gt;</span><span class="token comment"># 比如</span>go mod edit <span class="token parameter variable">-replace</span><span class="token operator">=</span>demo-package@v1.0.0<span class="token operator">=</span>demo-package@v2.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="go-list-命令以及参数"><a href="#go-list-命令以及参数" class="headerlink" title="go list 命令以及参数"></a>go list 命令以及参数</h2><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-f</td><td>用于查看对应依赖结构体中的指定的字段，其默认值就是 <code>{{.ImportPath}}</code>，也就是导入路径，因此我们一般不需要进行调整</td></tr><tr><td>-json</td><td>显示的格式，若不指定该选项，则会一行行输出。</td></tr><tr><td>-u</td><td>显示能够升级的模块信息</td></tr><tr><td>-m</td><td>显示当前项目所依赖的全部模块</td></tr></tbody></table><p>比如查看 <code>gin</code> 框架的版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go list <span class="token parameter variable">-m</span> <span class="token parameter variable">-versions</span> <span class="token parameter variable">-json</span> github.com/gin-gonic/gin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">{</span><span class="token string">"Path"</span><span class="token builtin class-name">:</span> <span class="token string">"github.com/gin-gonic/gin"</span>,<span class="token string">"Version"</span><span class="token builtin class-name">:</span> <span class="token string">"v1.7.7"</span>,<span class="token string">"Versions"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"v1.1.1"</span>,<span class="token string">"v1.1.2"</span>,<span class="token string">"v1.1.3"</span>,<span class="token string">"v1.1.4"</span>,<span class="token string">"v1.3.0"</span>,<span class="token string">"v1.4.0"</span>,<span class="token string">"v1.5.0"</span>,<span class="token string">"v1.6.0"</span>,<span class="token string">"v1.6.1"</span>,<span class="token string">"v1.6.2"</span>,<span class="token string">"v1.6.3"</span>,<span class="token string">"v1.7.0"</span>,<span class="token string">"v1.7.1"</span>,<span class="token string">"v1.7.2"</span>,<span class="token string">"v1.7.3"</span>,<span class="token string">"v1.7.4"</span>,<span class="token string">"v1.7.6"</span>,<span class="token string">"v1.7.7"</span><span class="token punctuation">]</span>,<span class="token string">"Time"</span><span class="token builtin class-name">:</span> <span class="token string">"2021-11-24T13:54:13Z"</span>,<span class="token string">"Dir"</span><span class="token builtin class-name">:</span> <span class="token string">"/Users/pudongping/go/pkg/mod/github.com/gin-gonic/gin@v1.7.7"</span>,<span class="token string">"GoMod"</span><span class="token builtin class-name">:</span> <span class="token string">"/Users/pudongping/go/pkg/mod/cache/download/github.com/gin-gonic/gin/@v/v1.7.7.mod"</span>,<span class="token string">"GoVersion"</span><span class="token builtin class-name">:</span> <span class="token string">"1.13"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="私有库使用-Go-Modules-时"><a href="#私有库使用-Go-Modules-时" class="headerlink" title="私有库使用 Go Modules 时"></a>私有库使用 Go Modules 时</h2><ul><li>需要将 <code>GOPRIVATE</code> 环境变量设置成你私有库的域名</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># GO111MODULE 设置成 on 或者 auto 都行</span><span class="token assign-left variable">GO111MODULE</span><span class="token operator">=</span><span class="token string">"auto"</span><span class="token comment"># GOPROXY 最好设置成国内镜像地址</span><span class="token assign-left variable">GOPROXY</span><span class="token operator">=</span><span class="token string">"https://goproxy.cn,direct"</span><span class="token comment"># GOPRIVATE 一定要设置成你的私有库域名，比如</span><span class="token assign-left variable">GOPRIVATE</span><span class="token operator">=</span><span class="token string">"gitlab.xxx.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>然后执行以下命令即可。<strong>注意：前提是你能够通过 ssh 公钥拉取代码</strong></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 以下假设我私有 git 仓库地址为 gitlab.xxx.com:2222</span><span class="token comment"># 那么则需要调整为</span><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span> <span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">&gt;&gt;</span> ~/.gitconfig</span>[url "ssh://git@gitlab.xxx.com:2222"]        insteadOf = https://gitlab.xxx.comEOF</span><span class="token comment"># 或者执行（效果都是一样的）</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> url.<span class="token string">"ssh://git@gitlab.xxx.com:2222"</span>.insteadof <span class="token string">"https://gitlab.xxx.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试一下下载一个包</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 仅仅作为示范，此地址根本就不存在</span>go get <span class="token parameter variable">-v</span> gitlab.xxx.com/utils/arrayx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://segmentfault.com/a/1190000021854441">Go Modules 终极入门</a></li><li><a href="https://mp.weixin.qq.com/s/sWlTylbW2f1llbz232P2Fw">Go Modules 私有不合规库怎么解决引用问题</a></li><li><a href="https://studygolang.com/articles/35234">go modules 使用本地库、合规库、私有库</a></li><li><a href="https://studygolang.com/articles/35235">私有化仓库的 GO 模块使用实践</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hyperf 框架中将数据导出到 csv 文件中</title>
      <link href="posts/d0c857b0.html"/>
      <url>posts/d0c857b0.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hyperf-框架中将数据导出到-csv-文件中"><a href="#Hyperf-框架中将数据导出到-csv-文件中" class="headerlink" title="Hyperf 框架中将数据导出到 csv 文件中"></a>Hyperf 框架中将数据导出到 csv 文件中</h1><p>直接看代码吧……</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">declare</span><span class="token punctuation">(</span>strict_types<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Controller</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Hyperf<span class="token punctuation">\</span>HttpServer<span class="token punctuation">\</span>Annotation<span class="token punctuation">\</span>AutoController</span><span class="token punctuation">;</span><span class="token comment">/** * @AutoController * Class TestController * @package App\Controller */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">TestController</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractController</span><span class="token punctuation">{</span>    <span class="token comment">/**     * 请求测试：     * curl 'http://127.0.0.1:9511/test/csvExport' &gt;&gt; test.csv     *     * @return \Psr\Http\Message\ResponseInterface     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">csvExport</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$fileName</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'test.csv'</span><span class="token punctuation">;</span>        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token string single-quoted-string">'阿猫'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'11'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token string single-quoted-string">'阿狗'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'22'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token string single-quoted-string">'阿猪'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'33'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$data</span> <span class="token keyword">as</span> <span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$str</span> <span class="token operator">.=</span> <span class="token function">mb_convert_encoding</span><span class="token punctuation">(</span><span class="token function">implode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">','</span><span class="token punctuation">,</span> <span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'GBK'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'UTF-8'</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>Hyperf<span class="token punctuation">\</span>HttpServer<span class="token punctuation">\</span>Response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token operator">-&gt;</span><span class="token function">withHeader</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'content-type'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'text/csv'</span><span class="token punctuation">)</span>            <span class="token operator">-&gt;</span><span class="token function">withHeader</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'content-disposition'</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"attachment; filename=<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$fileName</span><span class="token punctuation">}</span></span>"</span><span class="token punctuation">)</span>            <span class="token operator">-&gt;</span><span class="token function">withHeader</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'content-transfer-encoding'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'binary'</span><span class="token punctuation">)</span>            <span class="token operator">-&gt;</span><span class="token function">withBody</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>Hyperf<span class="token punctuation">\</span>HttpMessage<span class="token punctuation">\</span>Stream<span class="token punctuation">\</span>SwooleStream</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>第一种：<br>直接使用浏览器访问 <code>http://127.0.0.1:9511/test/csvExport</code></p><p>第二种：<br>直接通过 <code>curl</code> 命令行访问 <code>curl 'http://127.0.0.1:9511/test/csvExport' &gt;&gt; test.csv</code></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hyperf </tag>
            
            <tag> Swoole </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang 开发环境搭建</title>
      <link href="posts/2417f014.html"/>
      <url>posts/2417f014.html</url>
      
        <content type="html"><![CDATA[<h1 id="Golang-开发环境搭建"><a href="#Golang-开发环境搭建" class="headerlink" title="Golang 开发环境搭建"></a>Golang 开发环境搭建</h1><h2 id="第一种方式：安装包安装"><a href="#第一种方式：安装包安装" class="headerlink" title="第一种方式：安装包安装"></a>第一种方式：安装包安装</h2><p>根据不同的操作系统安装对应的安装包：<a href="https://golang.google.cn/doc/install">https://golang.google.cn/doc/install</a>，如果是 mac 系统，还可以直接使用 Homebrew 安装</p><blockquote><p>直接通过 pkg 包安装的 go 卸载方式为： <code>sudo rm -rf /usr/local/go</code> 然后  <code>sudo rm -rf /etc/paths.d/go</code> 即可。</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> go<span class="token comment"># 查看 go 版本号，以确定是否安装成功</span>go version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查看环境变量</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token function">env</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>配置 go path</li></ul><p>需要为 Go 创建工作目录，在 $GOPATH 中创建 <code>bin、src、pkg</code> 三个文件夹</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token variable">$GOPATH</span>/<span class="token punctuation">{</span>bin,src,pkg<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>设置代理</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1. 七牛 CDN</span>go <span class="token function">env</span> <span class="token parameter variable">-w</span>  <span class="token assign-left variable">GOPROXY</span><span class="token operator">=</span>https://goproxy.cn,direct<span class="token comment"># 2. 阿里云</span>go <span class="token function">env</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">GOPROXY</span><span class="token operator">=</span>https://mirrors.aliyun.com/goproxy/,direct<span class="token comment"># 3. 官方</span>go <span class="token function">env</span> <span class="token parameter variable">-w</span>  <span class="token assign-left variable">GOPROXY</span><span class="token operator">=</span>https://goproxy.io,direct<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第二种方式：源码包下载安装"><a href="#第二种方式：源码包下载安装" class="headerlink" title="第二种方式：源码包下载安装"></a>第二种方式：源码包下载安装</h2><ul><li><a href="https://golang.org/dl">国外官方镜像</a></li><li><a href="https://golang.google.cn/dl/">中国镜像</a></li><li><a href="https://studygolang.com/dl">golang 中文网</a></li></ul><h3 id="源码包安装"><a href="#源码包安装" class="headerlink" title="源码包安装"></a>源码包安装</h3><ul><li>下载 Linux 源码包</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://golang.google.cn/dl/go1.17.2.linux-amd64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>解压源码包</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">tar</span> <span class="token parameter variable">-xzvf</span> go1.17.2.linux-amd64.tar.gz <span class="token parameter variable">-C</span> /usr/local<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>添加配置变量 <code>vim ~/.bashrc</code></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置 GO 语言的路径</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">GOROOT</span><span class="token operator">=</span>/usr/local/go  <span class="token comment"># 表示源码包所在路径</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">GOPATH</span><span class="token operator">=</span><span class="token environment constant">$HOME</span>/go  <span class="token comment"># 写 go 项目的工作路径，这里可以自定义</span><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$GOROOT</span>/bin:<span class="token variable">$GOPATH</span>/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写完之后保存，然后重新导入配置 <code>source ~/.bashrc</code></p><ul><li>如果使用的是 zsh 并且在 Mac 上使用 Homebrew 安装的 golang，那么</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置 GO 语言的路径</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">GOROOT</span><span class="token operator">=</span>/usr/local/Cellar/go/1.16.3/libexec<span class="token builtin class-name">export</span> <span class="token assign-left variable">GOPATH</span><span class="token operator">=</span><span class="token environment constant">$HOME</span>/glory/codes/golang  <span class="token comment"># 写 go 项目的工作路径，这里可以自定义</span><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$GOROOT</span>/bin:<span class="token variable">$GOPATH</span>/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写完之后保存，然后重新导入配置 <code>source ~/.zshrc</code></p><ul><li>检测开发环境</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看 go 版本</span>go versiongo <span class="token parameter variable">--help</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查看文档"><a href="#查看文档" class="headerlink" title="查看文档"></a>查看文档</h2><p>本地直接访问 go 文档</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">godoc <span class="token parameter variable">-http</span><span class="token operator">=</span>:6060<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果提示 <code>godoc</code> 命令不存在，则使用以下命令安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装方式一：</span>go get golang.org/x/tools<span class="token comment"># 安装方式二：</span><span class="token assign-left variable">GO111MODULE</span><span class="token operator">=</span>on  go <span class="token function">install</span> golang.org/x/tools/cmd/godoc@latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang http client 请求封装</title>
      <link href="posts/ce804739.html"/>
      <url>posts/ce804739.html</url>
      
        <content type="html"><![CDATA[<h1 id="Golang-http-client-请求封装"><a href="#Golang-http-client-请求封装" class="headerlink" title="Golang http client 请求封装"></a>Golang http client 请求封装</h1><p>使用原生 http 包简单的封装了一下 <code>get</code> 和 <code>post</code> 请求 <a href="https://github.com/pudongping/golang-tutorial/blob/main/project/http_client/httputil.go">源代码详见 Github</a></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> http_client<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"context"</span><span class="token string">"encoding/json"</span><span class="token string">"io/ioutil"</span><span class="token string">"net/http"</span><span class="token string">"net/url"</span><span class="token string">"strings"</span><span class="token string">"time"</span><span class="token string">"golang.org/x/net/context/ctxhttp"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">Get</span><span class="token punctuation">(</span>url <span class="token builtin">string</span><span class="token punctuation">,</span> req<span class="token punctuation">,</span> res <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> headers <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>http<span class="token punctuation">.</span>Response<span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>reqBody<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token function">AnyRequest</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"GET"</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>reqBody<span class="token punctuation">)</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">PostJSON</span><span class="token punctuation">(</span>url <span class="token builtin">string</span><span class="token punctuation">,</span> req<span class="token punctuation">,</span> res <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> headers <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>http<span class="token punctuation">.</span>Response<span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>reqBody<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span>headers<span class="token punctuation">[</span><span class="token string">"Content-Type"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"application/json"</span><span class="token keyword">return</span> <span class="token function">AnyRequest</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"POST"</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>reqBody<span class="token punctuation">)</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">PostForm</span><span class="token punctuation">(</span>url <span class="token builtin">string</span><span class="token punctuation">,</span> req url<span class="token punctuation">.</span>Values<span class="token punctuation">,</span> res <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> headers <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>http<span class="token punctuation">.</span>Response<span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>headers<span class="token punctuation">[</span><span class="token string">"Content-Type"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"application/x-www-form-urlencoded"</span><span class="token keyword">return</span> <span class="token function">AnyRequest</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">TODO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"POST"</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> req<span class="token punctuation">.</span><span class="token function">Encode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> res<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">AnyRequest</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> req <span class="token builtin">string</span><span class="token punctuation">,</span> res <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> headers <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>responseObj <span class="token operator">*</span>http<span class="token punctuation">.</span>Response<span class="token punctuation">,</span> responseBody <span class="token builtin">string</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>payload <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>request<span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewRequest</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> headers <span class="token punctuation">{</span>request<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 请求超时时间为 5 秒钟</span>client <span class="token operator">:=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Client<span class="token punctuation">{</span>Timeout<span class="token punctuation">:</span> time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token comment">// response, err := client.Do(request)</span>response<span class="token punctuation">,</span> err <span class="token operator">:=</span> ctxhttp<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> client<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token keyword">defer</span> response<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>resBody<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token keyword">if</span> err <span class="token operator">=</span> json<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>resBody<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token keyword">return</span> response<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>resBody<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="调用示例"><a href="#调用示例" class="headerlink" title="调用示例"></a>调用示例</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> http_client<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"context"</span><span class="token string">"encoding/json"</span><span class="token string">"fmt"</span><span class="token string">"net/url"</span><span class="token string">"testing"</span><span class="token string">"time"</span><span class="token string">"github.com/davecgh/go-spew/spew"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Result <span class="token keyword">struct</span> <span class="token punctuation">{</span>Args    <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>       <span class="token string">`json:"args"`</span>Data    <span class="token builtin">string</span>            <span class="token string">`json:"data"`</span>Files   <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>       <span class="token string">`json:"files"`</span>Form    <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>       <span class="token string">`json:"form"`</span>Headers <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token string">`json:"headers"`</span>Json    <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>       <span class="token string">`json:"json"`</span>Method  <span class="token builtin">string</span>            <span class="token string">`json:"method"`</span>Origin  <span class="token builtin">string</span>            <span class="token string">`json:"origin"`</span>Url     <span class="token builtin">string</span>            <span class="token string">`json:"url"`</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestGet</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>reqUrl <span class="token operator">:=</span> <span class="token string">"https://httpbin.org/anything?name=alex&amp;age=18"</span>req <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"param1"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"param2"</span><span class="token punctuation">:</span> <span class="token string">"hello world"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment">// var res map[string]interface{}</span><span class="token keyword">var</span> res Result<span class="token boolean">_</span><span class="token punctuation">,</span> body<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">Get</span><span class="token punctuation">(</span>reqUrl<span class="token punctuation">,</span> req<span class="token punctuation">,</span> <span class="token operator">&amp;</span>res<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"有错误 %v \n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// {</span><span class="token comment">//  "args": {</span><span class="token comment">//    "age": "18",</span><span class="token comment">//    "name": "alex"</span><span class="token comment">//  },</span><span class="token comment">//  "data": "{\"param1\":[1,2,3],\"param2\":\"hello world\",\"param3\":{\"param31\":\"value31\",\"param32\":12345,\"param33\":[11,33,44]}}",</span><span class="token comment">//  "files": {},</span><span class="token comment">//  "form": {},</span><span class="token comment">//  "headers": {</span><span class="token comment">//    "Accept-Encoding": "gzip",</span><span class="token comment">//    "Content-Length": "109",</span><span class="token comment">//    "Content-Type": "application/json",</span><span class="token comment">//    "Host": "httpbin.org",</span><span class="token comment">//    "Token": "123456",</span><span class="token comment">//    "User-Agent": "App/",</span><span class="token comment">//    "X-Amzn-Trace-Id": "Root=1-6358a5b4-5f9ceebc28bd7db245d4accc"</span><span class="token comment">//  },</span><span class="token comment">//  "json": {</span><span class="token comment">//    "param1": [</span><span class="token comment">//      1,</span><span class="token comment">//      2,</span><span class="token comment">//      3</span><span class="token comment">//    ],</span><span class="token comment">//    "param2": "hello world",</span><span class="token comment">//    "param3": {</span><span class="token comment">//      "param31": "value31",</span><span class="token comment">//      "param32": 12345,</span><span class="token comment">//      "param33": [</span><span class="token comment">//        11,</span><span class="token comment">//        33,</span><span class="token comment">//        44</span><span class="token comment">//      ]</span><span class="token comment">//    }</span><span class="token comment">//  },</span><span class="token comment">//  "method": "POST",</span><span class="token comment">//  "origin": "112.65.11.169",</span><span class="token comment">//  "url": "https://httpbin.org/anything?name=alex&amp;age=18"</span><span class="token comment">// }</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"=====&gt;"</span><span class="token punctuation">)</span>spew<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestPostJSON</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>reqUrl <span class="token operator">:=</span> <span class="token string">"https://httpbin.org/anything?name=alex&amp;age=18"</span>req <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"param1"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"param2"</span><span class="token punctuation">:</span> <span class="token string">"hello world"</span><span class="token punctuation">,</span><span class="token string">"param3"</span><span class="token punctuation">:</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"param31"</span><span class="token punctuation">:</span> <span class="token string">"value31"</span><span class="token punctuation">,</span><span class="token string">"param32"</span><span class="token punctuation">:</span> <span class="token number">12345</span><span class="token punctuation">,</span><span class="token string">"param33"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">var</span> res <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>headers <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"App/"</span><span class="token punctuation">,</span><span class="token string">"Token"</span><span class="token punctuation">:</span>      <span class="token string">"123456"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token boolean">_</span><span class="token punctuation">,</span> body<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">PostJSON</span><span class="token punctuation">(</span>reqUrl<span class="token punctuation">,</span> req<span class="token punctuation">,</span> <span class="token operator">&amp;</span>res<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"有错误 %v \n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"=====&gt;"</span><span class="token punctuation">)</span>spew<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestPostForm</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span>reqUrl <span class="token operator">:=</span> <span class="token string">"https://httpbin.org/anything?name=alex&amp;age=18"</span>req <span class="token operator">:=</span> url<span class="token punctuation">.</span>Values<span class="token punctuation">{</span><span class="token string">"param1"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"value11"</span><span class="token punctuation">,</span> <span class="token string">"value12"</span><span class="token punctuation">,</span> <span class="token string">"value13"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"param2"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"value21"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">var</span> res <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>headers <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"App/"</span><span class="token punctuation">,</span><span class="token string">"Token"</span><span class="token punctuation">:</span>      <span class="token string">"123456"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token boolean">_</span><span class="token punctuation">,</span> body<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">PostForm</span><span class="token punctuation">(</span>reqUrl<span class="token punctuation">,</span> req<span class="token punctuation">,</span> <span class="token operator">&amp;</span>res<span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"有错误 %v \n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// {</span><span class="token comment">//  "args": {</span><span class="token comment">//    "age": "18",</span><span class="token comment">//    "name": "alex"</span><span class="token comment">//  },</span><span class="token comment">//  "data": "",</span><span class="token comment">//  "files": {},</span><span class="token comment">//  "form": {</span><span class="token comment">//    "param1": [</span><span class="token comment">//      "value11",</span><span class="token comment">//      "value12",</span><span class="token comment">//      "value13"</span><span class="token comment">//    ],</span><span class="token comment">//    "param2": "value21"</span><span class="token comment">//  },</span><span class="token comment">//  "headers": {</span><span class="token comment">//    "Accept-Encoding": "gzip",</span><span class="token comment">//    "Content-Length": "59",</span><span class="token comment">//    "Content-Type": "application/x-www-form-urlencoded",</span><span class="token comment">//    "Host": "httpbin.org",</span><span class="token comment">//    "Token": "123456",</span><span class="token comment">//    "User-Agent": "App/",</span><span class="token comment">//    "X-Amzn-Trace-Id": "Root=1-6358a4da-33ec2e5104331c413171db1b"</span><span class="token comment">//  },</span><span class="token comment">//  "json": null,</span><span class="token comment">//  "method": "POST",</span><span class="token comment">//  "origin": "112.65.11.169",</span><span class="token comment">//  "url": "https://httpbin.org/anything?name=alex&amp;age=18"</span><span class="token comment">// }</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"=====&gt;"</span><span class="token punctuation">)</span>spew<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">func</span> <span class="token function">TestAnyRequest</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 如果将时间设置稍微短一点，比如说 2 秒，那么可能 delete 请求会成功，但是 put 请求可能会因为上下文超时而中断掉</span>ctx<span class="token punctuation">,</span> cancel <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">WithTimeout</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>Second<span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">defer</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>reqUrl <span class="token operator">:=</span> <span class="token string">"https://httpbin.org/anything/123"</span><span class="token keyword">var</span> err <span class="token builtin">error</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"DELETE start"</span><span class="token punctuation">)</span><span class="token keyword">var</span> deleteRes <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token boolean">_</span><span class="token punctuation">,</span> deleteBody<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">AnyRequest</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"DELETE"</span><span class="token punctuation">,</span> reqUrl<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>deleteRes<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"DELETE 有错误 %v \n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// {</span><span class="token comment">//  "args": {},</span><span class="token comment">//  "data": "",</span><span class="token comment">//  "files": {},</span><span class="token comment">//  "form": {},</span><span class="token comment">//  "headers": {</span><span class="token comment">//    "Accept-Encoding": "gzip",</span><span class="token comment">//    "Host": "httpbin.org",</span><span class="token comment">//    "User-Agent": "Go-http-client/2.0",</span><span class="token comment">//    "X-Amzn-Trace-Id": "Root=1-6358db58-76062ef533376565790e1d8a"</span><span class="token comment">//  },</span><span class="token comment">//  "json": null,</span><span class="token comment">//  "method": "DELETE",</span><span class="token comment">//  "origin": "112.65.11.169",</span><span class="token comment">//  "url": "https://httpbin.org/anything/123"</span><span class="token comment">// }</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>deleteBody<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"DELETE =====&gt;"</span><span class="token punctuation">)</span>spew<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span>deleteRes<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"DELETE end"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"============================&gt;"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"PUT start"</span><span class="token punctuation">)</span><span class="token keyword">var</span> putRes <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span>putReq <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"param1"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"param2"</span><span class="token punctuation">:</span> <span class="token string">"value2"</span><span class="token punctuation">,</span><span class="token string">"param3"</span><span class="token punctuation">:</span> <span class="token number">123</span><span class="token punctuation">,</span><span class="token punctuation">}</span>putPayload<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>putReq<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"PUT 有错误 %v \n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>putHeaders <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span><span class="token string">"Token"</span><span class="token punctuation">:</span>        <span class="token string">"1234"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token boolean">_</span><span class="token punctuation">,</span> putBody<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">AnyRequest</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> <span class="token string">"PUT"</span><span class="token punctuation">,</span> reqUrl<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>putPayload<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>putRes<span class="token punctuation">,</span> putHeaders<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>t<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"PUT 有错误 %v \n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// {</span><span class="token comment">//  "args": {},</span><span class="token comment">//  "data": "{\"param1\":[11,22,33],\"param2\":\"value2\",\"param3\":123}",</span><span class="token comment">//  "files": {},</span><span class="token comment">//  "form": {},</span><span class="token comment">//  "headers": {</span><span class="token comment">//    "Accept-Encoding": "gzip",</span><span class="token comment">//    "Content-Length": "52",</span><span class="token comment">//    "Content-Type": "application/json",</span><span class="token comment">//    "Host": "httpbin.org",</span><span class="token comment">//    "Token": "1234",</span><span class="token comment">//    "User-Agent": "Go-http-client/2.0",</span><span class="token comment">//    "X-Amzn-Trace-Id": "Root=1-6358de6f-44d849be16f5a4c477b07616"</span><span class="token comment">//  },</span><span class="token comment">//  "json": {</span><span class="token comment">//    "param1": [</span><span class="token comment">//      11,</span><span class="token comment">//      22,</span><span class="token comment">//      33</span><span class="token comment">//    ],</span><span class="token comment">//    "param2": "value2",</span><span class="token comment">//    "param3": 123</span><span class="token comment">//  },</span><span class="token comment">//  "method": "PUT",</span><span class="token comment">//  "origin": "112.65.11.169",</span><span class="token comment">//  "url": "https://httpbin.org/anything/123"</span><span class="token comment">// }</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>putBody<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"PUT =====&gt;"</span><span class="token punctuation">)</span>spew<span class="token punctuation">.</span><span class="token function">Dump</span><span class="token punctuation">(</span>putRes<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"PUT end"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Golang </tag>
            
            <tag> Http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang 时间操作大全</title>
      <link href="posts/d0937fdd.html"/>
      <url>posts/d0937fdd.html</url>
      
        <content type="html"><![CDATA[<h1 id="Golang-时间操作大全"><a href="#Golang-时间操作大全" class="headerlink" title="Golang 时间操作大全"></a>Golang 时间操作大全</h1><p><a href="https://github.com/pudongping/golang-tutorial/blob/main/project/time_helper/time_explore.go">源代码详见 GitHub</a></p><h2 id="获取时间"><a href="#获取时间" class="headerlink" title="获取时间"></a>获取时间</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 获取当前时间</span>now <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 当前时间 ====&gt; 2022-10-24 23:36:33.47472 +0800 CST m=+0.000077400 typeof ===&gt; time.Time</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"当前时间 ====&gt; %v typeof ===&gt; %T \n"</span><span class="token punctuation">,</span> now<span class="token punctuation">,</span> now<span class="token punctuation">)</span><span class="token comment">// 获取当前时间的年、月、日、时、分、秒、纳秒、微妙、毫秒</span>year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 当前时间年月日 ====&gt; [2022][October][24] typeof ===&gt; [int][time.Month][int]</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"当前时间年月日 ====&gt; [%v][%v][%v] typeof ===&gt; [%T][%T][%T] \n"</span><span class="token punctuation">,</span> year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day<span class="token punctuation">,</span> year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day<span class="token punctuation">)</span>nowYear <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Year</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 当前时间年 ====&gt; 2022 typeof ===&gt; int</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"当前时间年 ====&gt; %v typeof ===&gt; %T \n"</span><span class="token punctuation">,</span> nowYear<span class="token punctuation">,</span> nowYear<span class="token punctuation">)</span>nowMonth <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Month</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 当前时间月 ====&gt; October typeof ===&gt; time.Month</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"当前时间月 ====&gt; %v typeof ===&gt; %T \n"</span><span class="token punctuation">,</span> nowMonth<span class="token punctuation">,</span> nowMonth<span class="token punctuation">)</span>nowDay <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Day</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 当前时间日 ====&gt; 24 typeof ===&gt; int</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"当前时间日 ====&gt; %v typeof ===&gt; %T \n"</span><span class="token punctuation">,</span> nowDay<span class="token punctuation">,</span> nowDay<span class="token punctuation">)</span>hour<span class="token punctuation">,</span> minute<span class="token punctuation">,</span> second <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 当前时间时分秒 ====&gt; [23][36][33] typeof ===&gt; [int][int][int]</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"当前时间时分秒 ====&gt; [%v][%v][%v] typeof ===&gt; [%T][%T][%T] \n"</span><span class="token punctuation">,</span> hour<span class="token punctuation">,</span> minute<span class="token punctuation">,</span> second<span class="token punctuation">,</span> hour<span class="token punctuation">,</span> minute<span class="token punctuation">,</span> second<span class="token punctuation">)</span>nowHour <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Hour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 当前时间时 ====&gt; 23 typeof ===&gt; int</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"当前时间时 ====&gt; %v typeof ===&gt; %T \n"</span><span class="token punctuation">,</span> nowHour<span class="token punctuation">,</span> nowHour<span class="token punctuation">)</span>nowMinute <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Minute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 当前时间分 ====&gt; 36 typeof ===&gt; int</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"当前时间分 ====&gt; %v typeof ===&gt; %T \n"</span><span class="token punctuation">,</span> nowMinute<span class="token punctuation">,</span> nowMinute<span class="token punctuation">)</span>nowSecond <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Second</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 当前时间秒 ====&gt; 33 typeof ===&gt; int</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"当前时间秒 ====&gt; %v typeof ===&gt; %T \n"</span><span class="token punctuation">,</span> nowSecond<span class="token punctuation">,</span> nowSecond<span class="token punctuation">)</span><span class="token comment">// 1秒(s) ＝1000毫秒(ms)</span><span class="token comment">// 1毫秒(ms)＝1000微秒 (us) ==&gt; Milliseconds ==&gt; 毫秒</span><span class="token comment">// 1微秒(us)＝1000纳秒 (ns)  ==&gt; Microseconds  ==&gt; 微秒</span><span class="token comment">// 1纳秒(ns)＝1000皮秒 (ps)  ==&gt; Nanoseconds  ==&gt; 纳秒</span>nowNanosecond <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Nanosecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 当前时间纳秒 ====&gt; 474905000 typeof ===&gt; int</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"当前时间纳秒 ====&gt; %v typeof ===&gt; %T \n"</span><span class="token punctuation">,</span> nowNanosecond<span class="token punctuation">,</span> nowNanosecond<span class="token punctuation">)</span><span class="token comment">// 获取当前时间戳</span>nowUnix <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 当前时间时间戳（秒级别） ====&gt; 1666625793 typeof ===&gt; int64</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"当前时间时间戳（秒级别） ====&gt; %v typeof ===&gt; %T \n"</span><span class="token punctuation">,</span> nowUnix<span class="token punctuation">,</span> nowUnix<span class="token punctuation">)</span>nowUnixNano <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">UnixNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 当前时间时间戳（纳秒级别） ====&gt; 1666625793474909000 typeof ===&gt; int64</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"当前时间时间戳（纳秒级别） ====&gt; %v typeof ===&gt; %T \n"</span><span class="token punctuation">,</span> nowUnixNano<span class="token punctuation">,</span> nowUnixNano<span class="token punctuation">)</span>weekDay <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Weekday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 当前星期几 ====&gt; Monday typeof ===&gt; time.Weekday</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"当前星期几 ====&gt; %v typeof ===&gt; %T \n"</span><span class="token punctuation">,</span> weekDay<span class="token punctuation">,</span> weekDay<span class="token punctuation">)</span>yearDay <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">YearDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 当前是一年中对应的第几天 ====&gt; 297 typeof ===&gt; int</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"当前是一年中对应的第几天 ====&gt; %v typeof ===&gt; %T \n"</span><span class="token punctuation">,</span> yearDay<span class="token punctuation">,</span> yearDay<span class="token punctuation">)</span>location <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Location</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 当前用的时区为 ====&gt; Local typeof ===&gt; *time.Location</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"当前用的时区为 ====&gt; %v typeof ===&gt; %T \n"</span><span class="token punctuation">,</span> location<span class="token punctuation">,</span> location<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="时间转化"><a href="#时间转化" class="headerlink" title="时间转化"></a>时间转化</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 格式化时间</span>ymdhis <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"2006-01-02 15:04:05"</span><span class="token punctuation">)</span><span class="token comment">// 当前时间 ====&gt; 2022-10-24 23:40:31 typeof ===&gt; string</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"当前时间 ====&gt; %v typeof ===&gt; %T \n"</span><span class="token punctuation">,</span> ymdhis<span class="token punctuation">,</span> ymdhis<span class="token punctuation">)</span>ymdhis1 <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"2006-01-02"</span><span class="token punctuation">)</span><span class="token comment">// 当前时间 ====&gt; 2022-10-24 typeof ===&gt; string</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"当前时间 ====&gt; %v typeof ===&gt; %T \n"</span><span class="token punctuation">,</span> ymdhis1<span class="token punctuation">,</span> ymdhis1<span class="token punctuation">)</span>ymdhis2 <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"20060102"</span><span class="token punctuation">)</span><span class="token comment">// 当前时间 ====&gt; 20221024 typeof ===&gt; string</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"当前时间 ====&gt; %v typeof ===&gt; %T \n"</span><span class="token punctuation">,</span> ymdhis2<span class="token punctuation">,</span> ymdhis2<span class="token punctuation">)</span>ymdhis3 <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"15:04:05"</span><span class="token punctuation">)</span><span class="token comment">// 当前时间 ====&gt; 23:40:31 typeof ===&gt; string</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"当前时间 ====&gt; %v typeof ===&gt; %T \n"</span><span class="token punctuation">,</span> ymdhis3<span class="token punctuation">,</span> ymdhis3<span class="token punctuation">)</span>ymdhis4 <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"150405"</span><span class="token punctuation">)</span><span class="token comment">// 当前时间 ====&gt; 234031 typeof ===&gt; string</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"当前时间 ====&gt; %v typeof ===&gt; %T \n"</span><span class="token punctuation">,</span> ymdhis4<span class="token punctuation">,</span> ymdhis4<span class="token punctuation">)</span>y <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"2006"</span><span class="token punctuation">)</span><span class="token comment">// 当前时间年 ====&gt; 2022 typeof ===&gt; string</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"当前时间年 ====&gt; %v typeof ===&gt; %T \n"</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> y<span class="token punctuation">)</span>m <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"01"</span><span class="token punctuation">)</span><span class="token comment">// 当前时间月 ====&gt; 10 typeof ===&gt; string</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"当前时间月 ====&gt; %v typeof ===&gt; %T \n"</span><span class="token punctuation">,</span> m<span class="token punctuation">,</span> m<span class="token punctuation">)</span>d <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"02"</span><span class="token punctuation">)</span><span class="token comment">// 当前时间日 ====&gt; 24 typeof ===&gt; string</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"当前时间日 ====&gt; %v typeof ===&gt; %T \n"</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> d<span class="token punctuation">)</span>h <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"15"</span><span class="token punctuation">)</span><span class="token comment">// 当前时间时 ====&gt; 23 typeof ===&gt; string</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"当前时间时 ====&gt; %v typeof ===&gt; %T \n"</span><span class="token punctuation">,</span> h<span class="token punctuation">,</span> h<span class="token punctuation">)</span>i <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"04"</span><span class="token punctuation">)</span><span class="token comment">// 当前时间分 ====&gt; 40 typeof ===&gt; string</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"当前时间分 ====&gt; %v typeof ===&gt; %T \n"</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span>s <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"05"</span><span class="token punctuation">)</span><span class="token comment">// 当前时间秒 ====&gt; 31 typeof ===&gt; string</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"当前时间秒 ====&gt; %v typeof ===&gt; %T \n"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token comment">// 时间戳转时间格式</span><span class="token keyword">var</span> timeUnix <span class="token builtin">int64</span> <span class="token operator">=</span> <span class="token number">1666599090</span>goTimeUnix <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span>timeUnix<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">// 已知时间戳转 go 格式时间 ====&gt; 2022-10-24 16:11:30 +0800 CST typeof ===&gt; time.Time</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"已知时间戳转 go 格式时间 ====&gt; %v typeof ===&gt; %T \n"</span><span class="token punctuation">,</span> goTimeUnix<span class="token punctuation">,</span> goTimeUnix<span class="token punctuation">)</span>goTimeUnixFormat <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span>timeUnix<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"2006-01-02 15:04:05"</span><span class="token punctuation">)</span><span class="token comment">// 已知时间戳转 ymdhis 格式时间 ====&gt; 2022-10-24 16:11:30 typeof ===&gt; string</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"已知时间戳转 ymdhis 格式时间 ====&gt; %v typeof ===&gt; %T \n"</span><span class="token punctuation">,</span> goTimeUnixFormat<span class="token punctuation">,</span> goTimeUnixFormat<span class="token punctuation">)</span><span class="token comment">// 获取指定时间的时间戳</span>dateUnix <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Date</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>Local<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 2022-10-24 16:11:30 的时间戳为 ====&gt; 1666599090 typeof ===&gt; int64</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"2022-10-24 16:11:30 的时间戳为 ====&gt; %v typeof ===&gt; %T \n"</span><span class="token punctuation">,</span> dateUnix<span class="token punctuation">,</span> dateUnix<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="时间计算"><a href="#时间计算" class="headerlink" title="时间计算"></a>时间计算</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 获取当天 0 时 0 分 0 秒的时间戳</span>currentTime <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>startTime <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Date</span><span class="token punctuation">(</span>currentTime<span class="token punctuation">.</span><span class="token function">Year</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> currentTime<span class="token punctuation">.</span><span class="token function">Month</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> currentTime<span class="token punctuation">.</span><span class="token function">Day</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> currentTime<span class="token punctuation">.</span><span class="token function">Location</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 当天 0 时 0 分 0 秒的时间戳 ====&gt; 2022-10-24 00:00:00 +0800 CST typeof ===&gt; time.Time</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"当天 0 时 0 分 0 秒的时间戳 ====&gt; %v typeof ===&gt; %T \n"</span><span class="token punctuation">,</span> startTime<span class="token punctuation">,</span> startTime<span class="token punctuation">)</span><span class="token comment">// 当天 0 时 0 分 0 秒的时间 ====&gt; 2022-10-24 00:00:00</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"当天 0 时 0 分 0 秒的时间 ====&gt; %v \n"</span><span class="token punctuation">,</span> startTime<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"2006-01-02 15:04:05"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 获取当天 23 时 59 分 59 秒的时间戳</span>endTime <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Date</span><span class="token punctuation">(</span>currentTime<span class="token punctuation">.</span><span class="token function">Year</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> currentTime<span class="token punctuation">.</span><span class="token function">Month</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> currentTime<span class="token punctuation">.</span><span class="token function">Day</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> currentTime<span class="token punctuation">.</span><span class="token function">Location</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 当天 23 时 59 分 59 秒的时间戳 ====&gt; 2022-10-24 23:59:59 +0800 CST typeof ===&gt; time.Time</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"当天 23 时 59 分 59 秒的时间戳 ====&gt; %v typeof ===&gt; %T \n"</span><span class="token punctuation">,</span> endTime<span class="token punctuation">,</span> endTime<span class="token punctuation">)</span><span class="token comment">// 当天 23 时 59 分 59 秒的时间 ====&gt; 2022-10-24 23:59:59</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"当天 23 时 59 分 59 秒的时间 ====&gt; %v \n"</span><span class="token punctuation">,</span> endTime<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"2006-01-02 15:04:05"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 不超过 24 小时的时间计算</span>currentYmdHis <span class="token operator">:=</span> currentTime<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"2006-01-02 15:04:05"</span><span class="token punctuation">)</span><span class="token comment">// 获取 1 秒钟前的时间</span>t1<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">ParseDuration</span><span class="token punctuation">(</span><span class="token string">"-1s"</span><span class="token punctuation">)</span>r1 <span class="token operator">:=</span> currentTime<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"2006-01-02 15:04:05"</span><span class="token punctuation">)</span><span class="token comment">// 当前时间 2022-10-24 23:44:12 ===&gt; 1 秒钟前的时间 ===&gt; 2022-10-24 23:44:11</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"当前时间 %v ===&gt; 1 秒钟前的时间 ===&gt; %v \n"</span><span class="token punctuation">,</span> currentYmdHis<span class="token punctuation">,</span> r1<span class="token punctuation">)</span>t2<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">ParseDuration</span><span class="token punctuation">(</span><span class="token string">"2h"</span><span class="token punctuation">)</span>r2 <span class="token operator">:=</span> currentTime<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>t2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"2006-01-02 15:04:05"</span><span class="token punctuation">)</span><span class="token comment">// 当前时间 2022-10-24 23:44:12 ===&gt; 2 小时后的时间 ===&gt; 2022-10-25 01:44:12</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"当前时间 %v ===&gt; 2 小时后的时间 ===&gt; %v \n"</span><span class="token punctuation">,</span> currentYmdHis<span class="token punctuation">,</span> r2<span class="token punctuation">)</span>t3<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">ParseDuration</span><span class="token punctuation">(</span><span class="token string">"1h2m30s"</span><span class="token punctuation">)</span>r3 <span class="token operator">:=</span> currentTime<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>t3<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"2006-01-02 15:04:05"</span><span class="token punctuation">)</span><span class="token comment">// 当前时间 2022-10-24 23:44:12 ===&gt; 1 小时 2 分 30 秒后的时间 ===&gt; 2022-10-25 00:46:42</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"当前时间 %v ===&gt; 1 小时 2 分 30 秒后的时间 ===&gt; %v \n"</span><span class="token punctuation">,</span> currentYmdHis<span class="token punctuation">,</span> r3<span class="token punctuation">)</span><span class="token comment">// 计算两个时间相差多少</span>t4<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">ParseDuration</span><span class="token punctuation">(</span><span class="token string">"1h"</span><span class="token punctuation">)</span>r4 <span class="token operator">:=</span> currentTime<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>t4 <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 注意：这里是 2 小时后的时间</span>t5<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">ParseDuration</span><span class="token punctuation">(</span><span class="token string">"-1h30m"</span><span class="token punctuation">)</span>r5 <span class="token operator">:=</span> currentTime<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>t5<span class="token punctuation">)</span><span class="token comment">// 相差 12600 秒</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"相差 %v 秒 \n"</span><span class="token punctuation">,</span> r4<span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>r5<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 相差 210 分钟</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"相差 %v 分钟 \n"</span><span class="token punctuation">,</span> r4<span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>r5<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Minutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 相差 3.5 小时</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"相差 %v 小时 \n"</span><span class="token punctuation">,</span> r4<span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>r5<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Hours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 相差 0.14583333333333334 天</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"相差 %v 天 \n"</span><span class="token punctuation">,</span> r4<span class="token punctuation">.</span><span class="token function">Sub</span><span class="token punctuation">(</span>r5<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Hours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token comment">// 超过 24 小时之外的时间计算</span>t6 <span class="token operator">:=</span> currentTime<span class="token punctuation">.</span><span class="token function">AddDate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>r6 <span class="token operator">:=</span> t6<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"2006-01-02 15:04:05"</span><span class="token punctuation">)</span><span class="token comment">// 当前时间 2022-10-24 23:44:12 ===&gt; 2 个月 1 天后的时间 ===&gt; 2022-12-25 23:44:12</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"当前时间 %v ===&gt; 2 个月 1 天后的时间 ===&gt; %v \n"</span><span class="token punctuation">,</span> currentYmdHis<span class="token punctuation">,</span> r6<span class="token punctuation">)</span>t7 <span class="token operator">:=</span> currentTime<span class="token punctuation">.</span><span class="token function">AddDate</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span>r7 <span class="token operator">:=</span> t7<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"2006-01-02 15:04:05"</span><span class="token punctuation">)</span><span class="token comment">// 当前时间 2022-10-24 23:44:12 ===&gt; 5 天前的时间 ===&gt; 2022-10-19 23:44:12</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"当前时间 %v ===&gt; 5 天前的时间 ===&gt; %v \n"</span><span class="token punctuation">,</span> currentYmdHis<span class="token punctuation">,</span> r7<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="时间判断比较"><a href="#时间判断比较" class="headerlink" title="时间判断比较"></a>时间判断比较</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go">now <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>s <span class="token operator">:=</span> now<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token string">"2006-01-02 15:04:05"</span><span class="token punctuation">)</span><span class="token comment">// 当前时间为 2022-11-12 19:45:36</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"当前时间为 %s \n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token comment">// 时间比较</span><span class="token comment">// 尽可能的使用 time.ParseInLocation() 方法，因为可以手动指定时区</span><span class="token comment">// 而少用 time.Parse() 方法，因为默认的时区为 UTC（零时区）</span>startTime<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token string">"2006-01-02 15:04:05"</span><span class="token punctuation">,</span> <span class="token string">"2022-10-24 18:18:00"</span><span class="token punctuation">)</span>isBefore <span class="token operator">:=</span> startTime<span class="token punctuation">.</span><span class="token function">Before</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span>isAfter <span class="token operator">:=</span> startTime<span class="token punctuation">.</span><span class="token function">After</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span>isEqual <span class="token operator">:=</span> startTime<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token comment">// 2022-10-24 18:18:00 是否在 2022-11-12 19:45:36 之前？ true</span><span class="token comment">// 是否在 2022-11-12 19:45:36 之后？ false</span><span class="token comment">// 还是相等？ false</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"2022-10-24 18:18:00 是否在 %s 之前？ %v \n 是否在 %s 之后？ %v \n还是相等？ %v\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">,</span> isBefore<span class="token punctuation">,</span> s<span class="token punctuation">,</span> isAfter<span class="token punctuation">,</span> isEqual<span class="token punctuation">)</span>sTime <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">// time.Since(t Time) Duration 【当前时间与时间 t 的时间差（也就是当前时间减去 t 的差）】</span><span class="token comment">// time.Until(t Time) Duration 【时间 t 与当前时间的差（也就是时间 t 减去当前时间）】</span><span class="token comment">// 程序开始执行时间为：1666626449 结束执行时间为：1666626452 执行了多长时间：3.003903595s 秒钟</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"程序开始执行时间为：%v 结束执行时间为：%v 执行了多长时间：%v 秒钟 \n"</span><span class="token punctuation">,</span> sTime<span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>sTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 程序在 -3.004024213s 秒钟前执行</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"程序在 %v 秒钟前执行 \n"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Until</span><span class="token punctuation">(</span>sTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="调整时区"><a href="#调整时区" class="headerlink" title="调整时区"></a>调整时区</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 转换时间时，指定时区</span><span class="token keyword">var</span> timeParseInTimeZone <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span>layout<span class="token punctuation">,</span> inputTime<span class="token punctuation">,</span> timezone <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>chinaTimezone<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">LoadLocation</span><span class="token punctuation">(</span>timezone<span class="token punctuation">)</span> <span class="token comment">// 指定时区</span><span class="token comment">// 尽可能的使用 time.ParseInLocation() 方法，因为可以手动指定时区</span><span class="token comment">// 而少用 time.Parse() 方法，因为默认的时区为 UTC（零时区）</span>t<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">ParseInLocation</span><span class="token punctuation">(</span>layout<span class="token punctuation">,</span> inputTime<span class="token punctuation">,</span> chinaTimezone<span class="token punctuation">)</span><span class="token keyword">return</span> time<span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">In</span><span class="token punctuation">(</span>chinaTimezone<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span>layout<span class="token punctuation">)</span><span class="token punctuation">}</span>layout <span class="token operator">:=</span> <span class="token string">"2006-01-02 15:04:05"</span>inputTime <span class="token operator">:=</span> <span class="token string">"2022-10-24 21:56:59"</span><span class="token comment">// 你本机系统得有你设置的时区才行，不然也会走的你系统默认设定的时区</span>t1 <span class="token operator">:=</span> <span class="token function">timeParseInTimeZone</span><span class="token punctuation">(</span>layout<span class="token punctuation">,</span> inputTime<span class="token punctuation">,</span> <span class="token string">"Asia/Shanghai"</span><span class="token punctuation">)</span>t2 <span class="token operator">:=</span> <span class="token function">timeParseInTimeZone</span><span class="token punctuation">(</span>layout<span class="token punctuation">,</span> inputTime<span class="token punctuation">,</span> <span class="token string">"Asia/Chongqing"</span><span class="token punctuation">)</span>t3 <span class="token operator">:=</span> <span class="token function">timeParseInTimeZone</span><span class="token punctuation">(</span>layout<span class="token punctuation">,</span> inputTime<span class="token punctuation">,</span> <span class="token string">"PRC"</span><span class="token punctuation">)</span>              <span class="token comment">// 中华人民共和国</span>t4 <span class="token operator">:=</span> <span class="token function">timeParseInTimeZone</span><span class="token punctuation">(</span>layout<span class="token punctuation">,</span> inputTime<span class="token punctuation">,</span> <span class="token string">"Asia/Singapore"</span><span class="token punctuation">)</span>   <span class="token comment">// 新加坡(UTC+08:00)</span>t5 <span class="token operator">:=</span> <span class="token function">timeParseInTimeZone</span><span class="token punctuation">(</span>layout<span class="token punctuation">,</span> inputTime<span class="token punctuation">,</span> <span class="token string">"Asia/Tokyo"</span><span class="token punctuation">)</span>       <span class="token comment">// 东京(UTC+09:00)</span>t6 <span class="token operator">:=</span> <span class="token function">timeParseInTimeZone</span><span class="token punctuation">(</span>layout<span class="token punctuation">,</span> inputTime<span class="token punctuation">,</span> <span class="token string">"Etc/GMT"</span><span class="token punctuation">)</span>          <span class="token comment">// 协调世界时(UTC+00:00)</span>t7 <span class="token operator">:=</span> <span class="token function">timeParseInTimeZone</span><span class="token punctuation">(</span>layout<span class="token punctuation">,</span> inputTime<span class="token punctuation">,</span> <span class="token string">"Pacific/Honolulu"</span><span class="token punctuation">)</span> <span class="token comment">// 夏威夷(UTC-10:00)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Asia/Shanghai ====&gt; %s \n"</span><span class="token punctuation">,</span> t1<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Asia/Chongqing ====&gt; %s \n"</span><span class="token punctuation">,</span> t2<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"PRC ====&gt; %s \n"</span><span class="token punctuation">,</span> t3<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Asia/Singapore ====&gt; %s \n"</span><span class="token punctuation">,</span> t4<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Asia/Tokyo ====&gt; %s \n"</span><span class="token punctuation">,</span> t5<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Etc/GMT ====&gt; %s \n"</span><span class="token punctuation">,</span> t6<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Pacific/Honolulu ====&gt; %s \n"</span><span class="token punctuation">,</span> t7<span class="token punctuation">)</span><span class="token comment">// 不设置时区时，默认走的 UTC （零时区）</span>tt<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>layout<span class="token punctuation">,</span> inputTime<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span>tt<span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span>layout<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang 使用 olivere/elastic 客户端操作 ElasticSearch</title>
      <link href="posts/a443aa.html"/>
      <url>posts/a443aa.html</url>
      
        <content type="html"><![CDATA[<h1 id="Golang-使用-olivere-elastic-客户端操作-ElasticSearch"><a href="#Golang-使用-olivere-elastic-客户端操作-ElasticSearch" class="headerlink" title="Golang 使用 olivere/elastic 客户端操作 ElasticSearch"></a>Golang 使用 olivere/elastic 客户端操作 ElasticSearch</h1><p><code>olivere/elastic</code> 插件包，算是 go 语言中比较通用的操作 ElasticSearch 的客户端了，这里使用的是 <code>v7</code> 版本。</p><h2 id="下载-olivere-elastic-包"><a href="#下载-olivere-elastic-包" class="headerlink" title="下载 olivere/elastic 包"></a>下载 <code>olivere/elastic</code> 包</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go get github.com/olivere/elastic/v7<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>这里直接以代码 demo 的形式呈现，具体含义，请见注释。若有错误，还望指正，感谢！</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">/**GitHub： https://github.com/olivere/elastic官方文档示例： https://olivere.github.io/elastic/下载：go get github.com/olivere/elastic/v7*/</span><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"context"</span><span class="token string">"encoding/json"</span><span class="token string">"errors"</span><span class="token string">"fmt"</span><span class="token string">"sync"</span><span class="token string">"time"</span><span class="token string">"github.com/olivere/elastic/v7"</span><span class="token punctuation">)</span><span class="token keyword">var</span> <span class="token punctuation">(</span>ESClient <span class="token operator">*</span>elastic<span class="token punctuation">.</span>Clientonce     sync<span class="token punctuation">.</span>Once<span class="token punctuation">)</span><span class="token keyword">type</span> RcpGoodsImgChecksES <span class="token keyword">struct</span> <span class="token punctuation">{</span>AppName     <span class="token builtin">int</span>    <span class="token string">`json:"app_name"`</span>GoodsId     <span class="token builtin">string</span> <span class="token string">`json:"goods_id"`</span>SiteId      <span class="token builtin">int</span>    <span class="token string">`json:"site_id"`</span>CheckStatus <span class="token builtin">int</span>    <span class="token string">`json:"check_status"`</span>CreatedAt   <span class="token builtin">int</span>    <span class="token string">`json:"created_at"`</span>UpdatedAt   <span class="token builtin">int</span>    <span class="token string">`json:"updated_at"`</span><span class="token punctuation">}</span><span class="token keyword">const</span> RcpGoodsImgChecksESIndex <span class="token operator">=</span> <span class="token string">"rcp_goods_img_checks"</span><span class="token keyword">const</span> RcpGoodsImgChecksESMapping <span class="token operator">=</span> <span class="token string">`{"mappings":{"properties":{"app_name":{"type": "integer"},"goods_id":{"type": "keyword"},"site_id":{"type": "keyword"},"check_status":{"type": "integer"},"created_at":{"type": "date"},"updated_at":{"type": "date"}}}}`</span><span class="token keyword">const</span> esUrl <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:9200"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> err <span class="token builtin">error</span><span class="token comment">// 创建 es 连接</span><span class="token function">ConnectES</span><span class="token punctuation">(</span><span class="token comment">// 如果 es 是通过 docker 安装，如果不设置 `elastic.SetSniff(false)` 那么则会报错</span>elastic<span class="token punctuation">.</span><span class="token function">SetSniff</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment">// 允许指定弹性是否应该定期检查集群，默认为 true, 会把请求 http://ip:port/_nodes/http，并将其返回的 publish_address 作为请求路径</span>elastic<span class="token punctuation">.</span><span class="token function">SetURL</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span>esUrl<span class="token punctuation">}</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 服务地址</span>elastic<span class="token punctuation">.</span><span class="token function">SetBasicAuth</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       <span class="token comment">// 设置认证账号和密码</span><span class="token comment">// elastic.SetHealthcheckInterval(time.Second*5), // 心跳检查，间隔时间</span><span class="token comment">// elastic.SetGzip(true),                         // 启用 gzip 压缩</span><span class="token punctuation">)</span><span class="token comment">// Ping the Elasticsearch server to get e.g. the version number</span>info<span class="token punctuation">,</span> code<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">Ping</span><span class="token punctuation">(</span>esUrl<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token comment">// Handle error</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// Elasticsearch returned with code 200 and version 7.9.3</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Elasticsearch returned with code %d and version %s\n"</span><span class="token punctuation">,</span> code<span class="token punctuation">,</span> info<span class="token punctuation">.</span>Version<span class="token punctuation">.</span>Number<span class="token punctuation">)</span><span class="token comment">// 直接打印出 es 版本号</span>esVersion<span class="token punctuation">,</span> err <span class="token operator">:=</span> ESClient<span class="token punctuation">.</span><span class="token function">ElasticsearchVersion</span><span class="token punctuation">(</span>esUrl<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// Elasticsearch version 7.9.3</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Elasticsearch version %s\n"</span><span class="token punctuation">,</span> esVersion<span class="token punctuation">)</span><span class="token comment">// 删除索引</span><span class="token comment">// testDeleteIndex()</span><span class="token comment">// 判断索引是否存在，如果不存在时，则创建</span>err <span class="token operator">=</span> <span class="token function">CreateIndexIfNotExists</span><span class="token punctuation">(</span>RcpGoodsImgChecksESIndex<span class="token punctuation">,</span> RcpGoodsImgChecksESMapping<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="简单封装的一些常见方法"><a href="#简单封装的一些常见方法" class="headerlink" title="简单封装的一些常见方法"></a>简单封装的一些常见方法</h2><h3 id="创建-es-连接"><a href="#创建-es-连接" class="headerlink" title="创建 es 连接"></a>创建 es 连接</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// ConnectES 创建 es 连接</span><span class="token keyword">func</span> <span class="token function">ConnectES</span><span class="token punctuation">(</span>options <span class="token operator">...</span>elastic<span class="token punctuation">.</span>ClientOptionFunc<span class="token punctuation">)</span> <span class="token punctuation">{</span>once<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// client, err := elastic.NewClient(elastic.SetSniff(false), elastic.SetURL("http://127.0.0.1:9200"))</span><span class="token keyword">var</span> err <span class="token builtin">error</span>ESClient<span class="token punctuation">,</span> err <span class="token operator">=</span> elastic<span class="token punctuation">.</span><span class="token function">NewClient</span><span class="token punctuation">(</span>options<span class="token operator">...</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Ping</span><span class="token punctuation">(</span>url <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>elastic<span class="token punctuation">.</span>PingResult<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> ESClient<span class="token punctuation">.</span><span class="token function">Ping</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="索引不存在时，创建索引"><a href="#索引不存在时，创建索引" class="headerlink" title="索引不存在时，创建索引"></a>索引不存在时，创建索引</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// CreateIndexIfNotExists 索引不存在时，创建索引</span><span class="token comment">// index 索引名称</span><span class="token comment">// mapping 数据类型</span><span class="token keyword">func</span> <span class="token function">CreateIndexIfNotExists</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> mapping <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span>ctx <span class="token operator">:=</span> context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span>exists<span class="token punctuation">,</span> err <span class="token operator">:=</span> ESClient<span class="token punctuation">.</span><span class="token function">IndexExists</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> err<span class="token punctuation">}</span><span class="token keyword">if</span> exists <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span>info<span class="token punctuation">,</span> err <span class="token operator">:=</span> ESClient<span class="token punctuation">.</span><span class="token function">CreateIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">BodyString</span><span class="token punctuation">(</span>mapping<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span><span class="token comment">// info, err := ESClient.CreateIndex(index).Do(ctx)  // 如果只是想创建索引时，那么就不需要 BodyString() 方法</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> err<span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token operator">!</span>info<span class="token punctuation">.</span>Acknowledged <span class="token punctuation">{</span><span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"ES 创建索引 [%s] 失败"</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// DeleteIndex 删除索引</span><span class="token comment">// index 索引名称</span><span class="token keyword">func</span> <span class="token function">DeleteIndex</span><span class="token punctuation">(</span>index <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>elastic<span class="token punctuation">.</span>IndicesDeleteResponse<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>info<span class="token punctuation">,</span> err <span class="token operator">:=</span> ESClient<span class="token punctuation">.</span><span class="token function">DeleteIndex</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token operator">!</span>info<span class="token punctuation">.</span>Acknowledged <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"ES 删除索引 [%s] 失败"</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> info<span class="token punctuation">,</span> err<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="单条添加"><a href="#单条添加" class="headerlink" title="单条添加"></a>单条添加</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// CreateDoc 单条添加</span><span class="token comment">// index 索引</span><span class="token comment">// id 文档 id（可以直接为空字符串，当实参为空字符串时，es 会主动随机生成）</span><span class="token comment">// body 需要添加的内容</span><span class="token keyword">func</span> <span class="token function">CreateDoc</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> id <span class="token builtin">string</span><span class="token punctuation">,</span> body <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>elastic<span class="token punctuation">.</span>IndexResponse<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>client <span class="token operator">:=</span> ESClient<span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token string">""</span> <span class="token operator">!=</span> id <span class="token punctuation">{</span>client <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Id</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">BodyJson</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="单条更新"><a href="#单条更新" class="headerlink" title="单条更新"></a>单条更新</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// UpdateDoc 单条更新</span><span class="token comment">// index 索引</span><span class="token comment">// id 记录 id</span><span class="token comment">// body 需要更新的内容 （建议只使用 map[string]interface{} 进行更新指定字段且需要注意 map 中的 key 需要和 es 中的 key 完全匹配，否则 es 会认为新增字段，不要使用 struct 否则会将某些值初始化零值）</span><span class="token keyword">func</span> <span class="token function">UpdateDoc</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> id <span class="token builtin">string</span><span class="token punctuation">,</span> body <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>elastic<span class="token punctuation">.</span>UpdateResponse<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> ESClient<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Id</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Doc</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// DeleteDoc 删除文档</span><span class="token comment">// index 索引</span><span class="token comment">// id 需要删除的文档记录 id</span><span class="token keyword">func</span> <span class="token function">DeleteDoc</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> id <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>elastic<span class="token punctuation">.</span>DeleteResponse<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> ESClient<span class="token punctuation">.</span><span class="token function">Delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Id</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="批量添加"><a href="#批量添加" class="headerlink" title="批量添加"></a>批量添加</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// CreateBulkDoc 批量添加</span><span class="token comment">// index 索引</span><span class="token comment">// ids 需要新建的 id 数组（可以为空的字符串切片）</span><span class="token comment">// body 需要添加的内容</span><span class="token comment">// 需要注意：ids 和 body 的顺序要一一对应</span><span class="token keyword">func</span> <span class="token function">CreateBulkDoc</span><span class="token punctuation">(</span>index <span class="token builtin">string</span><span class="token punctuation">,</span> ids <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> body <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>elastic<span class="token punctuation">.</span>BulkResponse<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>bulkRequest <span class="token operator">:=</span> ESClient<span class="token punctuation">.</span><span class="token function">Bulk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> body <span class="token punctuation">{</span>tmp <span class="token operator">:=</span> vdoc <span class="token operator">:=</span> elastic<span class="token punctuation">.</span><span class="token function">NewBulkIndexRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Doc</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span>doc <span class="token operator">=</span> doc<span class="token punctuation">.</span><span class="token function">Id</span><span class="token punctuation">(</span>ids<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span>bulkRequest <span class="token operator">=</span> bulkRequest<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> bulkRequest<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="批量更新"><a href="#批量更新" class="headerlink" title="批量更新"></a>批量更新</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// UpdateBulkDoc 批量更新</span><span class="token comment">// index 索引</span><span class="token comment">// ids 需要更新的 id 数组</span><span class="token comment">// body 需要更新的 id 对应的数据 （建议只使用 []map[string]interface{} 进行更新指定字段且需要注意 map 中的 key 需要和 es 中的 key 完全匹配，否则 es 会认为新增字段，不要使用 struct 否则会将某些值初始化零值）</span><span class="token comment">// 需要注意：ids 和 body 的顺序要一一对应</span><span class="token keyword">func</span> <span class="token function">UpdateBulkDoc</span><span class="token punctuation">(</span>index <span class="token builtin">string</span><span class="token punctuation">,</span> ids <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> body <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>elastic<span class="token punctuation">.</span>BulkResponse<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>bulkRequest <span class="token operator">:=</span> ESClient<span class="token punctuation">.</span><span class="token function">Bulk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> body <span class="token punctuation">{</span>tmp <span class="token operator">:=</span> vdoc <span class="token operator">:=</span> elastic<span class="token punctuation">.</span><span class="token function">NewBulkUpdateRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Id</span><span class="token punctuation">(</span>ids<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Doc</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">DocAsUpsert</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>bulkRequest <span class="token operator">=</span> bulkRequest<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> bulkRequest<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// DeleteBulkDoc 批量删除</span><span class="token comment">// index 索引</span><span class="token comment">// ids 需要删除的 id 数组</span><span class="token keyword">func</span> <span class="token function">DeleteBulkDoc</span><span class="token punctuation">(</span>index <span class="token builtin">string</span><span class="token punctuation">,</span> ids <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>elastic<span class="token punctuation">.</span>BulkResponse<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>bulkRequest <span class="token operator">:=</span> ESClient<span class="token punctuation">.</span><span class="token function">Bulk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> ids <span class="token punctuation">{</span>tmp <span class="token operator">:=</span> vreq <span class="token operator">:=</span> elastic<span class="token punctuation">.</span><span class="token function">NewBulkDeleteRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Id</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>bulkRequest <span class="token operator">=</span> bulkRequest<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> bulkRequest<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="通过文档-id-取出数据"><a href="#通过文档-id-取出数据" class="headerlink" title="通过文档 id 取出数据"></a>通过文档 id 取出数据</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// FirstDoc 通过 id 取出数据</span><span class="token comment">// index 索引</span><span class="token comment">// id 需要取的文档记录 id</span><span class="token keyword">func</span> <span class="token function">FirstDoc</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> id <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>elastic<span class="token punctuation">.</span>GetResult<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> ESClient<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Id</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="打印出查询条件"><a href="#打印出查询条件" class="headerlink" title="打印出查询条件"></a>打印出查询条件</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">PrintQuery</span><span class="token punctuation">(</span>src <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"开始打印参数 ====&gt;"</span><span class="token punctuation">)</span>data<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">MarshalIndent</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"  "</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"打印参数结束 ====&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查询出数据"><a href="#查询出数据" class="headerlink" title="查询出数据"></a>查询出数据</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">querySearch</span><span class="token punctuation">(</span>query elastic<span class="token punctuation">.</span>Query<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> querySrc<span class="token punctuation">,</span> err <span class="token operator">:=</span> query<span class="token punctuation">.</span><span class="token function">Source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">PrintQuery</span><span class="token punctuation">(</span>querySrc<span class="token punctuation">)</span><span class="token punctuation">}</span>queryRet<span class="token punctuation">,</span> err <span class="token operator">:=</span> ESClient<span class="token punctuation">.</span><span class="token function">Search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>RcpGoodsImgChecksESIndex<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"查询到的结果总数为 %v \n"</span><span class="token punctuation">,</span> queryRet<span class="token punctuation">.</span><span class="token function">TotalHits</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> queryRet<span class="token punctuation">.</span>Hits<span class="token punctuation">.</span>Hits <span class="token punctuation">{</span><span class="token keyword">var</span> tmp RcpGoodsImgChecksESjson<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>Source<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tmp<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"已经命中查询的数据为 ==&gt; %+v \n %+v \n\n"</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试方法"><a href="#测试方法" class="headerlink" title="测试方法"></a>测试方法</h3><h4 id="删除索引-1"><a href="#删除索引-1" class="headerlink" title="删除索引"></a>删除索引</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">testDeleteIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 删除索引</span>deleteIndexRet<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">DeleteIndex</span><span class="token punctuation">(</span>RcpGoodsImgChecksESIndex<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// deleteIndexRet  ==&gt; &amp;{Acknowledged:true}</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"deleteIndexRet  ==&gt; %+v \n\n"</span><span class="token punctuation">,</span> deleteIndexRet<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建文档"><a href="#创建文档" class="headerlink" title="创建文档"></a>创建文档</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">testCreateDoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 创建文档</span>now <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span>createDocRet<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">CreateDoc</span><span class="token punctuation">(</span>RcpGoodsImgChecksESIndex<span class="token punctuation">,</span> <span class="token string">"2_18_alex111"</span><span class="token punctuation">,</span> RcpGoodsImgChecksES<span class="token punctuation">{</span>AppName<span class="token punctuation">:</span>     <span class="token number">2</span><span class="token punctuation">,</span>GoodsId<span class="token punctuation">:</span>     <span class="token string">"alex111"</span><span class="token punctuation">,</span>SiteId<span class="token punctuation">:</span>      <span class="token number">18</span><span class="token punctuation">,</span>CheckStatus<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>CreatedAt<span class="token punctuation">:</span>   <span class="token function">int</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">,</span>UpdatedAt<span class="token punctuation">:</span>   <span class="token function">int</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// CreateDoc ==&gt; &amp;{Index:rcp_goods_img_checks Type:_doc Id:2_18_alex111 Version:1 Result:created Shards:0xc00020c2c0 SeqNo:0 PrimaryTerm:1 Status:0 ForcedRefresh:false}</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"CreateDoc ==&gt; %+v \n\n"</span><span class="token punctuation">,</span> createDocRet<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="通过文档-id-的形式更新文档"><a href="#通过文档-id-的形式更新文档" class="headerlink" title="通过文档 id 的形式更新文档"></a>通过文档 id 的形式更新文档</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">testUpdateDoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 通过文档 id 的形式更新文档</span>updateDocRet<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">UpdateDoc</span><span class="token punctuation">(</span>RcpGoodsImgChecksESIndex<span class="token punctuation">,</span> <span class="token string">"2_18_alex111"</span><span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"check_status"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"updated_at"</span><span class="token punctuation">:</span>   <span class="token function">int</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// UpdateDoc ==&gt; &amp;{Index:rcp_goods_img_checks Type:_doc Id:2_18_alex111 Version:2 Result:updated Shards:0xc0002bc280 SeqNo:1 PrimaryTerm:1 Status:0 ForcedRefresh:false GetResult:&lt;nil&gt;}</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"UpdateDoc ==&gt; %+v \n\n"</span><span class="token punctuation">,</span> updateDocRet<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="通过-Script-方式更新文档（单字段更新，借助文档-id-更新）"><a href="#通过-Script-方式更新文档（单字段更新，借助文档-id-更新）" class="headerlink" title="通过 Script 方式更新文档（单字段更新，借助文档 id 更新）"></a>通过 Script 方式更新文档（单字段更新，借助文档 id 更新）</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">testUpdateDocScript</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 通过 Script 方式更新文档（单字段更新，借助文档 id 更新）</span>updateDocScript<span class="token punctuation">,</span> err <span class="token operator">:=</span> ESClient<span class="token punctuation">.</span><span class="token function">Update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>RcpGoodsImgChecksESIndex<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Id</span><span class="token punctuation">(</span><span class="token string">"2_18_alex111"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Script</span><span class="token punctuation">(</span>elastic<span class="token punctuation">.</span><span class="token function">NewScript</span><span class="token punctuation">(</span><span class="token string">"ctx._source.site_id=11"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// updateDocScript  ==&gt; &amp;{Index:rcp_goods_img_checks Type:_doc Id:2_18_alex111 Version:3 Result:updated Shards:0xc000098280 SeqNo:2 PrimaryTerm:1 Status:0 ForcedRefresh:false GetResult:&lt;nil&gt;}</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"updateDocScript  ==&gt; %+v \n\n"</span><span class="token punctuation">,</span> updateDocScript<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="通过条件-Script-方式更新文档（单字段更新，根据查询条件批量更新字段）"><a href="#通过条件-Script-方式更新文档（单字段更新，根据查询条件批量更新字段）" class="headerlink" title="通过条件 Script 方式更新文档（单字段更新，根据查询条件批量更新字段）"></a>通过条件 Script 方式更新文档（单字段更新，根据查询条件批量更新字段）</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">testUpdateDocScriptQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 通过条件 Script 方式更新文档（单字段更新，根据查询条件批量更新字段）</span>updateDocScriptQuery<span class="token punctuation">,</span> err <span class="token operator">:=</span> ESClient<span class="token punctuation">.</span><span class="token function">UpdateByQuery</span><span class="token punctuation">(</span>RcpGoodsImgChecksESIndex<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span>elastic<span class="token punctuation">.</span><span class="token function">NewTermQuery</span><span class="token punctuation">(</span><span class="token string">"goods_id"</span><span class="token punctuation">,</span> <span class="token string">"alex111"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Script</span><span class="token punctuation">(</span>elastic<span class="token punctuation">.</span><span class="token function">NewScript</span><span class="token punctuation">(</span><span class="token string">"ctx._source.check_status=23"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ProceedOnVersionConflict</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// updateDocScriptQuery  ==&gt; &amp;{Header:map[] Took:47 SliceId:&lt;nil&gt; TimedOut:false Total:2 Updated:2 Created:0 Deleted:0 Batches:1 VersionConflicts:0 Noops:0 Retries:{Bulk:0 Search:0} Throttled: ThrottledMillis:0 RequestsPerSecond:-1 Canceled: ThrottledUntil: ThrottledUntilMillis:0 Failures:[]}</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"updateDocScriptQuery  ==&gt; %+v \n\n"</span><span class="token punctuation">,</span> updateDocScriptQuery<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="通过文档-id-查找文档"><a href="#通过文档-id-查找文档" class="headerlink" title="通过文档 id 查找文档"></a>通过文档 id 查找文档</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">testFirstDoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 通过文档 id 查找文档</span>firstDocRet<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">FirstDoc</span><span class="token punctuation">(</span>RcpGoodsImgChecksESIndex<span class="token punctuation">,</span> <span class="token string">"2_18_alex111"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> firstDocRet<span class="token punctuation">.</span>Found <span class="token punctuation">{</span> <span class="token comment">// 表示找到了数据</span><span class="token comment">// FirstDoc ==&gt;  &amp;{Index:rcp_goods_img_checks Type:_doc Id:2_18_alex111 Uid: Routing: Parent: Version:0xc000282a10 SeqNo:0xc000282a18 PrimaryTerm:0xc000282a20 Source:[123 34 97 112 112 95 110 97 109 101 34 58 50 44 34 117 112 100 97 116 101 100 95 97 116 34 58 49 54 54 48 53 55 57 52 56 54 44 34 115 105 116 101 95 105 100 34 58 49 56 44 34 103 111 111 100 115 95 105 100 34 58 34 97 108 101 120 49 49 49 34 44 34 99 114 101 97 116 101 100 95 97 116 34 58 49 54 54 48 53 55 57 52 56 54 44 34 99 104 101 99 107 95 115 116 97 116 117 115 34 58 50 51 125] Found:true Fields:map[] Error:&lt;nil&gt;} Source: {"app_name":2,"updated_at":1660579486,"site_id":18,"goods_id":"alex111","created_at":1660579486,"check_status":23}</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"FirstDoc ==&gt;  %+v Source: %+v \n\n"</span><span class="token punctuation">,</span> firstDocRet<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>firstDocRet<span class="token punctuation">.</span>Source<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="通过文档-id-删除文档"><a href="#通过文档-id-删除文档" class="headerlink" title="通过文档 id 删除文档"></a>通过文档 id 删除文档</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">testDeleteDoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 通过文档 id 删除文档</span>deleteDocRet<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">DeleteDoc</span><span class="token punctuation">(</span>RcpGoodsImgChecksESIndex<span class="token punctuation">,</span> <span class="token string">"2_18_alex111"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// DeleteDoc  ==&gt; &amp;{Index:rcp_goods_img_checks Type:_doc Id:2_18_alex111 Version:6 Result:deleted Shards:0xc00007e2c0 SeqNo:7 PrimaryTerm:1 Status:0 ForcedRefresh:false}</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"DeleteDoc  ==&gt; %+v \n\n"</span><span class="token punctuation">,</span> deleteDocRet<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="批量创建"><a href="#批量创建" class="headerlink" title="批量创建"></a>批量创建</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">testCreateBulkDoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>now <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 批量创建</span>createBulkDocRet<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">CreateBulkDoc</span><span class="token punctuation">(</span>RcpGoodsImgChecksESIndex<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"h1"</span><span class="token punctuation">,</span> <span class="token string">"h2"</span><span class="token punctuation">,</span> <span class="token string">"h3"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span>RcpGoodsImgChecksES<span class="token punctuation">{</span>AppName<span class="token punctuation">:</span>     <span class="token number">2</span><span class="token punctuation">,</span>GoodsId<span class="token punctuation">:</span>     <span class="token string">"h1_goods_id"</span><span class="token punctuation">,</span>SiteId<span class="token punctuation">:</span>      <span class="token number">17</span><span class="token punctuation">,</span>CheckStatus<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>CreatedAt<span class="token punctuation">:</span>   <span class="token function">int</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">,</span>UpdatedAt<span class="token punctuation">:</span>   <span class="token function">int</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span>RcpGoodsImgChecksES<span class="token punctuation">{</span>AppName<span class="token punctuation">:</span>     <span class="token number">1</span><span class="token punctuation">,</span>GoodsId<span class="token punctuation">:</span>     <span class="token string">"h2_goods_id"</span><span class="token punctuation">,</span>SiteId<span class="token punctuation">:</span>      <span class="token number">19</span><span class="token punctuation">,</span>CheckStatus<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>CreatedAt<span class="token punctuation">:</span>   <span class="token function">int</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">,</span>UpdatedAt<span class="token punctuation">:</span>   <span class="token function">int</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span>RcpGoodsImgChecksES<span class="token punctuation">{</span>AppName<span class="token punctuation">:</span>     <span class="token number">3</span><span class="token punctuation">,</span>GoodsId<span class="token punctuation">:</span>     <span class="token string">"h3_goods_id"</span><span class="token punctuation">,</span>SiteId<span class="token punctuation">:</span>      <span class="token number">19</span><span class="token punctuation">,</span>CheckStatus<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>CreatedAt<span class="token punctuation">:</span>   <span class="token function">int</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">,</span>UpdatedAt<span class="token punctuation">:</span>   <span class="token function">int</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// CreateBulkDoc ==&gt; &amp;{Took:5 Errors:false Items:[map[index:0xc00019c200] map[index:0xc00019c280] map[index:0xc00019c300]]}</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"CreateBulkDoc ==&gt; %+v \n\n"</span><span class="token punctuation">,</span> createBulkDocRet<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="批量更新-1"><a href="#批量更新-1" class="headerlink" title="批量更新"></a>批量更新</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">testUpdateBulkDoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 批量更新</span>updateBulkDocRet<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">UpdateBulkDoc</span><span class="token punctuation">(</span>RcpGoodsImgChecksESIndex<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"h1"</span><span class="token punctuation">,</span> <span class="token string">"h3"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"check_status"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"updated_at"</span><span class="token punctuation">:</span>   <span class="token function">int</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"site_id"</span><span class="token punctuation">:</span>    <span class="token number">20</span><span class="token punctuation">,</span><span class="token string">"updated_at"</span><span class="token punctuation">:</span> <span class="token function">int</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Unix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// UpdateBulkDoc ==&gt; &amp;{Took:6 Errors:false Items:[map[update:0xc0001e2080] map[update:0xc0001e2100]]}</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"UpdateBulkDoc ==&gt; %+v \n\n"</span><span class="token punctuation">,</span> updateBulkDocRet<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="通过文档-id-批量删除"><a href="#通过文档-id-批量删除" class="headerlink" title="通过文档 id 批量删除"></a>通过文档 id 批量删除</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">testDeleteBulkDoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 通过文档 id 批量删除</span>deleteBulkDocRet<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">DeleteBulkDoc</span><span class="token punctuation">(</span>RcpGoodsImgChecksESIndex<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"h2"</span><span class="token punctuation">,</span> <span class="token string">"h3_goods_id"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"DeleteBulkDoc ==&gt; %+v \n\n"</span><span class="token punctuation">,</span> deleteBulkDocRet<span class="token punctuation">)</span><span class="token comment">// DeleteBulkDoc ==&gt; &amp;{Took:36 Errors:false Items:[map[delete:0xc0000ea080] map[delete:0xc0000ea100]]}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="按照条件删除"><a href="#按照条件删除" class="headerlink" title="按照条件删除"></a>按照条件删除</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">testDeleteByQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 按照条件删除</span>deleteDocByQuery<span class="token punctuation">,</span> err <span class="token operator">:=</span> ESClient<span class="token punctuation">.</span><span class="token function">DeleteByQuery</span><span class="token punctuation">(</span>RcpGoodsImgChecksESIndex<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span>elastic<span class="token punctuation">.</span><span class="token function">NewRangeQuery</span><span class="token punctuation">(</span><span class="token string">"updated_at"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Gte</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Lte</span><span class="token punctuation">(</span><span class="token number">1660579923</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"deleteDocByQuery ==&gt; %+v \n\n"</span><span class="token punctuation">,</span> deleteDocByQuery<span class="token punctuation">)</span><span class="token comment">// deleteDocByQuery ==&gt; &amp;{Header:map[] Took:36 SliceId:&lt;nil&gt; TimedOut:false Total:3 Updated:0 Created:0 Deleted:3 Batches:1 VersionConflicts:0 Noops:0 Retries:{Bulk:0 Search:0} Throttled: ThrottledMillis:0 RequestsPerSecond:-1 Canceled: ThrottledUntil: ThrottledUntilMillis:0 Failures:[]}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="term"><a href="#term" class="headerlink" title="term"></a>term</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">testTermQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// term</span>query1 <span class="token operator">:=</span> elastic<span class="token punctuation">.</span><span class="token function">NewTermQuery</span><span class="token punctuation">(</span><span class="token string">"goods_id"</span><span class="token punctuation">,</span> <span class="token string">"h2_goods_id"</span><span class="token punctuation">)</span><span class="token function">querySearch</span><span class="token punctuation">(</span>query1<span class="token punctuation">)</span><span class="token comment">// 开始打印参数 ====&gt;</span><span class="token comment">// {</span><span class="token comment">//  "term": {</span><span class="token comment">//    "goods_id": "h2_goods_id"</span><span class="token comment">//  }</span><span class="token comment">// }</span><span class="token comment">// 打印参数结束 ====&gt;</span><span class="token comment">// 查询到的结果总数为 1</span><span class="token comment">// 已经命中查询的数据为 ==&gt; h2</span><span class="token comment">// {AppName:1 GoodsId:h2_goods_id SiteId:19 CheckStatus:4 CreatedAt:1660579860 UpdatedAt:1660579860}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="terms"><a href="#terms" class="headerlink" title="terms"></a>terms</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">testTermsQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// terms [where goods_id in ('h3_goods_id', 'h2_goods_id')]</span>query2 <span class="token operator">:=</span> elastic<span class="token punctuation">.</span><span class="token function">NewTermsQuery</span><span class="token punctuation">(</span><span class="token string">"goods_id"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"h3_goods_id"</span><span class="token punctuation">,</span> <span class="token string">"h2_goods_id"</span><span class="token punctuation">}</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token function">querySearch</span><span class="token punctuation">(</span>query2<span class="token punctuation">)</span><span class="token comment">// 开始打印参数 ====&gt;</span><span class="token comment">// {</span><span class="token comment">//  "terms": {</span><span class="token comment">//    "goods_id": [</span><span class="token comment">//      "h3_goods_id",</span><span class="token comment">//      "h2_goods_id"</span><span class="token comment">//    ]</span><span class="token comment">//  }</span><span class="token comment">// }</span><span class="token comment">// 打印参数结束 ====&gt;</span><span class="token comment">// 查询到的结果总数为 2</span><span class="token comment">// 已经命中查询的数据为 ==&gt; h2</span><span class="token comment">// {AppName:1 GoodsId:h2_goods_id SiteId:19 CheckStatus:4 CreatedAt:1660579860 UpdatedAt:1660579860}</span><span class="token comment">//</span><span class="token comment">// 已经命中查询的数据为 ==&gt; h3</span><span class="token comment">// {AppName:3 GoodsId:h3_goods_id SiteId:20 CheckStatus:2 CreatedAt:1660579860 UpdatedAt:1660579923}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="range-范围查找"><a href="#range-范围查找" class="headerlink" title="range 范围查找"></a>range 范围查找</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">testRangeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 范围查找 [where updated_at &gt;= 0 and updated_at &lt;= 1659695758]</span><span class="token comment">// Gt（大于）、Lt（小于）、Gte（大于等于）、Lte（小于等于）</span>query3 <span class="token operator">:=</span> elastic<span class="token punctuation">.</span><span class="token function">NewRangeQuery</span><span class="token punctuation">(</span><span class="token string">"updated_at"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Gte</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Lte</span><span class="token punctuation">(</span><span class="token number">1659695758</span><span class="token punctuation">)</span><span class="token function">querySearch</span><span class="token punctuation">(</span>query3<span class="token punctuation">)</span><span class="token comment">// 开始打印参数 ====&gt;</span><span class="token comment">// {</span><span class="token comment">//  "range": {</span><span class="token comment">//    "updated_at": {</span><span class="token comment">//      "from": 0,</span><span class="token comment">//      "include_lower": true,</span><span class="token comment">//      "include_upper": true,</span><span class="token comment">//      "to": 1659695758</span><span class="token comment">//    }</span><span class="token comment">//  }</span><span class="token comment">// }</span><span class="token comment">// 打印参数结束 ====&gt;</span><span class="token comment">// 查询到的结果总数为 0</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="match-all"><a href="#match-all" class="headerlink" title="match_all"></a>match_all</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">testMatchAllQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// match_all</span>query4 <span class="token operator">:=</span> elastic<span class="token punctuation">.</span><span class="token function">NewMatchAllQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">querySearch</span><span class="token punctuation">(</span>query4<span class="token punctuation">)</span><span class="token comment">// 开始打印参数 ====&gt;</span><span class="token comment">// {</span><span class="token comment">//  "match_all": {}</span><span class="token comment">// }</span><span class="token comment">// 打印参数结束 ====&gt;</span><span class="token comment">// 查询到的结果总数为 4</span><span class="token comment">// 已经命中查询的数据为 ==&gt; 2_19_alex111</span><span class="token comment">// {AppName:2 GoodsId:alex111 SiteId:18 CheckStatus:23 CreatedAt:1660579517 UpdatedAt:1660579517}</span><span class="token comment">//</span><span class="token comment">// 已经命中查询的数据为 ==&gt; h2</span><span class="token comment">// {AppName:1 GoodsId:h2_goods_id SiteId:19 CheckStatus:4 CreatedAt:1660579860 UpdatedAt:1660579860}</span><span class="token comment">//</span><span class="token comment">// 已经命中查询的数据为 ==&gt; h1</span><span class="token comment">// {AppName:2 GoodsId:h1_goods_id SiteId:17 CheckStatus:2 CreatedAt:1660579860 UpdatedAt:1660579923}</span><span class="token comment">//</span><span class="token comment">// 已经命中查询的数据为 ==&gt; h3</span><span class="token comment">// {AppName:3 GoodsId:h3_goods_id SiteId:20 CheckStatus:2 CreatedAt:1660579860 UpdatedAt:1660579923}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="match"><a href="#match" class="headerlink" title="match"></a>match</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">testMatchQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// match</span>query5 <span class="token operator">:=</span> elastic<span class="token punctuation">.</span><span class="token function">NewMatchQuery</span><span class="token punctuation">(</span><span class="token string">"goods_id"</span><span class="token punctuation">,</span> <span class="token string">"h2_goods_id"</span><span class="token punctuation">)</span><span class="token function">querySearch</span><span class="token punctuation">(</span>query5<span class="token punctuation">)</span><span class="token comment">// 开始打印参数 ====&gt;</span><span class="token comment">// {</span><span class="token comment">//  "match": {</span><span class="token comment">//    "goods_id": {</span><span class="token comment">//      "query": "h2_goods_id"</span><span class="token comment">//    }</span><span class="token comment">//  }</span><span class="token comment">// }</span><span class="token comment">// 打印参数结束 ====&gt;</span><span class="token comment">// 查询到的结果总数为 1</span><span class="token comment">// 已经命中查询的数据为 ==&gt; h2</span><span class="token comment">// {AppName:1 GoodsId:h2_goods_id SiteId:19 CheckStatus:4 CreatedAt:1660579860 UpdatedAt:1660579860}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="match-phrase"><a href="#match-phrase" class="headerlink" title="match_phrase"></a>match_phrase</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">testMatchPhraseQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// match_phrase</span>query6 <span class="token operator">:=</span> elastic<span class="token punctuation">.</span><span class="token function">NewMatchPhraseQuery</span><span class="token punctuation">(</span><span class="token string">"goods_id"</span><span class="token punctuation">,</span> <span class="token string">"h2_goods_id"</span><span class="token punctuation">)</span><span class="token function">querySearch</span><span class="token punctuation">(</span>query6<span class="token punctuation">)</span><span class="token comment">// 开始打印参数 ====&gt;</span><span class="token comment">// {</span><span class="token comment">//  "match_phrase": {</span><span class="token comment">//    "goods_id": {</span><span class="token comment">//      "query": "h2_goods_id"</span><span class="token comment">//    }</span><span class="token comment">//  }</span><span class="token comment">// }</span><span class="token comment">// 打印参数结束 ====&gt;</span><span class="token comment">// 查询到的结果总数为 1</span><span class="token comment">// 已经命中查询的数据为 ==&gt; h2</span><span class="token comment">// {AppName:1 GoodsId:h2_goods_id SiteId:19 CheckStatus:4 CreatedAt:1660579860 UpdatedAt:1660579860}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="match-phrase-prefix"><a href="#match-phrase-prefix" class="headerlink" title="match_phrase_prefix"></a>match_phrase_prefix</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">testMatchPhrasePrefixQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// match_phrase_prefix</span><span class="token comment">// 这里因为类型不支持前缀匹配，可能会直接报错</span>query7 <span class="token operator">:=</span> elastic<span class="token punctuation">.</span><span class="token function">NewMatchPhrasePrefixQuery</span><span class="token punctuation">(</span><span class="token string">"goods_id"</span><span class="token punctuation">,</span> <span class="token string">"h2_"</span><span class="token punctuation">)</span><span class="token function">querySearch</span><span class="token punctuation">(</span>query7<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="regexp"><a href="#regexp" class="headerlink" title="regexp"></a>regexp</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">testRegexpQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// regexp</span><span class="token comment">// 搜索 goods_id 字段对应的值以 `h` 开头的所有文档</span>query8 <span class="token operator">:=</span> elastic<span class="token punctuation">.</span><span class="token function">NewRegexpQuery</span><span class="token punctuation">(</span><span class="token string">"goods_id"</span><span class="token punctuation">,</span> <span class="token string">"h.*"</span><span class="token punctuation">)</span><span class="token function">querySearch</span><span class="token punctuation">(</span>query8<span class="token punctuation">)</span><span class="token comment">// 开始打印参数 ====&gt;</span><span class="token comment">// {</span><span class="token comment">//  "regexp": {</span><span class="token comment">//    "goods_id": {</span><span class="token comment">//      "value": "h.*"</span><span class="token comment">//    }</span><span class="token comment">//  }</span><span class="token comment">// }</span><span class="token comment">// 打印参数结束 ====&gt;</span><span class="token comment">// 查询到的结果总数为 3</span><span class="token comment">// 已经命中查询的数据为 ==&gt; h2</span><span class="token comment">// {AppName:1 GoodsId:h2_goods_id SiteId:19 CheckStatus:4 CreatedAt:1660579860 UpdatedAt:1660579860}</span><span class="token comment">//</span><span class="token comment">// 已经命中查询的数据为 ==&gt; h1</span><span class="token comment">// {AppName:2 GoodsId:h1_goods_id SiteId:17 CheckStatus:2 CreatedAt:1660579860 UpdatedAt:1660579923}</span><span class="token comment">//</span><span class="token comment">// 已经命中查询的数据为 ==&gt; h3</span><span class="token comment">// {AppName:3 GoodsId:h3_goods_id SiteId:20 CheckStatus:2 CreatedAt:1660579860 UpdatedAt:1660579923}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="bool-组合查询"><a href="#bool-组合查询" class="headerlink" title="bool 组合查询"></a>bool 组合查询</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">testBoolQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 组合查询</span>boolQuery <span class="token operator">:=</span> elastic<span class="token punctuation">.</span><span class="token function">NewBoolQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// must</span>boolQuery<span class="token punctuation">.</span><span class="token function">Must</span><span class="token punctuation">(</span>elastic<span class="token punctuation">.</span><span class="token function">NewTermQuery</span><span class="token punctuation">(</span><span class="token string">"check_status"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// should</span>boolQuery<span class="token punctuation">.</span><span class="token function">Should</span><span class="token punctuation">(</span>elastic<span class="token punctuation">.</span><span class="token function">NewTermQuery</span><span class="token punctuation">(</span><span class="token string">"app_name"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// must_not</span>boolQuery<span class="token punctuation">.</span><span class="token function">MustNot</span><span class="token punctuation">(</span>elastic<span class="token punctuation">.</span><span class="token function">NewTermQuery</span><span class="token punctuation">(</span><span class="token string">"site_id"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// filter</span>boolQuery<span class="token punctuation">.</span><span class="token function">Filter</span><span class="token punctuation">(</span>elastic<span class="token punctuation">.</span><span class="token function">NewRangeQuery</span><span class="token punctuation">(</span><span class="token string">"updated_at"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Gte</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Lte</span><span class="token punctuation">(</span><span class="token number">1660579923</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">querySearch</span><span class="token punctuation">(</span>boolQuery<span class="token punctuation">)</span><span class="token comment">// 开始打印参数 ====&gt;</span><span class="token comment">// {</span><span class="token comment">//  "bool": {</span><span class="token comment">//    "filter": {</span><span class="token comment">//      "range": {</span><span class="token comment">//        "updated_at": {</span><span class="token comment">//          "from": 0,</span><span class="token comment">//          "include_lower": true,</span><span class="token comment">//          "include_upper": true,</span><span class="token comment">//          "to": 1660579923</span><span class="token comment">//        }</span><span class="token comment">//      }</span><span class="token comment">//    },</span><span class="token comment">//    "must": {</span><span class="token comment">//      "term": {</span><span class="token comment">//        "check_status": 2</span><span class="token comment">//      }</span><span class="token comment">//    },</span><span class="token comment">//    "must_not": {</span><span class="token comment">//      "term": {</span><span class="token comment">//        "site_id": 18</span><span class="token comment">//      }</span><span class="token comment">//    },</span><span class="token comment">//    "should": {</span><span class="token comment">//      "term": {</span><span class="token comment">//        "app_name": 20</span><span class="token comment">//      }</span><span class="token comment">//    }</span><span class="token comment">//  }</span><span class="token comment">// }</span><span class="token comment">// 打印参数结束 ====&gt;</span><span class="token comment">// 查询到的结果总数为 2</span><span class="token comment">// 已经命中查询的数据为 ==&gt; h1</span><span class="token comment">// {AppName:2 GoodsId:h1_goods_id SiteId:17 CheckStatus:2 CreatedAt:1660579860 UpdatedAt:1660579923}</span><span class="token comment">//</span><span class="token comment">// 已经命中查询的数据为 ==&gt; h3</span><span class="token comment">// {AppName:3 GoodsId:h3_goods_id SiteId:20 CheckStatus:2 CreatedAt:1660579860 UpdatedAt:1660579923}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="分页查询，并排序"><a href="#分页查询，并排序" class="headerlink" title="分页查询，并排序"></a>分页查询，并排序</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">testPageSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 分页查询，并排序</span><span class="token comment">// from 为起始偏移量（offset）默认为 0，size 为每页显示数（limit）默认为 10</span><span class="token comment">// from 等于当前页码数减去一的商然后乘以每页显示数</span><span class="token comment">// Sort() 第二个参数，true 为升序、false 为降序</span>pageRet<span class="token punctuation">,</span> err <span class="token operator">:=</span> ESClient<span class="token punctuation">.</span><span class="token function">Search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>RcpGoodsImgChecksESIndex<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">From</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Sort</span><span class="token punctuation">(</span><span class="token string">"updated_at"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> pageRet<span class="token punctuation">.</span>Hits<span class="token punctuation">.</span>Hits <span class="token punctuation">{</span><span class="token keyword">var</span> tmp RcpGoodsImgChecksESjson<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>Source<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tmp<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"分页查询，已经命中查询的数据为 ==&gt; %+v \n %+v \n\n"</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 分页查询，已经命中查询的数据为 ==&gt; h1</span><span class="token comment">// {AppName:2 GoodsId:h1_goods_id SiteId:17 CheckStatus:2 CreatedAt:1660579860 UpdatedAt:1660579923}</span><span class="token comment">//</span><span class="token comment">// 分页查询，已经命中查询的数据为 ==&gt; h3</span><span class="token comment">// {AppName:3 GoodsId:h3_goods_id SiteId:20 CheckStatus:2 CreatedAt:1660579860 UpdatedAt:1660579923}</span><span class="token comment">//</span><span class="token comment">// 分页查询，已经命中查询的数据为 ==&gt; h2</span><span class="token comment">// {AppName:1 GoodsId:h2_goods_id SiteId:19 CheckStatus:4 CreatedAt:1660579860 UpdatedAt:1660579860}</span><span class="token comment">//</span><span class="token comment">// 分页查询，已经命中查询的数据为 ==&gt; 2_19_alex111</span><span class="token comment">// {AppName:2 GoodsId:alex111 SiteId:18 CheckStatus:23 CreatedAt:1660579517 UpdatedAt:1660579517}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="多字段排序"><a href="#多字段排序" class="headerlink" title="多字段排序"></a>多字段排序</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">testMultiFieldSort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 多字段排序</span>sortsBuilders <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>elastic<span class="token punctuation">.</span>Sorter<span class="token punctuation">{</span>elastic<span class="token punctuation">.</span><span class="token function">NewFieldSort</span><span class="token punctuation">(</span><span class="token string">"check_status"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Asc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 升序</span>elastic<span class="token punctuation">.</span><span class="token function">NewFieldSort</span><span class="token punctuation">(</span><span class="token string">"created_at"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Desc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 降序</span><span class="token punctuation">}</span>sortRet<span class="token punctuation">,</span> err <span class="token operator">:=</span> ESClient<span class="token punctuation">.</span><span class="token function">Search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>RcpGoodsImgChecksESIndex<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SortBy</span><span class="token punctuation">(</span>sortsBuilders<span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> sortRet<span class="token punctuation">.</span>Hits<span class="token punctuation">.</span>Hits <span class="token punctuation">{</span><span class="token keyword">var</span> tmp RcpGoodsImgChecksESjson<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>Source<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tmp<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"多字段排序，已经命中查询的数据为 ==&gt; %+v \n %+v \n\n"</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 多字段排序，已经命中查询的数据为 ==&gt; h1</span><span class="token comment">// {AppName:2 GoodsId:h1_goods_id SiteId:17 CheckStatus:2 CreatedAt:1660579860 UpdatedAt:1660579923}</span><span class="token comment">//</span><span class="token comment">// 多字段排序，已经命中查询的数据为 ==&gt; h3</span><span class="token comment">// {AppName:3 GoodsId:h3_goods_id SiteId:20 CheckStatus:2 CreatedAt:1660579860 UpdatedAt:1660579923}</span><span class="token comment">//</span><span class="token comment">// 多字段排序，已经命中查询的数据为 ==&gt; h2</span><span class="token comment">// {AppName:1 GoodsId:h2_goods_id SiteId:19 CheckStatus:4 CreatedAt:1660579860 UpdatedAt:1660579860}</span><span class="token comment">//</span><span class="token comment">// 多字段排序，已经命中查询的数据为 ==&gt; 2_19_alex111</span><span class="token comment">// {AppName:2 GoodsId:alex111 SiteId:18 CheckStatus:23 CreatedAt:1660579517 UpdatedAt:1660579517}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="返回指定字段（只查询指定字段）"><a href="#返回指定字段（只查询指定字段）" class="headerlink" title="返回指定字段（只查询指定字段）"></a>返回指定字段（只查询指定字段）</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">testFetchSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 返回指定字段</span>includeFields <span class="token operator">:=</span> elastic<span class="token punctuation">.</span><span class="token function">NewFetchSourceContext</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Include</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">"app_name"</span><span class="token punctuation">,</span> <span class="token string">"goods_id"</span><span class="token punctuation">}</span><span class="token operator">...</span><span class="token punctuation">)</span>includeRet<span class="token punctuation">,</span> err <span class="token operator">:=</span> ESClient<span class="token punctuation">.</span><span class="token function">Search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>RcpGoodsImgChecksESIndex<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FetchSourceContext</span><span class="token punctuation">(</span>includeFields<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> includeRet<span class="token punctuation">.</span>Hits<span class="token punctuation">.</span>Hits <span class="token punctuation">{</span><span class="token keyword">var</span> tmp RcpGoodsImgChecksESjson<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>Source<span class="token punctuation">,</span> <span class="token operator">&amp;</span>tmp<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"返回指定字段，已经命中查询的数据为 ==&gt; %+v \n %+v \n\n"</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 返回指定字段，已经命中查询的数据为 ==&gt; 2_19_alex111</span><span class="token comment">// {AppName:2 GoodsId:alex111 SiteId:0 CheckStatus:0 CreatedAt:0 UpdatedAt:0}</span><span class="token comment">//</span><span class="token comment">// 返回指定字段，已经命中查询的数据为 ==&gt; h2</span><span class="token comment">// {AppName:1 GoodsId:h2_goods_id SiteId:0 CheckStatus:0 CreatedAt:0 UpdatedAt:0}</span><span class="token comment">//</span><span class="token comment">// 返回指定字段，已经命中查询的数据为 ==&gt; h1</span><span class="token comment">// {AppName:2 GoodsId:h1_goods_id SiteId:0 CheckStatus:0 CreatedAt:0 UpdatedAt:0}</span><span class="token comment">//</span><span class="token comment">// 返回指定字段，已经命中查询的数据为 ==&gt; h3</span><span class="token comment">// {AppName:3 GoodsId:h3_goods_id SiteId:0 CheckStatus:0 CreatedAt:0 UpdatedAt:0}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查询数据总数"><a href="#查询数据总数" class="headerlink" title="查询数据总数"></a>查询数据总数</h4><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">testTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 查询总命中计数</span>total<span class="token punctuation">,</span> err <span class="token operator">:=</span> ESClient<span class="token punctuation">.</span><span class="token function">Count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>RcpGoodsImgChecksESIndex<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">Background</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 查询总命中计数，已经命中查询的数据为 ==&gt; 2</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"查询总命中计数，已经命中查询的数据为 ==&gt; %+v \n"</span><span class="token punctuation">,</span> total<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
            <tag> Go </tag>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 安装 ElasticSearch 和 Kibana</title>
      <link href="posts/2e9eaf3a.html"/>
      <url>posts/2e9eaf3a.html</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-安装-ElasticSearch-和-Kibana"><a href="#Docker-安装-ElasticSearch-和-Kibana" class="headerlink" title="Docker 安装 ElasticSearch 和 Kibana"></a>Docker 安装 ElasticSearch 和 Kibana</h1><blockquote><p>安装的时候，ElasticSearch 和 Kibana 的版本一定要一致。</p></blockquote><h2 id="创建一个网络"><a href="#创建一个网络" class="headerlink" title="创建一个网络"></a>创建一个网络</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建一个网络</span><span class="token function">docker</span> network create alex-network<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="安装-ElasticSearch"><a href="#安装-ElasticSearch" class="headerlink" title="安装 ElasticSearch"></a>安装 ElasticSearch</h2><ul><li>拉取镜像</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull elasticsearch:7.9.3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>创建容器</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置为单节点（非集群模式）</span><span class="token comment"># -e "discovery.type=single-node"</span><span class="token comment"># 设置 es 的初始内存和最大内存，否则导致过大启动不了 es 或者 kibana 连接 es 时，导致 es 直接死机</span><span class="token comment"># -e ES_JAVA_OPTS="-Xms512m -Xmx512m"</span><span class="token comment"># 挂载逻辑卷，绑定 es 的数据目录</span><span class="token comment"># -v ~/es-data:/usr/share/elasticsearch/data</span><span class="token comment"># 挂载逻辑卷，绑定 es 的插件目录</span><span class="token comment"># -v ~/es-plugins:/usr/share/elasticsearch/plugins</span><span class="token comment"># 挂载逻辑卷，绑定 es 的配置目录</span><span class="token comment"># -v ~/es-config:/usr/share/elasticsearch/config</span><span class="token comment"># 授权逻辑卷访问权限</span><span class="token comment"># --privileged</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> alex-es <span class="token punctuation">\</span><span class="token parameter variable">--net</span> alex-network <span class="token punctuation">\</span><span class="token parameter variable">-p</span> <span class="token number">9200</span>:9200 <span class="token punctuation">\</span><span class="token parameter variable">-p</span> <span class="token number">9300</span>:9300 <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token string">"discovery.type=single-node"</span> <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token assign-left variable">ES_JAVA_OPTS</span><span class="token operator">=</span><span class="token string">"-Xms512m -Xmx512m"</span> <span class="token punctuation">\</span>elasticsearch:7.9.3<span class="token comment"># 如果要挂载目录时，可能会报错 `Exception in thread "main" java.nio.file.NoSuchFileException: /usr/share/elasticsearch/config/jvm.options`</span><span class="token comment"># 解决方案是：先随便创建一个容器，然后将随便创建的容器的配置文件先复制一份到宿机上，然后删除掉这个容器，重新再创建容器，比如，如下步骤</span><span class="token comment"># 1. 先随便创建一个容器</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> es_service_1 <span class="token punctuation">\</span><span class="token parameter variable">--net</span> alex-network <span class="token punctuation">\</span><span class="token parameter variable">-p</span> <span class="token number">9200</span>:9200 <span class="token punctuation">\</span><span class="token parameter variable">-p</span> <span class="token number">9300</span>:9300 <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token string">"discovery.type=single-node"</span> <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token assign-left variable">ES_JAVA_OPTS</span><span class="token operator">=</span><span class="token string">"-Xms512m -Xmx512m"</span> <span class="token punctuation">\</span>elasticsearch:7.9.3<span class="token comment"># 2. 然后复制该容器的配置文件到宿机上</span><span class="token function">docker</span> <span class="token function">cp</span> <span class="token punctuation">{</span>es_service_1_container_id<span class="token punctuation">}</span>:/usr/share/elasticsearch/config/ ~/es-config<span class="token comment"># 3. 然后再删除到这个临时容器</span><span class="token function">docker</span> <span class="token function">rm</span> es_service_1<span class="token comment"># 4. 最后再携带挂载参数创建新容器</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> es_service_1 <span class="token punctuation">\</span><span class="token parameter variable">--net</span> alex-network <span class="token punctuation">\</span><span class="token parameter variable">-p</span> <span class="token number">9200</span>:9200 <span class="token punctuation">\</span><span class="token parameter variable">-p</span> <span class="token number">9300</span>:9300 <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token string">"discovery.type=single-node"</span> <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token assign-left variable">ES_JAVA_OPTS</span><span class="token operator">=</span><span class="token string">"-Xms512m -Xmx512m"</span> <span class="token punctuation">\</span><span class="token parameter variable">-v</span> ~/es-data:/usr/share/elasticsearch/data <span class="token punctuation">\</span><span class="token parameter variable">-v</span> ~/es-plugins:/usr/share/elasticsearch/plugins <span class="token punctuation">\</span><span class="token parameter variable">-v</span> ~/es-config:/usr/share/elasticsearch/config <span class="token punctuation">\</span><span class="token parameter variable">--privileged</span> <span class="token parameter variable">-u</span> root <span class="token punctuation">\</span>elasticsearch:7.9.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>也可以直接通过修改配置文件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 编辑 es 的配置文件</span><span class="token function">vi</span> /usr/share/elasticsearch/config/elasticsearch.yml<span class="token comment"># 如果需要解决跨域问题，那么则在配置文件中追加写入以下内容</span>http.cors.enabled: <span class="token boolean">true</span>http.cors.allow-origin: <span class="token string">"*"</span><span class="token comment"># 编辑 jvm 相关配置</span><span class="token function">vi</span> /usr/share/elasticsearch/config/jvm.options<span class="token comment"># 如果 es 容器老是会宕机，那么可能需要调整以下参数</span><span class="token comment"># 修改以下参数（按照自己的实际需求进行调整）</span><span class="token parameter variable">-Xms512m</span><span class="token parameter variable">-Xmx512m</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试是否安装成功</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 出现版本号即表示成功</span><span class="token function">curl</span> <span class="token number">127.0</span>.0.1:9200<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="安装-ik-中文分词插件"><a href="#安装-ik-中文分词插件" class="headerlink" title="安装 ik 中文分词插件"></a>安装 ik 中文分词插件</h3><blockquote><p>注意 ik 分词插件的版本要和 es 的版本一致</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@63d697bd738f elasticsearch<span class="token punctuation">]</span><span class="token comment"># pwd</span>/usr/share/elasticsearch<span class="token punctuation">[</span>root@63d697bd738f elasticsearch<span class="token punctuation">]</span><span class="token comment"># ./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.9.3/elasticsearch-analysis-ik-7.9.3.zip</span>-<span class="token operator">&gt;</span> Installing https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.9.3/elasticsearch-analysis-ik-7.9.3.zip-<span class="token operator">&gt;</span> Downloading https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.9.3/elasticsearch-analysis-ik-7.9.3.zip<span class="token punctuation">[</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token punctuation">]</span> <span class="token number">100</span>%??@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@     WARNING: plugin requires additional permissions     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@* java.net.SocketPermission * connect,resolveSee http://docs.oracle.com/javase/8/docs/technotes/guides/security/permissions.html<span class="token keyword">for</span> descriptions of what these permissions allow and the associated risks.Continue with installation? <span class="token punctuation">[</span>y/N<span class="token punctuation">]</span>y-<span class="token operator">&gt;</span> Installed analysis-ik<span class="token punctuation">[</span>root@63d697bd738f elasticsearch<span class="token punctuation">]</span><span class="token comment"># ./bin/elasticsearch-plugin list</span>analysis-ik<span class="token punctuation">[</span>root@63d697bd738f elasticsearch<span class="token punctuation">]</span><span class="token comment">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装-Kibana"><a href="#安装-Kibana" class="headerlink" title="安装 Kibana"></a>安装 Kibana</h2><ul><li>拉取镜像</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull kibana:7.9.3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>创建容器</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 相关参数</span><span class="token comment"># 设置 es 请求地址</span><span class="token comment"># -e ELASTICSEARCH_HOSTS=http://localhost:9200</span><span class="token comment"># 设置汉化</span><span class="token comment"># -e I18N_LOCALE=zh-CN</span><span class="token comment"># 设置时区，否则查询时间需要加 8 个小时</span><span class="token comment"># -e TZ='Asia/Shanghai'</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> alex-kibana <span class="token punctuation">\</span><span class="token parameter variable">-p</span> <span class="token number">5601</span>:5601 <span class="token punctuation">\</span><span class="token parameter variable">--net</span> alex-network <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token assign-left variable">ELASTICSEARCH_HOSTS</span><span class="token operator">=</span>http://alex-es:9200 <span class="token punctuation">\</span><span class="token parameter variable">-e</span> <span class="token assign-left variable">I18N_LOCALE</span><span class="token operator">=</span>zh-CN <span class="token punctuation">\</span>kibana:7.9.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>也可以直接去编辑 kibana 的配置文件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 编辑配置文件</span><span class="token function">vi</span> /usr/share/kibana/config/kibana.yml<span class="token comment"># 适当修改以下配置，因为我们已经将 alex-es 容器和 alex-kibana 容器同时都加入到了 alex-network 网络中，因此这里，我们可以直接通过容器名称进行访问到容器对应的 IP 地址</span>elasticsearch.hosts: <span class="token punctuation">[</span> <span class="token string">"http://alex-es:9200"</span> <span class="token punctuation">]</span>i18n.locale: zh-CN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>测试是否安装成功</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 浏览器请求</span><span class="token number">127.0</span>.0.1:5601<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> ElasticSearch </tag>
            
            <tag> Kibana </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang 使用 CASE WHEN 进行批量更新</title>
      <link href="posts/84fd0244.html"/>
      <url>posts/84fd0244.html</url>
      
        <content type="html"><![CDATA[<h1 id="Golang-使用-CASE-WHEN-进行批量更新"><a href="#Golang-使用-CASE-WHEN-进行批量更新" class="headerlink" title="Golang 使用 CASE WHEN 进行批量更新"></a>Golang 使用 CASE WHEN 进行批量更新</h1><blockquote><p>这是使用 <code>Go</code> 语言写的 <code>CASE WHEN</code> 拼接语句，如果需要 <code>PHP</code> 版本的，可以参考我的这篇文章 <a href="https://pudongping.github.io/posts/eaf6377d.html">PHP 使用 CASE WHEN 进行批量更新 （当前基于 laravel 编写）</a></p></blockquote><h2 id="以下代码最终返回的-sql-语句为"><a href="#以下代码最终返回的-sql-语句为" class="headerlink" title="以下代码最终返回的 sql 语句为"></a>以下代码最终返回的 sql 语句为</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">UPDATE articles SET view_count = CASEWHEN id = 180 AND user_id = 5  THEN 11 WHEN id = 181 AND user_id = 15 THEN 22 WHEN id = 182 AND user_id = 11 THEN 33 WHEN id = 183 AND user_id = 1  THEN 44 ELSE view_count END,updated_at = CASEWHEN id = 180 AND user_id = 5  THEN 1653147405 WHEN id = 181 AND user_id = 15 THEN 1653147406 WHEN id = 182 AND user_id = 11 THEN 1653147407 WHEN id = 183 AND user_id = 1  THEN 1653147408 ELSE updated_at END<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="封装成方法为"><a href="#封装成方法为" class="headerlink" title="封装成方法为"></a>封装成方法为</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// BatchUpdate 使用 case when 进行批量更新</span><span class="token comment">// 最终执行的 sql 语句为：</span><span class="token comment">// UPDATE articles SET</span><span class="token comment">// view_count = CASE</span><span class="token comment">//WHEN id = 180 AND user_id = 5  THEN 11</span><span class="token comment">//WHEN id = 181 AND user_id = 15 THEN 22</span><span class="token comment">//WHEN id = 182 AND user_id = 11 THEN 33</span><span class="token comment">//WHEN id = 183 AND user_id = 1  THEN 44</span><span class="token comment">//ELSE view_count END,</span><span class="token comment">// updated_at = CASE</span><span class="token comment">//WHEN id = 180 AND user_id = 5  THEN 1653147405</span><span class="token comment">//WHEN id = 181 AND user_id = 15 THEN 1653147406</span><span class="token comment">//WHEN id = 182 AND user_id = 11 THEN 1653147407</span><span class="token comment">//WHEN id = 183 AND user_id = 1  THEN 1653147408</span><span class="token comment">//ELSE updated_at</span><span class="token comment">// END</span><span class="token comment">//</span><span class="token comment">//</span><span class="token comment">// tableName := "articles"</span><span class="token comment">// where := make(map[string][]int)</span><span class="token comment">// where["id"] = []int{180, 181, 182, 183}</span><span class="token comment">// where["user_id"] = []int{5, 15, 11, 1}</span><span class="token comment">// needUpdateFields := make(map[string][]int)</span><span class="token comment">// needUpdateFields["view_count"] = []int{11, 22, 33, 44}</span><span class="token comment">// needUpdateFields["updated_at"] = []int{1653147405, 1653147405, 1653147405, 1653147405}</span><span class="token keyword">func</span> <span class="token function">BatchUpdate</span><span class="token punctuation">(</span>tableName <span class="token builtin">string</span><span class="token punctuation">,</span> where<span class="token punctuation">,</span> needUpdateFields <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>where<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">len</span><span class="token punctuation">(</span>needUpdateFields<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">}</span><span class="token comment">// 所有的条件字段数组</span><span class="token keyword">var</span> whereKeys <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token keyword">for</span> k <span class="token operator">:=</span> <span class="token keyword">range</span> where <span class="token punctuation">{</span>whereKeys <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>whereKeys<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 第一个 where 条件所有的值</span>firstWhere <span class="token operator">:=</span> where<span class="token punctuation">[</span>whereKeys<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token comment">// 所有需要更新的字段数组</span><span class="token keyword">var</span> needUpdateFieldsKeys <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token keyword">for</span> k <span class="token operator">:=</span> <span class="token keyword">range</span> needUpdateFields <span class="token punctuation">{</span>needUpdateFieldsKeys <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>needUpdateFieldsKeys<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>firstWhere<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">len</span><span class="token punctuation">(</span>needUpdateFields<span class="token punctuation">[</span>needUpdateFieldsKeys<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 更新的条件与更新的字段值数量不相等</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">}</span><span class="token keyword">var</span> s1 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token keyword">for</span> k <span class="token operator">:=</span> <span class="token keyword">range</span> firstWhere <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> vv <span class="token operator">:=</span> <span class="token keyword">range</span> whereKeys <span class="token punctuation">{</span>s1 <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%s = %v AND "</span><span class="token punctuation">,</span> vv<span class="token punctuation">,</span> where<span class="token punctuation">[</span>vv<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 按照 where 条件字段数量做切割</span>whereSize <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>whereKeys<span class="token punctuation">)</span>batches <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token operator">+</span>whereSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>whereSize<span class="token punctuation">)</span><span class="token keyword">for</span> whereSize <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token punctuation">{</span>s1<span class="token punctuation">,</span> batches <span class="token operator">=</span> s1<span class="token punctuation">[</span>whereSize<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">append</span><span class="token punctuation">(</span>batches<span class="token punctuation">,</span> s1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>whereSize<span class="token punctuation">:</span>whereSize<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span>batches <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>batches<span class="token punctuation">,</span> s1<span class="token punctuation">)</span><span class="token keyword">var</span> whereArr <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> batches <span class="token punctuation">{</span>whereArr <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>whereArr<span class="token punctuation">,</span> strings<span class="token punctuation">.</span><span class="token function">TrimSuffix</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"AND "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 拼接 sql 语句</span>sqlStr <span class="token operator">:=</span> <span class="token string">""</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> needUpdateFieldsKeys <span class="token punctuation">{</span>str <span class="token operator">:=</span> <span class="token string">""</span><span class="token keyword">for</span> kk<span class="token punctuation">,</span> vv <span class="token operator">:=</span> <span class="token keyword">range</span> whereArr <span class="token punctuation">{</span>str <span class="token operator">+=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">" WHEN %v THEN %v "</span><span class="token punctuation">,</span> vv<span class="token punctuation">,</span> needUpdateFields<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>kk<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">}</span>sqlStr <span class="token operator">+=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%s = CASE %s ELSE %s END, "</span><span class="token punctuation">,</span> v<span class="token punctuation">,</span> str<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 去除掉最后面的逗号及空格</span>sqlStr <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">TrimSuffix</span><span class="token punctuation">(</span>sqlStr<span class="token punctuation">,</span> <span class="token string">", "</span><span class="token punctuation">)</span>caseWhenSql <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"UPDATE %s SET %s"</span><span class="token punctuation">,</span> tableName<span class="token punctuation">,</span> sqlStr<span class="token punctuation">)</span><span class="token keyword">return</span> caseWhenSql<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>tableName <span class="token operator">:=</span> <span class="token string">"articles"</span>where <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>where<span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">181</span><span class="token punctuation">,</span> <span class="token number">182</span><span class="token punctuation">,</span> <span class="token number">183</span><span class="token punctuation">}</span>where<span class="token punctuation">[</span><span class="token string">"user_id"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span>needUpdateFields <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>needUpdateFields<span class="token punctuation">[</span><span class="token string">"view_count"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">}</span>needUpdateFields<span class="token punctuation">[</span><span class="token string">"updated_at"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1653147405</span><span class="token punctuation">,</span> <span class="token number">1653147406</span><span class="token punctuation">,</span> <span class="token number">1653147407</span><span class="token punctuation">,</span> <span class="token number">1653147408</span><span class="token punctuation">}</span>sql <span class="token operator">:=</span> <span class="token function">BatchUpdate</span><span class="token punctuation">(</span>tableName<span class="token punctuation">,</span> where<span class="token punctuation">,</span> needUpdateFields<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一般 orm 都会支持原生 sql 执行，在这里我只返回了拼接好的 sql 语句，最后只需要将 sql 语句拿去执行即可。当然，如果字段值类型需要调整的，则需要按需调整下。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Golang </tag>
            
            <tag> 批量更新 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gin 框架优雅的获取所有的请求参数</title>
      <link href="posts/ccb188ca.html"/>
      <url>posts/ccb188ca.html</url>
      
        <content type="html"><![CDATA[<h1 id="Gin-框架优雅的获取所有的请求参数"><a href="#Gin-框架优雅的获取所有的请求参数" class="headerlink" title="Gin 框架优雅的获取所有的请求参数"></a>Gin 框架优雅的获取所有的请求参数</h1><p>嗯，话不多说，直接看代码 ^_^</p><p>将以下代码写入某个 <code>.go</code> 文件中，比如，我这里写入 <code>gin_demo.go</code> 文件中，然后执行 <code>go run gin_demo.go</code></p><h2 id="主要代码"><a href="#主要代码" class="headerlink" title="主要代码"></a>主要代码</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"bytes"</span><span class="token string">"encoding/json"</span><span class="token string">"fmt"</span><span class="token string">"io/ioutil"</span><span class="token string">"net/http"</span><span class="token string">"sync"</span><span class="token string">"github.com/gin-gonic/gin"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token string">"/foo"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">{</span>inputs<span class="token punctuation">,</span> err <span class="token operator">:=</span> <span class="token function">RequestInputs</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"msg"</span><span class="token punctuation">:</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>data <span class="token operator">:=</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">{</span><span class="token string">"method"</span><span class="token punctuation">:</span> c<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Method<span class="token punctuation">,</span><span class="token string">"params"</span><span class="token punctuation">:</span> inputs<span class="token punctuation">,</span><span class="token punctuation">}</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"返回值为 ====&gt; %#v \n"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":9501"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// RequestInputs 获取所有参数</span><span class="token keyword">func</span> <span class="token function">RequestInputs</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">const</span> defaultMemory <span class="token operator">=</span> <span class="token number">32</span> <span class="token operator">&lt;&lt;</span> <span class="token number">20</span>contentType <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">ContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> <span class="token punctuation">(</span>dataMap  <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>queryMap <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>postMap  <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// @see gin@v1.7.7/binding/query.go ==&gt; func (queryBinding) Bind(req *http.Request, obj interface{})</span><span class="token keyword">for</span> k <span class="token operator">:=</span> <span class="token keyword">range</span> c<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>queryMap<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token string">"application/json"</span> <span class="token operator">==</span> contentType <span class="token punctuation">{</span><span class="token keyword">var</span> bodyBytes <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token keyword">if</span> c<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>bodyBytes<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token punctuation">}</span>c<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body <span class="token operator">=</span> ioutil<span class="token punctuation">.</span><span class="token function">NopCloser</span><span class="token punctuation">(</span>bytes<span class="token punctuation">.</span><span class="token function">NewBuffer</span><span class="token punctuation">(</span>bodyBytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// @see gin@v1.7.7/binding/json.go ==&gt; func (jsonBinding) Bind(req *http.Request, obj interface{})</span><span class="token keyword">if</span> c<span class="token punctuation">.</span>Request <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">if</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">NewDecoder</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Decode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>postMap<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token punctuation">}</span>c<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>Body <span class="token operator">=</span> ioutil<span class="token punctuation">.</span><span class="token function">NopCloser</span><span class="token punctuation">(</span>bytes<span class="token punctuation">.</span><span class="token function">NewBuffer</span><span class="token punctuation">(</span>bodyBytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token string">"multipart/form-data"</span> <span class="token operator">==</span> contentType <span class="token punctuation">{</span><span class="token comment">// @see gin@v1.7.7/binding/form.go ==&gt; func (formMultipartBinding) Bind(req *http.Request, obj interface{})</span><span class="token keyword">if</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span>Request<span class="token punctuation">.</span><span class="token function">ParseMultipartForm</span><span class="token punctuation">(</span>defaultMemory<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> c<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>PostForm <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token punctuation">{</span>postMap<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>postMap<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">// ParseForm 解析 URL 中的查询字符串，并将解析结果更新到 r.Form 字段</span><span class="token comment">// 对于 POST 或 PUT 请求，ParseForm 还会将 body 当作表单解析，</span><span class="token comment">// 并将结果既更新到 r.PostForm 也更新到 r.Form。解析结果中，</span><span class="token comment">// POST 或 PUT 请求主体要优先于 URL 查询字符串（同名变量，主体的值在查询字符串的值前面）</span><span class="token comment">// @see gin@v1.7.7/binding/form.go ==&gt; func (formBinding) Bind(req *http.Request, obj interface{})</span><span class="token keyword">if</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span>Request<span class="token punctuation">.</span><span class="token function">ParseForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token keyword">if</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span>Request<span class="token punctuation">.</span><span class="token function">ParseMultipartForm</span><span class="token punctuation">(</span>defaultMemory<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span><span class="token keyword">if</span> err <span class="token operator">!=</span> http<span class="token punctuation">.</span>ErrNotMultipart <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> c<span class="token punctuation">.</span>Request<span class="token punctuation">.</span>PostForm <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token punctuation">{</span>postMap<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>postMap<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> mu sync<span class="token punctuation">.</span>RWMutex<span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> queryMap <span class="token punctuation">{</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>dataMap<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> vmu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> postMap <span class="token punctuation">{</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>dataMap<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> vmu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">return</span> dataMap<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ul><li>get 请求，只有 query 参数时</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">--location</span> <span class="token parameter variable">--request</span> GET <span class="token string">'127.0.0.1:9501/foo?field1=value1&amp;field2=false&amp;field3=12&amp;field4=4.78'</span><span class="token comment"># 返回值为 ====&gt; gin.H{"method":"GET", "params":map[string]interface {}{"field1":"value1", "field2":"false", "field3":"12", "field4":"4.78"}}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>get 请求，有 query 参数，且有 <code>multipart/form-data</code> 参数时</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">--location</span> <span class="token parameter variable">--request</span> GET <span class="token string">'127.0.0.1:9501/foo?field1=value1&amp;field2=false&amp;field3=12&amp;field4=4.78'</span> <span class="token punctuation">\</span><span class="token parameter variable">--form</span> <span class="token string">'f1="vv1"'</span> <span class="token punctuation">\</span><span class="token parameter variable">--form</span> <span class="token string">'f2="vv2"'</span> <span class="token punctuation">\</span><span class="token parameter variable">--form</span> <span class="token string">'f3="false"'</span> <span class="token punctuation">\</span><span class="token parameter variable">--form</span> <span class="token string">'f4="7.08"'</span> <span class="token punctuation">\</span><span class="token parameter variable">--form</span> <span class="token string">'f5="张三"'</span> <span class="token punctuation">\</span><span class="token parameter variable">--form</span> <span class="token string">'f6="88"'</span> <span class="token punctuation">\</span><span class="token parameter variable">--form</span> <span class="token string">'f7[]="hello"'</span> <span class="token punctuation">\</span><span class="token parameter variable">--form</span> <span class="token string">'f7[]="world"'</span> <span class="token punctuation">\</span><span class="token parameter variable">--form</span> <span class="token string">'field1="覆盖了 field1"'</span><span class="token comment"># 返回值为 ====&gt; gin.H{"method":"GET", "params":map[string]interface {}{"f1":"vv1", "f2":"vv2", "f3":"false", "f4":"7.08", "f5":"张三", "f6":"88", "f7[]":[]string{"hello", "world"}, "field1":"覆盖了 field1", "field2":"false", "field3":"12", "field4":"4.78"}}</span><span class="token comment">#{</span><span class="token comment">#   "method": "GET",</span><span class="token comment">#   "params": {</span><span class="token comment">#       "f1": "vv1",</span><span class="token comment">#       "f2": "vv2",</span><span class="token comment">#       "f3": "false",</span><span class="token comment">#       "f4": "7.08",</span><span class="token comment">#       "f5": "张三",</span><span class="token comment">#       "f6": "88",</span><span class="token comment">#       "f7[]": [</span><span class="token comment">#           "hello",</span><span class="token comment">#           "world"</span><span class="token comment">#       ],</span><span class="token comment">#       "field1": "覆盖了 field1",</span><span class="token comment">#       "field2": "false",</span><span class="token comment">#       "field3": "12",</span><span class="token comment">#       "field4": "4.78"</span><span class="token comment">#   }</span><span class="token comment">#}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>post 请求，既有 query 参数，也有 <code>application/x-www-form-urlencoded</code> 参数时</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">--location</span> <span class="token parameter variable">--request</span> POST <span class="token string">'127.0.0.1:9501/foo?field1=value1&amp;field2=false&amp;field3=12&amp;field4=4.78'</span> <span class="token punctuation">\</span><span class="token parameter variable">--header</span> <span class="token string">'Content-Type: application/x-www-form-urlencoded'</span> <span class="token punctuation">\</span>--data-urlencode <span class="token string">'f1=vv1'</span> <span class="token punctuation">\</span>--data-urlencode <span class="token string">'f2=vv2'</span> <span class="token punctuation">\</span>--data-urlencode <span class="token string">'f3=false'</span> <span class="token punctuation">\</span>--data-urlencode <span class="token string">'f4=7.08'</span> <span class="token punctuation">\</span>--data-urlencode <span class="token string">'f5=张三'</span> <span class="token punctuation">\</span>--data-urlencode <span class="token string">'f6=88'</span> <span class="token punctuation">\</span>--data-urlencode <span class="token string">'f7[]=hello'</span> <span class="token punctuation">\</span>--data-urlencode <span class="token string">'f7[]=world'</span> <span class="token punctuation">\</span>--data-urlencode <span class="token string">'field1=覆盖了 field1'</span><span class="token comment"># 返回值为 ====&gt; gin.H{"method":"POST", "params":map[string]interface {}{"f1":"vv1", "f2":"vv2", "f3":"false", "f4":"7.08", "f5":"张三", "f6":"88", "f7[]":[]string{"hello", "world"}, "field1":"覆盖了 field1", "field2":"false", "field3":"12", "field4":"4.78"}}</span><span class="token comment">#{</span><span class="token comment">#   "method": "POST",</span><span class="token comment">#   "params": {</span><span class="token comment">#       "f1": "vv1",</span><span class="token comment">#       "f2": "vv2",</span><span class="token comment">#       "f3": "false",</span><span class="token comment">#       "f4": "7.08",</span><span class="token comment">#       "f5": "张三",</span><span class="token comment">#       "f6": "88",</span><span class="token comment">#       "f7[]": [</span><span class="token comment">#           "hello",</span><span class="token comment">#           "world"</span><span class="token comment">#       ],</span><span class="token comment">#       "field1": "覆盖了 field1",</span><span class="token comment">#       "field2": "false",</span><span class="token comment">#       "field3": "12",</span><span class="token comment">#       "field4": "4.78"</span><span class="token comment">#   }</span><span class="token comment">#}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>post 请求，既有 query 参数，也有 <code>application/json</code> 参数时</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">--location</span> <span class="token parameter variable">--request</span> POST <span class="token string">'127.0.0.1:9501/foo?field1=value1&amp;field2=false&amp;field3=12&amp;field4=4.78'</span> <span class="token punctuation">\</span><span class="token parameter variable">--header</span> <span class="token string">'Content-Type: application/json'</span> <span class="token punctuation">\</span>--data-raw <span class="token string">'{    "name": "张t",    "account": "",    "introduction": null,    "avatar": "/avatar/2022/05/11/ruQvUHOF-6512bd43d9caa6e02c990b0a82652dca-20220511111053.jpg",    "favorite": [        "football",        "basketball",        "pingpong-ball"    ],    "num": [        1,        5,        8    ],    "books": {        "name": "bookA",        "price": 18.98    },    "students": [        {            "name": "张三",            "age": 18,            "height": 180.00        },        {            "name": "李四",            "age": 24.5,            "height": 165.55        }    ],    "field1": "覆盖了 field1"}'</span><span class="token comment"># 返回值为 ====&gt; gin.H{"method":"POST", "params":map[string]interface {}{"account":"", "avatar":"/avatar/2022/05/11/ruQvUHOF-6512bd43d9caa6e02c990b0a82652dca-20220511111053.jpg", "books":map[string]interface {}{"name":"bookA", "price":18.98}, "favorite":[]interface {ootball", "basketball", "pingpong-ball"}, "field1":"覆盖了 field1", "field2":"false", "field3":"12", "field4":"4.78", "introduction":interface {}(nil), "name":"张t", "num":[]interface {}{1, 5, 8}, "students":[]interface {}{map[string]interface {}{"age":18, "height", "name":"张三"}, map[string]interface {}{"age":24.5, "height":165.55, "name":"李四"}}}}</span><span class="token comment">#{</span><span class="token comment">#    "method": "POST",</span><span class="token comment">#    "params": {</span><span class="token comment">#        "account": "",</span><span class="token comment">#        "avatar": "/avatar/2022/05/11/ruQvUHOF-6512bd43d9caa6e02c990b0a82652dca-20220511111053.jpg",</span><span class="token comment">#        "books": {</span><span class="token comment">#            "name": "bookA",</span><span class="token comment">#            "price": 18.98</span><span class="token comment">#        },</span><span class="token comment">#        "favorite": [</span><span class="token comment">#            "football",</span><span class="token comment">#            "basketball",</span><span class="token comment">#            "pingpong-ball"</span><span class="token comment">#        ],</span><span class="token comment">#        "field1": "覆盖了 field1",</span><span class="token comment">#        "field2": "false",</span><span class="token comment">#        "field3": "12",</span><span class="token comment">#        "field4": "4.78",</span><span class="token comment">#        "introduction": null,</span><span class="token comment">#        "name": "张t",</span><span class="token comment">#        "num": [</span><span class="token comment">#            1,</span><span class="token comment">#            5,</span><span class="token comment">#            8</span><span class="token comment">#        ],</span><span class="token comment">#        "students": [</span><span class="token comment">#            {</span><span class="token comment">#                "age": 18,</span><span class="token comment">#                "height": 180,</span><span class="token comment">#                "name": "张三"</span><span class="token comment">#            },</span><span class="token comment">#            {</span><span class="token comment">#                "age": 24.5,</span><span class="token comment">#                "height": 165.55,</span><span class="token comment">#                "name": "李四"</span><span class="token comment">#            }</span><span class="token comment">#        ]</span><span class="token comment">#    }</span><span class="token comment">#}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码通过阅读 <code>gin</code> 框架 <code>ShouldBind</code> 方法绑定参数逻辑编写。经过粗略测试，均可以获取所有的参数，并将结果绑定到 <code>map[string]interface{}</code> 中。</p>]]></content>
      
      
      <categories>
          
          <category> Go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
            <tag> Golang </tag>
            
            <tag> Gin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 和 Mac 下时间戳与时间互转</title>
      <link href="posts/fe92d324.html"/>
      <url>posts/fe92d324.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-和-Mac-下时间戳与时间互转"><a href="#Linux-和-Mac-下时间戳与时间互转" class="headerlink" title="Linux 和 Mac 下时间戳与时间互转"></a>Linux 和 Mac 下时间戳与时间互转</h1><h2 id="查看当前时间的时间戳"><a href="#查看当前时间的时间戳" class="headerlink" title="查看当前时间的时间戳"></a>查看当前时间的时间戳</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># linux 和 mac 下都是一样的命令</span><span class="token comment"># eg output：1650428766</span><span class="token function">date</span> +%s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="查看指定时间的时间戳"><a href="#查看指定时间的时间戳" class="headerlink" title="查看指定时间的时间戳"></a>查看指定时间的时间戳</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># eg output：1650427279</span><span class="token comment"># linux 下：</span><span class="token function">date</span> <span class="token parameter variable">-d</span> <span class="token string">"2022-04-20 12:01:19"</span> +%s<span class="token comment"># mac 下：</span><span class="token function">date</span> <span class="token parameter variable">-jf</span> <span class="token string">"%Y-%m-%d %H:%M:%S"</span> <span class="token string">"2022-04-20 12:01:19"</span> <span class="token string">"+%s"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="时间戳转时间格式"><a href="#时间戳转时间格式" class="headerlink" title="时间戳转时间格式"></a>时间戳转时间格式</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># eg output：2022-04-20 12:01:19</span><span class="token comment"># linux 下：</span><span class="token function">date</span> <span class="token string">"+%Y-%m-%d %H:%M:%S"</span> -d@1650427279<span class="token comment"># mac 下：</span><span class="token function">date</span> <span class="token parameter variable">-r</span> <span class="token number">1650427279</span> <span class="token string">"+%Y-%m-%d %H:%M:%S"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>支付宝花呗分期费用计算 PHP 示例代码</title>
      <link href="posts/c63afd43.html"/>
      <url>posts/c63afd43.html</url>
      
        <content type="html"><![CDATA[<h1 id="支付宝花呗分期费用计算-PHP-示例代码"><a href="#支付宝花呗分期费用计算-PHP-示例代码" class="headerlink" title="支付宝花呗分期费用计算 PHP 示例代码"></a>支付宝花呗分期费用计算 PHP 示例代码</h1><h2 id="支付宝-花呗分期-计费结果示例"><a href="#支付宝-花呗分期-计费结果示例" class="headerlink" title="支付宝-花呗分期-计费结果示例"></a>支付宝-花呗分期-计费结果示例</h2><blockquote><p>当天汇率为：汇率 1 日元 = 0.05548 人民币。</p></blockquote><p>商户承担手续费花呗分期费率</p><table><thead><tr><th>期数</th><th>费率</th></tr></thead><tbody><tr><td>3</td><td>1.80%</td></tr><tr><td>6</td><td>4.5%</td></tr><tr><td>12</td><td>7.5%</td></tr></tbody></table><p>用户承担手续费花呗分期费率</p><table><thead><tr><th>期数</th><th>费率</th></tr></thead><tbody><tr><td>3</td><td>2.30%</td></tr><tr><td>6</td><td>4.50%</td></tr><tr><td>12</td><td>7.50%</td></tr></tbody></table><p>计算结果示例如下：</p><blockquote><p>以下计算结果示例以用户承担手续费花呗分期费率计算得出。计算时间为：2022 年 1 月 6 日。</p></blockquote><table><thead><tr><th>期数</th><th>本金（人民币）</th><th>本金（日元）</th><th>每月应还款金额（人民币，单位：元）</th><th>总手续费（人民币，单位：元）</th><th>折算年化率（单利）约为</th></tr></thead><tbody><tr><td>3</td><td>5.45</td><td>98.00</td><td>1.85</td><td>0.13</td><td>13.7%</td></tr><tr><td>3</td><td>3.45</td><td>62.00</td><td>1.17</td><td>0.08</td><td>13.7%</td></tr><tr><td>6</td><td>3.45</td><td>62.00</td><td>0.59</td><td>0.16</td><td>15.3%</td></tr><tr><td>12</td><td>3.45</td><td>62.00</td><td>0.30</td><td>0.26</td><td>13.6%</td></tr><tr><td>3</td><td>1111.11</td><td>20027.00</td><td>378.89</td><td>25.56</td><td>13.7%</td></tr><tr><td>6</td><td>1111.11</td><td>20027.00</td><td>193.51</td><td>50.00</td><td>15.3%</td></tr><tr><td>12</td><td>1111.11</td><td>20027.00</td><td>99.53</td><td>83.33</td><td>13.6%</td></tr><tr><td>3</td><td>123.67</td><td>2229.00</td><td>42.16</td><td>2.84</td><td>13.7%</td></tr><tr><td>6</td><td>123.67</td><td>2229.00</td><td>21.53</td><td>5.57</td><td>15.3%</td></tr><tr><td>12</td><td>123.67</td><td>2229.00</td><td>11.07</td><td>9.28</td><td>13.6%</td></tr></tbody></table><h2 id="支付宝花呗分期费用计算-PHP-示例代码-1"><a href="#支付宝花呗分期费用计算-PHP-示例代码-1" class="headerlink" title="支付宝花呗分期费用计算 PHP 示例代码"></a>支付宝花呗分期费用计算 PHP 示例代码</h2><blockquote><p>以下代码摘抄自 <a href="https://github.com/pudongping/global-pay">pudongping/global-pay 跨境支付宝 PHP 支付插件包</a></p></blockquote><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/** * document link： https://opendocs.alipay.com/mini/introduce/antcreditpay-istallment * document link： https://opendocs.alipay.com/open/277/105952 * * Created by PhpStorm * User: Alex * Date: 2021-08-29 16:03 * E-mail: &lt;276558492@qq.com&gt; */</span><span class="token keyword">declare</span><span class="token punctuation">(</span>strict_types<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">HbFqCost</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token constant">USER_ASSUME</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 用户承担手续费</span>    <span class="token keyword">const</span> <span class="token constant">SELLER_ASSUME</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>  <span class="token comment">// 商家承担手续费</span>    <span class="token keyword">const</span> <span class="token constant">VALIDATE_NPER</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 花呗分期合法的分期数</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token variable">$rate</span> <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">USER_ASSUME</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>            <span class="token number">3</span> <span class="token operator">=&gt;</span> <span class="token number">0.023</span><span class="token punctuation">,</span>            <span class="token number">6</span> <span class="token operator">=&gt;</span> <span class="token number">0.045</span><span class="token punctuation">,</span>            <span class="token number">12</span> <span class="token operator">=&gt;</span> <span class="token number">0.075</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">SELLER_ASSUME</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>            <span class="token number">3</span> <span class="token operator">=&gt;</span> <span class="token number">0.018</span><span class="token punctuation">,</span>            <span class="token number">6</span> <span class="token operator">=&gt;</span> <span class="token number">0.045</span><span class="token punctuation">,</span>            <span class="token number">12</span> <span class="token operator">=&gt;</span> <span class="token number">0.075</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 获取花呗分期计费情况     *     * @param float $totalAmount  本金     * @param bool $isShowAll  是否显示每一期的还款数     * @param bool $isSellerPercent  是否商家承担所有的手续费     * @return array     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">fetchHbFqCost</span><span class="token punctuation">(</span><span class="token keyword type-hint">float</span> <span class="token variable">$totalAmount</span><span class="token punctuation">,</span> <span class="token keyword type-hint">bool</span> <span class="token variable">$isShowAll</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token keyword type-hint">bool</span> <span class="token variable">$isSellerPercent</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span>    <span class="token punctuation">{</span>        <span class="token variable">$assume</span> <span class="token operator">=</span> <span class="token variable">$isSellerPercent</span> <span class="token operator">?</span> <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">SELLER_ASSUME</span> <span class="token punctuation">:</span> <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">USER_ASSUME</span><span class="token punctuation">;</span>        <span class="token variable">$rates</span> <span class="token operator">=</span> <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token variable">$rate</span><span class="token punctuation">[</span><span class="token variable">$assume</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$rates</span> <span class="token keyword">as</span> <span class="token variable">$nper</span> <span class="token operator">=&gt;</span> <span class="token variable">$rate</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">calHbFqCost</span><span class="token punctuation">(</span><span class="token variable">$nper</span><span class="token punctuation">,</span> <span class="token variable">$rate</span><span class="token punctuation">,</span> <span class="token variable">$totalAmount</span><span class="token punctuation">,</span> <span class="token variable">$isShowAll</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$data</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 计算花呗分期手续费     *     * @param int $nper  期数     * @param float $rate  费率     * @param float $totalAmount  本金     * @param bool $showAll  是否显示每一期的还款数     * @return array     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">calHbFqCost</span><span class="token punctuation">(</span><span class="token keyword type-hint">int</span> <span class="token variable">$nper</span><span class="token punctuation">,</span> <span class="token keyword type-hint">float</span> <span class="token variable">$rate</span><span class="token punctuation">,</span> <span class="token keyword type-hint">float</span> <span class="token variable">$totalAmount</span><span class="token punctuation">,</span> <span class="token keyword type-hint">bool</span> <span class="token variable">$showAll</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$totalAmountCent</span> <span class="token operator">=</span> <span class="token function">bcmul</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span><span class="token variable">$totalAmount</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'100'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 1. 把金额单位转化成分 cent</span>        <span class="token comment">// 用户每期本金</span>        <span class="token variable">$perAmount</span> <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span><span class="token function">floatval</span><span class="token punctuation">(</span><span class="token function">bcdiv</span><span class="token punctuation">(</span><span class="token variable">$totalAmountCent</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span><span class="token variable">$nper</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2. 计算每期本金（用总金额/总期数，结果以分表示，向下取整）</span>        <span class="token comment">// 用户每期手续费</span>        <span class="token variable">$buyerTotalCost</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">float</span><span class="token punctuation">)</span><span class="token function">bcmul</span><span class="token punctuation">(</span><span class="token variable">$totalAmountCent</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span><span class="token variable">$rate</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//  2. 用转化为分后的金额乘以买家费率，得到以分表示的买家总费用（总手续费）</span>        <span class="token variable">$roundTotalCost</span> <span class="token operator">=</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token variable">$buyerTotalCost</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">PHP_ROUND_HALF_EVEN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 3. 对费用进行取整（取整规则为 ROUND_HALF_EVEN ）</span>        <span class="token variable">$perCharge</span> <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span><span class="token function">floatval</span><span class="token punctuation">(</span><span class="token function">bcdiv</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span><span class="token variable">$roundTotalCost</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span><span class="token variable">$nper</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 4. 计算每期费用（用总费用/总期数，结果以分表示，向下取整）</span>        <span class="token comment">// 用户每期总费用</span>        <span class="token variable">$perTotalAmount</span> <span class="token operator">=</span> <span class="token function">bcadd</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span><span class="token variable">$perAmount</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span><span class="token variable">$perCharge</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 金额以 [元] 为单位</span>        <span class="token variable">$perAmountYuan</span> <span class="token operator">=</span> <span class="token function">floatval</span><span class="token punctuation">(</span><span class="token function">bcdiv</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span><span class="token variable">$perAmount</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'100'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$perChargeYuan</span> <span class="token operator">=</span> <span class="token function">floatval</span><span class="token punctuation">(</span><span class="token function">bcdiv</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span><span class="token variable">$perCharge</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'100'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$perTotalAmountYuan</span> <span class="token operator">=</span> <span class="token function">floatval</span><span class="token punctuation">(</span><span class="token function">bcdiv</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span><span class="token variable">$perTotalAmount</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'100'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$buyerTotalCostYuan</span> <span class="token operator">=</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token function">floatval</span><span class="token punctuation">(</span><span class="token function">bcdiv</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span><span class="token variable">$buyerTotalCost</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'100'</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 花呗分期的总手续费实行“四舍五入”的原则进行计算</span>        <span class="token variable">$ret</span> <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string single-quoted-string">'nper'</span> <span class="token operator">=&gt;</span> <span class="token variable">$nper</span><span class="token punctuation">,</span>  <span class="token comment">// 期数</span>            <span class="token string single-quoted-string">'total_amount'</span> <span class="token operator">=&gt;</span> <span class="token variable">$totalAmount</span><span class="token punctuation">,</span>  <span class="token comment">// 本金</span>            <span class="token string single-quoted-string">'total_charge'</span> <span class="token operator">=&gt;</span> <span class="token variable">$buyerTotalCostYuan</span><span class="token punctuation">,</span>  <span class="token comment">// 总手续费</span>            <span class="token string single-quoted-string">'rate'</span> <span class="token operator">=&gt;</span> <span class="token variable">$rate</span><span class="token punctuation">,</span>  <span class="token comment">// 利率</span>            <span class="token string single-quoted-string">'per_charge'</span> <span class="token operator">=&gt;</span> <span class="token variable">$perChargeYuan</span><span class="token punctuation">,</span>  <span class="token comment">// 每期手续费</span>            <span class="token string single-quoted-string">'per_amount'</span> <span class="token operator">=&gt;</span> <span class="token variable">$perAmountYuan</span><span class="token punctuation">,</span>  <span class="token comment">// 每期本金</span>            <span class="token string single-quoted-string">'per_total_amount'</span> <span class="token operator">=&gt;</span> <span class="token variable">$perTotalAmountYuan</span><span class="token punctuation">,</span>  <span class="token comment">// 每期总费用</span>            <span class="token string single-quoted-string">'refund_list'</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// 还款列表</span>        <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$showAll</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'refund_list'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getRefundList</span><span class="token punctuation">(</span><span class="token variable">$ret</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$ret</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取还款的列表     *     * @param array $params     * @return array     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getRefundList</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$params</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$nper</span> <span class="token operator">=</span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'nper'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 期数</span>        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;=</span> <span class="token variable">$nper</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$item</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$item</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'nper'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$i</span><span class="token punctuation">;</span>  <span class="token comment">// 第几期</span>            <span class="token variable">$item</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'charge'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'per_charge'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 当前期数所需要支付的手续费</span>            <span class="token variable">$item</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'amount'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'per_amount'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 当前期数所需要支付的本金数</span>            <span class="token variable">$item</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'current_total_amount'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'per_total_amount'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 当前期数所需要支付的总费用</span>            <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$item</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$charges</span> <span class="token operator">=</span> <span class="token function">array_column</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'charge'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 计算的所有手续费总和</span>        <span class="token variable">$chargesSum</span> <span class="token operator">=</span> <span class="token function">array_reduce</span><span class="token punctuation">(</span><span class="token variable">$charges</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$carry</span><span class="token punctuation">,</span> <span class="token variable">$item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">bcadd</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span><span class="token variable">$carry</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span><span class="token variable">$item</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$amounts</span> <span class="token operator">=</span> <span class="token function">array_column</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'amount'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 计算的所有本金总和</span>        <span class="token variable">$amountsSum</span> <span class="token operator">=</span> <span class="token function">array_reduce</span><span class="token punctuation">(</span><span class="token variable">$amounts</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$carry</span><span class="token punctuation">,</span> <span class="token variable">$item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">bcadd</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span><span class="token variable">$carry</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span><span class="token variable">$item</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 如果所需支付的总手续费大于计算后的手续费总和，那么则需要将缺少的手续费补加到第一期</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'total_charge'</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token keyword type-casting">float</span><span class="token punctuation">)</span><span class="token variable">$chargesSum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'charge'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">floatval</span><span class="token punctuation">(</span><span class="token function">bcadd</span><span class="token punctuation">(</span><span class="token function">strval</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'charge'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">bcsub</span><span class="token punctuation">(</span><span class="token function">strval</span><span class="token punctuation">(</span><span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'total_charge'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">strval</span><span class="token punctuation">(</span><span class="token variable">$chargesSum</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 如果所需要支付的本金大于计算后的本金总和，那么则需要将缺少的本金补加到第一期</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'total_amount'</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token keyword type-casting">float</span><span class="token punctuation">)</span><span class="token variable">$amountsSum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'amount'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">floatval</span><span class="token punctuation">(</span><span class="token function">bcadd</span><span class="token punctuation">(</span><span class="token function">strval</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'amount'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">bcsub</span><span class="token punctuation">(</span><span class="token function">strval</span><span class="token punctuation">(</span><span class="token variable">$params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'total_amount'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">strval</span><span class="token punctuation">(</span><span class="token variable">$amountsSum</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 第一期所需要支付的总金额</span>        <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'current_total_amount'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">floatval</span><span class="token punctuation">(</span><span class="token function">bcadd</span><span class="token punctuation">(</span><span class="token function">strval</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'charge'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">strval</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'amount'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$data</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$istallment</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HbFqCost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$istallment</span><span class="token operator">-&gt;</span><span class="token function">fetchHbFqCost</span><span class="token punctuation">(</span><span class="token number">123.67</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Pay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 支付宝花呗分期 </tag>
            
            <tag> 支付 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单易用且优雅的跨境支付 PHP SDK 扩展包</title>
      <link href="posts/1c7fe35b.html"/>
      <url>posts/1c7fe35b.html</url>
      
        <content type="html"><![CDATA[<h1 align="center"><a href="https://github.com/pudongping/global-pay">GlobalPay</a></h1><p>支持国际版支付的 PHP SDK，目前<strong>只支持支付宝国际版</strong>。因目前支付宝跨境在线支付服务只支持 app、wap、web 和报关这四种，本 SDK 提供了 app、wap、web 这三种跨境支付，<a href="https://global.alipay.com/docs/ac/legacy/legacydoc">详见国际支付宝官方文档</a> 。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">composer</span> require pudongping/global-pay <span class="token parameter variable">-vvv</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>命名规范</li><li>隐藏开发者不需要关注的细枝末节</li><li>符合 PSR 规范，可以方便的与各种 PHP 框架集成</li><li>有良好的文档，包含各种示例方法以及官方返回结果。<a href="https://pudongping.github.io/global-pay-doc">文档地址</a> ： <a href="https://pudongping.github.io/global-pay-doc">https://pudongping.github.io/global-pay-doc</a></li></ul><h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><ul><li>PHP &gt;= 7.1.3</li><li>Composer</li></ul><h2 id="支持的支付方法"><a href="#支持的支付方法" class="headerlink" title="支持的支付方法"></a>支持的支付方法</h2><h3 id="支付宝"><a href="#支付宝" class="headerlink" title="支付宝"></a>支付宝</h3><ul><li>电脑支付</li><li>手机网站支付</li><li>APP 支付</li></ul><table><thead><tr><th align="center">method</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">web</td><td align="center">电脑支付</td></tr><tr><td align="center">wap</td><td align="center">手机网站支付</td></tr><tr><td align="center">app</td><td align="center">APP 支付</td></tr></tbody></table><h2 id="支持的方法"><a href="#支持的方法" class="headerlink" title="支持的方法"></a>支持的方法</h2><blockquote><p>所有网关均支持以下方法</p></blockquote><ul><li><p>find(array|string $order)<br><strong>说明：</strong> 查找订单接口<br><strong>参数：</strong> <code>$order</code> 为 <code>string</code> 类型时，请传入系统订单号，对应跨境支付宝中的 <code>out_trade_no</code> 参数； <code>array</code> 类型时，参数请参考<a href="https://global.alipay.com/docs/ac/global/single_trade_query_cn">支付宝境外订单单笔查询文档</a> 。<br><strong>返回：</strong> 查询成功，返回 <code>Illuminate\Support\Collection</code> 实例，可以通过 <code>$collection-&gt;toArray()</code> 或者 <code>$collection-&gt;all()</code> 或者 <code>$collection-&gt;get('field')</code> 访问服务器返回的数据。</p></li><li><p>refund(array $order)<br><strong>说明：</strong> 退款接口<br><strong>参数：</strong>  <code>$order</code> 数组格式，退款参数请参考<a href="https://global.alipay.com/docs/ac/global/forex_refund_cn">支付宝境外退款接口文档</a> 。<br><strong>返回：</strong> 退款成功，返回 <code>Illuminate\Support\Collection</code> 实例，可以通过 <code>$collection-&gt;toArray()</code> 或者 <code>$collection-&gt;all()</code> 或者 <code>$collection-&gt;get('field')</code> 访问服务器返回的数据。</p></li><li><p>verify()<br><strong>说明：</strong> 验证服务器返回数据是否合法<br><strong>返回：</strong> 验证成功，返回 <code>Illuminate\Support\Collection</code> 实例，可以通过 <code>$collection-&gt;toArray()</code> 或者 <code>$collection-&gt;all()</code> 或者 <code>$collection-&gt;get('field')</code> 访问服务器返回的数据。</p></li></ul><h2 id="其他通用方法"><a href="#其他通用方法" class="headerlink" title="其他通用方法"></a>其他通用方法</h2><ul><li><p>getExchangeRate()<br><strong>说明：</strong> 获取汇率。详见<a href="https://global.alipay.com/docs/ac/global/forex_rate_file_cn">支付宝境外汇率查询接口</a> 。<br><strong>返回：</strong> 获取成功，返回 <code>Illuminate\Support\Collection</code> 实例，可以通过 <code>$collection-&gt;toArray()</code> 或者 <code>$collection-&gt;all()</code> 或者 <code>$collection-&gt;get('field')</code> 访问服务器返回的数据。<br><strong>注意：</strong> 1、货币间的汇率会在北京时间每日 9：00 到 11:00 间变动一次；  2、汇率每日获取上限为 100 次。 （可能需要考虑通过缓存保存汇率，防止接口出现异常，因为本 SDK 没有做缓存处理）</p></li><li><p>getHbFqCost(float $totalAmount, bool $isShowAll = false, bool $isSellerPercent = false)<br><strong>说明：</strong> 获取花呗分期计费情况<br><strong>参数：</strong> <code>$totalAmount</code> 为分期的本金，<code>$isShowAll</code> 为是否显示每一期的还款数，<code>$isSellerPercent</code> 为 <code>true</code> 表示商家承担全部手续费，为 <code>false</code> 表示用户承担全部手续费。<br><strong>返回：</strong> 获取成功，返回 <code>Illuminate\Support\Collection</code> 实例，可以通过 <code>$collection-&gt;toArray()</code> 或者 <code>$collection-&gt;all()</code> 或者 <code>$collection-&gt;get('field')</code> 访问服务器返回的数据。</p></li></ul><p>返回参数说明</p><table><thead><tr><th>参数</th><th align="center">含义</th></tr></thead><tbody><tr><td>nper</td><td align="center">期数</td></tr><tr><td>total_amount</td><td align="center">本金</td></tr><tr><td>total_charge</td><td align="center">总手续费</td></tr><tr><td>rate</td><td align="center">利率</td></tr><tr><td>per_charge</td><td align="center">每期手续费</td></tr><tr><td>per_amount</td><td align="center">每期本金</td></tr><tr><td>per_total_amount</td><td align="center">每期总费用</td></tr><tr><td>refund_list</td><td align="center">还款列表</td></tr><tr><td>refund_list.nper</td><td align="center">第几期</td></tr><tr><td>refund_list.charge</td><td align="center">当前期数所需要支付的手续费</td></tr><tr><td>refund_list.amount</td><td align="center">当前期数所需要支付的本金数</td></tr><tr><td>refund_list.current_total_amount</td><td align="center">当前期数所需要支付的总费用</td></tr></tbody></table><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><h3 id="非花呗分期支付"><a href="#非花呗分期支付" class="headerlink" title="非花呗分期支付"></a>非花呗分期支付</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">declare</span><span class="token punctuation">(</span>strict_types<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Controller</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Pudongping<span class="token punctuation">\</span>GlobalPay<span class="token punctuation">\</span>GlobalPay</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Pudongping<span class="token punctuation">\</span>GlobalPay<span class="token punctuation">\</span>Log</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">PayController</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$config</span> <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string single-quoted-string">'partner'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'2088000000000000'</span><span class="token punctuation">,</span>  <span class="token comment">// 合作身份者 id，以 2088 开头的 16 位纯数字</span>        <span class="token string single-quoted-string">'notify_url'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'http://a90b-8-37-43-168.demo.io/index/notify_url'</span><span class="token punctuation">,</span>  <span class="token comment">// 异步回调地址</span>        <span class="token string single-quoted-string">'return_url'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'http://a90b-8-37-43-168.demo.io/index/return_url'</span><span class="token punctuation">,</span>  <span class="token comment">// 同步回调地址</span>        <span class="token string single-quoted-string">'refer_url'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'https://www.demo.net'</span><span class="token punctuation">,</span>  <span class="token comment">// 二级商户网站地址</span>        <span class="token string single-quoted-string">'seller_email'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'xxxx@gmail.com'</span><span class="token punctuation">,</span>  <span class="token comment">// 签约支付宝账号或卖家支付宝帐户</span>        <span class="token string single-quoted-string">'key'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'xxxx'</span><span class="token punctuation">,</span>  <span class="token comment">// 安全检验码，以数字和字母组成的 32 位字符</span>        <span class="token string single-quoted-string">'sign_type'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'RSA'</span><span class="token punctuation">,</span>  <span class="token comment">// 不需要修改</span>        <span class="token string single-quoted-string">'input_charset'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'UTF-8'</span><span class="token punctuation">,</span>  <span class="token comment">// 商户网站使用的编码格式，建议不需要修改</span>        <span class="token string single-quoted-string">'transport'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'http'</span><span class="token punctuation">,</span>  <span class="token comment">// 访问模式,根据自己的服务器是否支持 ssl 访问，若支持请选择 https；若不支持请选择 http</span>        <span class="token string single-quoted-string">'split_fund'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'2088000000000000:0.10'</span><span class="token punctuation">,</span>  <span class="token comment">// 接受分账资金的支付宝账户 ID 和比例，用逗号分隔其他帐号信息。ID 是以 2088 开头的纯 16 位数字。</span>        <span class="token string single-quoted-string">'private_key'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'/Users/pudongping/glory/key/alipay_private_key.pem'</span><span class="token punctuation">,</span>  <span class="token comment">// 私钥路径</span>        <span class="token string single-quoted-string">'public_key'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'/Users/pudongping/glory/key/alipay_public_key.pem'</span><span class="token punctuation">,</span>  <span class="token comment">// 公钥路径</span>        <span class="token string single-quoted-string">'log'</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span> <span class="token comment">// optional</span>            <span class="token string single-quoted-string">'file'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'alipay.log'</span><span class="token punctuation">,</span>  <span class="token comment">// 当前目录下</span>            <span class="token string single-quoted-string">'level'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'debug'</span><span class="token punctuation">,</span> <span class="token comment">// 建议生产环境等级调整为 info，开发环境为 debug</span>            <span class="token string single-quoted-string">'type'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'single'</span><span class="token punctuation">,</span> <span class="token comment">// optional, 可选 daily.</span>            <span class="token string single-quoted-string">'max_file'</span> <span class="token operator">=&gt;</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token comment">// optional, 当 type 为 daily 时有效，默认 30 天</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'http'</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span> <span class="token comment">// optional</span>            <span class="token string single-quoted-string">'timeout'</span> <span class="token operator">=&gt;</span> <span class="token number">5.0</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'connect_timeout'</span> <span class="token operator">=&gt;</span> <span class="token number">5.0</span><span class="token punctuation">,</span>            <span class="token comment">// 更多配置项请参考 [Guzzle](https://guzzle-cn.readthedocs.io/zh_CN/latest/request-options.html)</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'mode'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'dev'</span><span class="token punctuation">,</span> <span class="token comment">// optional,设置此参数，将进入沙箱模式</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">/**     * document link: https://global.alipay.com/docs/ac/web_cn/about     *     * @return mixed     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">web</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$order</span> <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string single-quoted-string">'out_trade_no'</span> <span class="token operator">=&gt;</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'subject'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'交易 alex '</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'currency'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'JPY'</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'rmb_fee'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'0.20'</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'trade_information'</span> <span class="token operator">=&gt;</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token punctuation">[</span>                <span class="token string single-quoted-string">'business_type'</span> <span class="token operator">=&gt;</span> <span class="token number">4</span><span class="token punctuation">,</span>                <span class="token string single-quoted-string">'goods_info'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'変身ベ...^1'</span><span class="token punctuation">,</span>                <span class="token string single-quoted-string">'total_quantity'</span> <span class="token operator">=&gt;</span> <span class="token number">1</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment">// '_only_args' =&gt; true  // 只需要返回参数模式时增加</span>        <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$globalPay</span> <span class="token operator">=</span> <span class="token class-name static-context">GlobalPay</span><span class="token operator">::</span><span class="token function">alipay</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">config</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">web</span><span class="token punctuation">(</span><span class="token variable">$order</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$globalPay</span><span class="token operator">-&gt;</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 如果设置了 `_only_args` 为 true，则使用以下方法获取所有的参数</span>        <span class="token comment">// var_dump($globalPay-&gt;getContent());</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * document link:  https://global.alipay.com/docs/ac/wap_cn/start     *     * @return mixed     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">wap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$order</span> <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string single-quoted-string">'out_trade_no'</span> <span class="token operator">=&gt;</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'subject'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'交易 alex '</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'currency'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'JPY'</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'rmb_fee'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'0.10'</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'trade_information'</span> <span class="token operator">=&gt;</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token punctuation">[</span>                <span class="token string single-quoted-string">'business_type'</span> <span class="token operator">=&gt;</span> <span class="token number">4</span><span class="token punctuation">,</span>                <span class="token string single-quoted-string">'goods_info'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'変身ベ...^1'</span><span class="token punctuation">,</span>                <span class="token string single-quoted-string">'total_quantity'</span> <span class="token operator">=&gt;</span> <span class="token number">1</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token comment">// '_only_args' =&gt; true  // 只需要返回参数模式时增加</span>        <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$globalPay</span> <span class="token operator">=</span> <span class="token class-name static-context">GlobalPay</span><span class="token operator">::</span><span class="token function">alipay</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">config</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">wap</span><span class="token punctuation">(</span><span class="token variable">$order</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$globalPay</span><span class="token operator">-&gt;</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 如果设置了 `_only_args` 为 true，则使用以下方法获取所有的参数</span>        <span class="token comment">// var_dump($globalPay-&gt;getContent());</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * document link: https://global.alipay.com/docs/ac/app_cn/about     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">app</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$order</span> <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string single-quoted-string">'out_trade_no'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'alex_'</span> <span class="token operator">.</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'subject'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'交易 5200'</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'currency'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'JPY'</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'rmb_fee'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'1.01'</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'trade_information'</span> <span class="token operator">=&gt;</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token punctuation">[</span>                <span class="token string single-quoted-string">'business_type'</span> <span class="token operator">=&gt;</span> <span class="token number">4</span><span class="token punctuation">,</span>                <span class="token string single-quoted-string">'goods_info'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'大海にて^1'</span><span class="token punctuation">,</span>                <span class="token string single-quoted-string">'total_quantity'</span> <span class="token operator">=&gt;</span> <span class="token number">1</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$globalPay</span> <span class="token operator">=</span> <span class="token class-name static-context">GlobalPay</span><span class="token operator">::</span><span class="token function">alipay</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">config</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">app</span><span class="token punctuation">(</span><span class="token variable">$order</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$globalPay</span><span class="token operator">-&gt;</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 单笔查询接口 document link: https://global.alipay.com/docs/ac/global/single_trade_query_cn     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">// out_trade_no 和 trade_no 参数可以同时含有，也可以二选一</span>        <span class="token variable">$order</span> <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string single-quoted-string">'out_trade_no'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'alex_1629950066'</span><span class="token punctuation">,</span>            <span class="token comment">// 'trade_no' =&gt; '2021082622001364941434754996',</span>        <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$globalPay</span> <span class="token operator">=</span> <span class="token class-name static-context">GlobalPay</span><span class="token operator">::</span><span class="token function">alipay</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">config</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$order</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$globalPay</span><span class="token operator">-&gt;</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 退款接口 document link： https://global.alipay.com/docs/ac/global/forex_refund_cn     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">refund</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$order</span> <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string single-quoted-string">'out_return_no'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'alex_refund_'</span> <span class="token operator">.</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'out_trade_no'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'alex_1629950066'</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'return_rmb_amount'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'1.01'</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'currency'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'JPY'</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'reason'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'退款测试'</span><span class="token punctuation">,</span>            <span class="token comment">// 'is_sync' =&gt; 'N',  // 如果 is_sync =&gt; N 则开启异步通知，否则不开启异步通知，不开启异步通知 notify_url 参数将会失效（不需要开启时，则不需要设置）</span>            <span class="token comment">// 'notify_url' =&gt; 'http://api.demo.com:8016/v2/alipay/forexNotify',  // $order['notify_url'] 设置了，则使用 $order['notify_url'] 的值，否则使用配置文件中的 notify_url 参数</span>            <span class="token comment">// 'type' =&gt; 'pc',  // 如果是网站支付，则需要设置 type 参数为 pc，手机浏览器或支付宝钱包支付时，不需要设置</span>        <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$globalPay</span> <span class="token operator">=</span> <span class="token class-name static-context">GlobalPay</span><span class="token operator">::</span><span class="token function">alipay</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">config</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">refund</span><span class="token punctuation">(</span><span class="token variable">$order</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$globalPay</span><span class="token operator">-&gt;</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 同步验签     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">return</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token class-name static-context">GlobalPay</span><span class="token operator">::</span><span class="token function">alipay</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">config</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">verify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 异步验签     *     * @return mixed     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$globalPay</span> <span class="token operator">=</span> <span class="token class-name static-context">GlobalPay</span><span class="token operator">::</span><span class="token function">alipay</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">config</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$globalPay</span><span class="token operator">-&gt;</span><span class="token function">verify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 验签</span>            <span class="token comment">// 建议必须对以下几个参数进行业务逻辑验证</span>            <span class="token variable">$outTradeNo</span> <span class="token operator">=</span> <span class="token variable">$data</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'out_trade_no'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 商户需要验证该通知数据中的 out_trade_no 是否为商户系统中创建的订单号。</span>            <span class="token variable">$tradeStatus</span> <span class="token operator">=</span> <span class="token variable">$data</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'trade_status'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 在支付宝的业务通知中，只有交易通知状态为 TRADE_FINISHED 时，支付宝才会认定为买家付款成功。</span>            <span class="token variable">$totalFee</span> <span class="token operator">=</span> <span class="token variable">$data</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'total_fee'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 该笔订单的总金额。请求时对应的参数，原样通知回来。（外币金额）</span>            <span class="token class-name static-context">Log</span><span class="token operator">::</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'GlobalPay Notify ===&gt; '</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token operator">-&gt;</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>Exception</span> <span class="token variable">$exception</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name static-context">Log</span><span class="token operator">::</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'异步通知异常 ===&gt; '</span> <span class="token operator">.</span> <span class="token variable">$exception</span><span class="token operator">-&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token variable">$globalPay</span><span class="token operator">-&gt;</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 其他框架</span>            <span class="token comment">// return $globalPay-&gt;fail();  // Laravel 框架可以直接这样</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$globalPay</span><span class="token operator">-&gt;</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 其他框架</span>        <span class="token comment">// return $globalPay-&gt;success();  //  Laravel 框架可以直接这样</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取汇率     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getExchangeRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$globalPay</span> <span class="token operator">=</span> <span class="token class-name static-context">GlobalPay</span><span class="token operator">::</span><span class="token function">alipay</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">config</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">getExchangeRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$globalPay</span><span class="token operator">-&gt;</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="花呗分期支付"><a href="#花呗分期支付" class="headerlink" title="花呗分期支付"></a>花呗分期支付</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">declare</span><span class="token punctuation">(</span>strict_types<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Controller</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Pudongping<span class="token punctuation">\</span>GlobalPay<span class="token punctuation">\</span>GlobalPay</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Pudongping<span class="token punctuation">\</span>GlobalPay<span class="token punctuation">\</span>Log</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">HbfqPayController</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">web</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$order</span> <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string single-quoted-string">'out_trade_no'</span> <span class="token operator">=&gt;</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'subject'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'交易 alex'</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'currency'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'JPY'</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'rmb_fee'</span> <span class="token operator">=&gt;</span> <span class="token number">5.45</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'trade_information'</span> <span class="token operator">=&gt;</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token punctuation">[</span>                <span class="token string single-quoted-string">'business_type'</span> <span class="token operator">=&gt;</span> <span class="token number">4</span><span class="token punctuation">,</span>                <span class="token string single-quoted-string">'goods_info'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'交易费用^1'</span><span class="token punctuation">,</span>                <span class="token string single-quoted-string">'total_quantity'</span> <span class="token operator">=&gt;</span> <span class="token number">1</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'hb_fq_param'</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>                <span class="token string single-quoted-string">'num'</span> <span class="token operator">=&gt;</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token comment">// 花呗分期分期数，只支持 3、6、12 期</span>                <span class="token comment">// 只有 is_has_household 为 true， is_seller_percent 才能设置为 true</span>                <span class="token string single-quoted-string">'is_has_household'</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span>  <span class="token comment">// 是否拥有出资户，只有拥有出资户，商家才能贴息，否则只能用户贴息</span>                <span class="token string single-quoted-string">'is_seller_percent'</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span>  <span class="token comment">// 是否商家贴息</span>                <span class="token comment">// 花呗分期开启订单传参贴息活动（不支持 PC 支付，无论是国际还是国内的交易都不支持）</span>                <span class="token comment">// 因此相比 app 支付，不能传递 is_order_subsidy 参数</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token comment">// '_only_args' =&gt; true  // 只需要返回参数模式时增加</span>        <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$globalPay</span> <span class="token operator">=</span> <span class="token class-name static-context">GlobalPay</span><span class="token operator">::</span><span class="token function">alipay</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">config</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">web</span><span class="token punctuation">(</span><span class="token variable">$order</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$globalPay</span><span class="token operator">-&gt;</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 如果设置了 `_only_args` 为 true，则使用以下方法获取所有的参数</span>        <span class="token comment">// var_dump($globalPay-&gt;getContent());</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">wap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$order</span> <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string single-quoted-string">'out_trade_no'</span> <span class="token operator">=&gt;</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'subject'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'交易 alex'</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'currency'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'JPY'</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'rmb_fee'</span> <span class="token operator">=&gt;</span> <span class="token number">5.45</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'trade_information'</span> <span class="token operator">=&gt;</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token punctuation">[</span>                <span class="token string single-quoted-string">'business_type'</span> <span class="token operator">=&gt;</span> <span class="token number">4</span><span class="token punctuation">,</span>                <span class="token string single-quoted-string">'goods_info'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'交易费用^1'</span><span class="token punctuation">,</span>                <span class="token string single-quoted-string">'total_quantity'</span> <span class="token operator">=&gt;</span> <span class="token number">1</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'hb_fq_param'</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>                <span class="token string single-quoted-string">'num'</span> <span class="token operator">=&gt;</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token comment">// 花呗分期分期数，只支持 3、6、12 期</span>                <span class="token comment">// 只有 is_has_household 为 true， is_seller_percent 才能设置为 true</span>                <span class="token string single-quoted-string">'is_has_household'</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span>  <span class="token comment">// 是否拥有出资户，只有拥有出资户，商家才能贴息，否则只能用户贴息</span>                <span class="token string single-quoted-string">'is_seller_percent'</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span>  <span class="token comment">// 是否商家贴息</span>                <span class="token comment">// 花呗分期开启订单传参贴息活动（不支持 PC 支付，无论是国际还是国内的交易都不支持）</span>                <span class="token comment">// 因此相比 app 支付，不能传递 is_order_subsidy 参数</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token comment">// '_only_args' =&gt; true  // 只需要返回参数模式时增加</span>        <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$globalPay</span> <span class="token operator">=</span> <span class="token class-name static-context">GlobalPay</span><span class="token operator">::</span><span class="token function">alipay</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">config</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">wap</span><span class="token punctuation">(</span><span class="token variable">$order</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$globalPay</span><span class="token operator">-&gt;</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 如果设置了 `_only_args` 为 true，则使用以下方法获取所有的参数</span>        <span class="token comment">// var_dump($globalPay-&gt;getContent());</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">app</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$order</span> <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string single-quoted-string">'out_trade_no'</span> <span class="token operator">=&gt;</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'subject'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'交易 alex'</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'currency'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'JPY'</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'rmb_fee'</span> <span class="token operator">=&gt;</span> <span class="token number">3.45</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'trade_information'</span> <span class="token operator">=&gt;</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token punctuation">[</span>                <span class="token string single-quoted-string">'business_type'</span> <span class="token operator">=&gt;</span> <span class="token number">4</span><span class="token punctuation">,</span>                <span class="token string single-quoted-string">'goods_info'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'交易费用^1'</span><span class="token punctuation">,</span>                <span class="token string single-quoted-string">'total_quantity'</span> <span class="token operator">=&gt;</span> <span class="token number">1</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'hb_fq_param'</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>                <span class="token string single-quoted-string">'num'</span> <span class="token operator">=&gt;</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token comment">// 花呗分期分期数，只支持 3、6、12 期</span>                <span class="token comment">// 只有 is_has_household 为 true， is_seller_percent 才能设置为 true，否则 is_seller_percent 只能设置为 false</span>                <span class="token string single-quoted-string">'is_has_household'</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span>  <span class="token comment">// 是否拥有出资户，只有拥有出资户，商家才能贴息，否则只能用户贴息</span>                <span class="token string single-quoted-string">'is_seller_percent'</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span>  <span class="token comment">// 是否商家贴息， true 为商家贴息， false 为用户贴息</span>                <span class="token string single-quoted-string">'is_order_subsidy'</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span>  <span class="token comment">// 是否开启订单传参贴息活动</span>                <span class="token comment">// 出资户贴息和订单传参贴息只能允许一个为 true</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$globalPay</span> <span class="token operator">=</span> <span class="token class-name static-context">GlobalPay</span><span class="token operator">::</span><span class="token function">alipay</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">config</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">app</span><span class="token punctuation">(</span><span class="token variable">$order</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$globalPay</span><span class="token operator">-&gt;</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">// out_trade_no 和 trade_no 参数可以同时含有，也可以二选一</span>        <span class="token variable">$order</span> <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string single-quoted-string">'out_trade_no'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'alex_1629950066'</span><span class="token punctuation">,</span>            <span class="token comment">// 'trade_no' =&gt; '2021082622001364941434754996',</span>            <span class="token string single-quoted-string">'is_hbfq'</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">// 该笔订单是否为花呗分期支付，订单查询出来的结果会含有 hb_fq_num 参数，不是花呗分期订单则没有这个参数</span>        <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$globalPay</span> <span class="token operator">=</span> <span class="token class-name static-context">GlobalPay</span><span class="token operator">::</span><span class="token function">alipay</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">config</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token variable">$order</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$globalPay</span><span class="token operator">-&gt;</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">refund</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">// 花呗分期退款和非花呗分期退款操作流程一致</span>        <span class="token variable">$order</span> <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string single-quoted-string">'out_return_no'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'alex_refund_'</span> <span class="token operator">.</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'out_trade_no'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'alex_1629950066'</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'return_rmb_amount'</span> <span class="token operator">=&gt;</span> <span class="token number">3.45</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'currency'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'JPY'</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'reason'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'退款测试'</span><span class="token punctuation">,</span>            <span class="token comment">// 'is_sync' =&gt; 'N',  // 如果 is_sync =&gt; N 则开启异步通知，否则不开启异步通知，不开启异步通知 notify_url 参数将会失效（不需要开启时，则不需要设置）</span>            <span class="token comment">// 'notify_url' =&gt; 'http://api.demo.com:8016/v2/alipay/forexNotify',  // $order['notify_url'] 设置了，则使用 $order['notify_url'] 的值，否则使用配置文件中的 notify_url 参数</span>            <span class="token comment">// 'type' =&gt; 'pc',  // 如果是网站支付，则需要设置 type 参数为 pc，手机浏览器或支付宝钱包支付时，不需要设置</span>        <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$globalPay</span> <span class="token operator">=</span> <span class="token class-name static-context">GlobalPay</span><span class="token operator">::</span><span class="token function">alipay</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">config</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">refund</span><span class="token punctuation">(</span><span class="token variable">$order</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$globalPay</span><span class="token operator">-&gt;</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">return</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token class-name static-context">GlobalPay</span><span class="token operator">::</span><span class="token function">alipay</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">config</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">verify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$globalPay</span> <span class="token operator">=</span> <span class="token class-name static-context">GlobalPay</span><span class="token operator">::</span><span class="token function">alipay</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">config</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$globalPay</span><span class="token operator">-&gt;</span><span class="token function">verify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 验签</span>            <span class="token comment">// 建议必须对以下几个参数进行业务逻辑验证</span>            <span class="token variable">$outTradeNo</span> <span class="token operator">=</span> <span class="token variable">$data</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'out_trade_no'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 商户需要验证该通知数据中的 out_trade_no 是否为商户系统中创建的订单号。</span>            <span class="token variable">$tradeStatus</span> <span class="token operator">=</span> <span class="token variable">$data</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'trade_status'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 在支付宝的业务通知中，只有交易通知状态为 TRADE_FINISHED 时，支付宝才会认定为买家付款成功。</span>            <span class="token variable">$totalFee</span> <span class="token operator">=</span> <span class="token variable">$data</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'total_fee'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 该笔订单的总金额。请求时对应的参数，原样通知回来。（外币金额）</span>            <span class="token class-name static-context">Log</span><span class="token operator">::</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'GlobalPay Notify ===&gt; '</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token operator">-&gt;</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>Exception</span> <span class="token variable">$exception</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name static-context">Log</span><span class="token operator">::</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'异步通知异常 ===&gt; '</span> <span class="token operator">.</span> <span class="token variable">$exception</span><span class="token operator">-&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token variable">$globalPay</span><span class="token operator">-&gt;</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 其他框架</span>            <span class="token comment">// return $globalPay-&gt;fail();  // Laravel 框架可以直接这样</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$globalPay</span><span class="token operator">-&gt;</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 其他框架</span>        <span class="token comment">// return $globalPay-&gt;success();  //  Laravel 框架可以直接这样</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取花呗分期计费情况     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getHbFqCost</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$totalAmount</span> <span class="token operator">=</span> <span class="token number">100.88</span><span class="token punctuation">;</span>        <span class="token comment">// 只需要获取 3 6 12 期相对应的还款数</span>        <span class="token comment">// $globalPay = GlobalPay::alipay($this-&gt;config)-&gt;getHbFqCost($totalAmount);</span>        <span class="token comment">// 获取 3 6 12 期相对应到还款数且显示出每一期的还款情况（用户承担所有的手续费）</span>        <span class="token comment">// $globalPay = GlobalPay::alipay($this-&gt;config)-&gt;getHbFqCost($totalAmount, true);</span>        <span class="token comment">// 获取 3 6 12 期相对应到还款数且显示出每一期的还款情况（商家承担所有的手续费）</span>        <span class="token variable">$globalPay</span> <span class="token operator">=</span> <span class="token class-name static-context">GlobalPay</span><span class="token operator">::</span><span class="token function">alipay</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">config</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">getHbFqCost</span><span class="token punctuation">(</span><span class="token variable">$totalAmount</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$globalPay</span><span class="token operator">-&gt;</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="LICENSE"><a href="#LICENSE" class="headerlink" title="LICENSE"></a>LICENSE</h2><p>MIT</p>]]></content>
      
      
      <categories>
          
          <category> Pay </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 支付 </tag>
            
            <tag> 跨境支付 </tag>
            
            <tag> SDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hyperf 启动服务脚本 start 、 status 、stop 、restart</title>
      <link href="posts/46a98e74.html"/>
      <url>posts/46a98e74.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hyperf-启动服务脚本-start-、-status-、stop-、restart"><a href="#Hyperf-启动服务脚本-start-、-status-、stop-、restart" class="headerlink" title="Hyperf 启动服务脚本 start 、 status 、stop 、restart"></a>Hyperf 启动服务脚本 start 、 status 、stop 、restart</h1><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ol><li>在项目根目录，创建新的脚本文件 <code>server.sh</code> ，将以下内容复制进去</li><li>设置执行权限 <code>chmod u+x server.sh</code></li><li>执行命令 <code>./server.sh status</code> 即可</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看 hyperf 服务状态</span>./server.sh status<span class="token comment"># 开启 hyperf 服务</span>./server.sh start<span class="token comment"># 关闭 hyperf 服务</span>./server.sh stop<span class="token comment"># 重启 hyperf 服务</span>./server.sh restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="脚本内容如下"><a href="#脚本内容如下" class="headerlink" title="脚本内容如下"></a>脚本内容如下</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#!/bin/bash</span><span class="token comment">#Author: Alex</span><span class="token comment">#server manager script based on hyperf 2.2.0</span><span class="token assign-left variable">base_path</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">cd</span> `dirname $0`<span class="token punctuation">;</span> <span class="token builtin class-name">pwd</span><span class="token variable">)</span></span><span class="token assign-left variable">server_file</span><span class="token operator">=</span><span class="token string">"<span class="token variable">${base_path}</span>/bin/hyperf.php"</span><span class="token assign-left variable">pid_path</span><span class="token operator">=</span><span class="token string">"<span class="token variable">${base_path}</span>/runtime/hyperf.pid"</span><span class="token assign-left variable">php_path</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">which</span> php<span class="token variable">)</span></span><span class="token assign-left variable">env_path</span><span class="token operator">=</span><span class="token string">"<span class="token variable">${base_path}</span>/.env"</span><span class="token assign-left variable">runtime_container</span><span class="token operator">=</span><span class="token string">"<span class="token variable">${base_path}</span>/runtime/container"</span><span class="token builtin class-name">cd</span> <span class="token variable">$base_path</span><span class="token keyword">function</span> <span class="token function-name function">console_blue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[36m[ <span class="token variable">$1</span> ]<span class="token entity" title="\033">\033</span>[0m"</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-name function">console_green</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[32m[ <span class="token variable">$1</span> ]<span class="token entity" title="\033">\033</span>[0m"</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-name function">console_orangered</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[31m<span class="token entity" title="\033">\033</span>[01m[ <span class="token variable">$1</span> ]<span class="token entity" title="\033">\033</span>[0m"</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-name function">console_yellow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">"<span class="token entity" title="\033">\033</span>[33m<span class="token entity" title="\033">\033</span>[01m[ <span class="token variable">$1</span> ]<span class="token entity" title="\033">\033</span>[0m"</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-f</span> <span class="token string">"<span class="token variable">$env_path</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">then</span>    console_orangered <span class="token string">'You should copy the .env.example file and name it .env or create a new file and rename .env'</span>    <span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token keyword">fi</span><span class="token builtin class-name">source</span> <span class="token string">"<span class="token variable">$env_path</span>"</span><span class="token assign-left variable">project_name</span><span class="token operator">=</span><span class="token variable">${APP_NAME}</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-f</span> <span class="token string">"<span class="token variable">$php_path</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    console_orangered <span class="token string">'Please check if the PHP has been installed '</span>    <span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token keyword">fi</span><span class="token keyword">function</span> <span class="token function-name function">master_process_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-f</span> <span class="token string">"<span class="token variable">${pid_path}</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">then</span>        <span class="token assign-left variable">hyperf_pid</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> $<span class="token punctuation">{</span>pid_path<span class="token punctuation">}</span><span class="token variable">`</span></span>        <span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"<span class="token variable">${hyperf_pid}</span>"</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token function">grep</span> <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span><span class="token variable">`</span></span>    <span class="token keyword">fi</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-name function">master_process_name_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"<span class="token variable">${project_name}</span>.Master"</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token function">grep</span> <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span><span class="token variable">`</span></span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-name function">fetch_server_master_pid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"<span class="token variable">${project_name}</span>.Master"</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token function">grep</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print $1}'</span><span class="token variable">`</span></span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-name function">force_kill</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"<span class="token variable">${project_name}</span>"</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token function">grep</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print $1}'</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">kill</span> <span class="token parameter variable">-9</span> <span class="token operator">&gt;&gt;</span> /dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-name function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">process_count</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>`master_process_count`<span class="token operator">+</span>`master_process_name_count`<span class="token variable">))</span></span>    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$process_count</span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token keyword">then</span>        console_yellow <span class="token string">'The server has been stopped !'</span>        <span class="token builtin class-name">exit</span> <span class="token number">0</span>    <span class="token keyword">fi</span>    console_green <span class="token string">"The server is running ! Master pid is <span class="token variable"><span class="token variable">$(</span>fetch_server_master_pid<span class="token variable">)</span></span>"</span>    <span class="token builtin class-name">exit</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-name function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">process_count</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>`master_process_count`<span class="token operator">+</span>`master_process_name_count`<span class="token variable">))</span></span>    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$process_count</span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token keyword">then</span>        console_yellow <span class="token string">'The server has been stopped !'</span>        <span class="token builtin class-name">exit</span> <span class="token number">0</span>    <span class="token keyword">fi</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-f</span> <span class="token string">"<span class="token variable">${pid_path}</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token keyword">then</span>        <span class="token function">cat</span> <span class="token string">"<span class="token variable">${pid_path}</span>"</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print $1}'</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">kill</span> <span class="token parameter variable">-9</span> <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token string">"<span class="token variable">${pid_path}</span>"</span>    <span class="token keyword">fi</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable"><span class="token variable">$(</span>master_process_name_count<span class="token variable">)</span></span> <span class="token parameter variable">-gt</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token keyword">then</span>        force_kill    <span class="token keyword">fi</span>    console_green <span class="token string">'The server is stopped !'</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-name function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">local</span> <span class="token assign-left variable">process_count</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$((</span>`master_process_count`<span class="token operator">+</span>`master_process_name_count`<span class="token variable">))</span></span>    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$process_count</span> <span class="token parameter variable">-gt</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token keyword">then</span>        console_yellow <span class="token string">"The server has been started, Don't need start again ! "</span>        console_blue <span class="token string">"Master pid is : <span class="token variable"><span class="token variable">$(</span>fetch_server_master_pid<span class="token variable">)</span></span> "</span>        <span class="token builtin class-name">exit</span> <span class="token number">0</span>    <span class="token keyword">fi</span>    <span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token string">"<span class="token variable">$runtime_container</span>"</span>    console_blue <span class="token string">'Starting now, please just a moment !'</span>    <span class="token comment"># change the parent process to init process</span>    setsid php <span class="token string">"<span class="token variable">${server_file}</span>"</span> start <span class="token operator">&gt;&gt;</span> /dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span>    <span class="token function">sleep</span> <span class="token number">1</span>    console_green <span class="token string">"Started successful !"</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token parameter variable">-f</span> <span class="token string">"<span class="token variable">${pid_path}</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token keyword">then</span>        console_blue <span class="token string">"Master pid is : <span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> $<span class="token punctuation">{</span>pid_path<span class="token punctuation">}</span><span class="token variable">`</span></span> "</span>    <span class="token keyword">fi</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function-name function">help</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">cat</span> <span class="token operator">&lt;&lt;-</span> <span class="token string">EOF    Usage:        ./server.sh [options]    Options:        stop        Stop server        start       Start server        restart     Restart server        status      Check server status        help        Help documentEOF</span><span class="token punctuation">}</span><span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span>  <span class="token string">'stop'</span><span class="token punctuation">)</span>    stop  <span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token string">'start'</span><span class="token punctuation">)</span>    start  <span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token string">'restart'</span><span class="token punctuation">)</span>    stop    start  <span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token string">'status'</span><span class="token punctuation">)</span>    status  <span class="token punctuation">;</span><span class="token punctuation">;</span>  *<span class="token punctuation">)</span>    <span class="token builtin class-name">help</span>  <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span><span class="token builtin class-name">exit</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hyperf </tag>
            
            <tag> Swoole </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hyperf 框架中开协程的几种方式</title>
      <link href="posts/b5fcf661.html"/>
      <url>posts/b5fcf661.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hyperf-框架中开协程的几种方式"><a href="#Hyperf-框架中开协程的几种方式" class="headerlink" title="Hyperf 框架中开协程的几种方式"></a>Hyperf 框架中开协程的几种方式</h1><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/** * 开协程做请求 * * Created by PhpStorm * User: Alex * Date: 2021-09-21 19:22 * E-mail: &lt;276558492@qq.com&gt; */</span><span class="token keyword">declare</span><span class="token punctuation">(</span>strict_types<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Controller</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Hyperf<span class="token punctuation">\</span>Utils<span class="token punctuation">\</span>Parallel</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Hyperf<span class="token punctuation">\</span>Utils<span class="token punctuation">\</span>WaitGroup</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Swoole<span class="token punctuation">\</span>Coroutine<span class="token punctuation">\</span>Channel</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Hyperf<span class="token punctuation">\</span>Guzzle<span class="token punctuation">\</span>ClientFactory</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Hyperf<span class="token punctuation">\</span>HttpServer<span class="token punctuation">\</span>Annotation<span class="token punctuation">\</span>AutoController</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Hyperf<span class="token punctuation">\</span>HttpServer<span class="token punctuation">\</span>Contract<span class="token punctuation">\</span>RequestInterface</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Hyperf<span class="token punctuation">\</span>Di<span class="token punctuation">\</span>Annotation<span class="token punctuation">\</span>Inject</span><span class="token punctuation">;</span><span class="token comment">/** * @AutoController * Class CoController * @package App\Controller */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">CoController</span><span class="token punctuation">{</span>    <span class="token comment">/**     * @Inject     * @var ClientFactory     */</span>    <span class="token keyword">private</span> <span class="token variable">$clientFactory</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 方便测试超时操作     *     * @param RequestInterface $request     * @return mixed     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">sleep</span><span class="token punctuation">(</span><span class="token class-name type-declaration">RequestInterface</span> <span class="token variable">$request</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$seconds</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'seconds'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword type-casting">int</span><span class="token punctuation">)</span><span class="token variable">$seconds</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'sleep hello ====&gt; '</span> <span class="token operator">.</span> <span class="token variable">$seconds</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$seconds</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 使用 Channel 做协程请求     *     * @return array     * @throws \GuzzleHttp\Exception\GuzzleException     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$channel</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">co</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$channel</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$client</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">clientFactory</span><span class="token operator">-&gt;</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$client</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'127.0.0.1:9516/co/sleep?seconds=2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$channel</span><span class="token operator">-&gt;</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">co</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$channel</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$client</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">clientFactory</span><span class="token operator">-&gt;</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$client</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'127.0.0.1:9516/co/sleep?seconds=2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$channel</span><span class="token operator">-&gt;</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">321</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$result</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$channel</span><span class="token operator">-&gt;</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 第一个协程返回的结果</span>        <span class="token variable">$result</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$channel</span><span class="token operator">-&gt;</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 第二个协程返回的结果</span>        <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span>  <span class="token comment">// [123, 321]</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 使用 WaitGroup 做协程请求     *     * @return array     * @throws \GuzzleHttp\Exception\GuzzleException     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">// 通过子协程并行的发起多个请求实现并行请求</span>        <span class="token variable">$wg</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WaitGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$wg</span><span class="token operator">-&gt;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 因为开了两个协程，因此就要添加 2</span>        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">co</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$wg</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$client</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">clientFactory</span><span class="token operator">-&gt;</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$client</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'127.0.0.1:9516/co/sleep?seconds=2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$result</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>            <span class="token variable">$wg</span><span class="token operator">-&gt;</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">co</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">use</span> <span class="token punctuation">(</span><span class="token variable">$wg</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$client</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">clientFactory</span><span class="token operator">-&gt;</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$client</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'127.0.0.1:9516/co/sleep?seconds=2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$result</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">321</span><span class="token punctuation">;</span>            <span class="token variable">$wg</span><span class="token operator">-&gt;</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$wg</span><span class="token operator">-&gt;</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 等待 add 计数器变为 0</span>        <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span>  <span class="token comment">// [321, 123]</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 使用 Parallel 类，做协程请求     *     * @return array     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$parallel</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$parallel</span><span class="token operator">-&gt;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$client</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">clientFactory</span><span class="token operator">-&gt;</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$client</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'127.0.0.1:9516/co/sleep?seconds=2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">123</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$parallel</span><span class="token operator">-&gt;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$client</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">clientFactory</span><span class="token operator">-&gt;</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$client</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'127.0.0.1:9516/co/sleep?seconds=2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">321</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'bar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$parallel</span><span class="token operator">-&gt;</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span>  <span class="token comment">// {"foo":123,"bar":321}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 使用 parallel 助手函数，做协程请求     *     * @return array     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">[</span>            <span class="token string single-quoted-string">'foo'</span> <span class="token operator">=&gt;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$client</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">clientFactory</span><span class="token operator">-&gt;</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$client</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'127.0.0.1:9516/co/sleep?seconds=2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token number">123</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'bar'</span> <span class="token operator">=&gt;</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$client</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">clientFactory</span><span class="token operator">-&gt;</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$client</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'127.0.0.1:9516/co/sleep?seconds=2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token number">321</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span>  <span class="token comment">// {"foo":123,"bar":321}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hyperf </tag>
            
            <tag> Swoole </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 频繁使用命令</title>
      <link href="posts/6f6880af.html"/>
      <url>posts/6f6880af.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-频繁使用命令"><a href="#Linux-频繁使用命令" class="headerlink" title="Linux 频繁使用命令"></a>Linux 频繁使用命令</h1><!-- TOC --><ul><li><a href="#date">date</a></li><li><a href="#timedatectl">timedatectl</a></li><li><a href="#reboot">reboot</a></li><li><a href="#poweroff">poweroff</a></li><li><a href="#wget">wget</a></li><li><a href="#ps">ps</a></li><li><a href="#pstree">pstree</a></li><li><a href="#nice">nice</a></li><li><a href="#pidof">pidof</a></li><li><a href="#kill">kill</a></li><li><a href="#killall">killall</a></li><li><a href="#uname">uname</a></li><li><a href="#uptime">uptime</a></li><li><a href="#free">free</a></li><li><a href="#who">who</a></li><li><a href="#last">last</a></li><li><a href="#ping">ping</a></li><li><a href="#tracepath">tracepath</a></li><li><a href="#netstat">netstat</a></li><li><a href="#history">history</a></li><li><a href="#sosreport">sosreport</a></li><li><a href="#find">find</a></li><li><a href="#locate">locate</a></li><li><a href="#whereis">whereis</a></li><li><a href="#which">which</a></li><li><a href="#cat">cat</a></li><li><a href="#more">more</a></li><li><a href="#less">less</a></li><li><a href="#head">head</a></li><li><a href="#tail">tail</a></li><li><a href="#tr">tr</a></li><li><a href="#wc">wc</a></li><li><a href="#stat">stat</a></li><li><a href="#grep">grep</a></li><li><a href="#cut">cut</a></li><li><a href="#diff">diff</a></li><li><a href="#uniq">uniq</a></li><li><a href="#sort">sort</a></li><li><a href="#touch">touch</a></li><li><a href="#cp">cp</a></li><li><a href="#rm">rm</a></li><li><a href="#dd">dd</a></li><li><a href="#file">file</a></li></ul><!-- /TOC --><h2 id="date"><a href="#date" class="headerlink" title="date"></a>date</h2><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>%S</td><td>秒（00～59）</td></tr><tr><td>%M</td><td>分钟（00～59）</td></tr><tr><td>%H</td><td>小时（00～23）</td></tr><tr><td>%I</td><td>小时（00～12）</td></tr><tr><td>%m</td><td>月份（1~12）</td></tr><tr><td>%p</td><td>显示出AM或PM</td></tr><tr><td>%a</td><td>缩写的工作日名称（例如：Sun）</td></tr><tr><td>%A</td><td>完整的工作日名称（例如：Sunday）</td></tr><tr><td>%b</td><td>缩写的月份名称（例如：Jan）</td></tr><tr><td>%B</td><td>完整的月份名称（例如：January）</td></tr><tr><td>%q</td><td>季度（1~4）</td></tr><tr><td>%y</td><td>简写年份（例如：20）</td></tr><tr><td>%Y</td><td>完整年份（例如：2020）</td></tr><tr><td>%d</td><td>本月中的第几天</td></tr><tr><td>%j</td><td>今年中的第几天</td></tr><tr><td>%n</td><td>换行符（相当于按下回车键）</td></tr><tr><td>%t</td><td>跳格（相当于按下Tab键）</td></tr></tbody></table><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看当前系统时间</span><span class="token function">date</span><span class="token comment"># Sat Sep 5 09:13:45 CST 2020</span><span class="token comment"># 按照“年-月-日 小时:分钟:秒”的格式查看当前系统时间的 date</span><span class="token function">date</span> <span class="token string">"+%Y-%m-%d %H:%M:%S"</span><span class="token comment"># 2020-09-05 09:14:35</span><span class="token comment"># 将系统的当前时间设置为 2020 年 11 月 1 日 8 点 30 分</span><span class="token function">date</span> <span class="token parameter variable">-s</span> <span class="token string">"20201101 8:30:00"</span><span class="token comment"># Sun Nov 1 08:30:00 CST 2020</span><span class="token function">date</span><span class="token comment"># Sun Nov 1 08:30:08 CST 2020</span><span class="token comment"># date 命令中的参数 %j 可用来查看今天是当年中的第几天。这个参数能够很好地区分备份时间的早晚，即数字越大，越靠近当前时间。</span><span class="token function">date</span> <span class="token string">"+%j"</span><span class="token comment"># 305</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="timedatectl"><a href="#timedatectl" class="headerlink" title="timedatectl"></a><span id="timedatectl">timedatectl</span></h2><blockquote><p>time date control</p></blockquote><p>timedatectl 命令用于设置系统的时间，发现电脑时间跟实际时间不符？如果只差几分钟的话，我们可以直接调整。但是，如果差几个小时，那么除了调整当前的时间，还有必要检查一下时区了。</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>status</td><td>显示状态信息</td></tr><tr><td>list-timezones</td><td>列出已知时区</td></tr><tr><td>set-time</td><td>设置系统时间</td></tr><tr><td>set-timezone</td><td>设置生效时区</td></tr></tbody></table><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 修改时区</span>timedatectl set-timezone Asia/Shanghai<span class="token comment"># 修改系统日期</span>timedatectl set-time <span class="token number">2021</span>-05-18<span class="token comment"># 修改系统时间</span>timedatectl set-time <span class="token number">9</span>:30<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="reboot"><a href="#reboot" class="headerlink" title="reboot"></a>reboot</h2><p>重启系统</p><h2 id="poweroff"><a href="#poweroff" class="headerlink" title="poweroff"></a>poweroff</h2><p>关闭系统</p><h2 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h2><blockquote><p>web get</p></blockquote><p>wget 命令用于在终端命令行中下载网络文件</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-b</td><td>后台下载模式</td></tr><tr><td>-P</td><td>下载到指定目录</td></tr><tr><td>-t</td><td>最大尝试次数</td></tr><tr><td>-c</td><td>断点续传</td></tr><tr><td>-p</td><td>下载页面内所有资源，包括图片、视频等</td></tr><tr><td>-r</td><td>递归下载</td></tr></tbody></table><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 递归下载 www.linuxprobe.com 网站内的所有页面数据以及文件，下载完后会自动保存到当前路径下一个名为 www.linuxprobe.com 的目录中</span><span class="token function">wget</span> <span class="token parameter variable">-r</span> <span class="token parameter variable">-p</span> https://www.linuxprobe.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><blockquote><p>processes</p></blockquote><p>用于查看系统中的进程状态</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-a</td><td>显示所有进程（包括其他用户的进程）</td></tr><tr><td>-u</td><td>用户以及其他详细信息</td></tr><tr><td>-x</td><td>显示没有控制终端的进程</td></tr></tbody></table><h2 id="pstree"><a href="#pstree" class="headerlink" title="pstree"></a>pstree</h2><blockquote><p>process tree</p></blockquote><p>用于以树状图的形式展示进程之间的关系</p><h2 id="nice"><a href="#nice" class="headerlink" title="nice"></a>nice</h2><p>用于调整进程的优先级，语法格式为“nice优先级数字 服务名称”</p><p>在 top 命令输出的结果中，PR 和 NI 值代表的是进程的优先级，数字越低（取值范围是-20～19），优先级越高。在日常的生产工作中，可以将一些不重要进程的优先级调低，让紧迫的服务更多地利用 CPU 和内存资源，以达到合理分配系统资源的目的。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将 bash 服务的优先级调整到最高</span><span class="token function">nice</span> <span class="token parameter variable">-n</span> <span class="token parameter variable">-20</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="pidof"><a href="#pidof" class="headerlink" title="pidof"></a>pidof</h2><p>用于查询某个指定服务进程的 PID 号码值，语法格式为 “pidof [参数] 服务名称”</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 每个进程的进程号码值（PID）是唯一的，可以用于区分不同的进程。例如，执行如下命令来查询本机上 sshd 服务程序的 PID：</span>pidof sshd<span class="token comment"># 2156</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 有时系统会提示进程无法被终止，此时可以加参数 -9，表示最高级别地强制杀死进程</span><span class="token function">kill</span> <span class="token parameter variable">-9</span> <span class="token number">2156</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="killall"><a href="#killall" class="headerlink" title="killall"></a>killall</h2><p>用于终止某个指定名称的服务所对应的全部进程，语法格式为 “killall [参数] 服务名称”</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pidof httpd<span class="token comment"># 13581 13580 13579 13578 13577 13576</span><span class="token function">killall</span> httpd<span class="token comment"># 再次查看</span>pidof httpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="uname"><a href="#uname" class="headerlink" title="uname"></a>uname</h2><p>uname 命令用于查看系统内核版本与系统架构等信息，英文全称为 “unix name”，语法格式为 “uname [-a]” 。在使用 uname 命令时，一般要固定搭配上 -a 参数来完整地查看当前系统的内核名称、主机名、内核发行版本、节点名、压制时间、硬件名称、硬件平台、处理器类型以及操作系统名称等信息。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">uname</span> <span class="token parameter variable">-a</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果要查看当前系统版本的详细信息，则需要查看 redhat-release 文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /etc/redhat-release<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="uptime"><a href="#uptime" class="headerlink" title="uptime"></a>uptime</h2><blockquote><p>建议负载值保持在 1 左右，在生产环境中不要超过 5 就好。</p></blockquote><p>uptime 命令用于查看系统的负载信息。它可以显示当前系统时间、系统已运行时间、启用终端数量以及平均负载值等信息。平均负载值指的是系统在最近 1分钟、5分钟、15分钟内的压力情况，负载值越低越好。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">uptime</span><span class="token comment">#  0:16  up 5 days, 14:47, 8 users, load averages: 1.41 1.44 1.56</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="free"><a href="#free" class="headerlink" title="free"></a>free</h2><p>free 命令用于显示当前系统中内存的使用量信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">free</span> <span class="token parameter variable">-h</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="who"><a href="#who" class="headerlink" title="who"></a>who</h2><p>who 命令用于查看当前登入主机的用户终端信息。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">who</span><span class="token comment"># 登录的用户名 终端设备 登录到系统的时间</span><span class="token comment"># pudongping console  Sep  6 09:29</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="last"><a href="#last" class="headerlink" title="last"></a>last</h2><p>last 命令用于调取主机的被访记录，Linux 系统会将每次的登录信息都记录到日志文件中，如果哪天想翻阅了，直接执行这条命令就行。</p><h2 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h2><p>ping 命令用于测试主机之间的网络连通性。</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-c</td><td>总共发送次数</td></tr><tr><td>-l</td><td>指定网卡名称</td></tr><tr><td>-i</td><td>每次间隔时间（秒）</td></tr><tr><td>-W</td><td>最长等待时间（秒）</td></tr></tbody></table><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ping</span> <span class="token parameter variable">-c</span> <span class="token number">4</span> www.baidu.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="tracepath"><a href="#tracepath" class="headerlink" title="tracepath"></a>tracepath</h2><p>tracepath 命令用于显示数据包到达目的主机时途中经过的所有路由信息。当两台主机之间无法正常 ping 通时，要考虑两台主机之间是否有错误的路由信息，导致数据被某一台设备错误地丢弃。这时便可以使用 tracepath 命令追踪数据包到达目的主机时途中的所有路由信息，以分析是哪台设备出了问题。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">tracepath www.baidu.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h2><p>netstat 命令用于显示如网络连接、路由表、接口状态等的网络相关信息，英文全称为 “network status”</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-a</td><td>显示所有连接中的Socket</td></tr><tr><td>-p</td><td>显示正在使用的Socket信息</td></tr><tr><td>-t</td><td>显示TCP协议的连接状态</td></tr><tr><td>-u</td><td>显示UDP协议的连接状态</td></tr><tr><td>-n</td><td>使用IP地址，不使用域名</td></tr><tr><td>-l</td><td>仅列出正在监听的服务状态</td></tr><tr><td>-i</td><td>现在网卡列表信息</td></tr><tr><td>-r</td><td>显示路由表信息</td></tr></tbody></table><h2 id="history"><a href="#history" class="headerlink" title="history"></a>history</h2><p>默认会显示出用户在本地计算机中执行过的最近 1000 条命令记录，可以通过修改 <code>/etc/profile</code> 文件中的 <code>HISTSIZE</code> 变量值来改变默认数量。历史命令都会被记录到 <code>~/.bash_history</code> 文件中。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 清空命令历史记录</span><span class="token function">history</span> <span class="token parameter variable">-c</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="sosreport"><a href="#sosreport" class="headerlink" title="sosreport"></a>sosreport</h2><p>sosreport 命令用于收集系统配置及架构信息并输出诊断文档。</p><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-name</td><td>匹配名称</td></tr><tr><td>-perm</td><td>匹配权限（mode为完全匹配，-mode为包含即可）</td></tr><tr><td>-user</td><td>匹配所有者</td></tr><tr><td>-group</td><td>匹配所有组</td></tr><tr><td>-mtime -n +n</td><td>匹配修改内容的时间（-n指n天以内，+n指n天以前）</td></tr><tr><td>-atime -n +n</td><td>匹配访问文件的时间（-n指n天以内，+n指n天以前）</td></tr><tr><td>-ctime -n +n</td><td>匹配修改文件权限的时间（-n指n天以内，+n指n天以前）</td></tr><tr><td>-nouser</td><td>匹配无所有者的文件</td></tr><tr><td>-nogroup</td><td>匹配无所有组的文件</td></tr><tr><td>-newer f1 !f2</td><td>匹配比文件f1新但比f2旧的文件</td></tr><tr><td>–type b/d/c/p/l/f</td><td>匹配文件类型（后面的字幕字母依次表示块设备、目录、字符设备、管道、链接文件、文本文件）</td></tr><tr><td>-size</td><td>匹配文件的大小（+50KB为查找超过50KB的文件，而-50KB为查找小于50KB的文件）</td></tr><tr><td>-prune</td><td>忽略某个目录</td></tr><tr><td>-exec …… {};</td><td>后面可跟用于进一步处理搜索结果的命令</td></tr></tbody></table><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 获取 /etc 目录中所有以 host 开头的文件列表</span><span class="token function">find</span> /etc <span class="token parameter variable">-name</span> <span class="token string">"host*"</span> <span class="token parameter variable">-print</span><span class="token comment"># 搜索整个系统中包含 SUID 权限的所有文件</span><span class="token function">find</span> / <span class="token parameter variable">-perm</span> <span class="token parameter variable">-4000</span> <span class="token parameter variable">-print</span><span class="token comment"># 在整个系统中找出所有归属于 alex 用户的文件，并复制到 /home/alex/findresults 目录中</span><span class="token function">find</span> / <span class="token parameter variable">-user</span> alex <span class="token parameter variable">-exec</span> <span class="token function">cp</span> <span class="token parameter variable">-a</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> /home/alex/findresults/<span class="token punctuation">\</span><span class="token punctuation">;</span><span class="token comment"># 其中的 `{}` 表示 find 命令搜索出的每一个文件，并且命令的结尾必须是 `\;`</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h2><p>locate 命令用于按照名称快速搜索文件所对应的位置。使用 find 命令进行全盘搜索虽然更准确，但是效率有点低。如果仅仅是想找一些常见的且又知道大概名称的文件，可以使用 locate 命令。在使用 locate 命令时，先使用 updatedb 命令生成一个索引库文件，这个库文件的名字是 <code>/var/lib/mlocate/mlocate.db</code> ，后续在使用 locate 命令搜索文件时就是在该库中进行查找操作，速度会快很多。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">updatedb<span class="token function">ls</span> <span class="token parameter variable">-l</span> /var/lib/mlocate/mlocate.db<span class="token comment"># 使用 locate 命令搜索出所有包含 alex 名称的文件所在的位置</span><span class="token function">locate</span> alex<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h2><p>whereis 命令用于按照名称快速搜索二进制程序（命令）、源代码以及帮助文件所对应的位置，语法格式为 “whereis 命令名称”。</p><p>简单来说，whereis 命令也是基于 updatedb 命令所生成的索引库文件进行搜索，它与 locate 命令的区别是不关心那些相同名称的文件，仅仅是快速找到对应的命令文件及其帮助文件所在的位置。</p><h2 id="which"><a href="#which" class="headerlink" title="which"></a>which</h2><p>which 命令用于按照指定名称快速搜索二进制程序（命令）所对应的位置，语法格式为 “which 命令名称”。</p><p>which 命令是在 PATH 变量所指定的路径中，按照指定条件搜索命令所在的路径。也就是说，如果我们既不关心同名文件（find 与 locate），也不关心命令所对应的源代码和帮助文件（whereis），仅仅是想找到命令本身所在的路径，那么这个 which 命令就太合适了。</p><h2 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h2><blockquote><p>cat 是 concatenate（连接、连续）的简写</p></blockquote><ul><li>连接合并文件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token number">11</span> <span class="token operator">&gt;</span> a.txt<span class="token builtin class-name">echo</span> <span class="token number">22</span> <span class="token operator">&gt;</span> b.txt<span class="token comment"># 合并 a.txt 和 b.txt 文件中所有的内容到 c.txt 文件中</span><span class="token function">cat</span> a.txt b.txt <span class="token operator">&gt;</span> c.txt<span class="token comment"># 查看 c.txt 文件中的内容</span><span class="token function">cat</span> c.txt  <span class="token comment"># 11 22</span><span class="token comment"># -n 参数可以显示行号</span><span class="token function">cat</span> <span class="token parameter variable">-n</span> c.txt<span class="token comment"># 1 11</span><span class="token comment"># 2 22</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="more"><a href="#more" class="headerlink" title="more"></a>more</h2><h2 id="less"><a href="#less" class="headerlink" title="less"></a>less</h2><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-N</td><td>显示每行的行号</td></tr><tr><td>-S</td><td>行过长时将超出部分舍弃</td></tr><tr><td>-m</td><td>显示类似 more 命令的百分比</td></tr></tbody></table><p>less 进入交互界面时的指令及功能</p><table><thead><tr><th>交互指令</th><th>功能</th></tr></thead><tbody><tr><td>/字符串</td><td>向下搜索“字符串”的功能</td></tr><tr><td>?字符串</td><td>向上搜索“字符串”的功能</td></tr><tr><td>n</td><td>重复*前一个搜索</td></tr><tr><td>N</td><td>反向重复前一个搜索</td></tr><tr><td>k</td><td>向上移动一行</td></tr><tr><td>j</td><td>向下移动一行</td></tr><tr><td>u</td><td>向上移动半页</td></tr><tr><td>d</td><td>向下移动半页</td></tr><tr><td>b</td><td>向上移动一页</td></tr><tr><td>空格键</td><td>向下移动一页</td></tr><tr><td>g</td><td>移动到第一行</td></tr><tr><td>G</td><td>移动至最后一行</td></tr><tr><td>h 或 H</td><td>显示帮助界面</td></tr><tr><td>q 或 Q 或 ZZ</td><td>退出 less 命令</td></tr><tr><td>v</td><td>使用配置的编辑器编辑当前文件</td></tr></tbody></table><h2 id="head"><a href="#head" class="headerlink" title="head"></a>head</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 只想查看文本中前 10 行的内容</span><span class="token function">head</span> <span class="token parameter variable">-n</span> <span class="token number">10</span> test.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 只想查看文本内容的最后 10 行</span><span class="token function">tail</span> <span class="token parameter variable">-n</span> <span class="token number">10</span> test.log<span class="token comment"># 实时查看文本</span><span class="token function">tail</span> <span class="token parameter variable">-f</span> test.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="tr"><a href="#tr" class="headerlink" title="tr"></a>tr</h2><p>tr 命令用于替换文本内容中的字符，英文全称为 “translate”，语法格式为 “tr [原始字符] [目标字符]”</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 把文本内容中的英文全部替换成大写</span><span class="token function">cat</span> test.log <span class="token operator">|</span> <span class="token function">tr</span> <span class="token punctuation">[</span>a-z<span class="token punctuation">]</span> <span class="token punctuation">[</span>A-Z<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h2><p>wc 命令用于统计指定文本文件的行数、字数或字节数，英文全称为 “word counts”，语法格式为 “wc [参数] 文件名称”</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-l</td><td>只显示行数</td></tr><tr><td>-w</td><td>只显示单词数</td></tr><tr><td>-c</td><td>只显示字节数</td></tr></tbody></table><pre class="line-numbers language-none"><code class="language-none"># 统计当前系统中有多少个用户wc -l /etc/passwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="stat"><a href="#stat" class="headerlink" title="stat"></a>stat</h2><p>stat 命令用于查看文件的具体存储细节和时间等信息，英文全称为 “status”，语法格式为 “stat 文件名称”。<br>除了修改时间之外，Linux 系统中的文件包含 3 种时间状态，分别是 Access Time（内容最后一次被访问的时间，简称为 <strong>Atime</strong>），Modify Time（内容最后一次被修改的时间，简称为 <strong>Mtime</strong>）以及Change Time（文件属性最后一次被修改的时间，简称为 <strong>Ctime</strong>）。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">stat</span> test.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><p>grep 命令用于按行提取文本内容，语法格式为 “grep [参数] 文件名称”</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-b</td><td>将可执行文件(binary)当作文本文件（text）来搜索</td></tr><tr><td>-c</td><td>仅显示找到的行数</td></tr><tr><td>-i</td><td>忽略大小写</td></tr><tr><td>-n</td><td>显示行号</td></tr><tr><td>-v</td><td>反向选择——仅列出没有“关键词”的行。</td></tr></tbody></table><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 找出当前系统中不允许登录系统的所有用户信息</span><span class="token function">grep</span> /sbin/nologin /etc/passwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h2><p>cut 命令用于按 <strong>“列”</strong> 提取文本内容，语法格式为 “cut [参数] 文件名称”，按“列”搜索，不仅要使用 <code>-f</code> 参数设置需要查看的列数，还需要使用 <code>-d</code> 参数来设置间隔符号。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 提取 /etc/passwd 文件中的用户名信息，即提取以冒号为间隔符号的第一列内容</span><span class="token function">cut</span> <span class="token parameter variable">-d</span> <span class="token builtin class-name">:</span> <span class="token parameter variable">-f</span> <span class="token number">1</span> /etc/passwd<span class="token comment"># 或者（只提取前 5 个用户信息）</span><span class="token function">cat</span> /etc/passwd <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token string">'#'</span> <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-n</span> <span class="token number">5</span> <span class="token operator">|</span> <span class="token function">cut</span> <span class="token parameter variable">-d</span> <span class="token builtin class-name">:</span> <span class="token parameter variable">-f</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h2><p>diff 命令用于比较多个文件之间内容的差异，英文全称为 “different”，语法格式为 “diff [参数] 文件名称A 文件名称B”。</p><p>在使用 diff 命令时，不仅可以使用 –brief 参数来确认两个文件是否相同，还可以使用 -c 参数来详细比较出多个文件的差异之处。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 判断两个文件是否相同</span><span class="token function">diff</span> <span class="token parameter variable">--brief</span> a.txt b.txt<span class="token comment"># 查看文件内容的具体不同</span><span class="token function">diff</span> <span class="token parameter variable">-c</span> a.txt b.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="uniq"><a href="#uniq" class="headerlink" title="uniq"></a>uniq</h2><p>uniq 命令用于去除文本中连续的重复行，英文全称为 “unique”，语法格式为“uniq [参数] 文件名称”。 <strong>中间不能夹杂其他文本行（非相邻的默认不会去重）</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">uniq</span> alex.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h2><p>sort 命令用于对文本内容进行再排序，语法格式为 “sort [参数] 文件名称”。</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-f</td><td>忽略大小写</td></tr><tr><td>-b</td><td>忽略缩进与空格</td></tr><tr><td>-n</td><td>以数值型排序</td></tr><tr><td>-r</td><td>反向排序</td></tr><tr><td>-u</td><td>去除重复行</td></tr><tr><td>-t</td><td>指定间隔符</td></tr><tr><td>-k</td><td>设置字段范围</td></tr></tbody></table><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将文本中的内容按照字母顺序进行排序</span><span class="token function">sort</span> alex.txt<span class="token comment"># 将文本内容进行去重操作</span><span class="token function">sort</span> <span class="token parameter variable">-u</span> alex.txt<span class="token comment"># 以第 3 个字段中的数字作为排序依据，以冒号 : 指定分隔符，以数字规则进行排序</span><span class="token function">sort</span> <span class="token parameter variable">-t</span> <span class="token builtin class-name">:</span> <span class="token parameter variable">-k</span> <span class="token number">3</span> <span class="token parameter variable">-n</span> alex.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h2><p>touch 命令用于创建空白文件或设置文件的时间，语法格式为 “touch [参数] 文件名称”。</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-a</td><td>仅修改“读取时间”（atime）</td></tr><tr><td>-m</td><td>仅修改“修改时间”（mtime）</td></tr><tr><td>-d</td><td>同时修改 atime 与 mtime</td></tr></tbody></table><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 修改文件的读取时间和修改时间</span><span class="token function">touch</span> <span class="token parameter variable">-d</span> <span class="token string">"2021-09-12 15:44"</span> alex.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h2><p>cp 命令用于复制文件或目录，英文全称为 “copy”，语法格式为 “cp [参数] 源文件名称 目标文件名称”。</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-p</td><td>保留原始文件的属性</td></tr><tr><td>-d</td><td>若对象为“链接文件”，则保留该“链接文件”的属性</td></tr><tr><td>-r</td><td>递归持续复制（用于目录）</td></tr><tr><td>-i</td><td>若目标文件存在则询问是否覆盖</td></tr><tr><td>-a</td><td>相当于 -pdr（p、d、r为上述参数）</td></tr></tbody></table><h2 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h2><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-f</td><td>强制执行</td></tr><tr><td>-i</td><td>删除前询问</td></tr><tr><td>-r</td><td>删除目录</td></tr><tr><td>-v</td><td>显示过程</td></tr></tbody></table><h2 id="dd"><a href="#dd" class="headerlink" title="dd"></a>dd</h2><p>dd 命令用于按照指定大小和个数的数据块来复制文件或转换文件，语法格式为 “dd if=参数值of=参数值count=参数值bs=参数值”。</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>if</td><td>输入的文件名称</td></tr><tr><td>of</td><td>输出的文件名称</td></tr><tr><td>bs</td><td>设置每个“块”的大小</td></tr><tr><td>count</td><td>设置要复制“块”的个数</td></tr></tbody></table><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 从 /dev/zero 设备文件中取出 1 个大小为 560M 的数据块，保存成名为 560_file 的文件</span><span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/zero <span class="token assign-left variable">of</span><span class="token operator">=</span>560_file <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">bs</span><span class="token operator">=</span>560M<span class="token comment"># 将光驱设备中的光盘制作成 iso 格式的镜像文件</span><span class="token function">dd</span> <span class="token assign-left variable">if</span><span class="token operator">=</span>/dev/cdrom <span class="token assign-left variable">of</span><span class="token operator">=</span>RHEL.iso<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="file"><a href="#file" class="headerlink" title="file"></a>file</h2><p>file 命令用于查看文件的类型，语法格式为 “file 文件名称”。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归计算笛卡尔乘积</title>
      <link href="posts/1e1630f3.html"/>
      <url>posts/1e1630f3.html</url>
      
        <content type="html"><![CDATA[<h1 id="递归计算笛卡尔乘积"><a href="#递归计算笛卡尔乘积" class="headerlink" title="递归计算笛卡尔乘积"></a>递归计算笛卡尔乘积</h1><blockquote><p>如果使用 <code>laravel</code> 的话，直接使用 <code>collect</code> 的 <code>crossJoin</code> 方法也可以实现</p></blockquote><h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/** * 递归计算笛卡尔乘积 * * Created by PhpStorm. * User: Alex * Date: 2020/3/5 * Time: 20:35 */</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Handlers</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">CarteSianHandler</span><span class="token punctuation">{</span>    <span class="token comment">/**     * 保存结果     *     * @var array     */</span>    <span class="token keyword">public</span> <span class="token variable">$products</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 计算笛卡尔乘积的结果     *     * @param array $params     * @param array $temporary     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">carteSian</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$params</span><span class="token punctuation">,</span> <span class="token keyword type-hint">array</span> <span class="token variable">$temporary</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token function">array_shift</span><span class="token punctuation">(</span><span class="token variable">$params</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$param</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">array_push</span><span class="token punctuation">(</span><span class="token variable">$temporary</span><span class="token punctuation">,</span> <span class="token variable">$param</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$params</span> <span class="token operator">?</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">carteSian</span><span class="token punctuation">(</span><span class="token variable">$params</span><span class="token punctuation">,</span> <span class="token variable">$temporary</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token class-name return-type">array_push</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">products</span><span class="token punctuation">,</span> <span class="token variable">$temporary</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">array_pop</span><span class="token punctuation">(</span><span class="token variable">$temporary</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$params</span> <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string single-quoted-string">'颜色_黑色'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'颜色_白色'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'颜色_咖啡色'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string single-quoted-string">'尺寸_S'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'尺寸_M'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'尺寸_L'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string single-quoted-string">'材质_羽绒'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'材质_鹅绒'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$cartSian</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CarteSian</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$cartSian</span><span class="token operator">-&gt;</span><span class="token function">carteSian</span><span class="token punctuation">(</span><span class="token variable">$params</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$cartSian</span><span class="token operator">-&gt;</span><span class="token property">products</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="返回结果"><a href="#返回结果" class="headerlink" title="返回结果"></a>返回结果</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword type-declaration">array</span><span class="token punctuation">:</span><span class="token number">18</span> <span class="token punctuation">[</span>  <span class="token number">0</span> <span class="token operator">=&gt;</span> <span class="token keyword type-declaration">array</span><span class="token punctuation">:</span><span class="token number">3</span> <span class="token punctuation">[</span>    <span class="token number">0</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"颜色_黑色"</span>    <span class="token number">1</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"尺寸_S"</span>    <span class="token number">2</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"材质_羽绒"</span>  <span class="token punctuation">]</span>  <span class="token number">1</span> <span class="token operator">=&gt;</span> <span class="token keyword type-declaration">array</span><span class="token punctuation">:</span><span class="token number">3</span> <span class="token punctuation">[</span>    <span class="token number">0</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"颜色_黑色"</span>    <span class="token number">1</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"尺寸_S"</span>    <span class="token number">2</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"材质_鹅绒"</span>  <span class="token punctuation">]</span>  <span class="token number">2</span> <span class="token operator">=&gt;</span> <span class="token keyword type-declaration">array</span><span class="token punctuation">:</span><span class="token number">3</span> <span class="token punctuation">[</span>    <span class="token number">0</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"颜色_黑色"</span>    <span class="token number">1</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"尺寸_M"</span>    <span class="token number">2</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"材质_羽绒"</span>  <span class="token punctuation">]</span>  <span class="token number">3</span> <span class="token operator">=&gt;</span> <span class="token keyword type-declaration">array</span><span class="token punctuation">:</span><span class="token number">3</span> <span class="token punctuation">[</span>    <span class="token number">0</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"颜色_黑色"</span>    <span class="token number">1</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"尺寸_M"</span>    <span class="token number">2</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"材质_鹅绒"</span>  <span class="token punctuation">]</span>  <span class="token number">4</span> <span class="token operator">=&gt;</span> <span class="token keyword type-declaration">array</span><span class="token punctuation">:</span><span class="token number">3</span> <span class="token punctuation">[</span>    <span class="token number">0</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"颜色_黑色"</span>    <span class="token number">1</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"尺寸_L"</span>    <span class="token number">2</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"材质_羽绒"</span>  <span class="token punctuation">]</span>  <span class="token number">5</span> <span class="token operator">=&gt;</span> <span class="token keyword type-declaration">array</span><span class="token punctuation">:</span><span class="token number">3</span> <span class="token punctuation">[</span>    <span class="token number">0</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"颜色_黑色"</span>    <span class="token number">1</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"尺寸_L"</span>    <span class="token number">2</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"材质_鹅绒"</span>  <span class="token punctuation">]</span>  <span class="token number">6</span> <span class="token operator">=&gt;</span> <span class="token keyword type-declaration">array</span><span class="token punctuation">:</span><span class="token number">3</span> <span class="token punctuation">[</span>    <span class="token number">0</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"颜色_白色"</span>    <span class="token number">1</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"尺寸_S"</span>    <span class="token number">2</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"材质_羽绒"</span>  <span class="token punctuation">]</span>  <span class="token number">7</span> <span class="token operator">=&gt;</span> <span class="token keyword type-declaration">array</span><span class="token punctuation">:</span><span class="token number">3</span> <span class="token punctuation">[</span>    <span class="token number">0</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"颜色_白色"</span>    <span class="token number">1</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"尺寸_S"</span>    <span class="token number">2</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"材质_鹅绒"</span>  <span class="token punctuation">]</span>  <span class="token number">8</span> <span class="token operator">=&gt;</span> <span class="token keyword type-declaration">array</span><span class="token punctuation">:</span><span class="token number">3</span> <span class="token punctuation">[</span>    <span class="token number">0</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"颜色_白色"</span>    <span class="token number">1</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"尺寸_M"</span>    <span class="token number">2</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"材质_羽绒"</span>  <span class="token punctuation">]</span>  <span class="token number">9</span> <span class="token operator">=&gt;</span> <span class="token keyword type-declaration">array</span><span class="token punctuation">:</span><span class="token number">3</span> <span class="token punctuation">[</span>    <span class="token number">0</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"颜色_白色"</span>    <span class="token number">1</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"尺寸_M"</span>    <span class="token number">2</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"材质_鹅绒"</span>  <span class="token punctuation">]</span>  <span class="token number">10</span> <span class="token operator">=&gt;</span> <span class="token keyword type-declaration">array</span><span class="token punctuation">:</span><span class="token number">3</span> <span class="token punctuation">[</span>    <span class="token number">0</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"颜色_白色"</span>    <span class="token number">1</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"尺寸_L"</span>    <span class="token number">2</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"材质_羽绒"</span>  <span class="token punctuation">]</span>  <span class="token number">11</span> <span class="token operator">=&gt;</span> <span class="token keyword type-declaration">array</span><span class="token punctuation">:</span><span class="token number">3</span> <span class="token punctuation">[</span>    <span class="token number">0</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"颜色_白色"</span>    <span class="token number">1</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"尺寸_L"</span>    <span class="token number">2</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"材质_鹅绒"</span>  <span class="token punctuation">]</span>  <span class="token number">12</span> <span class="token operator">=&gt;</span> <span class="token keyword type-declaration">array</span><span class="token punctuation">:</span><span class="token number">3</span> <span class="token punctuation">[</span>    <span class="token number">0</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"颜色_咖啡色"</span>    <span class="token number">1</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"尺寸_S"</span>    <span class="token number">2</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"材质_羽绒"</span>  <span class="token punctuation">]</span>  <span class="token number">13</span> <span class="token operator">=&gt;</span> <span class="token keyword type-declaration">array</span><span class="token punctuation">:</span><span class="token number">3</span> <span class="token punctuation">[</span>    <span class="token number">0</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"颜色_咖啡色"</span>    <span class="token number">1</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"尺寸_S"</span>    <span class="token number">2</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"材质_鹅绒"</span>  <span class="token punctuation">]</span>  <span class="token number">14</span> <span class="token operator">=&gt;</span> <span class="token keyword type-declaration">array</span><span class="token punctuation">:</span><span class="token number">3</span> <span class="token punctuation">[</span>    <span class="token number">0</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"颜色_咖啡色"</span>    <span class="token number">1</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"尺寸_M"</span>    <span class="token number">2</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"材质_羽绒"</span>  <span class="token punctuation">]</span>  <span class="token number">15</span> <span class="token operator">=&gt;</span> <span class="token keyword type-declaration">array</span><span class="token punctuation">:</span><span class="token number">3</span> <span class="token punctuation">[</span>    <span class="token number">0</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"颜色_咖啡色"</span>    <span class="token number">1</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"尺寸_M"</span>    <span class="token number">2</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"材质_鹅绒"</span>  <span class="token punctuation">]</span>  <span class="token number">16</span> <span class="token operator">=&gt;</span> <span class="token keyword type-declaration">array</span><span class="token punctuation">:</span><span class="token number">3</span> <span class="token punctuation">[</span>    <span class="token number">0</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"颜色_咖啡色"</span>    <span class="token number">1</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"尺寸_L"</span>    <span class="token number">2</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"材质_羽绒"</span>  <span class="token punctuation">]</span>  <span class="token number">17</span> <span class="token operator">=&gt;</span> <span class="token keyword type-declaration">array</span><span class="token punctuation">:</span><span class="token number">3</span> <span class="token punctuation">[</span>    <span class="token number">0</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"颜色_咖啡色"</span>    <span class="token number">1</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"尺寸_L"</span>    <span class="token number">2</span> <span class="token operator">=&gt;</span> <span class="token string double-quoted-string">"材质_鹅绒"</span>  <span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速排序</title>
      <link href="posts/ff8068c0.html"/>
      <url>posts/ff8068c0.html</url>
      
        <content type="html"><![CDATA[<h1 id="常规方法，快速排序"><a href="#常规方法，快速排序" class="headerlink" title="常规方法，快速排序"></a>常规方法，快速排序</h1><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/** * 思路： * 1、找到当前数组中的任意一个元素（一般选择第一个元素，因为选择第一个元素较为简单，选择其他元素还需要多写一些不必要的代码，干嘛非要给自己找麻烦哩）作为比较的标准 * 2、新建两个空数组，用于存放比比较的元素大或者小的元素，当遍历整个数组元素时，如果遍历到的元素比当前元素要小，则将此元素放到左边的数组，比当前元素大，则放到右边的数组中 * 3、再以同样的方式去遍历左边的数组和右边的数组 * * 递归点：只要是需要比较的数组中的元素个数大于 1，那么就需要递归，只有当数组中的元素的个数等于 1 的时候，则停止递归，不需要比较 * * @param array $arr * @return array */</span><span class="token keyword">function</span> <span class="token function-definition function">quick_sort</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$arr</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">array</span><span class="token punctuation">{</span>    <span class="token comment">// 判断参数是否是一个数组</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 递归出口：数组长度为 1 ，则直接返回数组</span>    <span class="token variable">$length</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$length</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token variable">$arr</span><span class="token punctuation">;</span>    <span class="token comment">// 数组元素有多个，则定义两个空数组</span>    <span class="token variable">$left</span> <span class="token operator">=</span> <span class="token variable">$right</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 把第一个元素当作比较的对象</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$length</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 判断当前元素的大小</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$left</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$right</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 递归调用</span>    <span class="token variable">$left</span> <span class="token operator">=</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span><span class="token variable">$left</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$right</span> <span class="token operator">=</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span><span class="token variable">$right</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 合并所有的结果</span>    <span class="token keyword">return</span> <span class="token function">array_merge</span><span class="token punctuation">(</span><span class="token variable">$left</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$right</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//$arr = [4, 7, 6, 5, 3, 2, 8, 1];</span><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">435</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">523</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">654</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'-'</span><span class="token punctuation">,</span> <span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="“挖坑法”-快速排序"><a href="#“挖坑法”-快速排序" class="headerlink" title="“挖坑法” 快速排序"></a>“挖坑法” 快速排序</h1><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/** * "挖坑法" 快速排序 * * @param array $arr * @return array */</span><span class="token keyword">function</span> <span class="token function-definition function">quick_sort</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$arr</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">array</span><span class="token punctuation">{</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">0</span> <span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">1</span> <span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token variable">$arr</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span> <span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$pivot</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$leftHead</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token variable">$rightHead</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token variable">$index</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 需要填充处</span>    <span class="token variable">$compare</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'right'</span><span class="token punctuation">;</span>  <span class="token comment">// 拿数组左侧的数据与数组右侧的数据进行比较</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token constant boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$leftHead</span> <span class="token operator">==</span> <span class="token variable">$rightHead</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$left</span> <span class="token operator">=</span> <span class="token function">array_slice</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$leftHead</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$right</span> <span class="token operator">=</span> <span class="token function">array_slice</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token variable">$leftHead</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$mid</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token variable">$pivot</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token function">array_merge</span><span class="token punctuation">(</span><span class="token function">quick_sort</span><span class="token punctuation">(</span><span class="token variable">$left</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$mid</span><span class="token punctuation">,</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span><span class="token variable">$right</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string single-quoted-string">'right'</span> <span class="token operator">==</span> <span class="token variable">$compare</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 如果右指针的数小于基准数，那么将这个数填入基准数里面</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$rightHead</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token variable">$pivot</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$index</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$rightHead</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token variable">$leftHead</span><span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token variable">$index</span> <span class="token operator">=</span> <span class="token variable">$rightHead</span><span class="token punctuation">;</span>                <span class="token variable">$compare</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'left'</span><span class="token punctuation">;</span>  <span class="token comment">// 拿左侧的数据开始进行排序</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token variable">$rightHead</span><span class="token operator">--</span><span class="token punctuation">;</span>  <span class="token comment">// 如果比他大</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment">// $compare == 'left'</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$leftHead</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token variable">$pivot</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 如果大于基准数，填充右边的 index</span>                <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$index</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$leftHead</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token variable">$index</span> <span class="token operator">=</span> <span class="token variable">$leftHead</span><span class="token punctuation">;</span>                <span class="token variable">$rightHead</span><span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token variable">$compare</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'right'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token variable">$leftHead</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//$arr = [4, 7, 6, 5, 3, 2, 8, 1];</span><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">435</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">523</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">654</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'-'</span><span class="token punctuation">,</span> <span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用阶乘原理通过阶乘获取一个一维数组中全部的组合情况</title>
      <link href="posts/dfcf0c33.html"/>
      <url>posts/dfcf0c33.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用阶乘原理通过阶乘获取一个一维数组中全部的组合情况"><a href="#使用阶乘原理通过阶乘获取一个一维数组中全部的组合情况" class="headerlink" title="使用阶乘原理通过阶乘获取一个一维数组中全部的组合情况"></a>使用阶乘原理通过阶乘获取一个一维数组中全部的组合情况</h1><h2 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/** * 使用阶乘原理，通过阶乘获取一个一维数组中全部的组合情况 * * Created by PhpStorm. * User: Alex * Date: 2020/3/9 * Time: 13:08 */</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Handlers</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">FactorialHandler</span><span class="token punctuation">{</span>    <span class="token comment">/**     * 使用阶乘原理获取一维数组中全部的组合情况     *     * @param array $arr     * @return array     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getArrAllCombineByFactor</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$arr</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">array</span>    <span class="token punctuation">{</span>        <span class="token comment">// 大于等于1 =&gt; n! = 1*2*3*4*5…………*(n-1)*n</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$combineArr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$arr</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=&gt;</span> <span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 除当前 key 以外的单元数组</span>                <span class="token variable">$temArr</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">arrRmoveValueByKey</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">,</span> <span class="token variable">$k</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$sonCombineArr</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getArrAllCombineByFactor</span><span class="token punctuation">(</span><span class="token variable">$temArr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$sonCombineArr</span> <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token variable">$combineArr</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$v</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'|'</span> <span class="token operator">.</span> <span class="token variable">$value</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token variable">$combineArr</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$arr</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 通过数组的 key 移除掉当前 key 所在的单元，返回除 key 单元以外的单元数组     *     * @param array $arr  原始数组     * @param $k  需要移除数组单元的 key     * @return array     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">arrRmoveValueByKey</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$arr</span><span class="token punctuation">,</span> <span class="token variable">$k</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">array</span>    <span class="token punctuation">{</span>        <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token function">array_values</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$arr</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'1_1'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'2_3'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'4_6'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$factorialInstance</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FactorialHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$factorialInstance</span><span class="token operator">-&gt;</span><span class="token function">getArrAllCombineByFactor</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="返回结果"><a href="#返回结果" class="headerlink" title="返回结果"></a>返回结果</h3><pre class="line-numbers language-none"><code class="language-none">array:6 [  0 =&gt; "1_1|2_3|4_6"  1 =&gt; "1_1|4_6|2_3"  2 =&gt; "2_3|1_1|4_6"  3 =&gt; "2_3|4_6|1_1"  4 =&gt; "4_6|1_1|2_3"  5 =&gt; "4_6|2_3|1_1"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="一维数组所有的组合情况（排列组合）"><a href="#一维数组所有的组合情况（排列组合）" class="headerlink" title="一维数组所有的组合情况（排列组合）"></a>一维数组所有的组合情况（排列组合）</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$array</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Alpha'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'Beta'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'Gamma'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'Sigma'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">depth_picker</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">,</span> <span class="token variable">$temp_string</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token variable">$collect</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$temp_string</span> <span class="token operator">!=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">)</span>         <span class="token variable">$collect</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token variable">$temp_string</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token function">sizeof</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$arrcopy</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">;</span>        <span class="token variable">$elem</span> <span class="token operator">=</span> <span class="token function">array_splice</span><span class="token punctuation">(</span><span class="token variable">$arrcopy</span><span class="token punctuation">,</span> <span class="token variable">$i</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// removes and returns the i'th element</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sizeof</span><span class="token punctuation">(</span><span class="token variable">$arrcopy</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">depth_picker</span><span class="token punctuation">(</span><span class="token variable">$arrcopy</span><span class="token punctuation">,</span> <span class="token variable">$temp_string</span> <span class="token operator">.</span><span class="token string double-quoted-string">" "</span> <span class="token operator">.</span> <span class="token variable">$elem</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$collect</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$collect</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token variable">$temp_string</span><span class="token operator">.</span> <span class="token string double-quoted-string">" "</span> <span class="token operator">.</span> <span class="token variable">$elem</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token variable">$collect</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">depth_picker</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">,</span> <span class="token variable">$collect</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$collect</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="返回的结果"><a href="#返回的结果" class="headerlink" title="返回的结果"></a>返回的结果</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">Array</span><span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span>  Alpha    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span>  Alpha Beta    <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span>  Alpha Beta Gamma    <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span>  Alpha Beta Gamma Sigma    <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span>  Alpha Beta Sigma    <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span>  Alpha Beta Sigma Gamma    <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span>  Alpha Gamma    <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span>  Alpha Gamma Beta    <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span>  Alpha Gamma Beta Sigma    <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span>  Alpha Gamma Sigma    <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span>  Alpha Gamma Sigma Beta    <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span>  Alpha Sigma    <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span>  Alpha Sigma Beta    <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span>  Alpha Sigma Beta Gamma    <span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span>  Alpha Sigma Gamma    <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span>  Alpha Sigma Gamma Beta    <span class="token operator">.</span>    <span class="token operator">.</span>    <span class="token operator">.</span>    <span class="token punctuation">[</span><span class="token number">59</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span>  Sigma Gamma    <span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span>  Sigma Gamma Alpha    <span class="token punctuation">[</span><span class="token number">61</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span>  Sigma Gamma Alpha Beta    <span class="token punctuation">[</span><span class="token number">62</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span>  Sigma Gamma Beta    <span class="token punctuation">[</span><span class="token number">63</span><span class="token punctuation">]</span> <span class="token operator">=&gt;</span>  Sigma Gamma Beta Alpha<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 阶乘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NVM 包管理器</title>
      <link href="posts/63668a37.html"/>
      <url>posts/63668a37.html</url>
      
        <content type="html"><![CDATA[<h1 id="nvm-包管理器"><a href="#nvm-包管理器" class="headerlink" title="nvm 包管理器"></a>nvm 包管理器</h1><ul><li><a href="https://github.com/nvm-sh/nvm">官网</a></li><li><a href="https://github.com/coreybutler/nvm-windows/releases">Windows 直接选择 nvm-setup.zip 安装</a></li><li><a href="https://nodejs.org/en/blog/">查看 nodejs 的版本号序列</a></li></ul><h2 id="npm-更改下载源为淘宝镜像"><a href="#npm-更改下载源为淘宝镜像" class="headerlink" title="npm 更改下载源为淘宝镜像"></a>npm 更改下载源为淘宝镜像</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 单次使用</span><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--registry</span><span class="token operator">=</span>https://registry.npm.taobao.org<span class="token comment"># 永久使用</span><span class="token function">npm</span> config <span class="token builtin class-name">set</span> <span class="token assign-left variable">registry</span><span class="token operator">=</span>https://registry.npm.taobao.org<span class="token comment"># 检测是否成功</span><span class="token function">npm</span> config get registry 或者 <span class="token function">npm</span> info express<span class="token comment"># 还原 npm 的仓库地址</span><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry https://registry.npmjs.org/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="mac-下安装-nvm"><a href="#mac-下安装-nvm" class="headerlink" title="mac 下安装 nvm"></a>mac 下安装 nvm</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~<span class="token function">curl</span> -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh <span class="token operator">|</span> <span class="token function">bash</span><span class="token comment"># 添加环境变量</span><span class="token function">vim</span> ~/.zshrc<span class="token comment"># 添加如下内容，如果是安装过 oh-my-zsh </span><span class="token builtin class-name">export</span> <span class="token assign-left variable">NVM_DIR</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">${XDG_CONFIG_HOME-}</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">printf</span> %s <span class="token string">"<span class="token variable">${<span class="token environment constant">HOME</span>}</span>/.nvm"</span> <span class="token operator">||</span> <span class="token builtin class-name">printf</span> %s <span class="token string">"<span class="token variable">${XDG_CONFIG_HOME}</span>/nvm"</span><span class="token variable">)</span></span>"</span><span class="token punctuation">[</span> <span class="token parameter variable">-s</span> <span class="token string">"<span class="token variable">$NVM_DIR</span>/nvm.sh"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>. <span class="token string">"<span class="token variable">$NVM_DIR</span>/nvm.sh"</span> <span class="token comment"># This loads nvm</span><span class="token comment"># 如果没有安装 oh-my-zsh 时，直接按照如下方式添加也可以，就算是已经安装了 oh-my-zsh 也可以这么操作，不冲突</span><span class="token function">vim</span> ~/.bashrc<span class="token builtin class-name">export</span> <span class="token assign-left variable">NVM_DIR</span><span class="token operator">=</span><span class="token string">"<span class="token environment constant">$HOME</span>/.nvm"</span><span class="token punctuation">[</span> <span class="token parameter variable">-s</span> <span class="token string">"<span class="token variable">$NVM_DIR</span>/nvm.sh"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>. <span class="token string">"<span class="token variable">$NVM_DIR</span>/nvm.sh"</span>  <span class="token comment"># This loads nvm</span><span class="token punctuation">[</span> <span class="token parameter variable">-s</span> <span class="token string">"<span class="token variable">$NVM_DIR</span>/bash_completion"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>. <span class="token string">"<span class="token variable">$NVM_DIR</span>/bash_completion"</span>  <span class="token comment"># This loads nvm bash_completion</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="nvm-相关命令"><a href="#nvm-相关命令" class="headerlink" title="nvm 相关命令"></a>nvm 相关命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看 nvm 版本号</span>nvm <span class="token parameter variable">-v</span><span class="token comment"># windows 下查看可安装的 node.js 版本</span>nvm list available<span class="token comment"># 安装指定版本的 node.js</span>nvm <span class="token function">install</span> <span class="token number">10.15</span>.0<span class="token comment"># 使用特定版本的 node.js</span>nvm use <span class="token number">10.15</span>.0<span class="token comment"># 版本切换</span>nvm <span class="token function">install</span> <span class="token number">8.11</span>.2  <span class="token comment"># 比如先安装 8.11.2 的版本，然后切换到 8.11.2</span>nvm use <span class="token number">8.11</span>.2<span class="token comment"># 查看当前已安装的 node.js</span>nvm list<span class="token comment"># 删除指定版本的 node.js</span>nvm uninstall <span class="token number">8.11</span>.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> NPM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NVM </tag>
            
            <tag> NPM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 更改 pip 源至国内镜像</title>
      <link href="posts/fbd0fa96.html"/>
      <url>posts/fbd0fa96.html</url>
      
        <content type="html"><![CDATA[<h1 id="Windows-或-Linux-更改-pip-源至国内镜像"><a href="#Windows-或-Linux-更改-pip-源至国内镜像" class="headerlink" title="Windows 或 Linux 更改 pip 源至国内镜像"></a>Windows 或 Linux 更改 pip 源至国内镜像</h1><h2 id="Linux："><a href="#Linux：" class="headerlink" title="Linux："></a>Linux：</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> ~/.pip<span class="token function">cat</span> <span class="token operator">&gt;</span> ~/.pip/pip.conf <span class="token operator">&lt;&lt;</span> <span class="token string">EOF[global]trusted-host=mirrors.aliyun.comindex-url=https://mirrors.aliyun.com/pypi/simple/EOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者下载安装包的时候直接接源信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip3 <span class="token function">install</span> <span class="token assign-left variable">aiohttp</span><span class="token operator">==</span><span class="token number">3.6</span>.2 <span class="token parameter variable">-i</span> https://pypi.douban.com/simple/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Windows："><a href="#Windows：" class="headerlink" title="Windows："></a>Windows：</h2><p>首先在 window 的文件夹窗口输入 ： %APPDATA%<br>然后创建 pip 文件夹<br>最后创建 pip.ini 文件，写入如下内容</p><pre class="line-numbers language-none"><code class="language-none">[global]index-url = https://mirrors.aliyun.com/pypi/simple/[install]trusted-host=mirrors.aliyun.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四舍六入五成双-银行家舍入算法</title>
      <link href="posts/277fd645.html"/>
      <url>posts/277fd645.html</url>
      
        <content type="html"><![CDATA[<h1 id="四舍六入五成双-银行家算法"><a href="#四舍六入五成双-银行家算法" class="headerlink" title="四舍六入五成双-银行家算法"></a>四舍六入五成双-银行家算法</h1><p>四舍六入五成双是一种比较精确比较科学的计数保留法，是由 <code>IEEE 754</code> 标准规定的浮点数取整算法, 是一种数字修约规则。</p><p>当舍去位的数值：</p><ul><li>小于等于 4 时：直接舍去该位</li><li>大于等于 6 时：向前位进 1</li><li>等于 5 时：<ul><li>5 后有数，向前位进 1</li><li>5 后全部为 0 时：<ul><li>5 前的数值为奇数时：则向前位进 1 （将前位凑成偶数）</li><li>5 前的数值为偶数时：则直接舍去该位</li></ul></li></ul></li></ul><p>口诀：</p><p>四舍六入五考虑，<br>五后非零就进一，<br>五后皆零看奇偶，<br>五前为偶应舍去，<br>五前为奇要进一。</p><h2 id="php-实现"><a href="#php-实现" class="headerlink" title="php 实现"></a>php 实现</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">formatFloat</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">,</span> <span class="token variable">$precision</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">,</span> <span class="token variable">$precision</span><span class="token punctuation">,</span> <span class="token constant">PHP_ROUND_HALF_EVEN</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">formatFloat</span><span class="token punctuation">(</span><span class="token number">9.8249</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>  <span class="token comment">// output：9.82  四舍</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">formatFloat</span><span class="token punctuation">(</span><span class="token number">9.82671</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>  <span class="token comment">// output：9.83  六入</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">formatFloat</span><span class="token punctuation">(</span><span class="token number">9.8351</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>  <span class="token comment">// output：9.84  五后非零就进一</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">formatFloat</span><span class="token punctuation">(</span><span class="token number">9.82501</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>  <span class="token comment">// output：9.83  五后非零就进一</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">formatFloat</span><span class="token punctuation">(</span><span class="token number">9.8250</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>  <span class="token comment">// output：9.82  五后为零看奇偶，五前为偶应舍去（这里就违背了四舍五入）</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">formatFloat</span><span class="token punctuation">(</span><span class="token number">9.8350</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>  <span class="token comment">// output：9.84  五后为零看奇偶，五前为奇要进一</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="js-实现"><a href="#js-实现" class="headerlink" title="js 实现"></a>js 实现</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fomatFloat</span><span class="token punctuation">(</span><span class="token parameter">num<span class="token punctuation">,</span> precision</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>num <span class="token operator">*</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> precision<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> precision<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 搭建环境与安装 pip 扩展</title>
      <link href="posts/ee47ba79.html"/>
      <url>posts/ee47ba79.html</url>
      
        <content type="html"><![CDATA[<h1 id="Python-搭建环境与安装-pip-扩展"><a href="#Python-搭建环境与安装-pip-扩展" class="headerlink" title="Python 搭建环境与安装 pip 扩展"></a>Python 搭建环境与安装 pip 扩展</h1><blockquote><p><a href="http://www.pythontutor.com/live.html#mode=edit">python 在线运行网站</a></p></blockquote><h2 id="Mac-下安装"><a href="#Mac-下安装" class="headerlink" title="Mac 下安装"></a>Mac 下安装</h2><h3 id="mac-上安装-python"><a href="#mac-上安装-python" class="headerlink" title="mac 上安装 python"></a><a href="https://www.python.org/downloads/">mac 上安装 python</a></h3><p>可以直接通过下载官网的<a href="https://docs.python.org/zh-cn/3/using/mac.html">安装器</a>进行安装。</p><p>或者使用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> python3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="mac-下使用-pip"><a href="#mac-下使用-pip" class="headerlink" title="mac 下使用 pip"></a><a href="https://pip.pypa.io/en/stable/quickstart/">mac 下使用 pip</a></h3><p>可以直接使用 <code>python3 -m pip ……</code> 命令</p><pre class="line-numbers language-none"><code class="language-none"># 查看 pip 版本python3 -m pip --version# 升级 pip 版本/Library/Frameworks/Python.framework/Versions/3.8/bin/python3 -m pip install --upgrade pip# 搜索插件包 querypython -m pip search "query"# 安装 SomePackage 包python3 -m pip install SomePackage            # latest versionpython3 -m pip install SomePackage==1.0.4     # specific versionpython3 -m pip install 'SomePackage&gt;=1.0.4'     # minimum version# 安装已经通过 [PyPI](https://pypi.org/) 下载好的包（这在没有网的情况下很有用）python3 -m pip install SomePackage-1.0-py2.py3-none-any.whl# 显示已安装包的详细信息python3 -m pip show --files SomePackage# 列出哪些包已经存在了新版本python3 -m pip list --outdated# 升级包版本python3 -m pip install --upgrade SomePackage# 卸载包python3 -m pip uninstall SomePackage<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果想直接使用 <code>pip</code> 命令时，则需要如下操作，<a href="https://pip.pypa.io/en/stable/installing/">官网安装 pip 步骤文档</a></p><pre class="line-numbers language-none"><code class="language-none"># 安装 get-pip.py 脚本curl https://bootstrap.pypa.io/get-pip.py | python3# 查看 pip 版本pip --version 或者 pip3 --version# 查看已经安装的包pip list 或者 pip3 list# 更新 pip 版本pip install --upgrade pip 或者 pip3 install --upgrade pip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="requirements-txt"><a href="#requirements-txt" class="headerlink" title="requirements.txt"></a>requirements.txt</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 生成 requirements 文件</span>pip freeze <span class="token operator">&gt;</span> requirements<span class="token punctuation">.</span>txt<span class="token comment"># 安装 requirements.txt 依赖命令</span>pip install <span class="token operator">-</span>r requirements<span class="token punctuation">.</span>txt<span class="token comment"># 卸载 requirements.txt 文件中的依赖</span>pip uninstall <span class="token operator">-</span>y <span class="token operator">-</span>r requirements<span class="token punctuation">.</span>txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Windows-下安装背景"><a href="#Windows-下安装背景" class="headerlink" title="Windows 下安装背景"></a>Windows 下安装背景</h2><p>系统 windows7 64位，安装的 python 版本为 3.6.7 ，此文档为过程总结。</p><h2 id="Python-与-pip-下载与安装"><a href="#Python-与-pip-下载与安装" class="headerlink" title="Python 与 pip 下载与安装"></a>Python 与 pip 下载与安装</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><ul><li>进入 <code>https://www.python.org/</code> 选择  <code>downloads</code></li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-0e913bc27da7cfc2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="官网首页"></p><ul><li>选择 3.6.7 版本</li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-da7102d7d5108480.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="选择3.6.7版本"></p><ul><li>拉到屏幕底部，选择<ul><li>Windows x86-64 executable installer<br><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-4a7bf34585ea3e31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="选择64位安装包"></li></ul></li></ul><h3 id="Windows-下安装"><a href="#Windows-下安装" class="headerlink" title="Windows 下安装"></a>Windows 下安装</h3><ul><li>直接对下载好的安装包双进运行 (Install Python 3.6.7(64-bit) )<ul><li>选择自定义安装（Customize installation）</li><li>勾选 add python3.6 to path（自动添加环境变量）</li><li>下一步</li></ul></li><li>勾选 (Optional Features)<ul><li>document</li><li>pip（必须选）</li><li>.. 其他的多装总比少装强</li><li>下一步</li></ul></li><li>选择安装路径 （Advanced Options）<ul><li>安装路径，c:\python\Python3.6（可自行定义 Browse）</li><li>安装 （Install）</li></ul></li><li>安装完成</li></ul><h3 id="检查安装效果"><a href="#检查安装效果" class="headerlink" title="检查安装效果"></a>检查安装效果</h3><ul><li>开始，运行，进入cmd命令行</li><li>敲命令 python<ul><li>windodws 用 ctrl+z 退出交互界面</li></ul></li><li>敲命令 pip<ul><li>命令存在</li></ul></li><li>如果提示命令不存在<ul><li>很可能是你的 环境变量未设置好</li></ul></li></ul><h2 id="安装-pipenv"><a href="#安装-pipenv" class="headerlink" title="安装 pipenv"></a>安装 pipenv</h2><p>它是一个项目虚拟环境管理工具。</p><h3 id="利用-pip-安装"><a href="#利用-pip-安装" class="headerlink" title="利用 pip 安装"></a>利用 pip 安装</h3><p><code>pip install pipenv</code></p><p>执行该命令自动进入下载安装过程。</p><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><ul><li>在电脑中创建文件夹，比如 I:\Python\test</li><li>在命令行切换到此<ul><li>cmd: cd  I:\Python\test</li></ul></li><li>执行 pipenv 的初始化命令<ul><li>pipenv –python 3.6</li></ul></li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-0742c148428484a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="执行 pipenv 初始化命令之后的画面"></p><ul><li>进入 pipenv 的虚拟环境<ul><li>pipenv shell</li></ul></li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-b40a5bcc9c69f618.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="进入 pipenv 的虚拟环境"></p><ul><li>安装一个库试试<ul><li>pip install requests</li></ul></li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-d2ac78cb65d7f691.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="安装 requests 库界面"></p><ul><li>虚拟化环境存放路径<ul><li>默认 c:\users\administrator.vi*****</li></ul></li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-1cd80d6ed3238a66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="本次安装虚拟化环境存放路径"></p><ul><li>OK End</li></ul><h2 id="下载使用-pycharm"><a href="#下载使用-pycharm" class="headerlink" title="下载使用 pycharm"></a>下载使用 pycharm</h2><p>直接去官网下载 windows 的 pro版本。</p><p>地址 <a href="http://www.jetbrains.com/pycharm/download/">http://www.jetbrains.com/pycharm/download/</a><br><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-120aa374788beefc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="下载 Pro 版本"></p><h3 id="创建项目-1"><a href="#创建项目-1" class="headerlink" title="创建项目"></a>创建项目</h3><p>直接选择我们刚刚的项目路径 <code>I:\Python\test</code></p><h3 id="让项目使用pipenv的虚拟环境"><a href="#让项目使用pipenv的虚拟环境" class="headerlink" title="让项目使用pipenv的虚拟环境"></a>让项目使用pipenv的虚拟环境</h3><p><code>file -&gt; setting -&gt; project:test</code></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-ac306de03f065e51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="如图所示"></p><p>进一步选择 <code>interperter</code> 在下拉选单中选中我们刚刚的虚拟化环境目录即可。<br><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-175faf09036cc3a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="选择上文中创建的虚拟环境目录"></p><h3 id="interperter-中没有怎么办？"><a href="#interperter-中没有怎么办？" class="headerlink" title="interperter 中没有怎么办？"></a>interperter 中没有怎么办？</h3><p>下拉选单中，选择 <code>show all</code><br><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-6828f88cd9937443.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="第一步： interperter 中没有的话，点击下拉选单之后选择 show all"><br><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-6171dcff4886c3bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="第二步：点击加号+"><br><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-e6d11f9351337be9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="第三步：选择已经存在的，不要选择新建的"></p><p>然后在 existing environment，在右侧<code>...</code>选中虚拟环境的 python.exe 即可。<br><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-3b5e2bdbeb07032e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="第四步：选择已存在的之后点击最右边的 …"><br><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-87dab8f9313b439e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="第五步：选择 python.exe 既可"><br>一般情况下，默认路径：</p><p><code>c:\users\administrator\.virtualenvs\项目名\Scripts\python.exe</code></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-61e21223cf87bdf2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="切记切记！！！"></p><p>然后一直点 ok 即可<br>效果如下<br><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-78490ce15425ed18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="可以看到会出现两个虚拟环境的选项"><br>最终可以看到编辑器中包含了刚刚创建的虚拟环境<br><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-8260285f4c846b36.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="看到这里证明编辑器配置成功了"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，整个项目环境配置完毕。</p><p>以后我们所有对项目的命令行操作都需要在项目根目录先进入 <code>pipenv shell</code> 然后再执行命令操作，这样就可以使得每一个项目安装独立的安装包。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx 开启 gzip 压缩</title>
      <link href="posts/63bed376.html"/>
      <url>posts/63bed376.html</url>
      
        <content type="html"><![CDATA[<h1 id="nginx-开启-gzip-压缩"><a href="#nginx-开启-gzip-压缩" class="headerlink" title="nginx 开启 gzip 压缩"></a>nginx 开启 gzip 压缩</h1><blockquote><p>在服务器 Nginx 开启 gzip 压缩是优化网站性能的方法之一，可以有效减少服务器带宽的消耗，缺点是会增大 CPU 的占用率，但是很多时候 CPU 往往是空闲最多的。</p></blockquote><p>在 nginx 中开启 gzip 压缩，需要编辑 nginx.conf 文件，添加如下</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">gzip</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">gzip_min_length</span> <span class="token number">1k</span></span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">gzip_buffers</span> <span class="token number">16</span> <span class="token number">64k</span></span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">gzip_http_version</span> 1.1</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">gzip_comp_level</span> <span class="token number">9</span></span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">gzip_types</span> text/plain text/css text/javascript application/json application/javascript application/x-javascript application/xml application/x-httpd-php image/jpeg image/gif image/png font/ttf font/otf image/svg+xml</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">gzip_vary</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="gzip-参数介绍"><a href="#gzip-参数介绍" class="headerlink" title="gzip 参数介绍"></a>gzip 参数介绍</h2><h3 id="gizp-on-off"><a href="#gizp-on-off" class="headerlink" title="gizp on|off;"></a>gizp on|off;</h3><p>开启或者关闭 gzip 模块</p><h3 id="gzip-min-length-1k"><a href="#gzip-min-length-1k" class="headerlink" title="gzip_min_length 1k;"></a>gzip_min_length 1k;</h3><p>设置允许压缩的页面最小字节数，页面字节数从 header 头中的 Content-Length 中进行获取。默认值是 0，不管页面多大都压缩。建议设置成大于 1k 的字节数，小于 1k 可能会越压越大。 即: gzip_min_length 1024</p><h3 id="gzip-proxied-expired-no-cache-no-store-private-auth"><a href="#gzip-proxied-expired-no-cache-no-store-private-auth" class="headerlink" title="gzip_proxied expired no-cache no-store private auth;"></a>gzip_proxied expired no-cache no-store private auth;</h3><p>Nginx 作为反向代理的时候启用，开启或者关闭后端服务器返回的结果，匹配的前提是后端服务器必须要返回包含”Via” 的 header 头。</p><h3 id="gzip-types-text-plain-application-xml"><a href="#gzip-types-text-plain-application-xml" class="headerlink" title="gzip_types text/plain application/xml;"></a>gzip_types text/plain application/xml;</h3><p>匹配 MIME 类型进行压缩，（无论是否指定）”text/html” 类型总是会被压缩的。</p><h2 id="如何判断是否已经开启了-gzip-压缩？"><a href="#如何判断是否已经开启了-gzip-压缩？" class="headerlink" title="如何判断是否已经开启了 gzip 压缩？"></a>如何判断是否已经开启了 gzip 压缩？</h2><p>打开浏览器，按住 f12 查看 Content-Encoding 字段如果是 gzip，表示该网页的 body 数据是经过 gzip 压缩的。</p>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> gzip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP RSA 加解密</title>
      <link href="posts/f7924170.html"/>
      <url>posts/f7924170.html</url>
      
        <content type="html"><![CDATA[<h1 id="PHP-RSA-加解密"><a href="#PHP-RSA-加解密" class="headerlink" title="PHP RSA 加解密"></a>PHP RSA 加解密</h1><p>最近在做支付宝的跨境支付，自己写了一个 composer 包，里面涉及到 RSA 加密，以及验签，故分享之。也方便以后自己随时拿过来用 😃</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/** * RSA 加解密 * * 可以线上生成一对公私钥的网站： http://www.metools.info/code/c80.html */</span><span class="token comment">/** * RSA 签名 * * @param string $data 待签名数据 * @param string $privateKeyPath 私钥文件路径 * @return string */</span><span class="token keyword">function</span> <span class="token function-definition function">rsaSign</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$privateKeyPath</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span><span class="token punctuation">{</span>    <span class="token variable">$priKey</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$privateKeyPath</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">openssl_get_privatekey</span><span class="token punctuation">(</span><span class="token variable">$priKey</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">openssl_sign</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token variable">$sign</span><span class="token punctuation">,</span> <span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">openssl_free_key</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sign</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$sign</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$sign</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * RSA 验签 * * @param string $data 待签名数据 * @param string $aliPublicKeyPath 公钥文件路径 * @param string $sign 要校对的签名数据 * @return bool */</span><span class="token keyword">function</span> <span class="token function-definition function">rsaVerify</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$aliPublicKeyPath</span><span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$sign</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">bool</span><span class="token punctuation">{</span>    <span class="token variable">$pubKey</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$aliPublicKeyPath</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">openssl_get_publickey</span><span class="token punctuation">(</span><span class="token variable">$pubKey</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">bool</span><span class="token punctuation">)</span><span class="token function">openssl_verify</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$sign</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">openssl_free_key</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * RSA 解密 * * @param string $content 需要解密的密文数据 * @param string $privateKeyPath  私钥文件路径 * @return string  解密后的明文内容 */</span><span class="token keyword">function</span> <span class="token function-definition function">rsaDecrypt</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$content</span><span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$privateKeyPath</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span><span class="token punctuation">{</span>    <span class="token variable">$priKey</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$privateKeyPath</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">openssl_get_privatekey</span><span class="token punctuation">(</span><span class="token variable">$priKey</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 用 base64 将内容还原成二进制</span>    <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 把需要解密的内容，按 128 位拆开解密</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">128</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">,</span> <span class="token variable">$i</span> <span class="token operator">*</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">openssl_private_decrypt</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token variable">$decrypt</span><span class="token punctuation">,</span> <span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$result</span> <span class="token operator">.=</span> <span class="token variable">$decrypt</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">openssl_free_key</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 假设需要对如下这段字符串加解密</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'aa=123&amp;bb=456&amp;cc=789&amp;dd=1212'</span><span class="token punctuation">;</span><span class="token comment">// osrx0siWqK0+5C6ANNk/2pqEYoWa74UzFsUPFfv5FnhrOU9abyup+h2AY/4LqlSnvH9ztBcx//EpdJI9yI/xnfB14LdiDrPH1bJUJ5oJMafAo4QxL47eAPKT8ZKbufKg+YTf8kx7xnJ5kSyxcHzzhZyVvth4pGstFTUeL/5RpGRxlOQj/viHLkocYM2h1hzunqvcHWKzQqTdmi8g9atxDLPrASdTdolsD0TYbFj4Bn1S/0ziomcesz3IFi0CO6UsSM2N1jBOdtmhrecxv6WcUAgy3y9B7o4vF3hGG7HuhD437bO0XVWMrJ2NcRHhiQolMi6zmeX50ZLUSI63ve7ucA==</span><span class="token variable">$mySign</span> <span class="token operator">=</span> <span class="token function">rsaSign</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'./private_key.pem'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$is</span> <span class="token operator">=</span> <span class="token function">rsaVerify</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'./public_key.pem'</span><span class="token punctuation">,</span> <span class="token variable">$mySign</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$decryptStr</span> <span class="token operator">=</span> <span class="token function">rsaDecrypt</span><span class="token punctuation">(</span><span class="token variable">$mySign</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'./private_key.pem'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$mySign</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$is</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$decryptStr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> RSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 laradock 安装 elasticsearch</title>
      <link href="posts/deba288d.html"/>
      <url>posts/deba288d.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用-Laradock-安装-ElasticSearch"><a href="#使用-Laradock-安装-ElasticSearch" class="headerlink" title="使用 Laradock 安装 ElasticSearch"></a>使用 Laradock 安装 ElasticSearch</h1><ul><li><a href="https://github.com/ElasticHQ/elasticsearch-HQ">ElasticSearch 可视化工具 ElasticHQ</a> / <a href="http://www.elastichq.org/">官网地址</a></li></ul><h2 id="安装和使用"><a href="#安装和使用" class="headerlink" title="安装和使用"></a>安装和使用</h2><ol><li>使用 <code>docker-compose up</code> 命令运行 <code>ElasticSearch</code> 容器</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span> elasticsearch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>打开浏览器并通过端口 <code>9200</code> 访问本地主机 <a href="http://localhost:9200/">http://localhost:9200</a></li></ol><blockquote><p>默认用户是 user ，默认密码是 changeme</p></blockquote><h2 id="如果是在-laradock-中使用时"><a href="#如果是在-laradock-中使用时" class="headerlink" title="如果是在 laradock 中使用时"></a>如果是在 laradock 中使用时</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> http://elasticsearch:9200<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="安装-ElasticSearch-插件"><a href="#安装-ElasticSearch-插件" class="headerlink" title="安装 ElasticSearch 插件"></a>安装 ElasticSearch 插件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装一个 ElasticSearch 插件</span><span class="token function">docker-compose</span> <span class="token builtin class-name">exec</span> elasticsearch /usr/share/elasticsearch/bin/elasticsearch-plugin <span class="token function">install</span> <span class="token punctuation">{</span>plugin-name<span class="token punctuation">}</span><span class="token comment"># 重启容器</span><span class="token function">docker-compose</span> restart elasticsearch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装-elasticsearch-analysis-ik-中文分词插件"><a href="#安装-elasticsearch-analysis-ik-中文分词插件" class="headerlink" title="安装 elasticsearch-analysis-ik 中文分词插件"></a>安装 <a href="https://github.com/medcl/elasticsearch-analysis-ik">elasticsearch-analysis-ik</a> 中文分词插件</h3><p>比如，此时需要安装 <a href="https://github.com/medcl/elasticsearch-analysis-ik">elasticsearch-analysis-ik</a> 中文分词插件，需要下载 ik 的 <a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">releases</a> 源码 zip 包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 方式1，你可以直接在 elasticsearch 容器外，执行以下命令</span><span class="token function">docker-compose</span> <span class="token builtin class-name">exec</span> elasticsearch /usr/share/elasticsearch/bin/elasticsearch-plugin <span class="token function">install</span> https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.9.1/elasticsearch-analysis-ik-7.9.1.zip<span class="token comment"># 方式2，你可以直接进入到 elasticsearch 容器内，然后执行以下命令</span>./bin/elasticsearch-plugin <span class="token function">install</span> https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.9.1/elasticsearch-analysis-ik-7.9.1.zip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>需要注意的是：如果你的 elasticsearch 的版本是 7.9.1 那么，你安装的 ik 插件也必须是 7.9.1 的版本</strong>，elasticsearch 的版本号可以通过访问 <a href="http://localhost:9200/">http://localhost:9200/</a> 查看 <code>version.number</code> 字段查看，然后 <code>docker-compose restart elasticsearch</code> 重启 elasticsearch 容器即可</p><h4 id="安装-elasticsearch-analysis-ik-过程如下所示"><a href="#安装-elasticsearch-analysis-ik-过程如下所示" class="headerlink" title="安装 elasticsearch-analysis-ik 过程如下所示"></a>安装 elasticsearch-analysis-ik 过程如下所示</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@f1831cb3b4dd elasticsearch<span class="token punctuation">]</span><span class="token comment"># ./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.9.1/elasticsearch-analysis-ik-7.9.1.zip</span>-<span class="token operator">&gt;</span> Installing https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.9.1/elasticsearch-analysis-ik-7.9.1.zip-<span class="token operator">&gt;</span> Downloading https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.9.1/elasticsearch-analysis-ik-7.9.1.zip<span class="token punctuation">[</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token punctuation">]</span> <span class="token number">100</span>%??@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@     WARNING: plugin requires additional permissions     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@* java.net.SocketPermission * connect,resolveSee http://docs.oracle.com/javase/8/docs/technotes/guides/security/permissions.html<span class="token keyword">for</span> descriptions of what these permissions allow and the associated risks.Continue with installation? <span class="token punctuation">[</span>y/N<span class="token punctuation">]</span>y-<span class="token operator">&gt;</span> Installed analysis-ik<span class="token punctuation">[</span>root@f1831cb3b4dd elasticsearch<span class="token punctuation">]</span><span class="token comment"># ./bin/elasticsearch-plugin list</span>analysis-ik<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看插件列表</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./bin/elasticsearch-plugin list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="ElasticSearch-和-mysql-数据库的概念对比"><a href="#ElasticSearch-和-mysql-数据库的概念对比" class="headerlink" title="ElasticSearch 和 mysql 数据库的概念对比"></a>ElasticSearch 和 mysql 数据库的概念对比</h2><table><thead><tr><th>MySQL</th><th>Elasticsearch</th></tr></thead><tbody><tr><td>表（Table）</td><td>索引（Index）</td></tr><tr><td>记录（Row）</td><td>文档（Document）</td></tr><tr><td>字段（Column）</td><td>字段（Fields）</td></tr></tbody></table><h2 id="ElasticSearch-的简单使用"><a href="#ElasticSearch-的简单使用" class="headerlink" title="ElasticSearch 的简单使用"></a>ElasticSearch 的简单使用</h2><h3 id="新建索引-index-（创建表）"><a href="#新建索引-index-（创建表）" class="headerlink" title="新建索引 index （创建表）"></a>新建索引 index （创建表）</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-XPUT</span> http://localhost:9200/test_index  <span class="token comment"># 在 Elasticsearch 的返回中如果包含了 "acknowledged" : true, 则代表请求成功。</span><span class="token punctuation">{</span><span class="token string">"acknowledged"</span>:true,<span class="token string">"shards_acknowledged"</span>:true,<span class="token string">"index"</span><span class="token builtin class-name">:</span><span class="token string">"test_index"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> http://localhost:9200/test_index<span class="token punctuation">{</span><span class="token string">"test_index"</span>:<span class="token punctuation">{</span><span class="token string">"aliases"</span>:<span class="token punctuation">{</span><span class="token punctuation">}</span>,<span class="token string">"mappings"</span>:<span class="token punctuation">{</span><span class="token punctuation">}</span>,<span class="token string">"settings"</span>:<span class="token punctuation">{</span><span class="token string">"index"</span>:<span class="token punctuation">{</span><span class="token string">"creation_date"</span><span class="token builtin class-name">:</span><span class="token string">"1617069458624"</span>,<span class="token string">"number_of_shards"</span><span class="token builtin class-name">:</span><span class="token string">"1"</span>,<span class="token string">"number_of_replicas"</span><span class="token builtin class-name">:</span><span class="token string">"1"</span>,<span class="token string">"uuid"</span><span class="token builtin class-name">:</span><span class="token string">"XKjqatZTSOu9I_PiwzaNOQ"</span>,<span class="token string">"version"</span>:<span class="token punctuation">{</span><span class="token string">"created"</span><span class="token builtin class-name">:</span><span class="token string">"7090199"</span><span class="token punctuation">}</span>,<span class="token string">"provided_name"</span><span class="token builtin class-name">:</span><span class="token string">"test_index"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment"># 可以加上 pretty 参数，返回比较人性化的结构</span><span class="token function">curl</span> http://localhost:9200/test_index<span class="token punctuation">\</span>?pretty                                                                           <span class="token punctuation">{</span>  <span class="token string">"test_index"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{</span>    <span class="token string">"aliases"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>,    <span class="token string">"mappings"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>,    <span class="token string">"settings"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{</span>      <span class="token string">"index"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{</span>        <span class="token string">"creation_date"</span> <span class="token builtin class-name">:</span> <span class="token string">"1617069458624"</span>,        <span class="token string">"number_of_shards"</span> <span class="token builtin class-name">:</span> <span class="token string">"1"</span>,        <span class="token string">"number_of_replicas"</span> <span class="token builtin class-name">:</span> <span class="token string">"1"</span>,        <span class="token string">"uuid"</span> <span class="token builtin class-name">:</span> <span class="token string">"XKjqatZTSOu9I_PiwzaNOQ"</span>,        <span class="token string">"version"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{</span>          <span class="token string">"created"</span> <span class="token builtin class-name">:</span> <span class="token string">"7090199"</span>        <span class="token punctuation">}</span>,        <span class="token string">"provided_name"</span> <span class="token builtin class-name">:</span> <span class="token string">"test_index"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建类型"><a href="#创建类型" class="headerlink" title="创建类型"></a>创建类型</h3><p>对应的接口地址是 /{index_name}/_mapping</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -H<span class="token string">'Content-Type: application/json'</span> <span class="token parameter variable">-XPUT</span> http://localhost:9200/test_index/_mapping?pretty -d<span class="token string">'{  "properties": {    "title": { "type": "text", "analyzer": "ik_smart" },     "description": { "type": "text", "analyzer": "ik_smart" },    "price": { "type": "scaled_float", "scaling_factor": 100 }  }}'</span><span class="token comment"># 会返回</span><span class="token punctuation">{</span>  <span class="token string">"acknowledged"</span> <span class="token builtin class-name">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token function">curl</span> -H<span class="token string">'Content-Type: application/json'</span> <span class="token parameter variable">-XPUT</span> http://localhost:9200/products/_mapping/?pretty -d<span class="token string">'{  "properties": {    "brand_id": { "type": "integer" },    "type": { "type": "integer" },    "title": { "type": "text", "analyzer": "ik_smart" },     "unit": { "type": "keyword" },    "sketch": { "type": "text", "analyzer": "ik_smart" },     "keywords": { "type": "text", "analyzer": "ik_smart" },    "tags": { "type": "keyword" },    "barcode": { "type": "keyword" },    "price": { "type": "scaled_float", "scaling_factor": 100 },    "market_price": { "type": "scaled_float", "scaling_factor": 100 },    "rating": { "type": "float" },    "sold_count": { "type": "integer" },    "review_count": { "type": "integer" },        "virtual_retail_num": { "type": "integer" },    "description": { "type": "text", "analyzer": "ik_smart" },    "stock": { "type": "integer" },        "warning_stock": { "type": "integer" },       "main_image": { "type": "keyword" },    "slider_image": { "type": "keyword" },    "status": { "type": "integer" },    "is_hot": { "type": "integer" },    "sort": { "type": "integer" },    "categories": {      "type": "nested",      "properties": {        "id": { "type": "integer", "copy_to": "categories_id" },        "pid": { "type": "integer" },        "name": { "type": "text", "analyzer": "ik_smart", "copy_to": "categories_name" },         "description": { "type": "text", "analyzer": "ik_smart", "copy_to": "categories_description" },        "status": { "type": "integer" },        "level": { "type": "integer" },        "img": { "type": "keyword" }      }    },        "brand": {      "type": "nested",      "properties": {        "id": { "type": "integer" },        "name": { "type": "text", "analyzer": "ik_smart", "copy_to": "brand_name" },         "description": { "type": "text", "analyzer": "ik_smart", "copy_to": "brand_description" },        "log_url": { "type": "keyword" },        "img": { "type": "keyword" }      }    },          "attrs": {      "type": "nested",      "properties": {        "id": { "type": "integer" },        "name": { "type": "keyword", "copy_to": "attrs_name" }      }    },      "skus": {      "type": "nested",      "properties": {        "id": { "type": "integer" },        "name": { "type": "text", "analyzer": "ik_smart"},         "main_url": { "type": "keyword" },        "price": { "type": "scaled_float", "scaling_factor": 100 },        "sold_count": { "type": "integer" }      }    }  }}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>提交数据中的 <code>properties</code> 代表这个索引中各个字段的定义，其中 key 为字段名称，value 是字段的类型定义</li><li><code>type</code> 定义了字段的数据类型，常用的有 <code>text</code> / <code>integer</code> / <code>date</code> / <code>boolean</code> ，还有<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html">更多类型</a><ul><li><code>keyword</code>，这是字符串类型的一种，这种类型是告诉 Elasticsearch 不需要对这个字段做分词，通常用于邮箱、标签、属性等字段。</li><li><code>scaled_float</code> 代表一个小数位固定的浮点型字段，与 Mysql 的 decimal 类型类似。</li><li><code>scaling_factor</code> 用来指定小数位精度，100 就代表精确到小数点后两位。</li><li><code>nested</code> 代表这个字段是一个复杂对象，由下一级的 properties 字段定义这个对象的字段。</li></ul></li><li><code>analyzer</code>是一个新的概念，这是告诉 Elasticsearch 应该用什么方式去给这个字段做分词，这里我们用了 <code>ik_smart</code>，是一个中文分词器。</li><li><code>copy_to</code>，Elasticsearch 的多字段匹配查询是不支持查询 Nested 对象的字段，但是我们又必须查询 <code>categories.name</code> 字段，因此我们可以使用 <code>copy_to</code> 参数，可以将  <code>categories.name</code> 字段复制到上层，我们就可以通过 <code>categories_name</code> 字段做多字段匹配查询</li></ul><h3 id="创建文档"><a href="#创建文档" class="headerlink" title="创建文档"></a>创建文档</h3><p>对应的接口地址是 /{index_name}/_doc/{id} 这里的 id 和 mysql 中的 id 不一样，不是自增的，需要我们手动指定。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建 id 为 1 的文档</span><span class="token function">curl</span> -H<span class="token string">'Content-Type: application/json'</span> <span class="token parameter variable">-XPUT</span> http://localhost:9200/test_index/_doc/1?pretty -d<span class="token string">'{    "title": "iPhone 7P",    "description": "iphone 第一批双摄像头",    "price": 6799}'</span><span class="token comment"># 会返回如下内容</span><span class="token punctuation">{</span>  <span class="token string">"_index"</span> <span class="token builtin class-name">:</span> <span class="token string">"test_index"</span>,  <span class="token string">"_type"</span> <span class="token builtin class-name">:</span> <span class="token string">"_doc"</span>,  <span class="token string">"_id"</span> <span class="token builtin class-name">:</span> <span class="token string">"1"</span>,  <span class="token string">"_version"</span> <span class="token builtin class-name">:</span> <span class="token number">1</span>,  <span class="token string">"result"</span> <span class="token builtin class-name">:</span> <span class="token string">"created"</span>,  <span class="token string">"_shards"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{</span>    <span class="token string">"total"</span> <span class="token builtin class-name">:</span> <span class="token number">2</span>,    <span class="token string">"successful"</span> <span class="token builtin class-name">:</span> <span class="token number">1</span>,    <span class="token string">"failed"</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span>,  <span class="token string">"_seq_no"</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>,  <span class="token string">"_primary_term"</span> <span class="token builtin class-name">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token comment"># 创建 id 为 2 的文档</span><span class="token function">curl</span> -H<span class="token string">'Content-Type: application/json'</span> <span class="token parameter variable">-XPUT</span> http://localhost:9200/test_index/_doc/2?pretty -d<span class="token string">'{    "title": "OPPO find x",    "description": "高清像素",    "price": 3499}'</span><span class="token comment"># 会返回如下内容</span><span class="token punctuation">{</span>  <span class="token string">"_index"</span> <span class="token builtin class-name">:</span> <span class="token string">"test_index"</span>,  <span class="token string">"_type"</span> <span class="token builtin class-name">:</span> <span class="token string">"_doc"</span>,  <span class="token string">"_id"</span> <span class="token builtin class-name">:</span> <span class="token string">"2"</span>,  <span class="token string">"_version"</span> <span class="token builtin class-name">:</span> <span class="token number">1</span>,  <span class="token string">"result"</span> <span class="token builtin class-name">:</span> <span class="token string">"created"</span>,  <span class="token string">"_shards"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{</span>    <span class="token string">"total"</span> <span class="token builtin class-name">:</span> <span class="token number">2</span>,    <span class="token string">"successful"</span> <span class="token builtin class-name">:</span> <span class="token number">1</span>,    <span class="token string">"failed"</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span>,  <span class="token string">"_seq_no"</span> <span class="token builtin class-name">:</span> <span class="token number">1</span>,  <span class="token string">"_primary_term"</span> <span class="token builtin class-name">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="读取文档数据"><a href="#读取文档数据" class="headerlink" title="读取文档数据"></a>读取文档数据</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> http://localhost:9200/test_index/_doc/1<span class="token punctuation">\</span>?pretty<span class="token comment"># 会返回如下内容</span><span class="token punctuation">{</span>  <span class="token string">"_index"</span> <span class="token builtin class-name">:</span> <span class="token string">"test_index"</span>,  <span class="token string">"_type"</span> <span class="token builtin class-name">:</span> <span class="token string">"_doc"</span>,  <span class="token string">"_id"</span> <span class="token builtin class-name">:</span> <span class="token string">"1"</span>,  <span class="token string">"_version"</span> <span class="token builtin class-name">:</span> <span class="token number">1</span>,  <span class="token string">"_seq_no"</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>,  <span class="token string">"_primary_term"</span> <span class="token builtin class-name">:</span> <span class="token number">2</span>,  <span class="token string">"found"</span> <span class="token builtin class-name">:</span> true,  <span class="token string">"_source"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{</span>    <span class="token string">"title"</span> <span class="token builtin class-name">:</span> <span class="token string">"iPhone 7P"</span>,    <span class="token string">"description"</span> <span class="token builtin class-name">:</span> <span class="token string">"iphone 第一批双摄像头"</span>,    <span class="token string">"price"</span> <span class="token builtin class-name">:</span> <span class="token number">6799</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看-Elasticsearch-索引中有多少条数据"><a href="#查看-Elasticsearch-索引中有多少条数据" class="headerlink" title="查看 Elasticsearch 索引中有多少条数据"></a>查看 Elasticsearch 索引中有多少条数据</h3><p>对应的接口地址为 /{index_name}/_doc/_count</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> http://localhost:9200/test_index/_doc/_count<span class="token punctuation">\</span>?pretty<span class="token comment"># 会返回如下内容</span><span class="token punctuation">{</span>  <span class="token string">"count"</span> <span class="token builtin class-name">:</span> <span class="token number">3</span>,  <span class="token string">"_shards"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{</span>    <span class="token string">"total"</span> <span class="token builtin class-name">:</span> <span class="token number">1</span>,    <span class="token string">"successful"</span> <span class="token builtin class-name">:</span> <span class="token number">1</span>,    <span class="token string">"skipped"</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>,    <span class="token string">"failed"</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="简单搜索"><a href="#简单搜索" class="headerlink" title="简单搜索"></a>简单搜索</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-XPOST</span> -H<span class="token string">'Content-Type:application/json'</span> http://localhost:9200/test_index/_doc/_search<span class="token punctuation">\</span>?pretty -d<span class="token string">'{    "query" : { "match" : { "description" : "iphone" }}}'</span><span class="token comment"># 会返回如下内容</span><span class="token punctuation">{</span>  <span class="token string">"took"</span> <span class="token builtin class-name">:</span> <span class="token number">16</span>,  <span class="token string">"timed_out"</span> <span class="token builtin class-name">:</span> false,  <span class="token string">"_shards"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{</span>    <span class="token string">"total"</span> <span class="token builtin class-name">:</span> <span class="token number">1</span>,    <span class="token string">"successful"</span> <span class="token builtin class-name">:</span> <span class="token number">1</span>,    <span class="token string">"skipped"</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>,    <span class="token string">"failed"</span> <span class="token builtin class-name">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span>,  <span class="token string">"hits"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{</span>    <span class="token string">"total"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{</span>      <span class="token string">"value"</span> <span class="token builtin class-name">:</span> <span class="token number">1</span>,      <span class="token string">"relation"</span> <span class="token builtin class-name">:</span> <span class="token string">"eq"</span>    <span class="token punctuation">}</span>,    <span class="token string">"max_score"</span> <span class="token builtin class-name">:</span> <span class="token number">0.60996956</span>,    <span class="token string">"hits"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token string">"_index"</span> <span class="token builtin class-name">:</span> <span class="token string">"test_index"</span>,        <span class="token string">"_type"</span> <span class="token builtin class-name">:</span> <span class="token string">"_doc"</span>,        <span class="token string">"_id"</span> <span class="token builtin class-name">:</span> <span class="token string">"1"</span>,        <span class="token string">"_score"</span> <span class="token builtin class-name">:</span> <span class="token number">0.60996956</span>,        <span class="token string">"_source"</span> <span class="token builtin class-name">:</span> <span class="token punctuation">{</span>          <span class="token string">"title"</span> <span class="token builtin class-name">:</span> <span class="token string">"iPhone 7P"</span>,          <span class="token string">"description"</span> <span class="token builtin class-name">:</span> <span class="token string">"iphone 第一批双摄像头"</span>,          <span class="token string">"price"</span> <span class="token builtin class-name">:</span> <span class="token number">6799</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> ElasticSearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> ElasticSearch </tag>
            
            <tag> Laradock </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laravel 中的模型事件与 Observer</title>
      <link href="posts/c9de0987.html"/>
      <url>posts/c9de0987.html</url>
      
        <content type="html"><![CDATA[<h1 id="Laravel-中的模型事件与-Observer"><a href="#Laravel-中的模型事件与-Observer" class="headerlink" title="Laravel 中的模型事件与 Observer"></a>Laravel 中的模型事件与 Observer</h1><p>当模型已存在，不是新建的时候，依次触发的顺序是:</p><p>saving -&gt; updating -&gt; updated -&gt; saved</p><p>当模型不存在，需要新增的时候，依次触发的顺序则是</p><p>saving -&gt; creating -&gt; created -&gt; saved</p><p>那么 saving,saved 和 updating,updated 到底有什么区别呢？</p><p>updating 和 updated 会在数据库中的真值修改前后触发。</p><p>saving 和 saved 则会在 Eloquent 实例的 original 数组真值更改前后触发。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">UserObserver</span><span class="token punctuation">{</span>    <span class="token comment">/**     * 监听数据即将创建的事件。     *     * @param  User $user     * @return void     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">creating</span><span class="token punctuation">(</span><span class="token class-name type-declaration">User</span> <span class="token variable">$user</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 监听数据创建后的事件。     *     * @param  User $user     * @return void     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">created</span><span class="token punctuation">(</span><span class="token class-name type-declaration">User</span> <span class="token variable">$user</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 监听数据即将更新的事件。     *     * @param  User $user     * @return void     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">updating</span><span class="token punctuation">(</span><span class="token class-name type-declaration">User</span> <span class="token variable">$user</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 监听数据更新后的事件。     *     * @param  User $user     * @return void     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">updated</span><span class="token punctuation">(</span><span class="token class-name type-declaration">User</span> <span class="token variable">$user</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 监听数据即将保存的事件。     *     * @param  User $user     * @return void     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">saving</span><span class="token punctuation">(</span><span class="token class-name type-declaration">User</span> <span class="token variable">$user</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 监听数据保存后的事件。     *     * @param  User $user     * @return void     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">saved</span><span class="token punctuation">(</span><span class="token class-name type-declaration">User</span> <span class="token variable">$user</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 监听数据即将删除的事件。     *     * @param  User $user     * @return void     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">deleting</span><span class="token punctuation">(</span><span class="token class-name type-declaration">User</span> <span class="token variable">$user</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 监听数据删除后的事件。     *     * @param  User $user     * @return void     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">deleted</span><span class="token punctuation">(</span><span class="token class-name type-declaration">User</span> <span class="token variable">$user</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 监听数据即将从软删除状态恢复的事件。     *     * @param  User $user     * @return void     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">restoring</span><span class="token punctuation">(</span><span class="token class-name type-declaration">User</span> <span class="token variable">$user</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 监听数据从软删除状态恢复后的事件。     *     * @param  User $user     * @return void     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">restored</span><span class="token punctuation">(</span><span class="token class-name type-declaration">User</span> <span class="token variable">$user</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel 使用 ORM 写复杂 sql</title>
      <link href="posts/778c83e3.html"/>
      <url>posts/778c83e3.html</url>
      
        <content type="html"><![CDATA[<h1 id="laravel-使用-ORM-写复杂-sql"><a href="#laravel-使用-ORM-写复杂-sql" class="headerlink" title="laravel 使用 ORM 写复杂 sql"></a>laravel 使用 ORM 写复杂 sql</h1><h2 id="直接先贴出-sql-查询语句如下"><a href="#直接先贴出-sql-查询语句如下" class="headerlink" title="直接先贴出 sql 查询语句如下"></a>直接先贴出 sql 查询语句如下</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT`assets_device`.* FROM((SELECT`id`,`sub_category_id`,`number`,`name`,`location`,`officeBuilding`,`area`,`department`,`rack`,`rack_pos` FROM`assets_device` WHERE`department` IN ( 6, 7, 17, 20 ) AND `assets_device`.`deleted_at` IS NULL ) UNION(SELECT`id`,`sub_category_id`,`number`,`name`,`location`,`officeBuilding`,`area`,`department`,`rack`,`rack_pos` FROM`assets_device` WHERE`area` IN ( 13, 14 ) AND `assets_device`.`deleted_at` IS NULL ) ) AS assets_device<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现代码如下所示"><a href="#实现代码如下所示" class="headerlink" title="实现代码如下所示"></a>实现代码如下所示</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php">    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getChoiceAssetsByErOrDt</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$input</span> <span class="token operator">=</span> <span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token function">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 机房 id 数组</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$input</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'er'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$input</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'er'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token variable">$erIds</span> <span class="token operator">=</span> <span class="token variable">$input</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'er'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token variable">$erIds</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">','</span><span class="token punctuation">,</span><span class="token variable">$input</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'er'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token variable">$erIds</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 科室 id 数组</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$input</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dt'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$input</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dt'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token variable">$dtIds</span> <span class="token operator">=</span> <span class="token variable">$input</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dt'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token variable">$dtIds</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">','</span><span class="token punctuation">,</span><span class="token variable">$input</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dt'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token variable">$dtIds</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// id, 子分类id, 资产编号, 资产名称, 位置, 办公楼, 机房, 科室, 机柜, 机柜U数</span>        <span class="token variable">$field</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'sub_category_id'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'number'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'location'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'officeBuilding'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'area'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'department'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'rack'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'rack_pos'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$erIds</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">// 根据机房 id 查询资产</span>            <span class="token variable">$erModel</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">deviceModel</span><span class="token operator">-&gt;</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token variable">$field</span><span class="token punctuation">)</span>                <span class="token operator">-&gt;</span><span class="token function">whereIn</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'area'</span><span class="token punctuation">,</span><span class="token variable">$erIds</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$dtIds</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">// 根据科室 id 查询资产</span>            <span class="token variable">$dtModel</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">deviceModel</span><span class="token operator">-&gt;</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token variable">$field</span><span class="token punctuation">)</span>                <span class="token operator">-&gt;</span><span class="token function">whereIn</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'department'</span><span class="token punctuation">,</span><span class="token variable">$dtIds</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$model</span> <span class="token operator">=</span> <span class="token variable">$dtModel</span><span class="token operator">-&gt;</span><span class="token function">union</span><span class="token punctuation">(</span><span class="token variable">$erModel</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 注意合并参数时 $subQuery 必须是 \Illuminate\Database\Query\Builder 类型</span><span class="token comment">// 如果是 \Illuminate\Database\Eloquent\Builder 类型的，用 getQuery() 方法</span>        <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">deviceModel</span><span class="token operator">-&gt;</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'sub_category'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'zone'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'office_building'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'engineroom'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'department'</span><span class="token punctuation">)</span>                                    <span class="token operator">-&gt;</span><span class="token function">mergeBindings</span><span class="token punctuation">(</span><span class="token variable">$model</span><span class="token operator">-&gt;</span><span class="token function">getQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                    <span class="token operator">-&gt;</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"assets_device.*"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                                    <span class="token operator">-&gt;</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name static-context">DB</span><span class="token operator">::</span><span class="token function">raw</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"(<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$model</span><span class="token operator">-&gt;</span><span class="token function">toSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>) as assets_device"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                    <span class="token operator">-&gt;</span><span class="token function">withTrashed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                    <span class="token operator">-&gt;</span><span class="token function">orderBy</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'assets_device.id'</span><span class="token punctuation">)</span>                                    <span class="token operator">-&gt;</span><span class="token function">paginate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                                    <span class="token operator">-&gt;</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 以下代码如果使用 transformer 的话，就不需要写，直接可以在 transformer 里面转换</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'data'</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token operator">&amp;</span><span class="token variable">$val</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$val</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'department_name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'department'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$val</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'department'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>            <span class="token variable">$val</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'sub_category_name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'sub_category'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$val</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'sub_category'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>            <span class="token variable">$val</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'zone_name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'zone'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$val</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'zone'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>            <span class="token variable">$val</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'office_building_name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'office_building'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$val</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'office_building'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'engineroom'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token variable">$erdt</span> <span class="token operator">=</span> <span class="token variable">$val</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'engineroom'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'department'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token variable">$erdt</span> <span class="token operator">=</span> <span class="token variable">$val</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'department'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token variable">$erdt</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$val</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'erdt'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$erdt</span><span class="token punctuation">;</span>            <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'department'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'sub_category'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'zone'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'office_building'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'engineroom'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$val</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'department'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$data</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>laravel 性能优化</title>
      <link href="posts/183ed0df.html"/>
      <url>posts/183ed0df.html</url>
      
        <content type="html"><![CDATA[<h1 id="laravel-性能优化"><a href="#laravel-性能优化" class="headerlink" title="laravel 性能优化"></a>laravel 性能优化</h1><h2 id="composer-优化"><a href="#composer-优化" class="headerlink" title="composer 优化"></a>composer 优化</h2><p>此命令会把 <code>PSR-0</code> 和 <code>PSR-4</code> 转化为一个映射表，来提高类的加载速度</p><pre class="line-numbers language-none"><code class="language-none">composer dump-autoload --optimize<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装-Debugbar"><a href="#安装-Debugbar" class="headerlink" title="安装 Debugbar"></a>安装 Debugbar</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">composer</span> require <span class="token string">"barryvdh/laravel-debugbar:~3.2"</span> <span class="token parameter variable">--dev</span><span class="token comment"># 生成配置文件</span>php artisan vendor:publish <span class="token parameter variable">--provider</span><span class="token operator">=</span><span class="token string">"Barryvdh\Debugbar\ServiceProvider"</span><span class="token comment"># 编辑 config/debugbar.php 将 enable 得值设置为</span><span class="token string">'enable'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> env<span class="token punctuation">(</span><span class="token string">'APP_DEBUG'</span>, <span class="token boolean">false</span><span class="token punctuation">)</span>,<span class="token comment"># 并在 .env 配置文件中开启</span><span class="token assign-left variable">APP_DEBUG</span><span class="token operator">=</span>true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="laravel-配置缓存"><a href="#laravel-配置缓存" class="headerlink" title="laravel 配置缓存"></a>laravel 配置缓存</h2><blockquote><p>注意：如果你的配置信息里存在闭包，执行以上命令时将会报错：Your configuration files are not serializable 。解决办法是改写闭包函数为一般的函数，或者改写为类方法。</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置配置缓存，会生成 bootstrap/cache/config.php 文件</span>php artisan config:cache<span class="token comment"># 清空配置缓存，也可以直接删除 bootstrap/cache/config.php 文件来清除</span>php artisan config:clear<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 手动创建 200 个配置信息</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">seq</span> <span class="token parameter variable">-f</span> <span class="token string">"app%03g.php"</span> <span class="token number">1</span> <span class="token number">200</span><span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token function">cp</span> ./config/app.php ./config/<span class="token variable">$i</span><span class="token punctuation">;</span> <span class="token keyword">done</span><span class="token comment"># 清除掉 bootstrap/cache/config.php 配置缓存文件</span>php artisan config:clear<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="laravel-路由缓存"><a href="#laravel-路由缓存" class="headerlink" title="laravel 路由缓存"></a>laravel 路由缓存</h2><blockquote><p>基于闭包的路由无法被缓存。要使用路由缓存。你需要将任何闭包路由转换成控制器路由。</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置路由缓存</span>php artisan route:cache<span class="token comment"># 清除路由缓存</span>php artisan route:clear<span class="token comment"># 也可以直接删除 bootstrap/cache/routes.php 缓存文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>路由统计</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">php artisan route:list <span class="token operator">|</span> <span class="token function">wc</span> <span class="token parameter variable">-l</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{print $1 - 4}'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成 500 个测试路由</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">seq</span> <span class="token parameter variable">-f</span> <span class="token string">"%03g"</span> <span class="token number">1</span> <span class="token number">500</span><span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token builtin class-name">echo</span> <span class="token string">"Route::get('test<span class="token variable">$i</span>/{id}/{query}','Auth\LoginController@testtest<span class="token variable">$i</span>')-&gt;name('test<span class="token variable">$i</span>')-&gt;middleware('auth');"</span> <span class="token operator">&gt;&gt;</span> routes/web.php<span class="token punctuation">;</span> <span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="类映射加载优化"><a href="#类映射加载优化" class="headerlink" title="类映射加载优化"></a>类映射加载优化</h2><p>在 <code>laravel 6.x</code> 中，会生成 <code>bootstrap/cache/config.php</code> 和 <code>bootstrap/cache/packages.php</code> 和 <code>bootstrap/cache/routes.php</code> 和 <code>bootstrap/cache/services.php</code> 这四个文件。</p><p>services.php 的作用，是把 laravel 在启动过程中需要加载的文件，命名空间和文件路径一个个列举在一个数组中，当 laravel 启动的时候，直接通过这个数组来读取文件。</p><p>packages.php 则是将 laravel 扩展包的 provider 和 facade 整理到一个文件里面，在 laravel 启动加载的时候，直接按照这里的数组进行加载。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">php artisan optimize<span class="token comment"># 清空类映射</span>php artisan optimize:clear<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="合理划分子视图"><a href="#合理划分子视图" class="headerlink" title="合理划分子视图"></a>合理划分子视图</h2><blockquote><p>建议不要子模版嵌套子模板，因为可能会出现 N + 1 的问题</p></blockquote><h2 id="会话驱动选择-redis，并且必须选择-phpredis-类库"><a href="#会话驱动选择-redis，并且必须选择-phpredis-类库" class="headerlink" title="会话驱动选择 redis，并且必须选择 phpredis 类库"></a>会话驱动选择 redis，并且必须选择 phpredis 类库</h2><h2 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h2><h3 id="如何在-laravel-中添加索引？"><a href="#如何在-laravel-中添加索引？" class="headerlink" title="如何在 laravel 中添加索引？"></a>如何在 laravel 中添加索引？</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>$table-&gt;primary(‘id’);</td><td>添加主键</td></tr><tr><td>$table-&gt;primary([‘id’, ‘parent_id’]);</td><td>添加复合键</td></tr><tr><td>$table-&gt;unique(‘email’);</td><td>添加唯一索引</td></tr><tr><td>$table-&gt;index(‘state’);</td><td>添加普通索引</td></tr><tr><td>$table-&gt;spatialIndex(‘location’);</td><td>添加地理位置信息索引（不支持 SQLite）</td></tr></tbody></table><p>添加全文索引时，使用</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token class-name static-context">DB</span><span class="token operator">::</span><span class="token function">statement</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ALTER TABLE posts ADD FULLTEXT full(name, content)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改索引名称</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">renameIndex</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'from'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'to'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="如何在-laravel-中删除索引？"><a href="#如何在-laravel-中删除索引？" class="headerlink" title="如何在 laravel 中删除索引？"></a>如何在 laravel 中删除索引？</h3><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>$table-&gt;dropPrimary(‘users_id_primary’);</td><td>从 users 表中删除主键</td></tr><tr><td>$table-&gt;dropUnique(‘users_email_unique’);</td><td>从 users 表中删除唯一索引</td></tr><tr><td>$table-&gt;dropIndex(‘geo_state_index’);</td><td>从 geo 表中删除基本索引</td></tr><tr><td>$table-&gt;dropSpatialIndex(‘geo_location_spatialindex’);</td><td>从 geo 表中删除空间索引（不支持 SQLite）</td></tr></tbody></table><h2 id="资源压缩（JS-CSS）"><a href="#资源压缩（JS-CSS）" class="headerlink" title="资源压缩（JS/CSS）"></a>资源压缩（JS/CSS）</h2><ul><li>开发环境时，执行</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> run dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>生产环境时，执行 （只有在生产环境中才会对内容进行压缩）</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> run prod<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="压缩-HTML"><a href="#压缩-HTML" class="headerlink" title="压缩 HTML"></a>压缩 HTML</h2><pre class="line-numbers language-none"><code class="language-none"># 安装 laravel-page-speed 扩展包，来去除 html 注释、回车换行符和多余的空格composer require renatomarinho/laravel-page-speed# 发布配置文件php artisan vendor:publish --provider="RenatoMarinho\LaravelPageSpeed\ServiceProvider"# 在 Kenel.php =&gt; $middlewareGroups =&gt; web 中添加中间件\RenatoMarinho\LaravelPageSpeed\Middleware\ElideAttributes::class, // 移除无用的 HTML 属性\RenatoMarinho\LaravelPageSpeed\Middleware\RemoveComments::class, // 移除注释\RenatoMarinho\LaravelPageSpeed\Middleware\TrimUrls::class,  // 移除不必要的 URL 前缀\RenatoMarinho\LaravelPageSpeed\Middleware\CollapseWhitespace::class, // 处理换行符和空格<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="swoole-加速"><a href="#swoole-加速" class="headerlink" title="swoole 加速"></a>swoole 加速</h2><pre class="line-numbers language-none"><code class="language-none"># 安装 laravlescomposer require hhxsv5/laravel-s# 发布配置php artisan laravels publish# 启动 laravelsphp bin/laravels start# 后台守护进程执行php bin/laravels start -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>nginx 配置 laravels</p><pre class="line-numbers language-none"><code class="language-none">upstream swoole {    # 如果是使用 laradock ，请将 127.0.0.1 更改为 workspace    server 127.0.0.1:5200 weight=5 max_fails=3 fail_timeout=30s;    keepalive 16;}server {    listen 80;    listen 443 ssl http2;    server_name larablog.test;    root /var/www/larablog/public;    index index.html index.htm index.php;    charset utf-8;    location / {        try_files $uri @laravels;    }    location = /favicon.ico { access_log off; log_not_found off; }    location = /robots.txt  { access_log off; log_not_found off; }    error_log /var/log/nginx/larablog_error.log;    access_log /var/log/nginx/larablog_access.log;    sendfile off;    client_max_body_size 100m;    location @laravels {        # proxy_connect_timeout 60s;        # proxy_send_timeout 60s;        # proxy_read_timeout 120s;        proxy_http_version 1.1;        proxy_set_header Connection "";        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header X-Real-PORT $remote_port;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        proxy_set_header Host $http_host;        proxy_set_header Scheme $scheme;        proxy_set_header Server-Protocol $server_protocol;        proxy_set_header Server-Name $server_name;        proxy_set_header Server-Addr $server_addr;        proxy_set_header Server-Port $server_port;        proxy_pass http://swoole;    }    location ~ /\.ht {        deny all;    }    ssl_certificate     /etc/nginx/ssl/larablog.test.crt;    ssl_certificate_key /etc/nginx/ssl/larablog.test.key;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果是使用 laradock 的话，还需要将 <code>.env</code> 添加监听地址为 <code>workspace</code></p><pre class="line-numbers language-none"><code class="language-none">LARAVELS_LISTEN_IP=workspace# 设置后台启动 laravelS 服务，如果需要查看则执行 ps -ef|grep laravels 命令LARAVELS_DAEMONIZE=true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全新服务器使用 lnmp 搭建 laravel 项目</title>
      <link href="posts/73f4393e.html"/>
      <url>posts/73f4393e.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用-lnmp-搭建-laravel-项目"><a href="#使用-lnmp-搭建-laravel-项目" class="headerlink" title="使用 lnmp 搭建 laravel 项目"></a>使用 lnmp 搭建 laravel 项目</h1><ul><li>打包源码</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 先在旧服务器上面打包源代码</span><span class="token function">tar</span> <span class="token parameter variable">-czvf</span> hello-world.tar.gz hello-world<span class="token comment"># 然后将源码直接复制到新的服务器上面</span><span class="token function">scp</span> hello-world.tar.gz root@192.168.1.1:/home/wwwroot/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>安装 screen</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">screen</span><span class="token function">screen</span> <span class="token parameter variable">-S</span> lnmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>下载安装 lnmp 环境</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://soft.vpser.net/lnmp/lnmp1.7-full.tar.gz<span class="token function">tar</span> <span class="token parameter variable">-xzvf</span> lnmp1.7-full.tar.gz<span class="token builtin class-name">cd</span> lnmp1.7-full/<span class="token comment"># 安装 lnmp</span>./install.sh lnmp<span class="token comment"># 选择了 php7.4 mysql5.7</span><span class="token comment"># 检查 lnmp 是否安装成功</span>lnmp status<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>安装 swoole 扩展</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装 swoole 源码</span><span class="token function">wget</span> https://github.com/swoole/swoole-src/archive/v4.6.4.tar.gz<span class="token comment"># 解压缩源码</span><span class="token function">tar</span> <span class="token parameter variable">-xzvf</span> v4.6.4.tar.gz<span class="token comment"># 生成 configure 文件</span>/usr/local/php/bin/phpize<span class="token comment"># 编译配置项</span>./configure --with-php-config<span class="token operator">=</span>/usr/local/php/bin/php-config --enable-openssl --enable-http2 --enable-sockets --enable-mysqlnd<span class="token comment"># 编译安装</span><span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span class="token comment"># 查看 php.ini 配置文件</span>php <span class="token parameter variable">--ini</span><span class="token comment"># 开启 swoole 扩展</span><span class="token function">vim</span> /usr/local/php/etc/php.ini<span class="token comment"># 在 php.ini 配置文件中开启 swoole 扩展</span><span class="token assign-left variable">extension</span><span class="token operator">=</span>swoole.so<span class="token comment"># 或者写绝对路径</span><span class="token assign-left variable">extension</span><span class="token operator">=</span>/usr/local/php/lib/php/extensions/no-debug-non-zts-20190902/swoole.so<span class="token comment"># 重启 php</span>/etc/init.d/php-fpm restart<span class="token comment"># 查看扩展是否已经开启</span>php <span class="token parameter variable">-m</span>  php <span class="token parameter variable">--ri</span> swoole<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>安装 redis</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载最新稳定版 6.2.1 源码</span><span class="token function">wget</span> https://download.redis.io/releases/redis-6.2.1.tar.gz<span class="token comment"># 解压缩</span><span class="token function">tar</span> xzf redis-6.2.1.tar.gz<span class="token builtin class-name">cd</span> redis-6.2.1<span class="token comment"># 编译安装</span><span class="token function">make</span><span class="token comment"># 启动 redis 服务端</span>src/redis-server （开启后台任务 src/redis-server <span class="token operator">&amp;</span>）<span class="token comment"># 使用 redis 客户端作为测试</span>src/redis-cli 或者 <span class="token builtin class-name">cd</span> src <span class="token operator">&amp;&amp;</span> ./redis-cli<span class="token comment"># 将 redis-cli 加入到环境变量中</span><span class="token function">cp</span> ~/software/redis-6.2.1/src/redis-cli /usr/local/bin/redis-cli<span class="token comment"># 设置执行权限</span><span class="token function">chmod</span> u+x redis-cli<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>安装 php redis 扩展</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装 redis 扩展</span><span class="token function">wget</span> https://github.com/phpredis/phpredis/archive/5.3.3.tar.gz<span class="token function">tar</span> <span class="token parameter variable">-xzvf</span> <span class="token number">5.3</span>.3.tar.gz<span class="token builtin class-name">cd</span> phpredis-5.3.3<span class="token comment"># 生成 configure 文件</span>/usr/local/php/bin/phpize<span class="token comment"># 设置配置项</span>./configure --with-php-config<span class="token operator">=</span>/usr/local/php/bin/php-config<span class="token comment"># 编译安装</span><span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span class="token comment"># 重启 php</span>/etc/init.d/php-fpm restart<span class="token comment"># 查看扩展是否已经开启</span>php <span class="token parameter variable">-m</span>  php <span class="token parameter variable">--ri</span> redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>安装 npm</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token function">npm</span><span class="token function">npm</span> config <span class="token builtin class-name">set</span> <span class="token assign-left variable">registry</span><span class="token operator">=</span>https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>配置项目</li></ul><p>vim /usr/local/nginx/conf/vhost/hello-world.com.conf</p><p>添加 nginx 配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">server    <span class="token punctuation">{</span>        listen <span class="token number">80</span><span class="token punctuation">;</span>        <span class="token comment">#listen [::]:80;</span>        server_name www.hello-world.com <span class="token punctuation">;</span>        index index.html index.htm index.php default.html default.htm default.php<span class="token punctuation">;</span>        root  /home/wwwroot/hello-world/public<span class="token punctuation">;</span>        include rewrite/none.conf<span class="token punctuation">;</span>        include enable-php.conf<span class="token punctuation">;</span>        location ~ .*<span class="token punctuation">\</span>.<span class="token punctuation">(</span>gif<span class="token operator">|</span>jpg<span class="token operator">|</span>jpeg<span class="token operator">|</span>png<span class="token operator">|</span>bmp<span class="token operator">|</span>swf<span class="token punctuation">)</span>$        <span class="token punctuation">{</span>            expires      30d<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        location ~ .*<span class="token punctuation">\</span>.<span class="token punctuation">(</span>js<span class="token operator">|</span>css<span class="token punctuation">)</span>?$        <span class="token punctuation">{</span>            expires      12h<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        location ~ /.well-known <span class="token punctuation">{</span>            allow all<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        location ~ /<span class="token punctuation">\</span>.        <span class="token punctuation">{</span>            deny all<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        location / <span class="token punctuation">{</span>          try_files <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ /index.php?<span class="token variable">$query_string</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        access_log  /home/wwwlogs/hello-world.com.access.log<span class="token punctuation">;</span>        error_log  /home/wwwlogs/hello-world.com.error.log<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    server <span class="token punctuation">{</span>  listen <span class="token number">80</span><span class="token punctuation">;</span>  server_name hello-world.com<span class="token punctuation">;</span>  rewrite ^/<span class="token punctuation">(</span>.*<span class="token punctuation">)</span> http://www.hello-world.com/<span class="token variable">$1</span> permanent<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>删除防跨文件夹设置<br>vim /usr/local/nginx/conf/fastcgi.conf<br>注释掉<br><code>fastcgi_param PHP_ADMIN_VALUE "open_basedir=$document_root/:/tmp/:/proc/";</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chattr <span class="token parameter variable">-i</span> /home/wwwroot/hello-world/public/.user.ini<span class="token function">rm</span> <span class="token parameter variable">-rf</span> /home/wwwroot/hello-world/public/.user.ini<span class="token comment"># 重启 php-fpm</span>/etc/init.d/php-fpm restart<span class="token comment"># 重新加载 nginx</span>/etc/init.d/nginx reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>vim .env</p><p>更改 mysql 数据库、redis连接信息、以及配置域名</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">php artisan jwt:secretphp artisan key:generate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LNMP </tag>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php 抽奖算法（适合九宫格和大转盘）</title>
      <link href="posts/43b98a2e.html"/>
      <url>posts/43b98a2e.html</url>
      
        <content type="html"><![CDATA[<h1 id="php-抽奖算法（适合九宫格和大转盘）"><a href="#php-抽奖算法（适合九宫格和大转盘）" class="headerlink" title="php 抽奖算法（适合九宫格和大转盘）"></a>php 抽奖算法（适合九宫格和大转盘）</h1><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/*  * 不同概率的抽奖原理就是把0到*（比重总数）的区间分块 * 分块的依据是物品占整个的比重，再根据随机数种子来产生0-* 中的某个数 * 判断这个数是落在哪个区间上，区间对应的就是抽到的那个物品。 * 随机数理论上是概率均等的，那么相应的区间所含数的多少就体现了抽奖物品概率的不同。 */</span>      <span class="token comment">/**     * 抽奖方法     * @return [array] [抽奖情况]     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">doDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">// 奖品数组</span>        <span class="token variable">$proArr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>            <span class="token comment">// id =&gt; 奖品等级， name =&gt; 奖品名称, v =&gt; 奖品权重</span>            <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id'</span><span class="token operator">=&gt;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'name'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'超级奖品'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'v'</span><span class="token operator">=&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id'</span><span class="token operator">=&gt;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'name'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'特等奖'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'v'</span><span class="token operator">=&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id'</span><span class="token operator">=&gt;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'name'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'一等奖'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'v'</span><span class="token operator">=&gt;</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id'</span><span class="token operator">=&gt;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'name'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'二等奖'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'v'</span><span class="token operator">=&gt;</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id'</span><span class="token operator">=&gt;</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'name'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'三等奖'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'v'</span><span class="token operator">=&gt;</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id'</span><span class="token operator">=&gt;</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'name'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'四等奖'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'v'</span><span class="token operator">=&gt;</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id'</span><span class="token operator">=&gt;</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'name'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'五等奖'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'v'</span><span class="token operator">=&gt;</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id'</span><span class="token operator">=&gt;</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'name'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'六等奖'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'v'</span><span class="token operator">=&gt;</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id'</span><span class="token operator">=&gt;</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'name'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'七等奖'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'v'</span><span class="token operator">=&gt;</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id'</span><span class="token operator">=&gt;</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'name'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'八等奖'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'v'</span><span class="token operator">=&gt;</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id'</span><span class="token operator">=&gt;</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'name'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'没中奖'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'v'</span><span class="token operator">=&gt;</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 奖品等级奖品权重数组</span>        <span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$proArr</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=&gt;</span> <span class="token variable">$val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$val</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$val</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 中奖 id</span>        <span class="token variable">$rid</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">get_rand</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**模拟抽奖测试**/</span><span class="token comment">/*        $i = 0;        while ( $i &lt; 10000) {          $rid = $this-&gt;get_rand($arr);          $res[] = $rid;          $i++;        }        // 统计奖品出现次数        $result = array_count_values($res);        asort($result);        foreach ($result as $id =&gt; $times) {            foreach ($proArr as $gifts) {                if($id == $gifts['id']){                    $response[$gifts['name']] = $times;                }            }        }        dump($response);        die;*/</span>        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 中奖礼品</span>        <span class="token variable">$result</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'yes'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$proArr</span><span class="token punctuation">[</span><span class="token variable">$rid</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 从原奖品数组中剔除已经中奖礼品</span>        <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$proArr</span><span class="token punctuation">[</span><span class="token variable">$rid</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 打乱数组排序</span>        <span class="token function">shuffle</span><span class="token punctuation">(</span><span class="token variable">$proArr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$proArr</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$result</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'no'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$proArr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// foreach ($proArr as $k =&gt; $v) {</span>        <span class="token comment">//     // 没中奖礼品</span>        <span class="token comment">//     $result['no'][] = $v['name'];</span>        <span class="token comment">// }</span>        <span class="token function">dump</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 抽奖算法     * @param  array  $proArr 奖品等级奖品权重数组     * @return [int]         中奖奖品等级     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">get_rand</span><span class="token punctuation">(</span><span class="token variable">$proArr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$proArr</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">die</span><span class="token punctuation">;</span>        <span class="token variable">$rid</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>        <span class="token comment">// 概率数组的总权重</span>        <span class="token variable">$proSum</span> <span class="token operator">=</span> <span class="token function">array_sum</span><span class="token punctuation">(</span><span class="token variable">$proArr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 概率数组循环</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$proArr</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=&gt;</span> <span class="token variable">$proCur</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 从 1 到概率总数中任意取值</span>            <span class="token variable">$randNum</span> <span class="token operator">=</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">$proSum</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 判断随机数是否在概率权重中</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$randNum</span> <span class="token operator">&lt;=</span> <span class="token variable">$proCur</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">// 取出奖品 id</span>                <span class="token variable">$rid</span> <span class="token operator">=</span> <span class="token variable">$k</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment">// 如果随机数不在概率权限中，则不断缩小总权重，直到从奖品数组中取出一个奖品</span>                <span class="token variable">$proSum</span> <span class="token operator">-=</span> <span class="token variable">$proCur</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$proArr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$rid</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试方法：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$proArr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>        <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id'</span><span class="token operator">=&gt;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'name'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'特等奖'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'v'</span><span class="token operator">=&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id'</span><span class="token operator">=&gt;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'name'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'一等奖'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'v'</span><span class="token operator">=&gt;</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id'</span><span class="token operator">=&gt;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'name'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'二等奖'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'v'</span><span class="token operator">=&gt;</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id'</span><span class="token operator">=&gt;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'name'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'三等奖'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'v'</span><span class="token operator">=&gt;</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id'</span><span class="token operator">=&gt;</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'name'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'四等奖'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'v'</span><span class="token operator">=&gt;</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id'</span><span class="token operator">=&gt;</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'name'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'没中奖'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'v'</span><span class="token operator">=&gt;</span><span class="token number">500</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$proArr</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=&gt;</span> <span class="token variable">$val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$val</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">// 概率数组的总权重</span>    <span class="token variable">$proSum</span> <span class="token operator">=</span> <span class="token function">array_sum</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 概率数组循环</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$arr</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=&gt;</span> <span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 从 1 到概率总数中任意取值</span>        <span class="token variable">$randNum</span> <span class="token operator">=</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">$proSum</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$aa</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$randNum</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'+'</span> <span class="token operator">.</span> <span class="token variable">$v</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'+'</span> <span class="token operator">.</span> <span class="token variable">$proSum</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$randNum</span> <span class="token operator">&lt;=</span> <span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$proArr</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">// 找到符合条件的值就跳出 foreach 循环</span>            <span class="token comment">// dump($result);</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$proSum</span> <span class="token operator">=</span> <span class="token variable">$proSum</span> <span class="token operator">-</span> <span class="token variable">$v</span><span class="token punctuation">;</span>            <span class="token variable">$bb</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$randNum</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'+'</span> <span class="token operator">.</span> <span class="token variable">$v</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'+'</span> <span class="token operator">.</span> <span class="token variable">$proSum</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">dump</span><span class="token punctuation">(</span><span class="token variable">$aa</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dump</span><span class="token punctuation">(</span><span class="token variable">$bb</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// // dump($result);</span>    <span class="token comment">// // dump(__DIR__);</span>    <span class="token comment">// $path = __DIR__ . DS . 'log';</span>    <span class="token comment">// if(!is_dir($path)){</span>    <span class="token comment">//     mkdir($path);</span>    <span class="token comment">// }</span>    <span class="token comment">// $fileName = $path . DS . 'log.txt';</span>    <span class="token comment">// 创建文件和打开文件的函数都是 fopen</span>    <span class="token comment">// $cFile = fopen($fileName,'a+');</span>    <span class="token comment">// $a = json_encode($aa) . "\r\n";</span>    <span class="token comment">// $b = json_encode($bb) . "\r\n";</span>    <span class="token comment">// fwrite($cFile,$a);</span>    <span class="token comment">// fwrite($cFile,$b);</span>    <span class="token comment">// fclose($cFile);</span>    <span class="token comment">// 读文件</span>    <span class="token comment">// $lines = file($fileName);</span>    <span class="token comment">// foreach ($lines as $key =&gt; $value) {</span>    <span class="token comment">//     dump($value.'555555555');</span>    <span class="token comment">// }</span>    <span class="token comment">// dump($lines);</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下代码也是意义程度上相同的代码，但是这种算法用的不多</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/**我是d1-d2：0-1我是d1-d2：1-51我是d1-d2：51-56我是d1-d2：56-156我是d1-d2：156-166我是d1-d2：166-166我是d1-d2：166-666我是d1-d2：666-688我是d1-d2：688-700我是d1-d2：700-900**/</span><span class="token keyword">function</span> <span class="token function-definition function">get_rand</span><span class="token punctuation">(</span><span class="token variable">$proArr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$proArr</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=&gt;</span> <span class="token variable">$val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$val</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token variable">$proSum</span> <span class="token operator">=</span> <span class="token function">array_sum</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 计算总权重</span>    <span class="token variable">$randNum</span> <span class="token operator">=</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">$proSum</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$d1</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token variable">$d2</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$d2</span> <span class="token operator">+=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$d1</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token variable">$d1</span> <span class="token operator">+=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$randNum</span> <span class="token operator">&gt;=</span> <span class="token variable">$d1</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$randNum</span> <span class="token operator">&lt;=</span> <span class="token variable">$d2</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$proArr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">unset</span> <span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开启百分百中奖模式</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token comment">/**    *  $prize_arr 参与抽奖人员数据    *  id: 一般是成员ID    *  name 姓名    *  v   得奖概率    ***/</span>    <span class="token variable">$prize_arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>         <span class="token string single-quoted-string">'0'</span> <span class="token operator">=&gt;</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id'</span><span class="token operator">=&gt;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'name'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'小王'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'v'</span><span class="token operator">=&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token string single-quoted-string">'1'</span> <span class="token operator">=&gt;</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id'</span><span class="token operator">=&gt;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'name'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'小李'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'v'</span><span class="token operator">=&gt;</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token string single-quoted-string">'2'</span> <span class="token operator">=&gt;</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id'</span><span class="token operator">=&gt;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'name'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'小张'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'v'</span><span class="token operator">=&gt;</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token string single-quoted-string">'3'</span> <span class="token operator">=&gt;</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id'</span><span class="token operator">=&gt;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'name'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'小二'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'v'</span><span class="token operator">=&gt;</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token string single-quoted-string">'4'</span> <span class="token operator">=&gt;</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id'</span><span class="token operator">=&gt;</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'name'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'小菜'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'v'</span><span class="token operator">=&gt;</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token string single-quoted-string">'6'</span> <span class="token operator">=&gt;</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id'</span><span class="token operator">=&gt;</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'name'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'小范'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'v'</span><span class="token operator">=&gt;</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token string single-quoted-string">'7'</span> <span class="token operator">=&gt;</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id'</span><span class="token operator">=&gt;</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'name'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'小范01'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'v'</span><span class="token operator">=&gt;</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token string single-quoted-string">'8'</span> <span class="token operator">=&gt;</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id'</span><span class="token operator">=&gt;</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'name'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'小范02'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'v'</span><span class="token operator">=&gt;</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token string single-quoted-string">'9'</span> <span class="token operator">=&gt;</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id'</span><span class="token operator">=&gt;</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'name'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'小范03'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'v'</span><span class="token operator">=&gt;</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token string single-quoted-string">'10'</span> <span class="token operator">=&gt;</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id'</span><span class="token operator">=&gt;</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'name'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'小范04'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'v'</span><span class="token operator">=&gt;</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token string single-quoted-string">'11'</span> <span class="token operator">=&gt;</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id'</span><span class="token operator">=&gt;</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'name'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'小范05'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'v'</span><span class="token operator">=&gt;</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token string single-quoted-string">'12'</span> <span class="token operator">=&gt;</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id'</span><span class="token operator">=&gt;</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'name'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'小范06'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'v'</span><span class="token operator">=&gt;</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token string single-quoted-string">'13'</span> <span class="token operator">=&gt;</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id'</span><span class="token operator">=&gt;</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'name'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'小范07'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'v'</span><span class="token operator">=&gt;</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token string single-quoted-string">'14'</span> <span class="token operator">=&gt;</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id'</span><span class="token operator">=&gt;</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'name'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'小范08'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'v'</span><span class="token operator">=&gt;</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token string single-quoted-string">'15'</span> <span class="token operator">=&gt;</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id'</span><span class="token operator">=&gt;</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'name'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'小范09'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'v'</span><span class="token operator">=&gt;</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token string single-quoted-string">'16'</span> <span class="token operator">=&gt;</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'id'</span><span class="token operator">=&gt;</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'name'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'小范10'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'v'</span><span class="token operator">=&gt;</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$prize_arr</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=&gt;</span> <span class="token variable">$val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$val</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'v'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>         <span class="token variable">$total_num</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'8'</span><span class="token punctuation">;</span> <span class="token comment">//设定得中奖人数量</span>        <span class="token variable">$temp_rest</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token variable">$total_num</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$rid</span> <span class="token operator">=</span> <span class="token function">get_rand</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">,</span><span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//根据概率获取人员ID</span>        <span class="token variable">$temp_rest</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token variable">$prize_arr</span><span class="token punctuation">[</span><span class="token variable">$rid</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//中奖项</span>        <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$prize_arr</span><span class="token punctuation">[</span><span class="token variable">$rid</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$rid</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$temp_rest</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//得出结果</span>    <span class="token comment">/****    *   得出当前中奖人    *   $is_status是否开启概率为100必中: 默认不开启     ***/</span>    <span class="token keyword">function</span> <span class="token function-definition function">get_rand</span><span class="token punctuation">(</span><span class="token variable">$proArr</span><span class="token punctuation">,</span><span class="token variable">$is_status</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$is_status</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$rest</span> <span class="token operator">=</span> <span class="token function">get_100</span><span class="token punctuation">(</span><span class="token variable">$proArr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//调用获取100命中</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>             <span class="token variable">$rest</span> <span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$rest</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$rest</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment">//概率数组的总概率精度</span>            <span class="token variable">$proSum</span> <span class="token operator">=</span> <span class="token function">array_sum</span><span class="token punctuation">(</span><span class="token variable">$proArr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//概率数组循环</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$proArr</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=&gt;</span> <span class="token variable">$proCur</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 <span class="token variable">$randNum</span> <span class="token operator">=</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token variable">$proSum</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$randNum</span> <span class="token operator">&lt;=</span> <span class="token variable">$proCur</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                     <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$key</span><span class="token punctuation">;</span>                     <span class="token keyword">break</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                     <span class="token variable">$proSum</span> <span class="token operator">-=</span> <span class="token variable">$proCur</span><span class="token punctuation">;</span>                 <span class="token punctuation">}</span>               <span class="token punctuation">}</span>         <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$rest</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">unset</span> <span class="token punctuation">(</span><span class="token variable">$proArr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function-definition function">get_100</span><span class="token punctuation">(</span><span class="token variable">$arr_mast</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>         <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$arr_mast</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=&gt;</span> <span class="token variable">$value_mast</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$value_mast</span><span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$key</span><span class="token punctuation">;</span>                 <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                  <span class="token punctuation">}</span>         <span class="token keyword">unset</span> <span class="token punctuation">(</span><span class="token variable">$arr_mast</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 图片对称加解密</title>
      <link href="posts/8331d4d3.html"/>
      <url>posts/8331d4d3.html</url>
      
        <content type="html"><![CDATA[<h1 id="PHP-图片加解密"><a href="#PHP-图片加解密" class="headerlink" title="PHP 图片加解密"></a>PHP 图片加解密</h1><blockquote><p>可以将人员身份证图片通过修改字节加密，并且可将身份证信息也写入图片中</p></blockquote><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*** *                    .::::. *                  .::::::::. *                 :::::::::::  FUCK YOU *             ..:::::::::::' *           '::::::::::::' *             .:::::::::: *        '::::::::::::::.. *             ..::::::::::::. *           ``:::::::::::::::: *            ::::``:::::::::'        .:::. *           ::::'   ':::::'       .::::::::. *         .::::'      ::::     .:::::::'::::. *        .:::'       :::::  .:::::::::' ':::::. *       .::'        :::::.:::::::::'      ':::::. *      .::'         ::::::::::::::'         ``::::. *  ...:::           ::::::::::::'              ``::. * ```` ':.          ':::::::::'                  ::::.. *                    '.:::::'                    ':'````.. */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Encrypt</span> <span class="token punctuation">{</span><span class="token comment">/** * 图片对称加密 * * @param [string] $filePath 图片路径 * @return void */</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">enc</span><span class="token punctuation">(</span><span class="token variable">$filePath</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">// 文档中建议：为移植性考虑，强烈建议在用 fopen() 打开文件时总是使用 'b' 标记。</span><span class="token variable">$fileId</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$filePath</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'rb+'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 取出文件大小的字节数 （29124）</span><span class="token variable">$fileSize</span> <span class="token operator">=</span> <span class="token function">fileSize</span><span class="token punctuation">(</span><span class="token variable">$filePath</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 读取文件，返回所读取的字符串 （读出来的为二进制序列）</span><span class="token variable">$img</span> <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$fileId</span><span class="token punctuation">,</span> <span class="token variable">$fileSize</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用“无符号字符”，从二进制字符串对数据进行解包</span><span class="token comment">// （pack、unpack用法）https://segmentfault.com/a/1190000008305573</span><span class="token variable">$imgUnpack</span> <span class="token operator">=</span> <span class="token function">unpack</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'C*'</span><span class="token punctuation">,</span> <span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// $fileSize 长度的一维数组 [ 1=&gt;255, 2=&gt;216, 3=&gt;255, ……, 29124=&gt;217 ]</span><span class="token comment">// 关闭一个已打开的文件指针</span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fileId</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$tempArr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 自定义加密规则</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;=</span> <span class="token variable">$fileSize</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$value</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$value</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$value</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$byte</span> <span class="token operator">=</span> <span class="token variable">$imgUnpack</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 图片原始字节</span><span class="token variable">$byte</span> <span class="token operator">=</span> <span class="token variable">$byte</span> <span class="token operator">+</span> <span class="token variable">$value</span><span class="token punctuation">;</span> <span class="token comment">// 经过加密规则之后的字节</span><span class="token comment">// 打包成二进制字符串</span><span class="token variable">$tempArr</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">pack</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'C*'</span><span class="token punctuation">,</span> <span class="token variable">$byte</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$img</span> <span class="token operator">=</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$tempArr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将解包之后的一维数组装换成字符串</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$filePath</span><span class="token punctuation">,</span> <span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 重写图片</span><span class="token punctuation">}</span><span class="token comment">/** * 图片对称解密 * * @param [string] $filePath图片路径 * @return void */</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">dec</span><span class="token punctuation">(</span><span class="token variable">$filePath</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token variable">$fileId</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$filePath</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'rb+'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$fileSize</span> <span class="token operator">=</span> <span class="token function">filesize</span><span class="token punctuation">(</span><span class="token variable">$filePath</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$img</span> <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$fileId</span><span class="token punctuation">,</span> <span class="token variable">$fileSize</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$imgUnpack</span> <span class="token operator">=</span> <span class="token function">unpack</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'C*'</span><span class="token punctuation">,</span> <span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fileId</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$tempArr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 开始解密</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;=</span> <span class="token variable">$fileSize</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$value</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$value</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$value</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$byte</span> <span class="token operator">=</span> <span class="token variable">$imgUnpack</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$byte</span> <span class="token operator">=</span> <span class="token variable">$byte</span> <span class="token operator">-</span> <span class="token variable">$value</span><span class="token punctuation">;</span><span class="token variable">$tempArr</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">pack</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'C*'</span><span class="token punctuation">,</span> <span class="token variable">$byte</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$img</span> <span class="token operator">=</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$tempArr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$filePath</span><span class="token punctuation">,</span> <span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 图片追加信息 * * @param [string] $filePath图片路径 * @param [array] $cardmsg需要添加的信息数组 * @param [array] $separate分隔数组（类似于做一个加密分隔 key） * @return void */</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">encmsg</span><span class="token punctuation">(</span><span class="token variable">$filePath</span><span class="token punctuation">,</span> <span class="token variable">$cardmsg</span><span class="token punctuation">,</span> <span class="token variable">$separate</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">// 文档中建议：为移植性考虑，强烈建议在用 fopen() 打开文件时总是使用 'b' 标记。</span><span class="token variable">$fileId</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$filePath</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'rb+'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 取出文件大小的字节数 （29124）</span><span class="token variable">$fileSize</span> <span class="token operator">=</span> <span class="token function">fileSize</span><span class="token punctuation">(</span><span class="token variable">$filePath</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 读取文件，返回所读取的字符串 （读出来的为二进制序列）</span><span class="token variable">$img</span> <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$fileId</span><span class="token punctuation">,</span> <span class="token variable">$fileSize</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用“无符号字符”，从二进制字符串对数据进行解包</span><span class="token comment">// （pack、unpack用法）https://segmentfault.com/a/1190000008305573</span><span class="token variable">$imgUnpack</span> <span class="token operator">=</span> <span class="token function">unpack</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'C*'</span><span class="token punctuation">,</span> <span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// $fileSize 长度的一维数组 [ 1=&gt;255, 2=&gt;216, 3=&gt;255, ……, 29124=&gt;217 ]</span><span class="token comment">// 关闭一个已打开的文件指针</span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fileId</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 处理身份信息</span><span class="token variable">$cardmsgJson</span> <span class="token operator">=</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$cardmsg</span><span class="token punctuation">,</span> <span class="token constant">JSON_UNESCAPED_UNICODE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$cardmsgUnpack</span> <span class="token operator">=</span> <span class="token function">unpack</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'C*'</span><span class="token punctuation">,</span> <span class="token variable">$cardmsgJson</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 合并图片字节、自定义分隔数组（类似手动加 key 值）、身份信息字节</span><span class="token variable">$mergeArr</span> <span class="token operator">=</span> <span class="token function">array_merge</span><span class="token punctuation">(</span><span class="token variable">$imgUnpack</span><span class="token punctuation">,</span> <span class="token variable">$separate</span><span class="token punctuation">,</span> <span class="token variable">$cardmsgUnpack</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$pack</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$mergeArr</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=&gt;</span> <span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$pack</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">pack</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'C*'</span><span class="token punctuation">,</span> <span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$packStr</span> <span class="token operator">=</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$pack</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$filePath</span><span class="token punctuation">,</span> <span class="token variable">$packStr</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 重写图片</span><span class="token punctuation">}</span><span class="token comment">/** * 获取追加进图片的信息 * * @param [string] $filePath图片路径 * @param [array] $separate定义的分隔数组（分隔 key） * @return [string] 追加进的图片信息 */</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">decmsg</span> <span class="token punctuation">(</span><span class="token variable">$filePath</span><span class="token punctuation">,</span> <span class="token variable">$separate</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// 文档中建议：为移植性考虑，强烈建议在用 fopen() 打开文件时总是使用 'b' 标记。</span><span class="token variable">$fileId</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$filePath</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'rb+'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 取出文件大小的字节数 (29192)</span><span class="token variable">$fileSize</span> <span class="token operator">=</span> <span class="token function">fileSize</span><span class="token punctuation">(</span><span class="token variable">$filePath</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 读取文件，返回所读取的字符串 （读出来的为二进制序列）</span><span class="token variable">$img</span> <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$fileId</span><span class="token punctuation">,</span> <span class="token variable">$fileSize</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用“无符号字符”，从二进制字符串对数据进行解包</span><span class="token variable">$imgUnpack</span> <span class="token operator">=</span> <span class="token function">unpack</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'C*'</span><span class="token punctuation">,</span> <span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// $fileSize 长度的一维数组 [ 1=&gt;255, 2=&gt;216, 3=&gt;255, ……, 29192=&gt;217 ]</span><span class="token comment">// 关闭一个已打开的文件指针</span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fileId</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$imgUnpackStr</span> <span class="token operator">=</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token string single-quoted-string">','</span><span class="token punctuation">,</span><span class="token variable">$imgUnpack</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将一维数组转换为字符串</span><span class="token variable">$separateStr</span> <span class="token operator">=</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">','</span><span class="token punctuation">,</span> <span class="token variable">$separate</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将一维数组转换为字符串</span><span class="token variable">$imgAndCardmsgArr</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token variable">$separateStr</span><span class="token punctuation">,</span> <span class="token variable">$imgUnpackStr</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 以自定义分隔符分隔出图片字节和身份信息字节</span><span class="token variable">$cardmsgArr</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">','</span><span class="token punctuation">,</span> <span class="token variable">$imgAndCardmsgArr</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 取出身份信息字节</span><span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$cardmsgArr</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 去除身份信息字节首位空白 （字符串转数组时所留）</span><span class="token variable">$cardmsg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$cardmsgArr</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=&gt;</span> <span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$cardmsg</span> <span class="token operator">.=</span> <span class="token function">pack</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'C*'</span><span class="token punctuation">,</span> <span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 打包成二进制文件字符串</span><span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token variable">$cardmsg</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$encrypt</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Encrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$path</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'./001.jpg'</span><span class="token punctuation">;</span><span class="token variable">$separate</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">206</span><span class="token punctuation">,</span> <span class="token number">210</span><span class="token punctuation">,</span> <span class="token number">202</span><span class="token punctuation">,</span> <span class="token number">199</span><span class="token punctuation">,</span> <span class="token number">183</span><span class="token punctuation">,</span> <span class="token number">214</span><span class="token punctuation">,</span> <span class="token number">184</span><span class="token punctuation">,</span> <span class="token number">244</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 15字节</span><span class="token variable">$cardmsg</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'张三'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'gender'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'男'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'idcard'</span> <span class="token operator">=&gt;</span> <span class="token number">12345678910</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 53字节</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> 图片加解密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP AES 加解密</title>
      <link href="posts/ebe0be72.html"/>
      <url>posts/ebe0be72.html</url>
      
        <content type="html"><![CDATA[<h1 id="PHP-AES-加解密"><a href="#PHP-AES-加解密" class="headerlink" title="PHP AES 加解密"></a>PHP AES 加解密</h1><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Aesmcrypt</span><span class="token punctuation">{</span>    <span class="token comment">/**     * MCRYPT_ciphername 常量中的一个，或者是字符串值的算法名称。     */</span>    <span class="token keyword">const</span> <span class="token constant">CIPHER</span> <span class="token operator">=</span> <span class="token constant">MCRYPT_RIJNDAEL_128</span><span class="token punctuation">;</span>    <span class="token comment">/**     * MCRYPT_MODE_modename 常量中的一个，或以下字符串中的一个：     * "ecb"，"cbc"，"cfb"，"ofb"，"nofb" 和 "stream"。     */</span>    <span class="token keyword">const</span> <span class="token constant">MODE</span> <span class="token operator">=</span> <span class="token constant">MCRYPT_MODE_CBC</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 加密密钥。如果密钥长度不是该算法所能够支持的有效长度，则函数将会发出警告并返回 FALSE     */</span>    <span class="token keyword">const</span> <span class="token constant">KEY</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'bcb04b7e103a0cd8b54763051'</span><span class="token punctuation">;</span>    <span class="token comment">/**     * aes 加密     *     * @param string $str 需要加密的字符串     * @param string $key 加密用到的 key     * @return string 加密后的字符串     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">encryptAes</span> <span class="token punctuation">(</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">KEY</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$keyArr</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getLegalKey</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$encrypted</span> <span class="token operator">=</span> <span class="token function">mcrypt_encrypt</span><span class="token punctuation">(</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">CIPHER</span><span class="token punctuation">,</span> <span class="token variable">$keyArr</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">MODE</span><span class="token punctuation">,</span> <span class="token variable">$keyArr</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'iv'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$encrypted</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * aes 解密     *     * @param string $str 加密后的字符串     * @param string $key 加密用到的 key     * @return string 解密后的字符串     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">decryptAes</span> <span class="token punctuation">(</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">KEY</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$keyArr</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getLegalKey</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$decrypted</span> <span class="token operator">=</span> <span class="token function">rtrim</span><span class="token punctuation">(</span><span class="token function">mcrypt_decrypt</span><span class="token punctuation">(</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">CIPHER</span><span class="token punctuation">,</span> <span class="token variable">$keyArr</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'key'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">MODE</span><span class="token punctuation">,</span> <span class="token variable">$keyArr</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'iv'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"\0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$decrypted</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 生成有效的 key     *     * @param $key 原始 key     * @return array     */</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">getLegalKey</span> <span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 必须为16，24，32个字符</span>        <span class="token variable">$iv</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'key'</span> <span class="token operator">=&gt;</span> <span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'iv'</span> <span class="token operator">=&gt;</span> <span class="token variable">$iv</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> AES </tag>
            
            <tag> 加解密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 使用 CASE WHEN 进行批量更新 （当前基于 laravel 编写）</title>
      <link href="posts/eaf6377d.html"/>
      <url>posts/eaf6377d.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用-CASE-WHEN-进行批量更新-（当前基于-laravel-编写）"><a href="#使用-CASE-WHEN-进行批量更新-（当前基于-laravel-编写）" class="headerlink" title="使用 CASE WHEN 进行批量更新 （当前基于 laravel 编写）"></a>使用 CASE WHEN 进行批量更新 （当前基于 laravel 编写）</h1><h2 id="最终执行的-sql-语句为"><a href="#最终执行的-sql-语句为" class="headerlink" title="最终执行的 sql 语句为"></a>最终执行的 sql 语句为</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">UPDATE articles SET view_count = CASEWHEN id = 183 AND user_id = 1 THEN 6WHEN id = 182 AND user_id = 11 THEN 4WHEN id = 181 AND user_id = 15 THEN 4WHEN id = 180 AND user_id = 5 THEN 1ELSE view_count END,updated_at = CASE WHEN id = 183 AND user_id = 1 THEN '2020-11-06 06:44:58'WHEN id = 182 AND user_id = 11 THEN '2020-11-06 06:44:58'WHEN id = 181 AND user_id = 15 THEN '2020-11-06 06:44:58'WHEN id = 180 AND user_id = 5 THEN '2020-11-06 06:44:58'ELSE updated_at END<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="封装成方法为"><a href="#封装成方法为" class="headerlink" title="封装成方法为"></a>封装成方法为</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'batch_update'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * $where = [ 'id' =&gt; [180, 181, 182, 183], 'user_id' =&gt; [5, 15, 11, 1]];     * $needUpdateFields = [ 'view_count' =&gt; [11, 22, 33, 44], 'updated_at' =&gt; ['2019-11-06 06:44:58', '2019-11-30 19:59:34', '2019-11-05 11:58:41', '2019-12-13 01:27:59']];     *     * 最终执行的 sql 语句如下所示     *     * UPDATE articles SET     * view_count = CASE     * WHEN id = 183 AND user_id = 1 THEN 44     * WHEN id = 182 AND user_id = 11 THEN 33     * WHEN id = 181 AND user_id = 15 THEN 22     * WHEN id = 180 AND user_id = 5 THEN 11     * ELSE view_count END,     * updated_at = CASE     * WHEN id = 183 AND user_id = 1 THEN '2019-12-13 01:27:59'     * WHEN id = 182 AND user_id = 11 THEN '2019-11-05 11:58:41'     * WHEN id = 181 AND user_id = 15 THEN '2019-11-30 19:59:34'     * WHEN id = 180 AND user_id = 5 THEN '2019-11-06 06:44:58'     * ELSE updated_at END     *     *     * 批量更新数据     *     * @param string $tableName  需要更新的表名称     * @param array $where  需要更新的条件     * @param array $needUpdateFields  需要更新的字段     * @return bool|int  更新数据的条数     */</span>    <span class="token keyword">function</span> <span class="token function-definition function">batch_update</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$tableName</span><span class="token punctuation">,</span> <span class="token keyword type-hint">array</span> <span class="token variable">$where</span><span class="token punctuation">,</span> <span class="token keyword type-hint">array</span> <span class="token variable">$needUpdateFields</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$where</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$needUpdateFields</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>        <span class="token comment">// 第一个条件数组的值</span>        <span class="token variable">$firstWhere</span> <span class="token operator">=</span> <span class="token variable">$where</span><span class="token punctuation">[</span><span class="token function">array_key_first</span><span class="token punctuation">(</span><span class="token variable">$where</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 第一个条件数组的值的总数量</span>        <span class="token variable">$whereFirstValCount</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$firstWhere</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 需要更新的第一个字段的值的总数量</span>        <span class="token variable">$needUpdateFieldsValCount</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$needUpdateFields</span><span class="token punctuation">[</span><span class="token function">array_key_first</span><span class="token punctuation">(</span><span class="token variable">$needUpdateFields</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$whereFirstValCount</span> <span class="token operator">!==</span> <span class="token variable">$needUpdateFieldsValCount</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>        <span class="token comment">// 所有的条件字段数组</span>        <span class="token variable">$whereKeys</span> <span class="token operator">=</span> <span class="token function">array_keys</span><span class="token punctuation">(</span><span class="token variable">$where</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 绑定参数</span>        <span class="token variable">$building</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//        $whereArr = [</span><span class="token comment">//          0 =&gt; "id = 180 AND ",</span><span class="token comment">//          1 =&gt; "user_id = 5 AND ",</span><span class="token comment">//          2 =&gt; "id = 181 AND ",</span><span class="token comment">//          3 =&gt; "user_id = 15 AND ",</span><span class="token comment">//          4 =&gt; "id = 182 AND ",</span><span class="token comment">//          5 =&gt; "user_id = 11 AND ",</span><span class="token comment">//          6 =&gt; "id = 183 AND ",</span><span class="token comment">//          7 =&gt; "user_id = 1 AND ",</span><span class="token comment">//        ]</span>        <span class="token variable">$whereArr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$whereBuilding</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$firstWhere</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=&gt;</span> <span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$whereKeys</span> <span class="token keyword">as</span> <span class="token variable">$whereKey</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//                $whereArr[] = "{$whereKey} = {$where[$whereKey][$k]} AND ";</span>                <span class="token variable">$whereArr</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$whereKey</span><span class="token punctuation">}</span></span> = ? AND "</span><span class="token punctuation">;</span>                <span class="token variable">$whereBuilding</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$where</span><span class="token punctuation">[</span><span class="token variable">$whereKey</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token comment">//        $whereArray = [</span><span class="token comment">//            0 =&gt; "id = 180 AND user_id = 5",</span><span class="token comment">//            1 =&gt; "id = 181 AND user_id = 15",</span><span class="token comment">//            2 =&gt; "id = 182 AND user_id = 11",</span><span class="token comment">//            3 =&gt; "id = 183 AND user_id = 1",</span><span class="token comment">//        ]</span>        <span class="token variable">$whereArrChunck</span> <span class="token operator">=</span> <span class="token function">array_chunk</span><span class="token punctuation">(</span><span class="token variable">$whereArr</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$whereKeys</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$whereBuildingChunck</span> <span class="token operator">=</span> <span class="token function">array_chunk</span><span class="token punctuation">(</span><span class="token variable">$whereBuilding</span><span class="token punctuation">,</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$whereKeys</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$whereArray</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$whereArrChunck</span> <span class="token keyword">as</span> <span class="token variable">$val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$valStr</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$val</span> <span class="token keyword">as</span> <span class="token variable">$vv</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$valStr</span> <span class="token operator">.=</span> <span class="token variable">$vv</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment">// 去除掉后面的 AND 字符及空格</span>            <span class="token variable">$whereArray</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">rtrim</span><span class="token punctuation">(</span><span class="token variable">$valStr</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"AND "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 需要更新的字段数组</span>        <span class="token variable">$needUpdateFieldsKeys</span> <span class="token operator">=</span> <span class="token function">array_keys</span><span class="token punctuation">(</span><span class="token variable">$needUpdateFields</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 拼接 sql 语句</span>        <span class="token variable">$sqlStr</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$needUpdateFieldsKeys</span> <span class="token keyword">as</span> <span class="token variable">$needUpdateFieldsKey</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$whereArray</span> <span class="token keyword">as</span> <span class="token variable">$kk</span> <span class="token operator">=&gt;</span> <span class="token variable">$vv</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//                $str .= ' WHEN ' . $vv . ' THEN ' . $needUpdateFields[$needUpdateFieldsKey][$kk];</span>                <span class="token variable">$str</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">' WHEN '</span> <span class="token operator">.</span> <span class="token variable">$vv</span> <span class="token operator">.</span> <span class="token string single-quoted-string">' THEN ? '</span><span class="token punctuation">;</span>                <span class="token comment">// 合并需要绑定的参数</span>                <span class="token variable">$building</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">array_merge</span><span class="token punctuation">(</span><span class="token variable">$whereBuildingChunck</span><span class="token punctuation">[</span><span class="token variable">$kk</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token variable">$needUpdateFields</span><span class="token punctuation">[</span><span class="token variable">$needUpdateFieldsKey</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$kk</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$sqlStr</span> <span class="token operator">.=</span> <span class="token variable">$needUpdateFieldsKey</span> <span class="token operator">.</span> <span class="token string single-quoted-string">' = CASE '</span> <span class="token operator">.</span> <span class="token variable">$str</span> <span class="token operator">.</span> <span class="token string single-quoted-string">' ELSE '</span> <span class="token operator">.</span> <span class="token variable">$needUpdateFieldsKey</span> <span class="token operator">.</span> <span class="token string single-quoted-string">' END, '</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 去除掉后面的逗号及空格</span>        <span class="token variable">$sqlStr</span> <span class="token operator">=</span> <span class="token function">rtrim</span><span class="token punctuation">(</span><span class="token variable">$sqlStr</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">', '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$tblSql</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'UPDATE '</span> <span class="token operator">.</span> <span class="token variable">$tableName</span> <span class="token operator">.</span> <span class="token string single-quoted-string">' SET '</span><span class="token punctuation">;</span>        <span class="token variable">$tblSql</span> <span class="token operator">=</span> <span class="token variable">$tblSql</span> <span class="token operator">.</span> <span class="token variable">$sqlStr</span><span class="token punctuation">;</span>        <span class="token variable">$building</span> <span class="token operator">=</span> <span class="token function">array_reduce</span><span class="token punctuation">(</span><span class="token variable">$building</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"array_merge"</span><span class="token punctuation">,</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        return [$tblSql, $building];</span>        <span class="token keyword">return</span> <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>DB</span><span class="token operator">::</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token variable">$tblSql</span><span class="token punctuation">,</span> <span class="token variable">$building</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP 无限遍历数组</title>
      <link href="posts/65e7f3e8.html"/>
      <url>posts/65e7f3e8.html</url>
      
        <content type="html"><![CDATA[<h1 id="无限遍历数组"><a href="#无限遍历数组" class="headerlink" title="无限遍历数组"></a>无限遍历数组</h1><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token keyword">function</span> <span class="token function-definition function">fun</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$arr</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=&gt;</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">fun</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token variable">$value</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>   <span class="token variable">$array</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'123'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'b'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'456'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'666'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'d'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'8888'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'e'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'4578'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'f'</span><span class="token operator">=&gt;</span><span class="token string single-quoted-string">'484878'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">fun</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对无限数组格式化数组中的值"><a href="#对无限数组格式化数组中的值" class="headerlink" title="对无限数组格式化数组中的值"></a>对无限数组格式化数组中的值</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string single-quoted-string">'1'</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'2'</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'3'</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span>            <span class="token string single-quoted-string">'a'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'333'</span><span class="token punctuation">,</span>            <span class="token punctuation">[</span><span class="token string single-quoted-string">'b'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'111'</span><span class="token punctuation">]</span>        <span class="token punctuation">]</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">recursion</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dump</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">recursion</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$data</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">array</span><span class="token punctuation">{</span>    <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$data</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=&gt;</span> <span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$res</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">recursion</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$res</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">int</span><span class="token punctuation">)</span><span class="token variable">$v</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$res</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 或者这种</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">recursion</span><span class="token punctuation">(</span><span class="token keyword type-declaration">array</span> <span class="token operator">&amp;</span><span class="token variable">$data</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">array</span><span class="token punctuation">{</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$data</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=&gt;</span> <span class="token operator">&amp;</span><span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$v</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword static-context">static</span><span class="token operator">::</span><span class="token function">recursion</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$data</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="无限遍历与分类-一"><a href="#无限遍历与分类-一" class="headerlink" title="无限遍历与分类(一)"></a>无限遍历与分类(一)</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$db</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'root'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'123456'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$db</span><span class="token operator">-&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"SET NAMES UTF8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'select * from menus'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$items</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$res</span><span class="token operator">-&gt;</span><span class="token function">fetch_array</span><span class="token punctuation">(</span><span class="token constant">MYSQLI_ASSOC</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$items</span><span class="token punctuation">[</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$tree</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$items</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=&gt;</span> <span class="token variable">$item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$items</span><span class="token punctuation">[</span><span class="token variable">$item</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pid'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'son'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$item</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token variable">$items</span><span class="token punctuation">[</span><span class="token variable">$item</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 所有数据堆成的数据树</span><span class="token variable">$tree</span> <span class="token operator">=</span> <span class="token variable">$items</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'son'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">a</span> <span class="token punctuation">(</span><span class="token variable">$tree</span> <span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token variable">$level</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$tree</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$level</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$tree</span> <span class="token keyword">as</span> <span class="token variable">$id</span> <span class="token operator">=&gt;</span> <span class="token variable">$data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'level'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$level</span><span class="token punctuation">;</span>            <span class="token variable">$result</span><span class="token punctuation">[</span><span class="token variable">$id</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$data</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'son'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">a</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'son'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$result</span><span class="token punctuation">,</span> <span class="token variable">$level</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">[</span><span class="token variable">$id</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'son'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token variable">$level</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$newtree</span> <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token variable">$tree</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$newtree</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="无限遍历与分类-二"><a href="#无限遍历与分类-二" class="headerlink" title="无限遍历与分类(二)"></a>无限遍历与分类(二)</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$db</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'root'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'123456'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$db</span><span class="token operator">-&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"SET NAMES UTF8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-&gt;</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'select * from menus'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$items</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$res</span><span class="token operator">-&gt;</span><span class="token function">fetch_array</span><span class="token punctuation">(</span><span class="token constant">MYSQLI_ASSOC</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$items</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">menulist</span><span class="token punctuation">(</span><span class="token variable">$menu</span><span class="token punctuation">,</span><span class="token variable">$id</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">$level</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">static</span> <span class="token variable">$menus</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$menu</span> <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pid'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token variable">$id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$value</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'level'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$level</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$level</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token variable">$value</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'str'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">str_repeat</span><span class="token punctuation">(</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span><span class="token variable">$value</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'level'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token variable">$level</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token variable">$value</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'str'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;'</span><span class="token operator">.</span><span class="token string single-quoted-string">'└ '</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token variable">$level</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token variable">$value</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'str'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;&amp;emsp;'</span><span class="token operator">.</span><span class="token string single-quoted-string">'└ '</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token variable">$value</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'str'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'&amp;emsp;&amp;emsp;'</span><span class="token operator">.</span><span class="token string single-quoted-string">'└ '</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$menus</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$value</span><span class="token punctuation">;</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">menulist</span><span class="token punctuation">(</span><span class="token variable">$menu</span><span class="token punctuation">,</span><span class="token variable">$value</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$value</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'level'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token variable">$menus</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$newRows</span> <span class="token operator">=</span> <span class="token function">menulist</span><span class="token punctuation">(</span><span class="token variable">$items</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="无限遍历与分类-（三）"><a href="#无限遍历与分类-（三）" class="headerlink" title="无限遍历与分类 （三）"></a>无限遍历与分类 （三）</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$arrs</span> <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span>        <span class="token string single-quoted-string">'id'</span><span class="token operator">=&gt;</span><span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'parent_id'</span><span class="token operator">=&gt;</span><span class="token number">0</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>        <span class="token string single-quoted-string">'id'</span><span class="token operator">=&gt;</span><span class="token number">2</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'parent_id'</span><span class="token operator">=&gt;</span><span class="token number">1</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>        <span class="token string single-quoted-string">'id'</span><span class="token operator">=&gt;</span><span class="token number">3</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'parent_id'</span><span class="token operator">=&gt;</span><span class="token number">2</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>        <span class="token string single-quoted-string">'id'</span><span class="token operator">=&gt;</span><span class="token number">4</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'parent_id'</span><span class="token operator">=&gt;</span><span class="token number">2</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>        <span class="token string single-quoted-string">'id'</span><span class="token operator">=&gt;</span><span class="token number">5</span><span class="token punctuation">,</span>        <span class="token string single-quoted-string">'parent_id'</span><span class="token operator">=&gt;</span><span class="token number">0</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">getTree</span><span class="token punctuation">(</span><span class="token variable">$arrs</span><span class="token punctuation">,</span><span class="token variable">$root</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">$level</span><span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$tree</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$arrs</span> <span class="token keyword">as</span> <span class="token variable">$foo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$foo</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'parent_id'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token variable">$root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$level</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                           <span class="token variable">$foo</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'children'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getTree</span><span class="token punctuation">(</span><span class="token variable">$arrs</span><span class="token punctuation">,</span><span class="token variable">$foo</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$level</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token variable">$tree</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$foo</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token operator">--</span><span class="token variable">$level</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$tree</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">var_export</span> <span class="token punctuation">(</span><span class="token variable">$arrs</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">// 一级</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="无限遍历与分类-（四）"><a href="#无限遍历与分类-（四）" class="headerlink" title="无限遍历与分类 （四）"></a>无限遍历与分类 （四）</h2><p>对具有父子关系的数组进行重新排序，不改变数据结构</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$permissions</span> <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span> <span class="token operator">=&gt;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'pid'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'0'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'name'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span> <span class="token operator">=&gt;</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'pid'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'0'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'name'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span> <span class="token operator">=&gt;</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'pid'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'0'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'name'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span> <span class="token operator">=&gt;</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'pid'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'1'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'name'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'a-1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span> <span class="token operator">=&gt;</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'pid'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'1'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'name'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'a-2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span> <span class="token operator">=&gt;</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'pid'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'3'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'name'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'c-1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span> <span class="token operator">=&gt;</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'pid'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'3'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'name'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'c-2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span> <span class="token operator">=&gt;</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'pid'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'4'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'name'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'a-1-2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span> <span class="token operator">=&gt;</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'pid'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'4'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'name'</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">'a-1-1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">permissionTree</span><span class="token punctuation">(</span><span class="token variable">$permissions</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$data</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/** * 根据父子关系重新排序 * * @param $data  具有父子关系的二维数组 * @param int $root  获取指定层级标识 * @param array $result  用于保存数据的数组 * @return array */</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">permissionTree</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token variable">$root</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$data</span> <span class="token keyword">as</span> <span class="token variable">$item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 排除掉非直接子集</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$item</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pid'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token variable">$root</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$result</span><span class="token punctuation">[</span><span class="token variable">$item</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$item</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">permissionTree</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token variable">$item</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP返回可读性更好的文件大小显示</title>
      <link href="posts/3676e41e.html"/>
      <url>posts/3676e41e.html</url>
      
        <content type="html"><![CDATA[<h1 id="返回可读性更好的文件大小显示"><a href="#返回可读性更好的文件大小显示" class="headerlink" title="返回可读性更好的文件大小显示"></a>返回可读性更好的文件大小显示</h1><ul><li>方法一</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token comment">/**     * 返回可读性更好的文件大小     *      * @param $bytes  int 文件大小（字节数）     * @param int $decimals 保留多少位数     * @return string 带单位的文件大小字符串     */</span>    <span class="token keyword">function</span> <span class="token function-definition function">human_filesize</span> <span class="token punctuation">(</span><span class="token variable">$bytes</span><span class="token punctuation">,</span> <span class="token variable">$decimals</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$size</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'B'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'kB'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'MB'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'GB'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'TB'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'PB'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 舍去法取整</span>        <span class="token variable">$factor</span> <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$bytes</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"%.<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$decimals</span><span class="token punctuation">}</span></span>f"</span><span class="token punctuation">,</span> <span class="token variable">$bytes</span> <span class="token operator">/</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span> <span class="token variable">$factor</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">.</span> @<span class="token variable">$size</span><span class="token punctuation">[</span><span class="token variable">$factor</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="以上代码做详细解释如下"><a href="#以上代码做详细解释如下" class="headerlink" title="以上代码做详细解释如下"></a>以上代码做详细解释如下</h3><p>每相邻的两个存储单位之间以字节数长度的 <code>3</code> 倍做间隔，比如看以下表中所示</p><table><thead><tr><th>字节长度</th><th>字节数</th><th>换算</th><th>B级</th><th>KB级</th><th>MB级</th><th>GB级</th></tr></thead><tbody><tr><td>4</td><td>1000</td><td>1000 / 1024</td><td>0.98 B</td><td></td><td></td><td></td></tr><tr><td>5</td><td>10000</td><td>10000 / 1024</td><td>9.8 B</td><td></td><td></td><td></td></tr><tr><td>6</td><td>10000 0</td><td>10000 0 / 1024</td><td>98 B</td><td></td><td></td><td></td></tr><tr><td>7</td><td>10000 00</td><td>10000 00 / 1024</td><td>980 B</td><td>0.95 KB</td><td></td><td></td></tr><tr><td>8</td><td>10000 000</td><td>10000 000 / 1024</td><td>9800 B</td><td>9.5 KB</td><td></td><td></td></tr><tr><td>9</td><td>10000 0000</td><td>10000 0000 / 1024</td><td>98000 B</td><td>95 KB</td><td></td><td></td></tr><tr><td>10</td><td>10000 0000 0</td><td>10000 0000 0 / 1024</td><td>980000 B</td><td>950 KB</td><td>0.93 MB</td><td></td></tr><tr><td>11</td><td>10000 0000 00</td><td>10000 0000 00 / 1024</td><td>980000 0 B</td><td>950 KB</td><td>9.3 MB</td><td></td></tr><tr><td>12</td><td>10000 0000 000</td><td>10000 0000 000 / 1024</td><td>980000 00 B</td><td>9500 KB</td><td>93 MB</td><td></td></tr><tr><td>13</td><td>10000 0000 0000</td><td>10000 0000 0000 / 1024</td><td>980000B</td><td>95000 KB</td><td>930 MB</td><td>0.91 GB</td></tr></tbody></table><p>通过以上的规律，我们可以观察到每两个相邻的量级之间可以通过字节长度的 <code>3</code> 倍来划分，减 1 的话类比分页的页码计算，如果字节数长度刚好是 3 的倍数，应该归到前一个量级，比如字节数是 100 bytes，对应长度是 3，显然应该显示为 100B 更好，而不是用 KB 来显示。</p><ul><li>方法二</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token comment">/**    * 对文件大小做可读性更好的显示    *    * @param integer $bytes    字节数  需要格式转换的字节数    * @param integer $decimals 保留几位小数    * @return float  处理好的字节数    */</span>    <span class="token keyword">function</span> <span class="token function-definition function">format_bytes</span><span class="token punctuation">(</span><span class="token variable">$bytes</span><span class="token punctuation">,</span> <span class="token variable">$decimals</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$units</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'B'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'KB'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'MB'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'GB'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'TB'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'PB'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$bytes</span> <span class="token operator">&gt;=</span> <span class="token number">1024</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$size</span> <span class="token operator">=</span> <span class="token variable">$bytes</span> <span class="token operator">/=</span> <span class="token number">1024</span><span class="token punctuation">;</span>            <span class="token comment">// 等同于以下代码</span>            <span class="token comment">// $size = $bytes = $bytes / 1024;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token variable">$size</span><span class="token punctuation">,</span> <span class="token variable">$decimals</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token variable">$units</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="调用方式"><a href="#调用方式" class="headerlink" title="调用方式"></a>调用方式</h3><blockquote><p>相比而言，方式一会比方式二可读性更加好一些</p></blockquote><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token variable">$bytes1</span> <span class="token operator">=</span> <span class="token function">human_filesize</span><span class="token punctuation">(</span><span class="token number">94875468</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// output: =&gt;  90.48MB</span>    <span class="token variable">$bytes2</span> <span class="token operator">=</span> <span class="token function">format_bytes</span><span class="token punctuation">(</span><span class="token number">94875468</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// output:  =&gt;  90.48MB</span>    <span class="token variable">$bytes3</span> <span class="token operator">=</span> <span class="token function">human_filesize</span><span class="token punctuation">(</span><span class="token number">1024000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// output:  =&gt;  0.98MB</span>    <span class="token variable">$bytes4</span> <span class="token operator">=</span> <span class="token function">format_bytes</span><span class="token punctuation">(</span><span class="token number">1024000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// output:  =&gt;  1000KB</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$bytes1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$bytes2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$bytes3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$bytes4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP-FPM 性能配置优化</title>
      <link href="posts/6643f286.html"/>
      <url>posts/6643f286.html</url>
      
        <content type="html"><![CDATA[<h1 id="PHP-FPM-性能配置优化"><a href="#PHP-FPM-性能配置优化" class="headerlink" title="PHP-FPM 性能配置优化"></a>PHP-FPM 性能配置优化</h1><blockquote><p>4 核 8 G 服务器大约可以开启 500 个 PHP-FPM，极限吞吐量在 580 qps （Query Per Second 每秒查询数）左右。</p></blockquote><h2 id="Nginx-php-fpm-是怎么工作的？"><a href="#Nginx-php-fpm-是怎么工作的？" class="headerlink" title="Nginx + php-fpm 是怎么工作的？"></a>Nginx + php-fpm 是怎么工作的？</h2><p>php-fpm 全称是 <strong>PHP FastCGI Process Manager</strong> 的简称，从名字可得知，是一个 FastCGI 的管理器。</p><h3 id="什么是-FastCGI？"><a href="#什么是-FastCGI？" class="headerlink" title="什么是 FastCGI？"></a>什么是 FastCGI？</h3><p>FastCGI 是 <strong>Fast Common Gateway Interface</strong> 的简称，是一种交互程序（此处是 PHP）与 Web 服务器之间的 通信协议。FastCGI 是早期通用网关接口（CGI）的增强版本。</p><p>注意 FastCGI 和 CGI 都是一种 <strong>通信协议</strong>，独立于任何语言。Web 服务器无须对语言有任何了解。除 PHP 有 php-fpm 外，像 Python, Ruby, Perl, Tcl, C/C++, 和 Visual Basic 都有其各自的 CGI 和 FastCGI 实现。</p><h3 id="CGI-和-FastCGI-的区别？"><a href="#CGI-和-FastCGI-的区别？" class="headerlink" title="CGI 和 FastCGI 的区别？"></a>CGI 和 FastCGI 的区别？</h3><p>CGI 程序运行在独立的进程中，并对每个 Web 请求创建一个进程，这种方法非常容易实现，但效率很差，难以扩展。 <strong>面对大量请求，进程的大量创建和消亡使操作系统性能大大下降。</strong> 此外，由于地址空间无法共享，也限制了资源重用。</p><p>FastCGI 致力于减少网页服务器与 CGI 程序之间交互的开销，从而使服务器可以同时处理更多的网页请求。与为每个请求创建一个新的进程不同，FastCGI 使用持续的进程来处理一连串的请求。这些进程由 FastCGI 服务器管理（FPM），而不是 Web 服务器。当进来一个请求时，Web 服务器把环境变量和这个页面请求通过一个 Socket 或者 TCP Connection 传递给 FastCGI 进程：</p><p><img src="/medias/loading.gif" data-original="https://cdn.learnku.com/uploads/images/201909/23/1/3PvNql1Ri5.png!large" alt="nginx + php-fpm 工作模式"></p><h2 id="php-fpm-进程数调优"><a href="#php-fpm-进程数调优" class="headerlink" title="php-fpm 进程数调优"></a>php-fpm 进程数调优</h2><p>fpm 服务启动初始化时，会根据配置信息里设置的运行模式，来选择是否创建、以及创建多少 CGI 进程，这些进程随时待命，等待处理从 Web 服务器传送过来的请求：</p><p><img src="/medias/loading.gif" data-original="https://cdn.learnku.com/uploads/images/201909/23/1/6J4kGKBzVL.png!large" alt="nginx 配合 php-cgi 的运行"></p><p>PHP 7.2 FPM 进程池的配置信息位于：</p><pre class="line-numbers language-none"><code class="language-none">/etc/php/7.2/fpm/pool.d/www.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>搜寻下 pm 运行模式的配置，默认是 dynamic ：</p><pre class="line-numbers language-none"><code class="language-none">pm = dynamic<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>fpm 的运行模式有三种：</p><ul><li>ondemand 按需创建</li><li>dynamic 动态创建</li><li>static 固定数量</li></ul><p><strong>ondemand</strong></p><p>ondemand 初始化时不会创建待命的进程。并且会在空闲时将进程销毁，请求进来时再开启。一般是在共享的 VPS 上使用。是一种比较 节省内存 的 FPM 运行方式，不过因为其频繁创建和销毁进程，性能表现不佳。</p><p>相关参数：</p><pre class="line-numbers language-none"><code class="language-none">; 默认是 10 秒，超过 10 秒即销毁pm.process_idle_timeout = 10s;; 最大并存进程数，超过此值将不再创建pm.max_children = 50; 每个进程最多处理多少个请求，超过此值将自动销毁pm.max_requests = 1000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>dynamic</strong></p><p>动态创建，这个是默认选项，也是比较灵活的选项。兼顾稳定和快速响应。同时有四个参数会影响此配置：</p><pre class="line-numbers language-none"><code class="language-none">; FPM 启动时创建的进程数pm.start_servers = 10; 最大并存进程数，超过此值将不再创建pm.max_children = 50; 空闲进程数最小值，如果空闲进程小于此值，则创建新的子进程pm.min_spare_servers = 10; 空闲进程数最大值，如果空闲进程大于此值，则进行清理pm.max_spare_servers = 40; 每个进程最多处理多少个请求，超过此值将自动销毁pm.max_requests = 1000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的注释已经很释义，空闲进程的概念需要讲下。按照上面的设置，fpm 启动时会有 10 个进程启动，此时这 10 个进程都属于「空闲进程」，随时待命。</p><p>进来了一个请求，一个进程前往处理，此时剩下 9 个「空闲进程」，fpm 发现少于 min_spare_servers 设置的值 10 ，就会新建一个进程作为「空闲进程」，此时系统存在 11 个进程，还是 10 个空闲进程。</p><p>在第一个请求还未处理完成时，突然一波流量进来，一口气进来了 50 个请求，因为 max_children 设置了 50 个封顶，所以 FPM 会新建 39 个进程，加上 10 个进行进程一起处理这波请求，此时系统中总共 50 个进程共存，50 个进程都属于繁忙中，未分配到进程的请求会等待着。</p><p>等所有的请求处理完成后，系统中共存的 50 个进程变成「空闲进程」，超过了 max_spare_servers 值 40 个的限制，超出的 10 个会被销毁，系统此时存在 40 个「空闲进程」，随时待命。</p><p>因为一直保证有「空闲进程」可供使用，所以 <strong>dynamic</strong> 的配置，相比 <strong>ondemand</strong> 进程要同时创建，响应速度还是比较快的。然而在还是避免不了频繁创建和销毁进程对系统造成的消耗。</p><p><strong>static</strong></p><p>固定进程数量是性能最好，资源利用率最高的运行方式，一般在要求单机性能最高的时候使用，例如你准备创建 PHP 服务器集群，希望每台机器都能物尽其用。</p><p>相关配置：</p><pre class="line-numbers language-none"><code class="language-none">; FPM 启动时创建的进程数，并且会一直保持这个数pm.max_children = 50; 每个进程最多处理多少个请求，超过此值将自动销毁pm.max_requests = 1000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>pm.max_children</code> 的设置，需要我们每一个进程运行我们的程序，需要消耗多少内存，以及机器上有多少内存可供使用。</p><p>计算公式：</p><pre class="line-numbers language-none"><code class="language-none">pm.max_children = 可用内存 / 每个进程暂用内存大小<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意可用内存不是本机所有内存，要除去其他程序运行，例如说你应该除去 Elasticsearch 占用了 2G 内存。</p><p>调试期间，要在生产环境中实战观察，一般建议使用 80% 的内存使用率，留 20% 给内存泄露的空间和其他软件运行。</p><p>最后是 pm.max_requests 值，需要我们观察应用是否有 <strong>内存泄漏</strong>。现代的 PHP 程序，尤其是 Laravel ，会依赖于非常多的扩展包，这些扩展包代码质量参差不齐，多少会出现内存泄漏的问题。如果内存泄露不严重，那么把值设置高一点，让单个进程在存活期间 <strong>多处理一些请求</strong>，如果内存泄露比较严重，应当酌情设置低一点。否则会出现系统 <strong>内存不够用</strong>，然后去使用 Swap 物理内存 的窘境。</p><p>修改后请记得重启 FPM：</p><pre class="line-numbers language-none"><code class="language-none">sudo service php7.2-fpm restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Unix-Socket-和-TCP-Socket"><a href="#Unix-Socket-和-TCP-Socket" class="headerlink" title="Unix Socket 和 TCP Socket"></a>Unix Socket 和 TCP Socket</h2><p>Nginx 连接 FPM 有 Unix Socket 和 TCP Socket 两种方式：</p><p>Unix Socket：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">location</span> ~ \.php$</span> <span class="token punctuation">{</span>    fastcgi_pass unix:/run/php/php7.2-fpm.sock<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>TCP Socket：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">fastcgi_pass</span> 127.0.0.1:9000</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>如何选择？</strong></p><p>Unix Socket 方式 <strong>比较快</strong> 而且 <strong>消耗资源少</strong>（差距不会太大 0.1% ~ 5% 的差别），但是缺点是只能本机使用，没有 TCP 灵活。</p><p>如果 Nginx 和 FPM 都在同一台服务器上，推荐使用 Unix Socket。如果是做 PHP 服务器集群，使用 Nginx 做负载均衡的话，只能采用 TCP 的链接方式。</p><p><strong>如何设置成 TCP Socket 的连接方式？</strong></p><p>以 PHP-FPM 7.2 为例：</p><p>/etc/php/7.2/fpm/pool.d/<a href="http://www.conf/">www.conf</a></p><pre class="line-numbers language-none"><code class="language-none">listen = 127.0.0.1:9000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同时配置 Nginx 里的 <code>fastcgi_pass 127.0.0.1:9000;</code> ，并重启 FPM 和 Nginx：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> php7.2-fpm restart<span class="token function">sudo</span> <span class="token function">service</span> nginx restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>如何设置成 Unix Socket 的连接方式？</strong></p><p>修改 FPM 进程池配置：</p><p>/etc/php/7.2/fpm/pool.d/<a href="http://www.conf/">www.conf</a></p><pre class="line-numbers language-none"><code class="language-none">listen = /run/php/php7.2-fpm.sock<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同时配置 Nginx 里的 fastcgi_pass unix:/run/php/php7.2-fpm.sock; ，并重启 FPM 和 Nginx：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> php7.2-fpm restart<span class="token function">sudo</span> <span class="token function">service</span> nginx restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>文件 <code>/var/run/php/php7.2-fpm.sock</code> 会在 FPM 启动时创建。</p><h2 id="生产环境中一定要关闭掉-Xdebug-扩展"><a href="#生产环境中一定要关闭掉-Xdebug-扩展" class="headerlink" title="生产环境中一定要关闭掉 Xdebug 扩展"></a>生产环境中一定要关闭掉 Xdebug 扩展</h2><p>检查生产环境的 PHP 原生扩展文件夹里是否存在，以 PHP 7.2 为例存放路径为：</p><pre class="line-numbers language-none"><code class="language-none">/etc/php/7.2/mods-available/xdebug.ini<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到以后确保使用 <code>;</code> 符注释掉：</p><p>/etc/php/7.2/mods-available/xdebug.ini</p><pre class="line-numbers language-none"><code class="language-none">;zend_extension=xdebug.so<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重启 fpm</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> php7.2-fpm restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>检查 php-fpm 的进程数量</p><pre class="line-numbers language-none"><code class="language-none"># 会多出两个进程数，是因为有一个不负责处理请求的 php-fpm master 进程和一个 grep 进程ps -aux | grep php-fpm | wc -l<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="开启-Slow-log-定位慢脚本"><a href="#开启-Slow-log-定位慢脚本" class="headerlink" title="开启 Slow log 定位慢脚本"></a>开启 Slow log 定位慢脚本</h2><h3 id="如何开启？"><a href="#如何开启？" class="headerlink" title="如何开启？"></a>如何开启？</h3><p>PHP-FPM 提供一个叫 <strong>慢日志</strong> (slowlog) 的功能，来帮助我们定位执行慢的脚本。以 PHP 7.2 为例，FPM 的配置信息位于：</p><pre class="line-numbers language-none"><code class="language-none">/etc/php/7.2/fpm/pool.d/www.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>相关配置项：</p><pre class="line-numbers language-none"><code class="language-none">; 慢日志的存储路径，默认 `$pool` 设置为 `www`slowlog = /var/log/$pool.slow.log; 设置慢日志超时标准，设置为 0 代表关闭慢日志request_slowlog_timeout = 1s; 慢日志记录脚本堆栈的深度request_slowlog_trace_depth = 20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上的配置翻译过来：指定 FPM 当发现有请求执行超过 1 秒钟的时候，将整个调用堆栈记录到 <code>/var/log/www.slow.log</code> 文件里，堆栈的深度不超过 20。</p><p>你可以把 1s 改成其他值，如 10s。有了以上的设置，裁剪图像尺寸的方法、 网络 I/O 相关的一些请求都经常出现在 PHP 慢日志中。你可以根据自己的情况来选择调整或者忽略。</p><h3 id="如何分析？"><a href="#如何分析？" class="headerlink" title="如何分析？"></a>如何分析？</h3><p>可以使用 grep 命令来快速定位某个函数调用、或者脚本名称被记录的次数，记录的次数越多，优化的优先级就越高。以下是简单的 示例</p><pre class="line-numbers language-none"><code class="language-none">grep -o 'fetch_github_user' /var/log/www.slow.log | wc -lgrep -o 'sendEmail' /var/log/www.slow.log | wc -l<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>需要注意的是，监控 Slowlog 和记录日志的过程会对 PHP 造成消耗， 切记 调试结束后，务必将其关闭。</strong></p><h2 id="开启-OPcache"><a href="#开启-OPcache" class="headerlink" title="开启 OPcache"></a>开启 OPcache</h2><p>OPcache 是由 PHP 官方公司 Zend 开发的一款免费使用的 PHP 优化加速拓展。他可以将 PHP 脚本编译后的 bytecode 缓存在共享内存中供以后反复使用，从而避免了从磁盘读取代码再次编译的消耗。同时，它还应用了一些代码优化模式，使得代码执行更快。从而加速 PHP 应用响应。</p><p>PHP 自 5.5 版开始，就已经内置了 OPcache 扩展。不过默认是关闭状态的。</p><h3 id="开启-OPcache-1"><a href="#开启-OPcache-1" class="headerlink" title="开启 OPcache"></a>开启 OPcache</h3><p>PHP 7.2 FPM 的配置信息位于：</p><pre class="line-numbers language-none"><code class="language-none">/etc/php/7.2/fpm/php.ini<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑以上文件，搜索 <code>opcache.enable</code> 将值设为 <code>1</code> 即为开启</p><pre class="line-numbers language-none"><code class="language-none">opcache.enable=1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>php.ini</code> 里相关的配置以下，注释里包括说明和推荐设置的值，请详细阅读：</p><pre class="line-numbers language-none"><code class="language-none">; 是否在命令行开启，这里默认设置为 0 ，暂且关闭;opcache.enable_cli=0; 这个内存是用来存储编译后的字节码的，视你的程序; 代码量而定，Laravel 应用一般建议设置为 256，单位 MB，; 默认是 128opcache.memory_consumption=256; 会对程序所有的字符串进行统一存储以加快存取速度，; 默认是 8m，建议 32 或者不超过 64。opcache.interned_strings_buffer=32; 最大加速多少个脚本文件，视项目脚本文件数而定，; 合理区间 200~1000000 ，默认是 10000 ，建议 500000opcache.max_accelerated_files=1000000; 最大作废比例百分比，到达这个比例会重启，默认是 5 ，建议 10opcache.max_wasted_percentage=10; 开启情况下会在脚本名称前加上当前目录信息做为缓存的 Key，关闭可以; 提高性能，但是会面临出错的风险（文件名一致时），建议开启，关闭使用 0opcache.use_cwd=1; 开启的话，会按照 opcache.revalidate_freq 设置的频率去检查文件; 是否修改以便重新缓存，默认开启，生产环境下请设置为关闭，然后; 写自动化脚本，在每次更新代码后自动重启 OPcacheopcache.validate_timestamps=0; 文件更新检测频率，单位秒，只有在 opcache.validate_timestamps ; 开启时才有效。默认为 2，意味着 2 秒钟检查一次，会对文件系统造; 成负担，如果是在开发环境中请酌情使用，生产环境随意设置，因为; 我们会设置 validate_timestamps 为关闭。opcache.revalidate_freq=2200; 文件加载的逻辑，默认关闭，无需修改;opcache.revalidate_path=0; 开启的话会把代码注释一起缓存，关闭可减低内存使用，但是; 如果有一些代码依赖于注释里的指令，例如 Doctrine, ; Zend Framework 2 和 PHPUnit，将会出现问题。建议开启opcache.save_comments=1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改完成后，需要重启 FPM 生效：</p><pre class="line-numbers language-none"><code class="language-none">sudo service php7.2-fpm restart <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生产环境下，我们一般会将 <code>opcache.validate_timestamp</code> 设置为 0 以获取最大性能。然后在代码变更时候，再重置 OPcache。</p><p>有两种重置 OPcache 的方法，一种是重启 FPM。此方法虽然很有效，但是会中断正在处理的请求，用户体验较差，不建议使用。</p><p>另一个方法是调用 <code>opcache_reset()</code> 方法，此方法会重置 OPcache 缓存并且不需要重启 FPM。然而，OPcache 是运行在 FPM 环境中的，在命令行环境中调用此函数无效。必须是一个可以通过 HTTP 访问到的脚本上来调用 <code>opcache_reset()</code> 才行。无法在命令行中执行。</p><h3 id="在-laravel-中使用-OPcache-，可以直接使用-laravel-opcache"><a href="#在-laravel-中使用-OPcache-，可以直接使用-laravel-opcache" class="headerlink" title="在 laravel 中使用 OPcache ，可以直接使用 laravel-opcache"></a>在 laravel 中使用 OPcache ，可以直接使用 <a href="https://github.com/appstract/laravel-opcache">laravel-opcache</a></h3><blockquote><p>OPcache 是对 PHP 脚本的缓存，每次更改任何 PHP 代码时你都需要清除缓存</p></blockquote><pre class="line-numbers language-none"><code class="language-none"># 安装composer require appstract/laravel-opcache# 清空 fpm 里的 OPcachephp artisan opcache:clear# 查看 OPcache 的配置信息php artisan opcache:config# 查看 OPcache 运行状态（内存使用、缓存了多少文件等）php artisan opcache:status# 提前编译文件php artisan opcache:compile {--force}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> PHP-FPM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>composer 使用</title>
      <link href="posts/9b3c7295.html"/>
      <url>posts/9b3c7295.html</url>
      
        <content type="html"><![CDATA[<h1 id="composer-使用"><a href="#composer-使用" class="headerlink" title="composer 使用"></a>composer 使用</h1><h2 id="语义化版本"><a href="#语义化版本" class="headerlink" title="语义化版本"></a><a href="http://semver.org/">语义化版本</a></h2><h3 id="版本号的组成"><a href="#版本号的组成" class="headerlink" title="版本号的组成"></a>版本号的组成</h3><p>major.minor.patch =&gt; 主版本号.次版本号.修订号</p><ul><li>major：通常会发生 api 变更，不向后兼容</li><li>minor：新增功能，但是向后兼容</li><li>patch：补丁，向后兼容，修复 bug</li></ul><h3 id="版本符号"><a href="#版本符号" class="headerlink" title="版本符号"></a>版本符号</h3><ul><li><code>~</code>：指定向后兼容的最小版本<ul><li><code>~1.2</code> 等于 &gt;=1.2 &amp;&amp; &lt;2.0.0</li><li><code>~1.2.3</code> 等于 &gt;=1.2.3 &amp;&amp; &lt;1.3.0</li></ul></li><li><code>^</code>：允许大版本前的所有版本<ul><li><code>^1.2</code> 等于 &gt;=1.2 &amp;&amp; &lt;2.0.0</li><li><code>^1.2.3</code> 等于 &gt;=1.2.3 &amp;&amp; &lt;2.0 （区别在这里）</li></ul></li></ul><h3 id="使用版本号"><a href="#使用版本号" class="headerlink" title="使用版本号"></a>使用版本号</h3><ul><li>确切版本：1.0.2</li><li>范围：&gt;=1.0、&gt;=1.0 &lt;2.0、&gt;=1.0 &lt;1.1 || &gt;=1.2</li><li>连字符范围：1.0 - 2.0</li><li>通配符：1.0.*</li><li>波浪运算符：~1.2.3</li><li>^运算符：^1.2.3</li></ul><blockquote><p><a href="https://packagist.org/">packagist 包管理官方网站</a></p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="linux-下安装-composer"><a href="#linux-下安装-composer" class="headerlink" title="linux 下安装 composer"></a>linux 下安装 composer</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 直接从阿里云镜像中下载 composer.phar</span><span class="token function">wget</span> https://mirrors.aliyun.com/composer/composer.phar<span class="token comment"># 或者直接从官网下载 composer.phar 二进制执行文件</span><span class="token function">wget</span> https://getcomposer.org/download/2.0.11/composer.phar<span class="token comment"># 或者使用 composer 中国镜像安装器安装</span><span class="token function">curl</span> <span class="token parameter variable">-sS</span> http://install.phpcomposer.com/installer <span class="token operator">|</span> <span class="token function">sudo</span> php -- --install-dir<span class="token operator">=</span>/usr/local/bin <span class="token parameter variable">--filename</span><span class="token operator">=</span>composer<span class="token comment"># 添加执行权限</span><span class="token function">chmod</span> u+x composer.phar<span class="token comment"># 将 composer.phar 移动到系统环境变量中，以方便在任意位置都可以直接执行 composer 命令</span><span class="token function">mv</span> composer.phar /usr/local/bin/composer<span class="token comment"># 如果没有 /usr/local/bin 目录，则需要自己创建</span><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /usr/local/bin<span class="token comment"># 如果你只想为你的用户安装 composer 并避免需要 root 权限，那么你可以直接执行以下命令，前提是你得有 ~/local/bin 目录</span><span class="token function">mv</span> composer.phar ~/local/bin<span class="token comment"># 添加阿里云镜像加速</span><span class="token function">composer</span> config <span class="token parameter variable">-g</span> repo.packagist <span class="token function">composer</span> https://mirrors.aliyun.com/composer<span class="token comment"># 或者添加中国镜像</span><span class="token function">composer</span> config <span class="token parameter variable">-g</span> repo.packagist <span class="token function">composer</span> https://packagist.phpcomposer.com<span class="token comment"># 解除镜像</span><span class="token function">composer</span> config <span class="token parameter variable">-g</span> <span class="token parameter variable">--unset</span> repos.packagist<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="windows-下安装-composer"><a href="#windows-下安装-composer" class="headerlink" title="windows 下安装 composer"></a>windows 下安装 composer</h3><pre class="line-numbers language-none"><code class="language-none"># 在 D 盘中新建一个 composer 目录# 直接从官网下载 composer.phar 二进制执行文件wget https://getcomposer.org/download/2.0.11/composer.phar# 使用 php.exe 执行 composer.phar 测试是否正常I:\xampp\php\php.exe composer.phar -V# 简化命令echo @I:\xampp\php\php.exe "d:\composer\composer.phar" %*&gt;composer.bat# 将 D:/composer 目录添加到环境变量中去# 查看 composer 版本号，确定是否已经安装成功composer -V （大写的 V）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="composer-json-和-composer-lock"><a href="#composer-json-和-composer-lock" class="headerlink" title="composer.json 和 composer.lock"></a>composer.json 和 composer.lock</h3><p>当项目中存在 composer.lock 文件时，使用 <code>composer install</code> 命令安装依赖时，<code>composer.lock</code> 都会解析并安装你在 <code>composer.json</code> 中所列出来的依赖，但是 <code>composer</code> 会严格使用 <code>composer.lock</code> 文件所列出来的版本以确保项目中得所有成员所安装的版本都是一致的。<strong>需要将 composer.lock</strong> 文件提交到代码管理中。</p><h3 id="自动加载"><a href="#自动加载" class="headerlink" title="自动加载"></a>自动加载</h3><p>执行 <code>composer install</code> 命令时，会生成 <code>vendor/autoload.php</code>  文件，只需 include 这个文件就可以使用这些包所提供的类</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">require</span> <span class="token constant">__DIR__</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/vendor/autoload.php'</span><span class="token punctuation">;</span><span class="token variable">$log</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">Monolog<span class="token punctuation">\</span>Logger</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$log</span><span class="token operator">-&gt;</span><span class="token function">pushHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">Monolog<span class="token punctuation">\</span>Handler<span class="token punctuation">\</span>StreamHandler</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'app.log'</span><span class="token punctuation">,</span> <span class="token class-name class-name-fully-qualified static-context">Monolog<span class="token punctuation">\</span>Logger</span><span class="token operator">::</span><span class="token constant">WARNING</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$log</span><span class="token operator">-&gt;</span><span class="token function">addWarning</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你也可以直接在 <code>composer.json</code> 文件中添加一个 <code>autoload</code> 指令来添加自己的自动加载声明</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token punctuation">{</span>    <span class="token string double-quoted-string">"autoload"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string double-quoted-string">"psr-4"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string double-quoted-string">"Acme\\"</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">"src/"</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>composer 会为 Acme 命名空间注册一个 <code>PSR-4</code> 的自动加载。<br>你定义一个命名空间指向目录的映射。 在 vendor 目录同级的 src 目录将成为你项目的根目录。一个案例，文件名 src/Foo.php 需包含 Acme\Foo 类。<br>添加 <code>autoload</code> 指令之后，你必需重新运行 <code>composer dump-autoload</code>来重新生成 vendor/autoload.php 文件。</p><h3 id="composer-命令的使用"><a href="#composer-命令的使用" class="headerlink" title="composer 命令的使用"></a><a href="https://learnku.com/docs/composer/2018/03-cli/2084">composer 命令的使用</a></h3><ul><li>查看 composer 全局配置</li></ul><pre class="line-numbers language-none"><code class="language-none">composer config -l -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>初始化 composer.json</li></ul><pre class="line-numbers language-none"><code class="language-none"># 创建扩展包时，初始化 composer.jsoncomposer init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>安装所有扩展包</li></ul><pre class="line-numbers language-none"><code class="language-none"># 会读取当前目录的 composer.json 文件，解决依赖关系，并将他们安装到 vendor 文件夹中composer install# 制定 composer 略过 require-dev 选项里的扩展包，只加载需要的扩展包composer install --no-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>安装指定的扩展包</li></ul><pre class="line-numbers language-none"><code class="language-none">composer require &lt;package-name&gt;# 比如安装 vendor/package:2.* 扩展包composer require vendor/package:2.*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>更新扩展包（更新命令执行完毕后，同时也会更新 composer.lock 文件，不要乱用 composer update ，如果需要更新包，建议直接使用 composer require 命令）</li></ul><pre class="line-numbers language-none"><code class="language-none"># 更新所有的依赖包composer update# 更新指定的包composer update &lt;package-name&gt;# 比如更新 vendor/package 包composer update vendor/package# 一次性更新多个包composer update example/example1 example/example2# 更新指定包到指定版本composer require example/example3:1.2.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>移除扩展包</li></ul><pre class="line-numbers language-none"><code class="language-none">composer remove &lt;package-name&gt;# 比如移除 vendor/package:2.*  扩展包composer remove vendor/package:2.* <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>搜索扩展包</li></ul><pre class="line-numbers language-none"><code class="language-none">composer search &lt;package-name&gt;# 比如搜索 monolog 扩展包composer search monolog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>列出所有的可用的包</li></ul><pre class="line-numbers language-none"><code class="language-none"># 查看所有的包信息composer show# 查看包详细信息composer show &lt;package-name&gt;# 比如查看 monolog/monolog 包详细信息composer show monolog/monolog 1.0.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>验证 composer.json 文件是否合法</li></ul><pre class="line-numbers language-none"><code class="language-none">composer validate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>更新 composer</li></ul><pre class="line-numbers language-none"><code class="language-none"># 更新 composer 到最新版本composer self-update# 更新 composer 到指定版本composer self-update 1.0.0# 回滚到上一个安装版本composer self-update -r<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Composer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 常用命令</title>
      <link href="posts/5fddf106.html"/>
      <url>posts/5fddf106.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git-命令"><a href="#Git-命令" class="headerlink" title="Git 命令"></a>Git 命令</h1><h2 id="生成-SSH-Key"><a href="#生成-SSH-Key" class="headerlink" title="生成 SSH Key"></a>生成 SSH Key</h2><pre class="line-numbers language-git" data-language="git"><code class="language-git">ssh-keygen -t rsa -C <span class="token string">"youremail@xxx.com"</span><span class="token comment"># 输入之后直接两次回车即可</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="查看-git-用户名和邮箱地址"><a href="#查看-git-用户名和邮箱地址" class="headerlink" title="查看 git 用户名和邮箱地址"></a>查看 git 用户名和邮箱地址</h2><pre class="line-numbers language-git" data-language="git"><code class="language-git"><span class="token comment"># 查看用户名</span>git config user.name<span class="token comment"># 查看邮箱地址</span>git config user.email<span class="token comment"># 查看配置信息</span>git config --list<span class="token comment"># 当前用户全局</span>git config --global<span class="token comment"># 当前系统全局</span>git config --system<span class="token comment"># 修改用户名</span>git config --global user.name <span class="token string">"username"</span><span class="token comment"># 修改邮箱地址</span>git config --global user.email <span class="token string">"email"</span><span class="token comment"># 重新输入账号密码</span>git config --system --unset credential.helper<span class="token comment"># 查看 git 配置信息</span>git config --list 或者 git config -l<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="初始化一个-git-仓库"><a href="#初始化一个-git-仓库" class="headerlink" title="初始化一个 git 仓库"></a>初始化一个 git 仓库</h2><pre class="line-numbers language-git" data-language="git"><code class="language-git">git init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="添加文件到-git-仓库"><a href="#添加文件到-git-仓库" class="headerlink" title="添加文件到 git 仓库"></a>添加文件到 git 仓库</h2><h3 id="1-添加文件到缓存区"><a href="#1-添加文件到缓存区" class="headerlink" title="1. 添加文件到缓存区"></a>1. 添加文件到缓存区</h3><pre class="line-numbers language-git" data-language="git"><code class="language-git">git add &lt;filename&gt;<span class="token comment"># 比如添加 file.txt 文件： git add file.txt</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-将缓存区文件提交到本地仓库"><a href="#2-将缓存区文件提交到本地仓库" class="headerlink" title="2. 将缓存区文件提交到本地仓库"></a>2. 将缓存区文件提交到本地仓库</h3><pre class="line-numbers language-git" data-language="git"><code class="language-git">git commit -m <span class="token string">"add_file_message"</span><span class="token comment"># 比如提交 file.txt 文件：git commit -m "add file.txt"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="查看修改内容对比，提交到缓存区或者已经提交到本地仓库，使用-git-diff-会没有内容显示，也就是说只要修改了，在提交到缓存区之前使用-git-diff-才有用-（查看工作区的改变）"><a href="#查看修改内容对比，提交到缓存区或者已经提交到本地仓库，使用-git-diff-会没有内容显示，也就是说只要修改了，在提交到缓存区之前使用-git-diff-才有用-（查看工作区的改变）" class="headerlink" title="查看修改内容对比，提交到缓存区或者已经提交到本地仓库，使用 git diff 会没有内容显示，也就是说只要修改了，在提交到缓存区之前使用 git diff 才有用 （查看工作区的改变）"></a>查看修改内容对比，提交到缓存区或者已经提交到本地仓库，使用 git diff 会没有内容显示，也就是说只要修改了，在提交到缓存区之前使用 git diff 才有用 （查看工作区的改变）</h2><pre class="line-numbers language-git" data-language="git"><code class="language-git">git diff<span class="token comment"># 还可以查看具体哪个文件做了什么修改</span><span class="token comment"># 比如查看 readme.txt 做了什么修改</span>git diff HEAD -- readme.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查看当前仓库状态，任何时候都可以使用"><a href="#查看当前仓库状态，任何时候都可以使用" class="headerlink" title="查看当前仓库状态，任何时候都可以使用"></a>查看当前仓库状态，任何时候都可以使用</h2><pre class="line-numbers language-git" data-language="git"><code class="language-git">git status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="查看提交日志"><a href="#查看提交日志" class="headerlink" title="查看提交日志"></a>查看提交日志</h2><pre class="line-numbers language-git" data-language="git"><code class="language-git"><span class="token comment"># 查看全部 </span>git log<span class="token comment"># 查看最后一次提交</span>git show<span class="token comment"># 查看倒数5条</span>git log -5<span class="token comment"># 简化日志显示方式，并含有提交版本号</span>git log --pretty=oneline<span class="token comment"># 比如：</span><span class="token comment"># $ git log --pretty=oneline</span><span class="token comment"># 44c9beb4c58543b89181829755be2c5e9781ba28 (HEAD -&gt; master) append GPL</span><span class="token comment"># 03112bdf101655c30df9b61e4bd325b2cbe3c090 add distributed</span><span class="token comment"># 8a1386bd0fe677bca99d5a4ef26e87772a3eca71 wrote a readme file</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="设置别名-Alias"><a href="#设置别名-Alias" class="headerlink" title="设置别名 Alias"></a>设置别名 Alias</h2><pre class="line-numbers language-git" data-language="git"><code class="language-git"><span class="token comment"># 创建/查看本地分支</span>git config --global alias.br <span class="token string">"branch"</span><span class="token comment"># 切换分支</span>git config --global alias.co <span class="token string">"checkout"</span><span class="token comment"># 创建并切换到新分支</span>git config --global alias.cb <span class="token string">"checkout -b"</span><span class="token comment"># 提交</span>git config --global alias.cm <span class="token string">"commit -m"</span><span class="token comment"># 查看状态</span>git config --global alias.st <span class="token string">"status"</span><span class="token comment"># 拉取分支</span>git config --global alias.pullm <span class="token string">"pull origin master"</span><span class="token comment"># 提交分支</span>git config --global alias.pushm <span class="token string">"push origin master"</span><span class="token comment"># 单行、分颜色显示记录</span>git config --global alias.log <span class="token string">"log --oneline --graph --decorate --color=always"</span><span class="token comment"># 复杂显示</span>git config --global alias.logg <span class="token string">"log --graph --all --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(bold white)— %an%C(reset)%C(bold yellow)%d%C(reset)' --abbrev-commit --date=relative"</span>git config --global alias.lg <span class="token string">"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="回退版本"><a href="#回退版本" class="headerlink" title="回退版本"></a>回退版本</h2><pre class="line-numbers language-git" data-language="git"><code class="language-git"><span class="token comment"># 回退当前版本的上一个版本</span>git reset --hard HEAD^<span class="token comment"># 回退当前版本的上三个版本</span>git reset --hard HEAD^^^<span class="token comment"># 回退当前版本的上 100 个版本</span>git reset --hard HEAD~100<span class="token comment"># 回退指定版本，并将 「回退」动作作为一个版本提交</span>git revert &lt;commit id&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="回退指定版本（多半是因为回退版本回退多了）"><a href="#回退指定版本（多半是因为回退版本回退多了）" class="headerlink" title="回退指定版本（多半是因为回退版本回退多了）"></a>回退指定版本（多半是因为回退版本回退多了）</h2><pre class="line-numbers language-git" data-language="git"><code class="language-git">git reset --hard 版本号前几位<span class="token comment"># 比如回退到 以上查看日志中的 add distributed 这个提交版本</span>git reset --hard 44c9beb4c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查看提交版本号-commit-id"><a href="#查看提交版本号-commit-id" class="headerlink" title="查看提交版本号 commit id"></a>查看提交版本号 commit id</h2><pre class="line-numbers language-git" data-language="git"><code class="language-git"><span class="token comment"># 要重返未来，用 `git reflog` 查看命令历史，以便确定要回到未来的哪个版本。</span>git reflog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><h3 id="1-修改只在工作区，还没有添加到缓存区-（还没有-git-add）"><a href="#1-修改只在工作区，还没有添加到缓存区-（还没有-git-add）" class="headerlink" title="1. 修改只在工作区，还没有添加到缓存区 （还没有 git add）"></a>1. 修改只在工作区，还没有添加到缓存区 （还没有 git add）</h3><pre class="line-numbers language-git" data-language="git"><code class="language-git">git checkout -- filename<span class="token comment"># 比如 readme.txt 文件只是在工作区修改了，想回退到修改之前的提交的版本</span>git checkout -- readme.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-修改从工作区已经提交到了缓存区-（已经-git-add）"><a href="#2-修改从工作区已经提交到了缓存区-（已经-git-add）" class="headerlink" title="2. 修改从工作区已经提交到了缓存区 （已经 git add）"></a>2. 修改从工作区已经提交到了缓存区 （已经 git add）</h3><pre class="line-numbers language-git" data-language="git"><code class="language-git"><span class="token comment"># 将缓存区的修改回退到工作区</span>git reset HEAD filename<span class="token comment"># 比如 readme.txt 文件的修改已经提交到缓存区了，但是想撤销修改分为两步</span><span class="token comment"># 01.将缓存区的修改回退到工作区</span>git reset HEAD readme.txt<span class="token comment"># 02.将在工作区的修改回退到和上一个版本一样</span>git checkout -- readme.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-修改已经从缓存区提交到了本地仓库-（已经-git-commit）"><a href="#3-修改已经从缓存区提交到了本地仓库-（已经-git-commit）" class="headerlink" title="3. 修改已经从缓存区提交到了本地仓库 （已经 git commit）"></a>3. 修改已经从缓存区提交到了本地仓库 （已经 git commit）</h3><pre class="line-numbers language-git" data-language="git"><code class="language-git"><span class="token comment"># 回退当前版本的上一个版本</span>git reset --hard HEAD^<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-将在暂存区的更改文件进行强制撤销。（想让之前已经提交到缓存区的文件覆盖工作区的文件）"><a href="#4-将在暂存区的更改文件进行强制撤销。（想让之前已经提交到缓存区的文件覆盖工作区的文件）" class="headerlink" title="4. 将在暂存区的更改文件进行强制撤销。（想让之前已经提交到缓存区的文件覆盖工作区的文件）"></a>4. 将在暂存区的更改文件进行强制撤销。（想让之前已经提交到缓存区的文件覆盖工作区的文件）</h3><pre class="line-numbers language-git" data-language="git"><code class="language-git">git checkout -f<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-命令-git-clean-作用是清理项目，-f-是强制清理文件的设置，-d-选项命令连文件夹一并清除"><a href="#5-命令-git-clean-作用是清理项目，-f-是强制清理文件的设置，-d-选项命令连文件夹一并清除" class="headerlink" title="5. 命令 git clean 作用是清理项目，-f 是强制清理文件的设置，-d 选项命令连文件夹一并清除"></a>5. 命令 git clean 作用是清理项目，-f 是强制清理文件的设置，-d 选项命令连文件夹一并清除</h3><pre class="line-numbers language-git" data-language="git"><code class="language-git">git clean -f -d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6-假如你想要丢弃你所有的本地改动与提交，可以到服务器上获取最新的版本并将你本地主分支指向到它："><a href="#6-假如你想要丢弃你所有的本地改动与提交，可以到服务器上获取最新的版本并将你本地主分支指向到它：" class="headerlink" title="6. 假如你想要丢弃你所有的本地改动与提交，可以到服务器上获取最新的版本并将你本地主分支指向到它："></a>6. 假如你想要丢弃你所有的本地改动与提交，可以到服务器上获取最新的版本并将你本地主分支指向到它：</h3><pre class="line-numbers language-git" data-language="git"><code class="language-git">git fetch origin git reset --hard origin/master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><h3 id="1-确实要删除该文件"><a href="#1-确实要删除该文件" class="headerlink" title="1. 确实要删除该文件"></a>1. 确实要删除该文件</h3><pre class="line-numbers language-git" data-language="git"><code class="language-git"><span class="token comment"># 比如以 test.txt 为例子</span><span class="token comment"># 01 本地手动删除 test.txt 文件</span>rm test.txt 或者 rm -rf test.txt<span class="token comment"># 02 添加被删除的状态缓存区</span>git rm test.txt 或者 git add test.txt<span class="token comment"># 03 提交状态到本地仓库</span>git commit -m <span class="token string">"remove test.txt"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-工作区误删了文件"><a href="#2-工作区误删了文件" class="headerlink" title="2. 工作区误删了文件"></a>2. 工作区误删了文件</h3><pre class="line-numbers language-git" data-language="git"><code class="language-git"><span class="token comment"># 01 工作区误删了 test.txt 文件</span>rm test.txt<span class="token comment"># 02 找回被误删的文件（撤销修改）</span>git checkout -- test.txt<span class="token comment"># 用版本库中的版本替换掉工作区的版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="创建分支并切换到该分支"><a href="#创建分支并切换到该分支" class="headerlink" title="创建分支并切换到该分支"></a>创建分支并切换到该分支</h2><pre class="line-numbers language-git" data-language="git"><code class="language-git">git checkout -b alex  或者 git switch -c alex<span class="token comment"># 创建 alex 分支并切换到 alex 分支</span><span class="token comment"># 等同于以下两个命令</span><span class="token comment"># 创建 alex 分支</span>git branch alex<span class="token comment"># 切换到 alex 分支</span>git checkout alex  或者 git switch alex<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="合并指定分支到当前分支"><a href="#合并指定分支到当前分支" class="headerlink" title="合并指定分支到当前分支"></a>合并指定分支到当前分支</h2><pre class="line-numbers language-git" data-language="git"><code class="language-git"><span class="token comment"># 比如当前位于 master 分支，欲将 alex 分支合并到 master 分支</span>git merge alex<span class="token comment"># 如果有冲突，解决步骤如下：</span><span class="token comment"># 01 先查看冲突文件</span>git status<span class="token comment"># 02 手动解决冲突文件</span><span class="token comment"># 03 再次合并分支</span>git merge alex<span class="token comment"># 04 添加修改到缓存区</span>git add .<span class="token comment"># 05 提交到本地仓库</span>git commit -m <span class="token string">"merge fixed"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查看分支的合并情况"><a href="#查看分支的合并情况" class="headerlink" title="查看分支的合并情况"></a>查看分支的合并情况</h2><pre class="line-numbers language-git" data-language="git"><code class="language-git">git log --graph --pretty=oneline --abbrev-commit或者直接使用 git log --graph 命令可以看到分支合并图。<span class="token comment"># 设置别名查看所有的提交记录</span>git config --global alias.lg <span class="token string">"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h2><pre class="line-numbers language-git" data-language="git"><code class="language-git"><span class="token comment"># 合并代码之后删除分支 </span>git branch -d 分支名<span class="token comment"># 没有合并代码删除分支 </span>git branch -D 分支名<span class="token comment"># 删除远程分支（本地分支需要再次手动删除）</span>git push origin -d 分支名<span class="token comment"># 比如删除 alex 分支</span>git branch -d alex<span class="token comment"># 删除远程 alex 分支</span>git push origin -d alex<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h2><pre class="line-numbers language-git" data-language="git"><code class="language-git"><span class="token comment"># 只查看远程分支</span>git branch -r<span class="token comment"># 只查看本地分支</span>git branch<span class="token comment"># 查看所有远程分支和本地分支</span>git branch -a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="拉取远程分支并创建同名本地分支"><a href="#拉取远程分支并创建同名本地分支" class="headerlink" title="拉取远程分支并创建同名本地分支"></a>拉取远程分支并创建同名本地分支</h2><pre class="line-numbers language-git" data-language="git"><code class="language-git"><span class="token comment"># 方法一（此方法建立的本地分支和远程分支会有映射关系）</span>git checkout -b [本地分支名] origin/[远程分支名]举例：git checkout -b alex origin/alex<span class="token comment"># 方法二（此方法建立的本地分支和远程分支没有映射关系）</span>git fetch origin [远程分支名]:[本地分支名]举例：git fetch origin alex:alex<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查看本地分支和远程分支的映射关系（远程有的分支而本地没有的分支不会出现）"><a href="#查看本地分支和远程分支的映射关系（远程有的分支而本地没有的分支不会出现）" class="headerlink" title="查看本地分支和远程分支的映射关系（远程有的分支而本地没有的分支不会出现）"></a>查看本地分支和远程分支的映射关系（远程有的分支而本地没有的分支不会出现）</h2><pre class="line-numbers language-git" data-language="git"><code class="language-git">git branch -vv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="手动建立本地分支和远程分支的映射关系"><a href="#手动建立本地分支和远程分支的映射关系" class="headerlink" title="手动建立本地分支和远程分支的映射关系"></a>手动建立本地分支和远程分支的映射关系</h2><pre class="line-numbers language-git" data-language="git"><code class="language-git">git branch -u origin/[分支名]或者git branch --set-upstream-to origin/[分支名]或者git branch --set-upstream-to=origin/[远程分支名] [本地分支名]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="推送分支"><a href="#推送分支" class="headerlink" title="推送分支"></a>推送分支</h2><pre class="line-numbers language-git" data-language="git"><code class="language-git">git push -u origin &lt;branch name&gt; <span class="token comment"># 第一次推送的时候添加 -u 参数，给本地分支和远程分支创建连接关系，当第二次再次推送时，则不需要添加 -u 参数</span><span class="token comment"># 比如：推送 dev 分支</span>git push origin dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="查看远程库的信息"><a href="#查看远程库的信息" class="headerlink" title="查看远程库的信息"></a>查看远程库的信息</h2><pre class="line-numbers language-git" data-language="git"><code class="language-git">git remote<span class="token comment"># 查看远程库更加详细的信息</span><span class="token comment"># 这里可以看到抓取和推送的 origin 的地址</span>git remote -v （小写的v）<span class="token comment"># 删除远程库连接</span>git remote rm &lt;origin name&gt;<span class="token comment"># eg：删除远程 origin 连接</span>git remote rm origin<span class="token comment"># 添加远程库连接</span>git remote add &lt;origin name&gt; &lt;ssh or http&gt;<span class="token comment"># eg: 关联本人 GitHub 连接，并连接名为 myGitHub</span>git remote add myGitHub git@github.com:Alex66668888/demo.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="多处备份"><a href="#多处备份" class="headerlink" title="多处备份"></a>多处备份</h2><h3 id="一个-pull-多个-push"><a href="#一个-pull-多个-push" class="headerlink" title="一个 pull + 多个 push"></a>一个 pull + 多个 push</h3><pre class="line-numbers language-git" data-language="git"><code class="language-git"><span class="token comment"># 添加远程连接</span><span class="token command">$ git remote add origin git@gitee.com:pudongping/tt.git</span><span class="token comment"># 查看远程连接地址，可以看到只有一个 fetch 地址和一个 push 地址</span><span class="token command">$ git remote<span class="token parameter"> -v</span></span>origin  git@gitee.com:pudongping/tt.git (fetch)origin  git@gitee.com:pudongping/tt.git (push)<span class="token comment"># 添加 github 推送地址</span><span class="token command">$ git remote set-url<span class="token parameter"> --add</span> origin git@github.com:pudongping/tt.git</span><span class="token comment"># 查看远程连接地址，可以看到只有一个 fetch 地址和两个 push 地址</span><span class="token command">$ git remote<span class="token parameter"> -v</span></span>origin  git@gitee.com:pudongping/tt.git (fetch)origin  git@gitee.com:pudongping/tt.git (push)origin  git@github.com:pudongping/tt.git (push)<span class="token comment"># 添加 gitlab 推送地址</span><span class="token command">$ git remote set-url<span class="token parameter"> --add</span> origin git@gitlab.com:pudongping/t1.git</span><span class="token comment"># 查看远程连接地址，可以看到只有一个 fetch 地址和三个 push 地址</span><span class="token command">$ git remote<span class="token parameter"> -v</span></span>origin  git@gitee.com:pudongping/tt.git (fetch)origin  git@gitee.com:pudongping/tt.git (push)origin  git@github.com:pudongping/t1.git (push)origin  git@gitlab.com:pudongping/tt.git (push)<span class="token comment"># 推送到远程分支，就可以看到已经同步到多个平台上去了，一次 push 到多个远程仓库</span>git push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="git-add-三种状态命令比较"><a href="#git-add-三种状态命令比较" class="headerlink" title="git add 三种状态命令比较"></a>git add 三种状态命令比较</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>git add .</td><td>提交所有修改的和新建的数据暂存区 (提交当前文件夹下所有修改)</td></tr><tr><td>git add -u</td><td>提交所有被删除和修改的文件到数据暂存区（等同于git add -update）</td></tr><tr><td>git add -A</td><td>提交所有被删除、被替换、被修改和新增的文件到数据暂存区（等同于git add –all）</td></tr></tbody></table><h2 id="已经推送（push）过的文件，想从-git-远程库中删除，并在以后的提交中忽略，但是却还想在本地保留这个文件"><a href="#已经推送（push）过的文件，想从-git-远程库中删除，并在以后的提交中忽略，但是却还想在本地保留这个文件" class="headerlink" title="已经推送（push）过的文件，想从 git 远程库中删除，并在以后的提交中忽略，但是却还想在本地保留这个文件"></a>已经推送（push）过的文件，想从 git 远程库中删除，并在以后的提交中忽略，但是却还想在本地保留这个文件</h2><pre class="line-numbers language-git" data-language="git"><code class="language-git">git rm --cached [file-path]git rm --cached config/pay.php<span class="token comment"># 如果是目录的话，则需要</span>git rm -r --cached [dir_name]git push<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="已经推送（push）过的文件，想在以后的提交时忽略此文件，即使本地已经修改过，而且不删除-git-远程库中相应的文件"><a href="#已经推送（push）过的文件，想在以后的提交时忽略此文件，即使本地已经修改过，而且不删除-git-远程库中相应的文件" class="headerlink" title="已经推送（push）过的文件，想在以后的提交时忽略此文件，即使本地已经修改过，而且不删除 git 远程库中相应的文件"></a>已经推送（push）过的文件，想在以后的提交时忽略此文件，即使本地已经修改过，而且不删除 git 远程库中相应的文件</h2><pre class="line-numbers language-git" data-language="git"><code class="language-git"><span class="token comment"># 只对文件有效</span>git update-index --assume-unchanged [file-path]git update-index --assume-unchanged config/pay.php<span class="token comment"># 如果需要恢复提交</span>git update-index --no-assume-unchanged [file-path]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="合并一个分支上的修改到当前分支"><a href="#合并一个分支上的修改到当前分支" class="headerlink" title="合并一个分支上的修改到当前分支"></a>合并一个分支上的修改到当前分支</h2><pre class="line-numbers language-git" data-language="git"><code class="language-git"><span class="token comment"># 比如说 test1 分支上有一个提交 512d725 现在想将这个提交合并到 test2 分支上</span><span class="token comment"># 先切换到 test2 分支上</span>git checkout test2<span class="token comment"># 择优挑选（此时还是在 test2 分支上）</span>git cherry-pick 512d725 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 半小时入门 &lt;第二章&gt;</title>
      <link href="posts/13c0012.html"/>
      <url>posts/13c0012.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git-半小时入门"><a href="#Git-半小时入门" class="headerlink" title="Git 半小时入门 <第二章>"></a>Git 半小时入门 &lt;第二章&gt;</h1><h2 id="使用-Git"><a href="#使用-Git" class="headerlink" title="使用 Git"></a>使用 Git</h2><ol><li>新项目如何使用 git ？</li><li>已有项目如何使用 git 管理代码？</li><li>如何回退版本？</li><li>如何撤销修改？</li><li>分支管理</li><li>多人协作</li><li>忽略文件的写法</li></ol><h3 id="新项目如何使用Git"><a href="#新项目如何使用Git" class="headerlink" title="新项目如何使用Git"></a>新项目如何使用Git</h3><ol><li>创建 gitdemo 目录（创建版本库）</li></ol>  <pre class="line-numbers language-git" data-language="git"><code class="language-git">mkdir gitdemo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>切换到版本库中，并初始化 git （初始化的意思是将当前目录交给 git 管理）</li></ol>  <pre class="line-numbers language-git" data-language="git"><code class="language-git">cd gitdemo &amp;&amp; git init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-f250d2a5e2802918.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="可以看到当前文件夹出现 .git 目录"></p><ol start="3"><li>写入测试文件  <pre class="line-numbers language-git" data-language="git"><code class="language-git">echo 123 &gt; demo.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>查看当前 git 仓库状态 （此时的状态为 「未提交」）</li></ol>  <pre class="line-numbers language-git" data-language="git"><code class="language-git">git status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-525075aa4e3a14fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="此时的状态为没有将文件添加到 git 中"></p><ol start="5"><li>提交当前 『当前修改』到暂存区</li></ol><ul><li>提交单个文件<pre class="line-numbers language-git" data-language="git"><code class="language-git">git add demo.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>提交多个文件 <pre class="line-numbers language-git" data-language="git"><code class="language-git">git add demo.txt other.txt text.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>提交所有修改   <pre class="line-numbers language-git" data-language="git"><code class="language-git">git add -A # 提交所有修改<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ol start="6"><li>提交到仓库中（将暂存区中的内容同步到本地仓库中） <pre class="line-numbers language-git" data-language="git"><code class="language-git">git commit -m “&lt;description current commit&gt;”<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-a2a7007346846470.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ol start="7"><li>创建远程库（这里使用全球最大的 git 仓库 GitHub 作为示范）</li></ol><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-a3d1feac668ed82a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-ad92163aeb466d05.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-8103d08391732d57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="至此，在 GitHub 上面创建远程仓库已经完毕。"></p><ol start="8"><li>本地仓库和远程仓库创建关联关系  <pre class="line-numbers language-git" data-language="git"><code class="language-git">git remote add origin git@github.com:&lt;Your name&gt;/demogit.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>将本地仓库中的代码推送到远程仓库中  <pre class="line-numbers language-git" data-language="git"><code class="language-git">git push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>从远程仓库中拉取代码到本地仓库中  <pre class="line-numbers language-git" data-language="git"><code class="language-git">git fetch origin master &amp;&amp; git pull <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>也可以直接使用 git pull</li></ol><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-a9df74b0b3da3cc7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ol start="11"><li>生成 SSH Key。</li></ol><p>我们知道 GitHub 远程库支持 HTTPS 和 SSH 两种方式通讯，如果你就想采用 HTTPS 的话，那么请忽略这一步，但是如果采用 HTTPS 通讯，每次提交的时候就需要输入一次账号和密码，也挺烦的。接下来讲解，如何采用 SSH 协议通讯。</p><p>生成 SSH Key 密钥对</p>  <pre class="line-numbers language-git" data-language="git"><code class="language-git">ssh-keygen -t rsa -C <span class="token string">"youremail@example.com"</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果一切顺利的话，可以在用户主目录里找到 .ssh 目录，里面有 id_rsa 和 id_rsa.pub 两个文件，这两个就是 SSH Key 的秘钥对，id_rsa 是私钥，不能泄露出去，id_rsa.pub 是公钥，可以放心地告诉任何人。<br>将生成的 id_rsa.pub 公钥内容添加到 GitHub 中</p><p>生成 SSH 密钥对</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-11d85bb5fe6494d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>查看生成的密钥对，生成的路径在 「用户家目录/.ssh」</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-7e60b43f07906de8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-8d9715611944f0a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-17283add08b5bad4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-a79d366fc59768a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>将公钥添加到 GitHub 中，至此我们再次去推送一次本地代码到远程库，即可看见可以推送成功了！</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-1d6bd88c7c40f6b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="新项目如何使用-Git-（总结）"><a href="#新项目如何使用-Git-（总结）" class="headerlink" title="新项目如何使用 Git （总结）"></a>新项目如何使用 Git （总结）</h3><p>一个新项目如何使用 git 来管理，并创建远程仓库？</p><ol><li>使用 GitHub、gitee、coding 创建好远程仓库</li><li>如果采用 ssh 协议通讯的话，那么需要先在本地生成 ssh key 密钥对，并且将公钥添加到远程库账号 ssh 相关设置中，如果采用 https 协议通讯的话，则跳过此步骤。<br><code>ssh-keygen -t rsa -C "youremail@example.com" </code></li><li>将代码通过远程库来管理<br>可以直接将远程仓库克隆到本地，此种方法最为简单。<br><code>git clone git@github.com:&lt;Your GitHub account name&gt;/demogit.git</code><br>可以先在本地创建一个仓库之后，再将本地仓库和远程仓库创建关联关系，稍许复杂。</li></ol><ul><li><p>创建项目目录并 git 初始化项目</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">mkdir -p ~/demogit &amp;&amp; cd ~/demogit &amp;&amp; git init <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建远程连接</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git remote add origin git@github.com:&lt;Your GitHub account name&gt;/demogit.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看远程连接是否创建成功</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git remote -vv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ol start="4"><li>创建测试文件并提交代码到本地仓库  <pre class="line-numbers language-git" data-language="git"><code class="language-git">cd ~/demogit &amp;&amp; echo 123 &gt; demo.txt &amp;&amp; git add -A &amp;&amp; git commit -m “commit for test” <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>将本地代码推送到远程库  <pre class="line-numbers language-git" data-language="git"><code class="language-git"><span class="token comment"># 第一次推送的时候需要加上 「-u」参数，后续推送的时候，可以不用加</span>git push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="已有项目如何使用git管理代码？"><a href="#已有项目如何使用git管理代码？" class="headerlink" title="已有项目如何使用git管理代码？"></a>已有项目如何使用git管理代码？</h3><ol><li>先创建远程仓库，然后将远程空仓库拉到本地，之后将已有的项目全部复制到空本地仓库中</li><li>本地直接在项目中 git 初始化项目，然后创建远程连接，之后将本地代码全部添加到 「暂存区」，再提交到本地仓库中，之后再推送。</li></ol><h3 id="如何回退版本？"><a href="#如何回退版本？" class="headerlink" title="如何回退版本？"></a>如何回退版本？</h3><ol><li>reset （直接回退版本）<pre class="line-numbers language-git" data-language="git"><code class="language-git">git reset --hard HEAD^  # 回退到上一个版本git reset --hard HEAD^^^  # 回退到上三个版本git reset --hard HEAD~100  # 回退到上 100 个版本git reset --hard &lt;commit id&gt; # 回退到指定版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>revert （将回退过程当成一个版本提交）<pre class="line-numbers language-git" data-language="git"><code class="language-git">git revert &lt;commit id&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>如何查看提交版本号？<br>  </p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git log -2  # 查看倒数 2 条提交记录，提交记录中含有版本号git reflog  # 查看所有的提交版本号，如果要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。git log --pretty=oneline<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p></p><h3 id="如何撤销修改？"><a href="#如何撤销修改？" class="headerlink" title="如何撤销修改？"></a>如何撤销修改？</h3><p>因为 git 主要有三种状态，因此就有三种可能性，工作区、暂存区、版本库</p><ol><li><p>当修改只在工作区，还没有 git add 时： （一定要注意有 「–」）</p>  <pre class="line-numbers language-git" data-language="git"><code class="language-git">git checkout -- &lt;filename&gt;  比如： git checkout -- example.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>当修改在暂存区时，已经 git add：</p>  <pre class="line-numbers language-git" data-language="git"><code class="language-git">2.1. git reset HEAD &lt;filename&gt;  比如：git reset HEAD example.txt2.2. git checkout -- &lt;filename&gt;  比如：git checkout -- example.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>当修改已经从暂存区提交到了本地仓库，已经 git commit：</p>  <pre class="line-numbers language-git" data-language="git"><code class="language-git">git reset --hard HEAD^<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><h4 id="什么是分支？"><a href="#什么是分支？" class="headerlink" title="什么是分支？"></a>什么是分支？</h4><p>分支是用来将特性开发绝缘开来的。在你创建仓库的时候，master 是“默认的”。在其他分支上进行开发，完成后再将它们合并到主分支上。</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-1ebabe114f060966.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="你正在学习git，同时异步空间的你又在学习svn，最后合并，二者你都会了"></p><ul><li><p>创建一个叫做 「feature_x」 分支，并切换到 「feature_x」 分支</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git checkout -b feature_x  或者 git switch -c feature_x <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建分支</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git branch feature_x<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>从当前分支切换到新的分支</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git checkout feature_x  或者 git switch feature_x<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看分支</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git branch<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除分支</p><pre class="line-numbers language-git" data-language="git"><code class="language-git"><span class="token comment"># 将新建的分支删除（已经合并后）</span>git branch -d feature_x<span class="token comment"># （未合并，强删）</span>git branch -D feature_x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>合并某分支到当前分支</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git merge &lt;branch name&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>除非将分支推送到远程仓库，不然该分支其他人不可见</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git push origin &lt;branch&gt;  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看分支合并图</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git log --graph <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-7a1ec719f624521e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h3><ol><li>首先，可以试图用 <strong>git push origin <branch-name></branch-name></strong> 推送自己的修改；</li><li>如果推送失败，则因为远程分支比你的本地更新，需要先用 <strong>git pull</strong> 试图合并；</li><li>如果合并有冲突，则解决冲突，并在本地提交；</li><li>没有冲突或者解决掉冲突后，再用 <strong>git push origin <branch-name></branch-name></strong> 推送就能成功！</li></ol><p>如果 git pull 提示 no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令 **git branch –set-upstream-to <branch-name> origin/<branch-name>**。<br>直接从远程仓库拉取指定分支，并在本地创建和远程同名分支</branch-name></branch-name></p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git branch --set-upstream branch-name origin/branch-name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="忽略文件的写法-（-gitignore）"><a href="#忽略文件的写法-（-gitignore）" class="headerlink" title="忽略文件的写法 （.gitignore）"></a>忽略文件的写法 （.gitignore）</h3><ol><li>忽略文件的作用<br>忽略不想提交的文件</li><li>忽略文件的写法<br>直接在 .gitignore 文件中写 test.txt  # 表示忽略和 .gitignore 平级的 test.txt 文件<br>直接写 upload/  # 表示忽略和 .gitignore 平级的 upload 下所有的文件等同于 upload/*<br>直接写 upload/*.txt  # 表示忽略和 .gitignore 平级的 upload 文件夹下所有的以 .txt 命名的文件<br>直接写 *.py[cod] hu’lue # 表示忽略和 .gitignore 平级的 所有文件名是 .pyc 或 .pyo 或 .pyd 的文件<br>忽略所有 .txt 的文件，但是除了 a.txt 的文件的写法 *.txt !a.txt</li><li>如果某个文件已经在忽略文件中忽略，但是又想要提交该文件<br>git  add -f <file name="">  # 强制提交 force.txt 文件 =&gt; git add -f force.txt</file></li><li>检查某个文件是否被忽略文件所忽略<br>git check-ignore -v <file name=""> # 查看 force.txt 是否被忽略 =&gt;  git check-ignore -v force.txt</file></li></ol>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 半小时入门 &lt;第一章&gt;</title>
      <link href="posts/89044c18.html"/>
      <url>posts/89044c18.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git-半小时入门"><a href="#Git-半小时入门" class="headerlink" title="Git 半小时入门 <第一章>"></a>Git 半小时入门 &lt;第一章&gt;</h1><h2 id="邂逅-Git"><a href="#邂逅-Git" class="headerlink" title="邂逅 Git"></a>邂逅 Git</h2><ol><li>git 是什么？<br>Git 是目前世界上最先进的分布式版本控制系统（没有之一）。</li><li>git 可以干什么？<br>对文件进行版本控制。</li><li>git 的优点？<br>高端大气上档次！（速度最快，操作简单）</li><li>git 和 CVS、SVN 这些版本控制系统有什么区别？<br>最大的一个区别在于 CVS、SVN ……这些版本控制系统是 「集中式」的版本控制系统，而 Git 是 「分布式」的版本控制系统。</li><li>git 起源原因<br>很多人都知道，Linus 在 1991 年创建了开源的 Linux 系统，起初 Linus 通过手工合并代码，但随后随着代码量越来越大，Linus 无法再通过手工合并代码，因此采用了商业的版本控制系统 BitKeeper，起初 BitKeeper 的东家免费将该版本控制系统提供给 Linux 社区使用，但开发 Samba 的 Andrew 试图破解 BitKeeper 的协议，这下把 BitKeeper 的东家给惹怒了，要收回 Linux 社区的免费使用权，结果 Linus 花了两周时间自己用 C 写了一个分布式版本控制系统，这就是 Git！随后在 2008年，GitHub 网站上线了，它为开源项目免费提供 Git 存储，无数开源项目开始迁移至 GitHub，包括 jQuery，PHP，Ruby 等等。</li></ol><h3 id="集中式和分布式的区别"><a href="#集中式和分布式的区别" class="headerlink" title="集中式和分布式的区别"></a>集中式和分布式的区别</h3><p><strong>集中式版本控制系统</strong>，版本库是集中存放在中央服务器的，<br>而干活的时候，用的都是自己的电脑，所以要先从中央服务器<br>取得最新的版本，然后开始干活，干完活了，再把自己的活<br>推送给中央服务器。</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-2aa9d28c6ff90e8f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="集中式版本控制系统"></p><blockquote><p>最大的毛病就是必须联网才能工作，并且如果中央服务器出现了问题，那么所有人都没法干活儿了</p></blockquote><p><strong>分布式版本控制系统</strong>根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-8265e227f4d5f25b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="分布式版本控制系统"></p><h2 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h2><ol><li>在 Linux 上安装 Git<br>Debian 或 Ubuntu 系列： sudo apt-get install git 或者 sudo apt-get install git-core（因为以前有个软件也叫 GIT（GNU Interactive Tools），结果 Git 就只能叫 git-core 了。由于 Git 名气实在太大，后来就把 GNU Interactive Tools 改成 gnuit，git-core 正式改为 git。）</li></ol><ul><li>Redhat 或 CentOS 系列：yum install git</li><li>Mac OS X 上安装 git有两种方法<ul><li>一是安装homebrew，然后通过homebrew安装Git，具体方法请参考homebrew的文档：<a href="http://brew.sh/">http://brew.sh/</a></li><li>二是直接从AppStore安装Xcode，Xcode集成了Git，不过默认没有安装，你需要运行Xcode，选择菜单“Xcode”-&gt;“Preferences”，在弹出窗口中找到“Downloads”，选择“Command Line Tools”，点“Install”就可以完成安装了。</li></ul></li></ul><ol start="2"><li>在 Windows 上安装 git<br>直接在 git 官网 <a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a> 上面下载 .exe 软件，然后一直点击下一步即可。</li></ol><h3 id="以下讲解在-Windows-系统下安装"><a href="#以下讲解在-Windows-系统下安装" class="headerlink" title="以下讲解在 Windows 系统下安装"></a>以下讲解在 Windows 系统下安装</h3><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-abc8c279ef435fc6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="官网下载 Git "></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-76eb47be74fdfd67.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="一直点击“Next”即可安装"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-7e64397183b9823b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="鼠标右键或者任务栏中出现 “Git Bash”则表示安装成功"></p><h4 id="配置-GIT"><a href="#配置-GIT" class="headerlink" title="配置 GIT"></a>配置 GIT</h4><blockquote><p>因为 Git 是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和 Email 地址。</p></blockquote><ul><li><p>配置用户名</p><pre class="line-numbers language-git" data-language="git"><code class="language-git">git config --global user.name <span class="token string">"&lt;Your Name&gt;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-2cab46c99eac9e15.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置用户名"></p><ul><li>配置 Email 地址</li></ul><pre class="line-numbers language-git" data-language="git"><code class="language-git">git config --global user.email <span class="token string">"&lt;email@example.com&gt;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-912cdc2fb3e06ec5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置 Email 地址"></p><h3 id="使用版本控制系统须知"><a href="#使用版本控制系统须知" class="headerlink" title="使用版本控制系统须知"></a>使用版本控制系统须知</h3><p><strong>所有的版本控制系统，其实只能跟踪文本文件的改动，</strong> 比如 TXT 文件，网页，所有的程序代码等等，Git 也不例外。<br>版本控制系统可以告诉你每次的改动，比如在第 5 行加了一个单词“Linux”，在第 8 行删了一个单词“Windows”。<br>而 <strong>图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，</strong> 只能把二进制文件每次改动串起来，<br>也就是只知道图片从 100KB 改成了 120KB，但到底改了啥，版本控制系统不知道，也没法知道。</p><p>不幸的是，Microsoft 的 Word 格式是二进制格式，因此， <strong>版本控制系统是没法跟踪 Word 文件的改动的，</strong> 如果要真正使用版本控制系统，<br>就要以纯文本方式编写文件。</p><p>因为文本是有编码的，比如中文有常用的 GBK 编码，日文有 Shift_JIS 编码，如果没有历史遗留问题，强烈建议使用标准的 UTF-8 编码，<br>所有语言使用同一种编码，既没有冲突，又被所有平台所支持。</p><p>使用 Windows 的童鞋要特别注意：</p><p><strong>千万不要使用 Windows 自带的记事本编辑任何文本文件。</strong> 原因是 Microsoft 开发记事本的团队使用了一个非常弱智的行为来保存 UTF-8 编码的文件，<br>他们自作聪明地在每个文件开头添加了 0xefbbbf（十六进制）的字符，你会遇到很多不可思议的问题，比如，网页第一行可能会显示一个“?”，<br>明明正确的程序一编译就报语法错误，等等，都是由记事本的弱智行为带来的。建议你下载 Notepad++ 代替记事本，不但功能强大，而且免费！<br>记得把 Notepad++ 的默认编码设置为 UTF-8 without BOM 即可：</p><h3 id="Git-工作流"><a href="#Git-工作流" class="headerlink" title="Git 工作流"></a>Git 工作流</h3><p>你的本地仓库由 git 维护的三棵“树”组成。<br>第一个是你的 工作目录，它持有实际文件；<br>第二个是 缓存区（Index），它像个缓存区域，临时保存你的改动；<br>最后是 HEAD，指向你最近一次提交后的结果。并且 git 为我们自动创建的<br>第一个分支 master，以及指向 master 的一个指针叫 HEAD。</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-8fb97ab7eaf4a408.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Git工作流"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-963c15ac783353df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Git工作流"></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用 php 写一个类似于 laravel 框架的服务容器？</title>
      <link href="posts/de7d71ca.html"/>
      <url>posts/de7d71ca.html</url>
      
        <content type="html"><![CDATA[<h1 id="如何使用-php-写一个类似于-laravel-框架的服务容器？"><a href="#如何使用-php-写一个类似于-laravel-框架的服务容器？" class="headerlink" title="如何使用 php 写一个类似于 laravel 框架的服务容器？"></a>如何使用 php 写一个类似于 laravel 框架的服务容器？</h1><blockquote><p>这篇文章可能文字不会太多，毕竟说再多都还不如直接看代码来的实在 😀，以下我会把核心的代码都先贴出来，里面都有比较完善的注释信息，可以对着看。另外如果自己测试的话，可以直接下载我的源码，关于如何测试，源码中都有示例代码。</p></blockquote><ul><li><a href="https://gitee.com/pudongping/php-base-container#/pudongping/php-base-container">Gitee 地址</a></li><li><a href="https://github.com/pudongping/php-base-container">GitHub 地址</a></li></ul><h2 id="以下是实现容器的核心代码"><a href="#以下是实现容器的核心代码" class="headerlink" title="以下是实现容器的核心代码"></a>以下是实现容器的核心代码</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/** * 实现一个简单的 php 容器 * * Created by PhpStorm * User: Alex * Date: 2021-08-03 17:51 * E-mail: &lt;276558492@qq.com&gt; */</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Container</span><span class="token punctuation">{</span>    <span class="token comment">/**     * 当前全局可用的容器(如果有)     *     * @var static     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token variable">$instance</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 容器的绑定     *     * @var array[]     */</span>    <span class="token keyword">private</span> <span class="token variable">$bindings</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 容器的共享实例     *     * @var object[]     */</span>    <span class="token keyword">private</span> <span class="token variable">$instances</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">instances</span><span class="token punctuation">[</span><span class="token class-name static-context">Container</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token variable">$instance</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token variable">$instance</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">self</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token variable">$instance</span><span class="token operator">-&gt;</span><span class="token property">instances</span><span class="token punctuation">[</span><span class="token class-name static-context">Container</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token variable">$instance</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token variable">$instance</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 在容器中注册共享绑定     *     * @param $abstract     * @param $concrete     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">singleton</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">,</span> <span class="token variable">$concrete</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">,</span> <span class="token variable">$concrete</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 向容器注册绑定     *     * @param $abstract     * @param $concrete     * @param false $shared     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">bind</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">,</span> <span class="token variable">$concrete</span><span class="token punctuation">,</span> <span class="token variable">$shared</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$concrete</span> <span class="token keyword">instanceof</span> <span class="token class-name">Closure</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">bindings</span><span class="token punctuation">[</span><span class="token variable">$abstract</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">compact</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'concrete'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'shared'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$concrete</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span> <span class="token function">class_exists</span><span class="token punctuation">(</span><span class="token variable">$concrete</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidArgumentException</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Argument 2 must be callback or class.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">bindings</span><span class="token punctuation">[</span><span class="token variable">$abstract</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">compact</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'concrete'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'shared'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 将现有实例注册为容器中的共享实例     *     * @param string $abstract     * @param mixed $instance     * @return mixed     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">instance</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">,</span> <span class="token variable">$instance</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">instances</span><span class="token punctuation">[</span><span class="token variable">$abstract</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$instance</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$instance</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 从容器解析给定类型     *     * @param string $abstract  目标类的名称     * @param array $parameters  实例化目标类时所需要的参数（非对象类型约束参数数组）     * @return mixed|object     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">make</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$abstract</span><span class="token punctuation">,</span> <span class="token keyword type-hint">array</span> <span class="token variable">$parameters</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">instances</span><span class="token punctuation">[</span><span class="token variable">$abstract</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">bindings</span><span class="token punctuation">[</span><span class="token variable">$abstract</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">class_exists</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">InvalidArgumentException</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Target class [<span class="token interpolation"><span class="token variable">$abstract</span></span>] does not exist."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">instances</span><span class="token punctuation">[</span><span class="token variable">$abstract</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">instances</span><span class="token punctuation">[</span><span class="token variable">$abstract</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">bindings</span><span class="token punctuation">[</span><span class="token variable">$abstract</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$concrete</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">bindings</span><span class="token punctuation">[</span><span class="token variable">$abstract</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'concrete'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_callable</span><span class="token punctuation">(</span><span class="token variable">$concrete</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token variable">$instance</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">resolveCallable</span><span class="token punctuation">(</span><span class="token variable">$concrete</span><span class="token punctuation">,</span> <span class="token variable">$parameters</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token variable">$instance</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">resolveClass</span><span class="token punctuation">(</span><span class="token variable">$concrete</span><span class="token punctuation">,</span> <span class="token variable">$parameters</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token variable">$instance</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">resolveClass</span><span class="token punctuation">(</span><span class="token variable">$abstract</span><span class="token punctuation">,</span> <span class="token variable">$parameters</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">bindings</span><span class="token punctuation">[</span><span class="token variable">$abstract</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">bindings</span><span class="token punctuation">[</span><span class="token variable">$abstract</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'shared'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">instances</span><span class="token punctuation">[</span><span class="token variable">$abstract</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$instance</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token variable">$instance</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>Exception</span> <span class="token variable">$exception</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$exception</span><span class="token operator">-&gt;</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$exception</span><span class="token operator">-&gt;</span><span class="token function">getTraceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 解决回调函数时的依赖     *     * @param callable $callbackName  目标回调函数     * @param array $realArgs     * @return mixed     * @throws ReflectionException     */</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">resolveCallable</span><span class="token punctuation">(</span><span class="token keyword type-hint">callable</span> <span class="token variable">$callbackName</span><span class="token punctuation">,</span> <span class="token keyword type-hint">array</span> <span class="token variable">$realArgs</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$reflector</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReflectionFunction</span><span class="token punctuation">(</span><span class="token variable">$callbackName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 获取回调函数的参数列表</span>        <span class="token variable">$parameters</span> <span class="token operator">=</span> <span class="token variable">$reflector</span><span class="token operator">-&gt;</span><span class="token function">getParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$parameters</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$list</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">resolveDependencies</span><span class="token punctuation">(</span><span class="token variable">$parameters</span><span class="token punctuation">,</span> <span class="token variable">$realArgs</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 调用函数参数</span>        <span class="token keyword">return</span> <span class="token variable">$reflector</span><span class="token operator">-&gt;</span><span class="token function">invokeArgs</span><span class="token punctuation">(</span><span class="token variable">$list</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 解决对象时的依赖     *     * @param string|object $className  目标类的名称     * @param array $realArgs     * @return object  目标类对应的实例对象     * @throws ReflectionException     */</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">resolveClass</span><span class="token punctuation">(</span><span class="token variable">$className</span><span class="token punctuation">,</span> <span class="token keyword type-hint">array</span> <span class="token variable">$realArgs</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment">// 对目标类进行反射（解析其方法、属性）</span>            <span class="token variable">$reflector</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReflectionClass</span><span class="token punctuation">(</span><span class="token variable">$className</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ReflectionException</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Target class [<span class="token interpolation"><span class="token variable">$className</span></span>] does not exist."</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token variable">$reflector</span><span class="token operator">-&gt;</span><span class="token function">isInstantiable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 检查类是否可以实例化</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Target class [<span class="token interpolation"><span class="token variable">$className</span></span>] is not instantiable."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 获取目标类的构造函数，当类不存在构造函数时返回 null</span>        <span class="token variable">$constructor</span> <span class="token operator">=</span> <span class="token variable">$reflector</span><span class="token operator">-&gt;</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 没有构造函数，则直接实例化</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$constructor</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// return new $className;  // 或者也可以直接这样去实例化，因为目标类没有构造函数，不需要传参数</span>            <span class="token keyword">return</span> <span class="token variable">$reflector</span><span class="token operator">-&gt;</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// 获取构造函数的参数列表</span>        <span class="token variable">$parameters</span> <span class="token operator">=</span> <span class="token variable">$constructor</span><span class="token operator">-&gt;</span><span class="token function">getParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 递归解析构造函数的参数</span>        <span class="token variable">$list</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">resolveDependencies</span><span class="token punctuation">(</span><span class="token variable">$parameters</span><span class="token punctuation">,</span> <span class="token variable">$realArgs</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 从给出的参数创建一个新的类实例</span>        <span class="token keyword">return</span> <span class="token variable">$reflector</span><span class="token operator">-&gt;</span><span class="token function">newInstanceArgs</span><span class="token punctuation">(</span><span class="token variable">$list</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 递归解析依赖树     *     * @param array $dependencies  目标类的构造函数参数列表     * @param array $parameters  实例化目标类时的其他参数（非类型提示参数）     * @return array  实例化目标类时构造函数所需的所有参数     */</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">resolveDependencies</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$dependencies</span><span class="token punctuation">,</span> <span class="token keyword type-hint">array</span> <span class="token variable">$parameters</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">// 用于存储所有的参数</span>        <span class="token variable">$results</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$dependencies</span> <span class="token keyword">as</span> <span class="token variable">$dependency</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 获取类型提示类</span>            <span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token variable">$dependency</span><span class="token operator">-&gt;</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 如果类为 null，则表示依赖项是字符串或其他类型</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$parameterName</span> <span class="token operator">=</span> <span class="token variable">$dependency</span><span class="token operator">-&gt;</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取参数的名称</span>                <span class="token comment">// 检查参数是否有默认值</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token variable">$dependency</span><span class="token operator">-&gt;</span><span class="token function">isDefaultValueAvailable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$parameters</span><span class="token punctuation">[</span><span class="token variable">$parameterName</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token variable">$parameterName</span> <span class="token operator">.</span> <span class="token string single-quoted-string">' has no value'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token variable">$results</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$parameters</span><span class="token punctuation">[</span><span class="token variable">$parameterName</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment">// 参数有默认值的时候</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$parameters</span><span class="token punctuation">[</span><span class="token variable">$parameterName</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token variable">$results</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$parameters</span><span class="token punctuation">[</span><span class="token variable">$parameterName</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token variable">$results</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$dependency</span><span class="token operator">-&gt;</span><span class="token function">getDefaultValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取参数的默认值</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment">// 类型提示确定是一个类时，则需要递归处理依赖项</span>                <span class="token variable">$objName</span> <span class="token operator">=</span> <span class="token variable">$obj</span><span class="token operator">-&gt;</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取依赖项的类名</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">class_exists</span><span class="token punctuation">(</span><span class="token variable">$objName</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Unable to load class: '</span> <span class="token operator">.</span> <span class="token variable">$objName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token variable">$results</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token variable">$objName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$results</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Laravel </tag>
            
            <tag> 服务容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git Tag 标签</title>
      <link href="posts/68649176.html"/>
      <url>posts/68649176.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git-Tag-标签"><a href="#Git-Tag-标签" class="headerlink" title="Git Tag 标签"></a>Git Tag 标签</h1><p>标签总是和某个 commit 挂钩。如果这个 commit 既出现在 master 分支，又出现在 dev 分支，那么在这两个分支上都可以看到这个标签。</p><ul><li>创建标签</li></ul><pre class="line-numbers language-git" data-language="git"><code class="language-git"><span class="token comment"># 给当前提交版本打标签</span>git tag &lt;tag name&gt;<span class="token comment"># eg: 打一个名称为 v1.0 的标签，此时默认将标签打到最新提交的 commit 上</span>git tag v1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>给指定提交版本打标签</li></ul><pre class="line-numbers language-git" data-language="git"><code class="language-git"><span class="token comment"># 查看历史提交的 commit id</span>git log --pretty=oneline --abbrev-commit<span class="token comment"># 给指定提交版本打标签</span>git tag &lt;tag name&gt; &lt;commit id&gt;<span class="token comment"># eg: 给提交版本号为 c53b867 的版本，打一个名称为 v0.8 的标签</span>git tag v0.8 c53b867<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建带有说明的标签，用 <code>-a</code> 指定标签名，<code>-m</code> 指定说明文字：</li></ul><pre class="line-numbers language-git" data-language="git"><code class="language-git">git tag -a &lt;tag name&gt; -m &lt;tag description&gt; &lt;commit id&gt;<span class="token comment"># eg：给版本号为 c53b867 的版本，打一个名称为 v0.8 的标签，并对 v0.8 这个标签添加说明文字为 "add v0.8 tag"</span>git tag -a v0.8 -m <span class="token string">"add v0.8 tag"</span> c53b867<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查看所有的标签 （标签不是按时间顺序列出，而是按字母排序的。）</li></ul><pre class="line-numbers language-git" data-language="git"><code class="language-git">git tag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>查看标签信息</li></ul><pre class="line-numbers language-git" data-language="git"><code class="language-git">git show &lt;tag name&gt;<span class="token comment"># eg：查看标签名得 v0.9 的标签信息</span>git show v0.9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>删除标签</li></ul><pre class="line-numbers language-git" data-language="git"><code class="language-git">git tag -d &lt;tag name&gt;<span class="token comment"># eg：删除标签名为 v0.1 的标签</span>git tag -d v0.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>推送本地标签到远程库</li></ul><pre class="line-numbers language-git" data-language="git"><code class="language-git">git push origin &lt;tag name&gt;<span class="token comment"># eg： 推送本地标签名为 v0.1 的标签到远程库中</span>git push origin v0.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>一次性推送全部尚未推送到远程的本地标签</li></ul><pre class="line-numbers language-git" data-language="git"><code class="language-git">git push origin --tags<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>如果标签已经推送到远程，想要删除远程标签</li></ul><pre class="line-numbers language-none"><code class="language-none"># 第一步：删除本地标签git tag -d v0.1# 第二步：从远程删除git push origin :refs/tags/v0.1# 第三步：在远程库中查看是否被删除<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows 下搭建 git 服务器 gogs</title>
      <link href="posts/a90b1e44.html"/>
      <url>posts/a90b1e44.html</url>
      
        <content type="html"><![CDATA[<h1 id="本文基于-windows7-64位-搭建-gogs"><a href="#本文基于-windows7-64位-搭建-gogs" class="headerlink" title="本文基于 windows7 64位 搭建 gogs"></a>本文基于 windows7 64位 搭建 gogs</h1><blockquote><p>gogs 官方文档地址：<a href="https://gogs.io/docs">https://gogs.io/docs</a><br>软件下载地址：<a href="https://dl.gogs.io/">https://dl.gogs.io/</a></p></blockquote><h1 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h1><ul><li>数据库（选择以下一项）：<ul><li><a href="http://dev.mysql.com/">MySQL</a>：版本 &gt;= 5.7</li><li><a href="http://www.postgresql.org/">PostgreSQL</a></li><li><a href="https://en.wikipedia.org/wiki/Microsoft_SQL_Server">MSSQL</a></li><li><a href="https://github.com/pingcap/tidb">TiDB</a>（实验性支持，使用 MySQL 协议连接）</li><li>或者&nbsp;<strong>什么都不安装</strong>&nbsp;直接使用 SQLite3</li></ul></li><li><a href="http://git-scm.com/">git</a>（bash）：<ul><li>服务端和客户端均需版本 &gt;= 1.7.1</li><li>Windows 系统建议使用最新版</li></ul></li><li>SSH 服务器：<ul><li><strong>如果您只使用 HTTP/HTTPS 的话请忽略此项</strong></li><li>如果您选择在 Windows 系统使用内置 SSH 服务器，请确保添加&nbsp;<code>ssh-keygen</code>&nbsp;到您的&nbsp;<code>%PATH%</code>&nbsp;环境变量中</li><li>推荐 Windows 系统使用&nbsp;<a href="http://docs.oracle.com/cd/E24628_01/install.121/e22624/preinstall_req_cygwin_ssh.htm">Cygwin OpenSSH</a>&nbsp;或&nbsp;<a href="https://www.itefix.net/copssh">Copssh</a></li><li>Windows 系统 请确保 Bash 是默认的 Shell 程序，而不是 PowerShell</li></ul></li></ul><h1 id="所需软件"><a href="#所需软件" class="headerlink" title="所需软件"></a>所需软件</h1><ul><li>必须软件<ul><li><a href="http://nssm.cc/download">NSSM</a></li><li><a href="https://git-scm.com/downloads">git</a>  最好下载最新版</li><li><a href="https://dev.mysql.com/downloads/mysql/">MySQL</a> 官方说的是版本需要大于5.7，我的版本是 5.5.3 发现也并无影响。<strong>但是存储引擎一定要使用：INNODB！</strong><br><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-ef2d29505d1077d6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="此时的版本为5.5.3"></li><li><a href="https://dl.gogs.io/0.10.1/windows_amd64.zip">gogs软件包</a> windows-64位版本</li></ul></li></ul><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol><li>将下载的 gogs_0.11.86_windows_amd64.zip 压缩包文件解压。<blockquote><p>本文解压在 E:\soft-exe 目录下</p></blockquote></li></ol><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-90a40366e1de646b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="解压出来是 gogs 文件夹"></p><ol start="2"><li>创建数据库<blockquote><p>可以直接去执行 E:\soft-exe\gogs\scripts\mysql.sql 文件，创建 gogs 数据库。（当然也可以自己去创建数据库名为 gogs 的数据库，但是建议还是直接执行 mysql.sql 脚本，毕竟官方建议）</p></blockquote></li></ol><p>mysql.sql 中的内容为以下：</p><pre class="line-numbers language-none"><code class="language-none">SET GLOBAL innodb_file_per_table = ON,           innodb_file_format = Barracuda,           innodb_large_prefix = ON;DROP DATABASE IF EXISTS gogs;CREATE DATABASE IF NOT EXISTS gogs CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>安装 git<br>这个貌似没有什么太多需要讲的，直接根据上面提供的链接地址下载 git 最新版，之后一直下一步安装即可。</li><li>注册 gogs 服务</li></ol><ul><li>修改 E:\soft-exe\gogs\scripts\windows\install-as-service.bat ,将其中的<pre class="line-numbers language-none"><code class="language-none">SET gogspath=C:/gogs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>修改成你本地的 gogs 安装路径。</li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-8b353dd27ef518c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="找到 install-as-service.bat 文件"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-9a7e1d01a357ff69.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="修改 gogspath 的值为 gogs.exe 所在文件路径"></p><ul><li>解压缩 nssm 压缩包。</li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-85a99004000632e8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=" 以上为解压缩 nssm 之后的状态"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-eefbd6e6aee7c319.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="将 nssm.exe 文件所在文件绝对路径加入到系统环境变量中"></p><ul><li>以管理员权限运行  install-as-service.bat</li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-0ba62def3fe97198.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="对着 install-as-service.bat 文件鼠标右击，以管理员权限执行"></p><blockquote><p>同样也可以使用手动执行命令去执行 install-as-service.bat 文件<br>手动执行命令的方法为：在 install-as-service.bat 文件所在文件夹下，随便点击一下空白处，然后按住 shift键，点击鼠标右键，点击 <strong>在此处打开命令窗口</strong> 输入 gogs web 命令，回车即可。</p></blockquote><ol start="5"><li>测试<br>浏览器访问：127.0.0.1:3000 即可进入配置页面（我只修改了代码仓库存放路径这一项）。（在此页面并不一定非要注册用户，我测试的时候，虽然注册了一个用户，但是最后发现还是需要再重新注册）完成配置后，E:\soft-exe\gogs\custom\conf 目录下会生成一个新的 app.ini 配置文件。</li></ol><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-585db4ac286d6008.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="E:\soft-exe\gogs\custom\conf 路径下生成了 app.ini 配置文件"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-02ed41e662d49c21.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="打开 app.ini 配置文件，发现里面的内容为在浏览器中输入的内容"></p><ol start="6"><li>注册用户（系统默认第一个用户为系统管理员）<br>再次访问 127.0.0.1:3000 ，点击注册。</li></ol><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-d80ab87d33fc9f1b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="我本地测试的电脑未安装 .net 框架，因此样式乱掉了"></p><ol start="7"><li>创建测试仓库</li></ol><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-387e54229c30b0c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Gogs </tag>
            
            <tag> Git 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 7 搭建 gogs Git 服务器</title>
      <link href="posts/7aeb56a9.html"/>
      <url>posts/7aeb56a9.html</url>
      
        <content type="html"><![CDATA[<h1 id="CentOS-7-搭建-gogs-Git-服务器"><a href="#CentOS-7-搭建-gogs-Git-服务器" class="headerlink" title="CentOS 7 搭建 gogs Git 服务器"></a>CentOS 7 搭建 gogs Git 服务器</h1><h2 id="本地环境如下："><a href="#本地环境如下：" class="headerlink" title="本地环境如下："></a>本地环境如下：</h2><blockquote><p>Linux 系统环境为：CentOS Linux release 7.4.1708 (Core)<br>MySQL 版本为： mysql  Ver 14.14 Distrib 5.7.23, for Linux (x86_64) using  EditLine wrapper<br>Git 版本为： git version 1.8.3.1<br>Gogs 当前最新版本为：0.11.86</p></blockquote><h2 id="所需软件"><a href="#所需软件" class="headerlink" title="所需软件"></a>所需软件</h2><ul><li><a href="https://gogs.io/docs">Gogs</a></li><li>Git</li><li>MySQL</li></ul><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol><li><p>创建用户名为 git 的账户，用于管理 git</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> adduser <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>切换到 git 用户，并在其账户所在家目录，下载 Gogs</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 切换到 git 用户</span><span class="token function">su</span> <span class="token function">git</span>  <span class="token comment"># 切换到 git 用户所在家目录</span><span class="token builtin class-name">cd</span> ~  <span class="token comment"># 下载 gogs 压缩包</span><span class="token function">wget</span> https://dl.gogs.io/0.11.86/gogs_0.11.86_linux_amd64.tar.gz<span class="token comment"># 解压缩 （解压缩之后的文件夹名为 gogs ）</span><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> gogs_0.11.86_linux_amd64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>执行 gogs 数据库文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 切换到 /home/git/gogs/scripts 目录</span><span class="token builtin class-name">cd</span> /home/git/gogs/scripts<span class="token comment"># 登录数据库 （这里采用 MySQL ）</span>mysql <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span><span class="token comment"># 创建 gogs 用户</span>create user <span class="token string">'gogs'</span>@<span class="token string">'localhost'</span> identified by <span class="token string">'密码'</span><span class="token punctuation">;</span><span class="token comment"># 赋予 gogs 数据库用户能够访问 gogs 数据库所有权限</span>grant all privileges on gogs.* to <span class="token string">'gogs'</span>@<span class="token string">'localhost'</span><span class="token punctuation">;</span><span class="token comment"># 刷新权限</span>flush privileges<span class="token punctuation">;</span><span class="token comment"># 执行 gogs 数据库脚本文件 </span><span class="token builtin class-name">source</span> mysql.sql<span class="token comment"># 测试（执行完了之后可以看到已经创建好了 gogs 数据库）</span>show databases<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置与运行</p></li></ol><ul><li>打开 gogs 文件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /home/git/gogs/scripts/init/centos/gogs   <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>核对文件信息</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">19</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/sbin:/usr/sbin:/bin:/usr/bin  <span class="token number">20</span> <span class="token assign-left variable">DESC</span><span class="token operator">=</span><span class="token string">"Gogs"</span>  <span class="token number">21</span> <span class="token assign-left variable">NAME</span><span class="token operator">=</span>gogs  <span class="token number">22</span> <span class="token assign-left variable">SERVICEVERBOSE</span><span class="token operator">=</span>yes  <span class="token number">23</span> <span class="token assign-left variable">PIDFILE</span><span class="token operator">=</span>/var/run/<span class="token variable">$NAME</span>.pid  <span class="token number">24</span> <span class="token assign-left variable">SCRIPTNAME</span><span class="token operator">=</span>/etc/init.d/<span class="token variable">$NAME</span>  <span class="token number">25</span> <span class="token assign-left variable">WORKINGDIR</span><span class="token operator">=</span>/home/git/gogs      <span class="token comment"># 仓库地址，可以自行修改</span><span class="token number">26</span> <span class="token assign-left variable">DAEMON</span><span class="token operator">=</span><span class="token variable">$WORKINGDIR</span>/<span class="token variable">$NAME</span>  <span class="token number">27</span> <span class="token assign-left variable">DAEMON_ARGS</span><span class="token operator">=</span><span class="token string">"web"</span>  <span class="token number">28</span> <span class="token assign-left variable"><span class="token environment constant">USER</span></span><span class="token operator">=</span>git     <span class="token comment"># 如果运行 gogs 不是名为 git 的账户，则需要修改。 </span><span class="token comment"># 如是用 root 账户运行 gogs，则这里修改成 root</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>切换到 root 账户，然后复制到 /etc/init.d/ 目录下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 切换到 root 账户</span><span class="token function">su</span> root<span class="token comment"># 将 gogs 文件复制到 /etc/init.d 目录下</span><span class="token function">sudo</span> <span class="token function">cp</span> /home/git/gogs/scripts/init/centos/gogs /etc/init.d/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>增加执行权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chmod</span> +x /etc/init.d/gogs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>复制 service</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> /home/git/gogs/scripts/systemd/gogs.service /etc/systemd/system/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>开启 gogs 服务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> gogs start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>运行 gogs web</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 切换到 gogs 目录</span><span class="token builtin class-name">cd</span> /home/git/gogs<span class="token comment"># 运行 gogs web （如果此时 Ctrl + C 关闭掉命令，此时刷新浏览器时，会无内容）</span><span class="token comment"># 执行命令后，看到有日志输出，则证明启动成功！</span>./gogs web<span class="token comment"># 后台运行 gogs</span>./gogs web <span class="token operator">&gt;</span>/dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>必须开启 3000 端口 （我使用的是阿里云的 ECS ，直接在阿里云后台添加 3000 的安全组规则即可）</p></li><li><p>测试。（ 浏览器访问 http://远程主机 IP 地址 :3000 ）</p></li></ul><ol start="5"><li>配置反向代理</li></ol><ul><li>在 nginx 配置文件夹中，新建 git.drling.xin.conf 文件</li></ul><pre class="line-numbers language-none"><code class="language-none">vim /etc/nginx/conf.d/git.drling.xin.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>填入以下内容</li></ul><pre class="line-numbers language-none"><code class="language-none">server {    listen 80;    server_name git.drling.xin;    location / {            proxy_pass http://127.0.0.1:3000/;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>关于自定义配置</li></ol><ul><li>第一次访问 <strong>http://远程主机 IP 地址 :3000</strong> 的时候，会提示你填入一些自定义项，这些自定义项会在你 <code>&lt;gogs path&gt;/custom/conf/app.ini</code> 文件中，只有你在网页中填入自定义项之后才会有此文件。你也可以先在你 <code>gogs</code> 目录下创建 <code>custom/conf/app.ini</code> 文件，然后填入自定义项，如下所示：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">APP_NAME <span class="token operator">=</span> Semir-git<span class="token comment"># 这里的用户名在 Linux 系统中必须存在，且这里的用户名为 ssh 仓库地址的用户名</span>RUN_USER <span class="token operator">=</span> <span class="token function">git</span>RUN_MODE <span class="token operator">=</span> prod<span class="token comment"># 代码仓库地址</span><span class="token punctuation">[</span>repository<span class="token punctuation">]</span>ROOT      <span class="token operator">=</span> /extend-disk/partition2/git-repositories<span class="token comment"># if you use nginx to proxy, suggest you set 127.0.0.1, otherwise you set 0.0.0.0 is ok</span>HTTP_ADDR <span class="token operator">=</span> <span class="token number">127.0</span>.0.1<span class="token punctuation">[</span>database<span class="token punctuation">]</span>DB_TYPE  <span class="token operator">=</span> mysqlHOST     <span class="token operator">=</span> <span class="token number">127.0</span>.0.1:3306NAME     <span class="token operator">=</span> gogs<span class="token environment constant">USER</span>     <span class="token operator">=</span> gogsPASSWD   <span class="token operator">=</span> <span class="token number">123456</span>SSL_MODE <span class="token operator">=</span> disable<span class="token environment constant">PATH</span>     <span class="token operator">=</span> data/gogs.db<span class="token punctuation">[</span>server<span class="token punctuation">]</span><span class="token comment"># 仓库域名如：git.drling.xin</span>DOMAIN           <span class="token operator">=</span> <span class="token number">10.90</span>.60.6HTTP_PORT        <span class="token operator">=</span> <span class="token number">3000</span><span class="token comment"># 仓库 url 如：http://git.drling.xin/</span>ROOT_URL         <span class="token operator">=</span> http://10.90.60.6:3000/DISABLE_SSH      <span class="token operator">=</span> <span class="token boolean">false</span>SSH_PORT         <span class="token operator">=</span> <span class="token number">22</span>START_SSH_SERVER <span class="token operator">=</span> <span class="token boolean">false</span>OFFLINE_MODE     <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">[</span>mailer<span class="token punctuation">]</span>ENABLED <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">[</span>service<span class="token punctuation">]</span>REGISTER_EMAIL_CONFIRM <span class="token operator">=</span> <span class="token boolean">false</span>ENABLE_NOTIFY_MAIL     <span class="token operator">=</span> <span class="token boolean">false</span>DISABLE_REGISTRATION   <span class="token operator">=</span> <span class="token boolean">false</span>ENABLE_CAPTCHA         <span class="token operator">=</span> <span class="token boolean">true</span>REQUIRE_SIGNIN_VIEW    <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">[</span>picture<span class="token punctuation">]</span>DISABLE_GRAVATAR        <span class="token operator">=</span> <span class="token boolean">false</span>ENABLE_FEDERATED_AVATAR <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">[</span>session<span class="token punctuation">]</span>PROVIDER <span class="token operator">=</span> <span class="token function">file</span><span class="token punctuation">[</span>log<span class="token punctuation">]</span>MODE      <span class="token operator">=</span> console, <span class="token function">file</span>LEVEL     <span class="token operator">=</span> InfoROOT_PATH <span class="token operator">=</span> /extend-disk/partition2/software/gogs/log<span class="token punctuation">[</span>security<span class="token punctuation">]</span>INSTALL_LOCK <span class="token operator">=</span> <span class="token boolean">true</span>SECRET_KEY   <span class="token operator">=</span> 3WWzvF7wpDsBvvP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Gogs </tag>
            
            <tag> Git 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 之索引、视图、触发器</title>
      <link href="posts/b1cb609d.html"/>
      <url>posts/b1cb609d.html</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-之索引、视图、触发器"><a href="#MySQL-之索引、视图、触发器" class="headerlink" title="MySQL 之索引、视图、触发器"></a>MySQL 之索引、视图、触发器</h1><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><ul><li>索引的引入</li></ul><p>索引是由数据库表中一列或者多列组合而成，其作用是提高对表中数据的查询速度；类似于图书的目录，方便快速定位，寻找指定的内容。</p><ul><li>索引的优缺点</li></ul><p>优点：提高查询数据的速度<br>缺点：创建和维护索引的时间增加了</p><ul><li>建立索引的建议</li></ul><ol><li>一张表建议最多建立 5 个索引</li><li>建立复合索引优于单值索引（复合索引占用空间小）</li></ol><ul><li>建立索引的技巧</li></ul><ol><li>如果是左连接则需要在右表关联字段上建立索引，因为左表是查的全部数据。如果是右连接则需要在左表关联字段上建立索引。</li><li>尽可能减少 join 语句中的 NestedLoop 的循环总次数。（永远用小结果集驱动大的结果集）</li><li>优先优化 NestedLoop 的内层循环。</li><li>保证 join 语句中被驱动表上 join 条件字段已经被索引。</li><li>当无法保证被驱动表的 join 条件字段被索引且内存资源充足的前提下，不要太吝啬 JoinBuffer 的设置。</li></ol><ul><li>索引失效的常见原因</li></ul><ol><li>查询全部列，不会使用到索引（select *）</li><li>不遵守最佳左前缀法则（如果索引了多列，要遵守最左前缀法则。指的是查询从索引的最左前列开始并且<strong>不跳过索引的列</strong>）</li><li>在索引列上做任何操作（计算、函数、（自动或手动）类型转换），会导致索引失效而转向全表扫描</li><li>存储引擎使用了索引中范围条件右边的列，会导致不会使用到索引</li><li>尽量使用覆盖索引（只访问索引的查询（索引列和查询列一致）），减少 select *</li><li>mysql 在使用不等于 （!= 或 &lt;&gt;）的时候无法使用索引会导致全表扫描</li><li>is null,is not null 也无法使用索引</li><li>like 以通配符开头 （’%abc’ 或者 ‘%abc%’）mysql 索引失效会变成全表扫描的操作，当百分号写在右边的时候索引不会失效。解决 ‘%abc%’ 索引失效的方法是，在要模糊查询字段上建立索引，使用覆盖索引的方式查询，则索引则不会失效。</li><li>varchar 类型 （字符串）不加单引号索引失效（如果是 InnoDB 存储类型，会导致行锁变表锁）</li><li>少用 or，用它来连接时索引会失效，即使其中的条件带有索引也不会使用到索引，如果要想使用 or，又想让索引生效，只能将 or 条件中的每一列都加上索引。如果出现 or 的语句中没有一个列加了索引，那么建议使用 union 拼接多个查询语句。</li><li>not in 和 not exist 不会走索引</li></ol><ul><li><p>优化口诀<br>全值匹配我最爱，最左前缀要遵守；<br>带头大哥不能死，中间兄弟不能断；<br>索引列上少计算，范围之后全失效；<br>like百分写最右，覆盖索引不写*；<br>不等空值还有or，索引失效要少用。</p></li><li><p>创建索引的前提</p></li></ul><p>索引的效率取决于<strong>索引列的值是否为散列</strong>，即该列的值如果越互不相同，那么索引效率越高。反过来，如果记录的列存在大量相同的值，例如 gender 列，大约一半的记录值是 M，另一半是 F，因此，对该列创建索引就没有意义。区分度的公式是 <code>count(distinct col)/count(*)</code>，表示字段不重复的比例，比例越大我们扫描的记录数越少。</p><p>可以对一张表创建多个索引。索引的优点是提高了查询效率，缺点是在插入、更新和删除记录时，需要同时修改索引，因此，索引越多，插入、更新和删除记录的速度就越慢。</p><p><em><strong>对于主键，关系数据库会自动对其创建主键索引。使用主键索引的效率是最高的，因为主键会保证绝对唯一。</strong></em></p><ul><li>创建表的时候创建索引：</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 创建普通索引CREATE TABLE t_user1 (id INT,userName VARCHAR (20),PASSWORD VARCHAR (20),INDEX (userName));-- 创建唯一性索引并为索引取别名CREATE TABLE t_user2 (id INT,userName VARCHAR (20),PASSWORD VARCHAR (20),UNIQUE INDEX usrn (userName));-- 创建多列索引CREATE TABLE t_user3 (id INT,userName VARCHAR (20),PASSWORD VARCHAR (20),INDEX index_user_pwd (userName,PASSWORD));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在已有表中创建索引</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 在已有表中创建普通索引CREATE INDEX index_userName ON t_user4(userName);-- 在已有表中创建唯一性索引CREATE UNIQUE INDEX index_userName ON t_user4(userName);-- 在已有表中创建多列索引CREATE INDEX index_userName_pwd ON t_user4(userName,PASSWORD);// 或者采用下面的方式ALTER TABLE studentsADD INDEX idx_name_score (name, score);-- 使用 ALTER 删除索引ALTER TABLE t_user5 ADD INDEX index_user(userName)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查看索引</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show index from table_name\G;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>删除索引</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">-- 删除索引-- DROP INDEX 索引名 ON 表名;DROP INDEX index_user ON t_user5;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>索引检索原理</li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-8dbf9172d1163963.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="索引检索原理"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-7b8ef85580ae6d04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="索引的分析"></p><ul><li>哪些情况下应该建立索引 ？</li></ul><ol><li>主键自动建立唯一索引</li><li>频繁作为查询条件的字段应该创建索引</li><li>查询中与其它表关联的字段，外键关系建立索引</li><li>频繁更新的字段不适合创建索引（因为每次更新不单单是更新了记录还会更新索引）</li><li>where 条件里用不到的字段不创建索引</li><li>单键索引还是组合索引的选择问题？（在高并发下倾向创建组合索引）</li><li>查询中排序的字段，排序字段若通过索引去访问将大大提高排序速度</li><li>查询中统计或者分组字段</li></ol><ul><li>哪些情况下不要建立索引？</li></ul><ol><li>表记录太少</li><li>经常增删改的表</li><li>数据重复且分布平均的表字段，因此应该只为最经常查询和最经常排序的数据列建立索引。注意：如果某个数据列包含许多重复的内容，为它建立索引就没有太大的实际效果。</li></ol><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><ul><li>视图的引入</li></ul><ol><li>试图是一种虚拟的表，是从数据库中一个或者多个表中导出来的表。</li><li>数据库中只存放了视图的定义，而并没有存放视图中的数据，这些数据存放在原来的表中。</li><li>使用视图查询数据时，数据库系统会从原来的表中取出对应的数据。</li></ol><ul><li>视图的作用</li></ul><ol><li>使操作简便化；eg：如果一张表中有 100 个字段，需求只需要 20 个字段，那么可以定义一个视图只取出 20 个字段。</li><li>增加数据的安全性；eg：如果写代码的时候不想要别人知道某些字段，那么可以定义视图，只取出安全系数低的字段</li><li>提高表的逻辑独立性；</li></ol><ul><li>创建视图</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE [ALGORITHM = {UNDEFIEND | MERGE | TEMPTABLE}]    VIEW 视图名 [(属性清单)]    AS SELECT 语句    [WITH [CASCADED | LOCAL] CHECK OPTION]    -- 创建单表视图CREATE VIEW v1 AS SELECT userName,password FROM t_user4-- 创建单表视图并给视图字段取别名CREATE VIEW v1(u,p) AS SELECT userName,password FROM t_user4-- 查询视图结果SELECT * FROM v1-- 在多表上创建视图CREATE VIEW v2 AS SELECT bookName.bookTypeName FROM t_book,t_booktype WHERE t_book.bookTypeId = t_booktype.id        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><ul><li>触发器的引入</li></ul><p>触发器（trigger）是由事件来触发某个操作，这些事件包括 insert 语句、 update 语句和 delete 语句。当数据库系统执行这些事件时，就会激活触发器执行相应的操作。</p><ul><li>创建与使用触发器</li></ul><ol><li>创建只有一个执行语句的触发器</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TRIGGER 触发器名 BEFORE | AFTER 触发事件 ON 表名 FOR EACH ROW 执行语句-- 其中 new 和 old 为过渡变量， new 代表新的数据，old 代表旧的数据eg：CREATE TRIGGER trig_book AFTER INSERTON t_book FOR EACH ROWUPDATE t_booktype SET bookNum=bookNum+1 WHERE new.bookTypeId=t_booktype.id-- 执行以下语句之后将会触发触发器INSERT INTO t_book VALUES(NULL,'php学习',100,'ke',1)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>创建有多个执行语句的触发器</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TRIGGER 触发器名 BEFORE | AFTER 触发事件    ON 表名 FOR EACH ROW    BEGIN        执行语句列表    END  -- 其中，因为 mysql 遇到分号（;）之后会认为语句终止（分号前面的语句为执行语句），因此需要使用 delimiter 来手动定义在 | 符号中间的语句才为执行语句   eg：delimiter |CREATE TRIGGER trig_book2 AFTER DELETEON t_book FOR EACH ROWBEGIN UPDATE t_booktype SET bookNum=bookNum-1 WHERE old.bookTypeId=t_booktype.id;INSERT INTO t_log VALUES (NULL,NULL,'在book表里删除了一条数据');DELETE FROM t_test WHERE old.bookTypeId=t_test.id;END|delimiter;-- 执行以下语句之后将会触发触发器DELETE FROM t_book WHERE id=3;    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查看触发器</li></ul><ol><li>直接执行 sql 语句</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SHOW TRIGGERS;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>在系统数据库中 information_schema 库中查看 TRIGGERS 表</li></ol><ul><li>删除触发器</li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">DROP TRIGGER [触发器名];eg:DROP TRIGGER trig_book2;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 索引 </tag>
            
            <tag> 视图 </tag>
            
            <tag> 触发器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 性能分析</title>
      <link href="posts/1e4459df.html"/>
      <url>posts/1e4459df.html</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-性能分析"><a href="#MySQL-性能分析" class="headerlink" title="MySQL 性能分析"></a>MySQL 性能分析</h1><h2 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">explain select * from users;-- 本意为显示警告信息。但是和 explain 一块儿使用，就会显示出优化后的 sql。需要注意使用顺序。（只能在 mysql cli 中才会有结果）show warnings;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>最重要的 5 个字段是：id、type、key、rows、Extra</p></blockquote><ul><li><strong>id</strong>： select 查询的序列号，包含一组数字，表示查询中执行 select 子句或操作表的顺序</li></ul><ol><li>id 相同，执行顺序由上至下</li><li>id 不同，如果是子查询，id 的序号会递增，id 值越大优先级越高，越先被执行</li><li>id 有相同也有不同的，id 值越大优先级越高越先被执行，id 值相同的按由上到下执行</li></ol><ul><li><strong>select_type</strong>：查询的类型，主要是用于区别普通查询，联合查询，子查询等的复杂查询</li></ul><ol><li>simple ： 简单的 select 查询，查询中不包含子查询或者 union</li><li>primary ：查询中若包含任何复杂的子部份，最 外层查询则被标记为 primary</li><li>subquery ： 在 select 或 where 列表中包含子查询</li><li>derived ： 在 from 列表中包含的子查询被标记为 derived（衍生）MySQL 会递归执行这些子查询，把结果放在临时表里。</li><li>union ： 若第二个 select 出现在 union 之后，则被标记为 union：若 union 包含在 from 子句的子查询中，外层 select 将被标记为： derived</li><li>union result ： 从 union 表获取结果的 select</li></ol><ul><li><strong>table</strong> ： 显示这一行的数据是关于哪张表的</li><li><strong>type</strong> ： 访问类型排序<ul><li>常用的从最好到最差依次是，system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; ALL</li><li>完整的从最好到最差依次是 system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; ALL</li><li>一般来说， 得保证查询至少达到 range 级别，最好能达到 ref 级别</li></ul></li></ul><ol><li>system ：表只有一行记录（等于系统表），这是 const 类型的特例，平时不会出现，这个也可以忽略不计</li><li>const ： 表示通过索引一次就找到了，const 用于比较 primary key 或者 unique 索引。因为只匹配一行数据，所以很快。如将主键置于 where 列表中，MySQL 就能将该查询转换为一个常量</li><li>eq_ref : 唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配。常见于主键或唯一索引扫描。</li><li>ref ： 非唯一性索引扫描，返回匹配某个单独值的所有行，本质上也是一种索引访问，它返回所有匹配某个单独值的行，然而，它可能会找到多个符合条件的行，所以他应该属于查找和扫描的混合体。</li><li>range ：只检索给定范围的行，使用一个索引来选择行，key 列显示使用了哪个索引，一般就是在你的 where 语句中出现了 between 、&lt; 、&gt; 、in 等的查询。这种范围扫描索引扫描比全表扫描要好，因为它只需要开始于索引的某一点，而结束于另一点，不用扫描全部索引</li><li>index ： Full Index Scan，Index 与 ALL 区别为 index 类型只遍历索引树。这通常比 ALL 快，因为索引文件通常比数据文件小。（也就是说虽然 all 和 index 都是读全表，但 index 是从索引中读取的，而 all 是从硬盘中读的）</li><li>all ： Full Table Scan，将遍历全表以找到匹配的行</li></ol><p><strong>一般来说，得保证查询至少达到 range 级别，最好能达到 ref</strong></p><ul><li><strong>possible_keys</strong> ：显示可能应用在这张表中的索引，一个或多个。查询涉及到的字段上若存在索引，则该索引将被列出，<strong>但不一定被查询实际使用</strong></li><li><strong>key</strong> ： 实际使用的索引。如果为 null，则没有使用索引。查询中若使用了覆盖索引，则该索引仅出现在 key 列表中。</li><li><strong>key_len</strong> : 表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度。在不损失精确性的情况下，长度越短越好。key_len 显示的值为索引字段的最大可能长度，并非实际使用长度，即 key_len 是根据表定义计算而得，不是通过表内检索出的</li><li><strong>ref</strong> ： 显示索引的哪一列被使用了，如果可能的话，是一个常数。哪些列或常量被用于查找索引列上的值</li><li><strong>rows</strong> ：根据表统计信息及索引选用情况，大致估算出找到所需的记录所需要读取的行数（行数越小越好）</li><li><strong>Extra</strong> ：包含不适合在其它列中显示但十分重要的额外信息</li></ul><ol><li>Using filesort ： 说明 mysql 会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取。MySQL 中无法利用索引完成的排序操作称为“文件排序”。<strong>九死一生了，效率比较差</strong></li><li>Using temporary ：使用了临时表保存中间结果，MySQL 在对查询结果排序时使用临时表。常用于排序 order by 和分组查询 group by。<strong>十死无生，效率最差！</strong></li><li>Using index ： 表示相应的 select 操作中使用了覆盖索引（Covering index），避免访问了表的数据行，效率不错！如果同时出现 using where ，表明索引被用来执行索引键值的查找；如果没有同时出现 using where ，表明索引用来读取数据而非执行查找动作。</li><li>Using where ：表明使用了 where 过滤</li><li>using join buffer ：使用了连接缓存</li><li>impossible where ： where 子句的值总是 false，不能用来获取任何元组</li><li>select tables optimized away ：在没有 group by 子句的情况下，基于索引优化 min/max 操作或者对于 MyISAM 存储引擎优化 count(*) 操作，不必等到执行阶段再进行计算，查询执行计划生成的阶段即完成优化。</li><li>distinct ：优化 distinct 操作，在找到第一匹配的元组后即停止找同样值的动作</li></ol><h2 id="查询截取分析"><a href="#查询截取分析" class="headerlink" title="查询截取分析"></a>查询截取分析</h2><ul><li>通俗来讲</li></ul><ol><li>观察，至少跑 1 天 ，看看生产的慢 sql 情况。</li><li>开启慢查询日志，设置阈值，比如超过 5 秒钟的就是慢 sql，并将它抓取出来。</li><li>explain + 慢 sql 分析</li><li>show profile</li><li>运维经理或者 DBA，进行 sql 数据库服务器的参数调优。</li></ol><ul><li>学术说法</li></ul><ol><li>慢查询的开启并捕获</li><li>explain + 慢 sql 分析</li><li>show profile 查询 sql 在 mysql 服务器里面的执行细节和生命周期情况</li><li>sql 数据库服务器的参数调优</li></ol><h3 id="提高-order-by-的速度"><a href="#提高-order-by-的速度" class="headerlink" title="提高 order by 的速度"></a>提高 order by 的速度</h3><ol><li>order by 时，select * 是一个大忌，只查询需要的字段，这点非常重要。在这里的影响是：</li></ol><ul><li>当查询的字段大小总和小于 max_length_for_sort_data 而且排序字段不是 text|blob 类型时，会用改进后的算法——单路排序，否则用老算法——多路排序。</li><li>两种算法的数据都有可能超出 sort_buffer 的容量，超出之后，会创建 tmp 文件进行合并排序，导致多次 I/O，但是用单路排序算法的风险会更大一些，所以要提高 sort_buffer_size</li></ul><ol start="2"><li>尝试提高 sort_buffer_size 不管用哪种算法，提高这个参数都会提高效率，当然，要根据系统的能力去提高，因为这个参数是针对每个进程的</li><li>尝试提高 max_length_for_sort_data 提高这个参数，会增加用改进算法的概率，但是如果设的太高，数据总容量超出 sort_buffer_size 的概率就增大，明显症状是高的磁盘 I/O 活动和低的处理器使用率。</li></ol><h3 id="为排序使用索引"><a href="#为排序使用索引" class="headerlink" title="为排序使用索引"></a>为排序使用索引</h3><ul><li>MySQL 两种排序方式：文件排序或扫描有序索引排序</li><li>MySQL 能为排序与查询使用相同的索引</li></ul><p>KEY a_b_c (a,b,c)</p><ol><li>order by 能使用索引最左前缀<br>ORDER BY a<br>ORDER BY a,b<br>ORDER BY a,b,c<br>ORDER BY a DESC, b DESC, c DESC</li><li>如果 where 使用索引的最左前缀定义为常量，则 order by 能使用索引<br>WHERE a = const ORDER BY b,c<br>WHERE a = const AND b = const ORDER BY c<br>WHERE a = const ORDER BY b,c<br>WHERE a = const AND b &gt; const ORDER BY b,c</li></ol><h2 id="开启慢查询日志"><a href="#开启慢查询日志" class="headerlink" title="开启慢查询日志"></a>开启慢查询日志</h2><ul><li>查看是否开启及如何开启慢查询日志</li></ul><pre class="line-numbers language-none"><code class="language-none"># 查看是否开启了慢查询日志show variables like '%slow_query_log%';# 开启慢查询日志（临时开启）set global slow_query_log = 1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果要永久生效，就必须修改配置文件 my.cnf （其他系统变量也是如此）<br>修改 my.cnf 文件，[mysqld] 下增加或修改参数 slow_query_log 和 slow_query_log_file 后，然后重启 MySQL 服务器。</p><pre class="line-numbers language-none"><code class="language-none">slow_query_log = 1 slow_query_log_file = /var/lib/mysql/slow-query.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>慢查询日志是由参数 long_query_time 控制，默认情况下 long_query_time 的值为 10 秒，可以使用以下命令查看</p><pre class="line-numbers language-none"><code class="language-none">show variables like 'long_query_time%';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以使用命令修改，也可以在 my.cnf 参数里面修改。<br>假如运行时间正好等于 long_query_time 的情况，并不会被记录下来。也就是说，在 mysql 源码里是 <strong>判断大于 long_query_time，而非大于等于</strong></p><p>设置阙值到 3 秒钟的就是慢 sql</p><pre class="line-numbers language-none"><code class="language-none">set global long_query_time = 3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置慢查询日志阙值后看不出变化？</p><ol><li>需要重新连接或新开一个会话才能看到修改值</li><li>或者直接使用以下命令也可以看到修改后的结果</li></ol><pre class="line-numbers language-none"><code class="language-none">show global variables like 'long_query_time';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如何测试？</p><pre class="line-numbers language-none"><code class="language-none"># 模拟查询超过 4 秒钟select sleep(4);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看慢查询日志中记录了有多少条慢 sql</p><pre class="line-numbers language-none"><code class="language-none">show global status like '%Slow_queries%';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="慢查询分析工具-mysqldumpslow"><a href="#慢查询分析工具-mysqldumpslow" class="headerlink" title="慢查询分析工具 mysqldumpslow"></a>慢查询分析工具 mysqldumpslow</h3><p>可用参数：</p><ul><li>s : 表示按照何种方式排序</li><li>c ：访问次数</li><li>l ：锁定时间</li><li>r ：返回记录</li><li>t ：查询时间</li><li>al ：平均锁定时间</li><li>ar ：平均返回记录数</li><li>at ：平均查询时间</li><li>t ：即返回前面多少条的数据</li><li>g ：后边搭配一个正则匹配模式，大小写不敏感的</li></ul><pre class="line-numbers language-none"><code class="language-none"># 得到返回记录集最多的 10 条 sqlmysqldumpslow -s r -t 10 /var/lib/mysql/slow-query.log# 得到访问次数最多的 10 条 sqlmysqldumpslow -s c -t 10 /var/lib/mysql/slow-query.log# 得到按照时间排序的前 10 条里面包含左连接的查询语句mysqldumpslow -s t -t 10 -g "left join" /var/lib/mysql/slow-query.log另外建议在使用这些命令时结合 | 和 more 使用，否则有可能出现爆屏情况mysqldumpslow -s r -t 10 /var/lib/mysql/slow-query.log | more<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Show-Profile-（可以看到每一条-sql-执行的生命周期）"><a href="#Show-Profile-（可以看到每一条-sql-执行的生命周期）" class="headerlink" title="Show Profile （可以看到每一条 sql 执行的生命周期）"></a>Show Profile （可以看到每一条 sql 执行的生命周期）</h2><p>是 mysql 提供可以用来分析当前会话中语句执行的资源消耗情况。可以用于 sql 的调优的测量。<br>默认情况下，参数处于关闭状态，并保存最近 15 次的运行结果。</p><ol><li>查看是否已经开启</li></ol><pre class="line-numbers language-none"><code class="language-none"># 查看是否已经开启show VARIABLES like 'profiling';# 如果没有开启的话，则开启set profiling = on;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>运行各种查询语句</li><li>使用以下命令，即可看到以上的查询语句</li></ol><pre class="line-numbers language-none"><code class="language-none">show profiles;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>诊断 sql</li></ol><pre class="line-numbers language-none"><code class="language-none">show profile cpu,block io for query 1;（上一步问题 sql 前面的数字号码）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>show profile 的可用参数为：</p><ul><li>all ：显示所有的开销信息</li><li>block io ：显示块 io 相关开销</li><li>context switches ：上下文切换相关开销</li><li>cpu ：显示 cpu 相关开销信息</li><li>ipc ：显示发送和接收相关开销信息</li><li>memory ：显示内存相关开销信息</li><li>page faults ： 显示页面错误相关开销信息</li><li>source ：显示和 Source_function，Source_file，Source_line 相关的开销信息</li><li>swaps ：显示交换次数相关开销的信息</li></ul><h3 id="日常开发需要注意项"><a href="#日常开发需要注意项" class="headerlink" title="日常开发需要注意项"></a>日常开发需要注意项</h3><ol><li>converting HEAP to MyISAM 查询结果太大，内存都不够用了往磁盘上搬了。</li><li>Creating tmp table 创建临时表。（拷贝数据到临时表，用完再删除）</li><li>Copying to tmp table on disk 把内存中临时表复制到磁盘，危险！</li><li>locked 锁表了</li></ol><h2 id="全局查询日志"><a href="#全局查询日志" class="headerlink" title="全局查询日志"></a>全局查询日志</h2><blockquote><p>永远不要在生产环境中开启这个功能！</p></blockquote><ul><li>在配置文件中开启<br>在 mysql 的 my.cnf 中，设置如下：</li></ul><pre class="line-numbers language-none"><code class="language-none"># 开启general_log = 1# 记录日志文件的路径general_log_file = /path/logfile# 输出格式log_output = FILE<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>直接执行 sql 语句开启</li></ul><pre class="line-numbers language-none"><code class="language-none"># 开启set global general_log=1;# 用表格的方式记录查询日志set global log_output = 'TABLE';# 此后，你所编写的 sql 语句，将会记录到 mysql 库里的 general_log 表select * from mysql.general_log;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> explain </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 执行加载顺序</title>
      <link href="posts/3b8d5b86.html"/>
      <url>posts/3b8d5b86.html</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-执行加载顺序"><a href="#MySQL-执行加载顺序" class="headerlink" title="MySQL 执行加载顺序"></a>MySQL 执行加载顺序</h1><blockquote><p>这篇文章算是 “水” 一下吧，本想以文字的方式展示出来的，发现以文字的方式写出来太乱了，刚好找到了几张截图，索性就直接截图了。截图也更加清晰明了。</p></blockquote><ul><li>MySQL 手写 sql 时的语句</li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-c265c44851c61cbe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="MySQL 手写 sql 时的语句"></p><ul><li>MySQL 机读 sql 顺序</li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-f245cb1b54a6a9a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="MySQL 机读 sql 顺序"></p><ul><li>MySQL 执行顺序</li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-9c169ebd6af288dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="MySQL 执行顺序"></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 锁机制</title>
      <link href="posts/eee5658b.html"/>
      <url>posts/eee5658b.html</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-锁机制"><a href="#MySQL-锁机制" class="headerlink" title="MySQL 锁机制"></a>MySQL 锁机制</h1><h2 id="锁的概念"><a href="#锁的概念" class="headerlink" title="锁的概念"></a>锁的概念</h2><ul><li><p>从对数据操作的类型（读/写）来分</p><ul><li>读锁（共享锁）：针对同一份数据，多个读操作可以同时进行而不会互相影响。</li><li>写锁（排它锁）：当前写操作没有完成前，它会阻断其他写锁和读锁。</li></ul></li><li><p>锁相关命令</p></li></ul><pre class="line-numbers language-none"><code class="language-none"># 查看是否有表已经被上锁show open tables;# 给 table1 上读锁，给 table2 上写锁lock table table1 read,table2 write;# 给所有表解锁unlock tables;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="表锁（偏向于-MyISAM）"><a href="#表锁（偏向于-MyISAM）" class="headerlink" title="表锁（偏向于 MyISAM）"></a>表锁（偏向于 MyISAM）</h3><p>给表加<strong>读</strong>锁的情况：</p><ol><li>session-1</li></ol><pre class="line-numbers language-none"><code class="language-none"># 对 table1 加读锁lock table table1 read; # 因为读锁是共享锁，因此可以查出数据select * from table1;# 但是无法修改和插入新数据update table1 set name = 'a1' where id = 1;# 但是不能读取其他的表select * from table2;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>session-2</li></ol><pre class="line-numbers language-none"><code class="language-none"># 因为读锁是共享锁，因此可以查出数据select * from table1;# 也可以读其他的表select * from table2;# 当 session-2 想要修改 session-1 已经锁的表 table1 时，已经被阻塞，需要等到 table1 被解锁之后才可以将数据更新update table1 set name = 'a1' where id = 1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>给表加<strong>写</strong>锁的情况：</p><ol><li>session-1</li></ol><pre class="line-numbers language-none"><code class="language-none"># 给 table1 加写锁lock table table1 write;# 能够查询 table1select * from table1;# 自己能够更新 table1 的数据update table1 set name = 'a1' where id = 1;# 但是不能读取其他的表select * from table2;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>session-2</li></ol><pre class="line-numbers language-none"><code class="language-none"># 可以查询其他没有上写锁的表select * from table2;# 查询 session-1 中已经上写锁的 table1 时，会发生阻塞，需要等到 session-1 将 table1 解锁才会查得出来结果select * from table1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MyISAM 在执行查询语句 （select） 前，会自动给涉及的所有表加读锁，在执行增删改操作前，会自动给涉及的表加写锁。<br>MySQL的表级锁有两种模式：<br>表共享读锁（Table Read Lock）<br>表独占写锁（Table Write Lock）</p><table><thead><tr><th>锁类型</th><th>可否兼容</th><th>读锁</th><th>写锁</th></tr></thead><tbody><tr><td>读锁</td><td>是</td><td>是</td><td>否</td></tr><tr><td>写锁</td><td>是</td><td>否</td><td>否</td></tr></tbody></table><p><strong>结论</strong><br>结合上表，所有对 MyISAM 表进行操作，会有以下情况：</p><ol><li>对 MyISAM 表的读操作（加读锁），不会阻塞其他进程对同一表的读请求，但会阻塞对同一表的写请求。只有当读锁释放后，才会执行其它进程的写操作。</li><li>对 MyISAM 表的写操作（加写锁），会阻塞其他进程对同一表的读和写操作，只有当写锁释放后，才会执行其他进程的读写操作。</li></ol><p><strong>简而言之，就是读锁会阻塞写，但是不会阻塞读。而写锁则会把读和写都阻塞</strong></p><h4 id="如何分析表锁-？"><a href="#如何分析表锁-？" class="headerlink" title="如何分析表锁 ？"></a>如何分析表锁 ？</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show status like 'table%';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里有两个状态变量记录 MySQL 内部表级锁定的情况，两个变量说明如下：</p><ul><li>Table_locks_immediate ：  产生表级锁定的次数，表示可以立即获取锁的查询次数，每立即获取锁值加 1；</li><li>Table_locks_waited ： 出现表级锁定争用而发生等待的次数（不能立即获取锁的次数，每等待一次锁值加 1），此值高则说明存在着较严重的表级锁争用情况。</li></ul><p><strong>此外，MyISAM 的读写锁调度是写优先，这也是 MyISAM 不适合做写为主表的引擎。因为写锁后，其他线程不能做任何操作，大量的更新会使查询很难得到锁，从而造成永远阻塞</strong></p><h3 id="行锁-（偏向于-InnoDB）"><a href="#行锁-（偏向于-InnoDB）" class="headerlink" title="行锁 （偏向于 InnoDB）"></a>行锁 （偏向于 InnoDB）</h3><p>特点：</p><ol><li>开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。</li><li>InnoDB 与 MyISAM 的最大不同有两点：一是支持事务（TRANSACTION），二是采用了行级锁</li></ol><p><strong>事务的 4 个特性： ACID</strong></p><ol><li>原子性（Atomicity）：事务是一个原子操作单元，其对数据的修改，要么全部执行，要么全部不执行。</li><li>一致性（Consistent）：在事务开始和完成时，数据都必须保持一致状态。这意味着所有相关的数据规则都必须应用于事务的修改，以保持数据的完整性：事务结束时，所有的内部数据结构（如 B树索引或双向链表）也都必须是正确的。</li><li>隔离性（Isolation）：数据库系统提供一定的隔离机制，保证事务在不受外部并发操作影响的“独立”环境执行。这意味着事务处理过程中的中间状态对外部是不可见的，反之亦然。</li><li>持久性（Durable）：事务完成之后，它对于数据的修改是永久性的，即使出现系统故障也能够保持。</li></ol><ul><li><p>间隙锁<br>当我们用<strong>范围条件</strong>而不是相等条件检索数据，并请求共享或排他锁时，InnoDB 会给符合条件的已有数据记录的索引项加锁；（宁可错杀一千，也不可放过一个）对于键值在条件范围内但不存在的记录，叫做“间隙（GAP）”，InnoDB 也会对这个“间隙”加锁，这种锁机制就是所谓的间隙锁（Next-Key锁）。</p></li><li><p>间隙锁的危害<br>因为 query 执行过程中通过范围查找的话，他会锁定整个范围内所有的索引键值，即使这个键值并不存在。间隙锁有一个比较致命的弱点，就是当锁定一个范围值之后，即使某些不存在的键值也会被无辜的锁定，而造成在锁定的时候无法插入锁定键值范围内的任何数据。在某些场景下这可能会对性能造成很大的危害。</p></li><li><p>如何给增加一条行锁 ？</p></li></ul><pre class="line-numbers language-none"><code class="language-none"># 设置一个起点begin;# 给指定行上锁select * from table1 where a = 8 for update;# 上锁之后，做一些你想要做的操作，比如说需要更新当前数据update table1 set b = 123 where a = 8;# 做完你想要做的操作之后，一定要提交commit;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Innodb 存储引擎由于实现了行级锁定，虽然在锁定机制的实现方面所带来的性能损耗可能比表级锁定要更高一些，但是在整体并发处理能力方面要远远优于 MyISAM 的表级锁定的。当系统并发量较高的时候，InnoDB 的整体性能和 MyISAM 相比就会有比较明显的优势了。<br>但是，InnoDB 的行级锁同样也有其脆弱的一面，当我们使用不当的时候，可能会让 InnoDB 的整体性能表现不仅不能比 MyISAM 高，甚至可能会更差。</p><h4 id="如何分析行锁-？"><a href="#如何分析行锁-？" class="headerlink" title="如何分析行锁 ？"></a>如何分析行锁 ？</h4><p>通过检查 InnoDB_row_lock 状态变量来分析系统上的行锁的争夺情况</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show status like 'innodb_row_lock%';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对各个状态量的说明如下：</p><ul><li>innodb_row_lock_current_waits ：当前正在等待锁定的数量</li><li>innodb_row_lock_time ： 从系统启动到现在锁定总时间长度</li><li>innodb_row_lock_time_avg ：每次等待所花平均时间</li><li>innodb_row_lock_time_max ：从系统启动到现在等待最常的一次所花的时间</li><li>innodb_row_lock_waits ：系统启动后到现在总共等待的次数</li></ul><p>对于这 5 个状态变量，比较重要的主要是 innodb_row_lock_time_avg （等待平均时长）、innodb_row_lock_waits （等待总次数）、innodb_row_lock_time （等待总时长）这三项。尤其是当等待次数很高，而且每次等待时长也不小的时候，我们就需要分析系统中为什么会有如此多的等待，然后根据分析结果着手指定优化计划。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 三范式</title>
      <link href="posts/b17a8184.html"/>
      <url>posts/b17a8184.html</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL-三范式"><a href="#MySQL-三范式" class="headerlink" title="MySQL 三范式"></a>MySQL 三范式</h1><h2 id="第一范式（1NF）：表中的每列的属性不可再分"><a href="#第一范式（1NF）：表中的每列的属性不可再分" class="headerlink" title="第一范式（1NF）：表中的每列的属性不可再分"></a>第一范式（1NF）：表中的每列的属性不可再分</h2><p>比如：</p><table><thead><tr><th>学号（主键）</th><th>姓名</th><th>性别</th><th>就读信息</th></tr></thead><tbody><tr><td>20200101</td><td>张三</td><td>男</td><td>大一，土木工程</td></tr></tbody></table><blockquote><p>上表中可以看到，（就读信息）这一列，其实还可以分解成（年级）和（专业），因此（就读信息）这一属性还可以再分，故不满足第一范式</p></blockquote><p>修改成：</p><table><thead><tr><th>学号（主键）</th><th>姓名</th><th>性别</th><th>年级</th><th>专业</th></tr></thead><tbody><tr><td>20200101</td><td>张三</td><td>男</td><td>大一</td><td>土木工程</td></tr></tbody></table><h2 id="第二范式（2NF）：在第一范式的基础上，表里的非主键属性必须都依赖于主键（联合主键）"><a href="#第二范式（2NF）：在第一范式的基础上，表里的非主键属性必须都依赖于主键（联合主键）" class="headerlink" title="第二范式（2NF）：在第一范式的基础上，表里的非主键属性必须都依赖于主键（联合主键）"></a>第二范式（2NF）：在第一范式的基础上，表里的非主键属性必须都依赖于主键（联合主键）</h2><p>比如：</p><table><thead><tr><th>学号（主键）</th><th>课程（主键）</th><th>教师姓名</th><th>成绩</th><th>学生姓名</th><th>专业</th></tr></thead><tbody><tr><td>20200101</td><td>C语言程序设计</td><td>老张</td><td>80</td><td>张三</td><td>计算机科学与技术</td></tr><tr><td>20200102</td><td>JAVA程序设计</td><td>老李</td><td>87</td><td>李四</td><td>网络工程</td></tr><tr><td>20200103</td><td>数据结构</td><td>老王</td><td>90</td><td>王五</td><td>软件工程</td></tr></tbody></table><blockquote><p>上表中可以看到，（教师姓名、成绩）两个属性都依赖于（学号）和（课程），但是（学生姓名、专业）这两个属性却只依赖于（学号），不依赖于（课程），即 <strong>只需要知道（学号）便可以知道（学生姓名和专业两个属性）</strong>，所以，导致非主键属性（学生姓名、专业）不完全依赖于主键（学号、课程），故不符合第二范式</p></blockquote><p>修改成：</p><table><thead><tr><th>学号（主键）</th><th>课程（主键）</th><th>教师姓名</th><th>成绩</th></tr></thead><tbody><tr><td>20200101</td><td>C语言程序设计</td><td>老张</td><td>80</td></tr><tr><td>20200102</td><td>JAVA程序设计</td><td>老李</td><td>87</td></tr><tr><td>20200103</td><td>数据结构</td><td>老王</td><td>90</td></tr></tbody></table><hr><table><thead><tr><th>学号（主键）</th><th>学生姓名</th><th>专业</th></tr></thead><tbody><tr><td>20200101</td><td>张三</td><td>计算机科学与技术</td></tr><tr><td>20200102</td><td>李四</td><td>网络工程</td></tr><tr><td>20200103</td><td>王五</td><td>软件工程</td></tr></tbody></table><h2 id="第三范式（3NF）：在第二范式的基础上，表中的非主属性不可以存在依赖关系"><a href="#第三范式（3NF）：在第二范式的基础上，表中的非主属性不可以存在依赖关系" class="headerlink" title="第三范式（3NF）：在第二范式的基础上，表中的非主属性不可以存在依赖关系"></a>第三范式（3NF）：在第二范式的基础上，表中的非主属性不可以存在依赖关系</h2><table><thead><tr><th>学号（主键）</th><th>姓名</th><th>性别</th><th>年级</th><th>专业</th><th>班主任姓名</th><th>班主任性别</th><th>班主任年龄</th></tr></thead><tbody><tr><td>20200101</td><td>张三</td><td>男</td><td>大一</td><td>计算机科学与技术</td><td>老张</td><td>男</td><td>33</td></tr><tr><td>20200102</td><td>李四</td><td>男</td><td>大二</td><td>网络工程</td><td>老李</td><td>男</td><td>34</td></tr><tr><td>20200103</td><td>王五</td><td>女</td><td>大三</td><td>软件工程</td><td>老王</td><td>男</td><td>35</td></tr></tbody></table><blockquote><p>上表中可以看到，非主键属性都依赖于（学号），满足了第二范式。但是（班主任性别、班主任年龄）这两个属性都是直接依赖于（班主任姓名）这一属性的，与（学号）属于间接依赖，这就导致了表中的非主键属性存在着依赖关系，不符合第三范式</p></blockquote><table><thead><tr><th>学号（主键）</th><th>姓名</th><th>性别</th><th>年级</th><th>专业</th></tr></thead><tbody><tr><td>20200101</td><td>张三</td><td>男</td><td>大一</td><td>计算机科学与技术</td></tr><tr><td>20200102</td><td>李四</td><td>男</td><td>大二</td><td>网络工程</td></tr><tr><td>20200103</td><td>王五</td><td>女</td><td>大三</td><td>软件工程</td></tr></tbody></table><hr><table><thead><tr><th>班主任姓名（主键）</th><th>班主任性别</th><th>班主任年龄</th></tr></thead><tbody><tr><td>老张</td><td>男</td><td>33</td></tr><tr><td>老李</td><td>男</td><td>34</td></tr><tr><td>老王</td><td>男</td><td>35</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 主从复制</title>
      <link href="posts/6b30c31b.html"/>
      <url>posts/6b30c31b.html</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL-主从复制"><a href="#MySQL-主从复制" class="headerlink" title="MySQL 主从复制"></a>MySQL 主从复制</h2><ul><li>主从复制原理</li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-e70a71423894062b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="主从复制原理"></p><ul><li>主从复制的基本原则</li></ul><ol><li>每个 slave 只有一个 master</li><li>每个 slave 只能有一个唯一的服务器 ID</li><li>每个 master 可以有多个 salve</li></ol><h3 id="一主一从常见配置"><a href="#一主一从常见配置" class="headerlink" title="一主一从常见配置"></a>一主一从常见配置</h3><ul><li>mysql 版本一致且后台以服务运行</li><li>主从都配置在 [mysqld] 节点下，都是小写</li></ul><h4 id="主数据库配置，修改-etc-my-cnf-配置文件"><a href="#主数据库配置，修改-etc-my-cnf-配置文件" class="headerlink" title="主数据库配置，修改 /etc/my.cnf 配置文件"></a>主数据库配置，修改 /etc/my.cnf 配置文件</h4><ol><li>主服务器唯一 ID <strong>必须</strong></li></ol><pre class="line-numbers language-none"><code class="language-none">server-id=1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>启用二进制日志 <strong>必须</strong></li></ol><pre class="line-numbers language-none"><code class="language-none"># mysqlbin 为官方推荐的文件名log-bin=自己的本地路径/mysqlbinlog-bin=/var/local/mysql-server5.7/data/mysqlbin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>启用错误日志 <strong>可选</strong></li></ol><pre class="line-numbers language-none"><code class="language-none"># mysqlerr 为官方推荐的文件名log-err=自己的本地路径/mysqlerrlog-err=/var/local/mysql-server5.7/data/mysqlerr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>根目录 <strong>可选</strong></li></ol><pre class="line-numbers language-none"><code class="language-none">basedir="自己的本地路径"basedir="/var/local/mysql-server5.7/"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="5"><li>临时目录 <strong>可选</strong></li></ol><pre class="line-numbers language-none"><code class="language-none">tmpdir="自己的本地路径"tmpdir="/var/local/mysql-server5.7/"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="6"><li>数据目录 <strong>可选</strong></li></ol><pre class="line-numbers language-none"><code class="language-none">datadir="自己的本地路径"datadir="/var/local/mysql-server5.7/"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="7"><li>主机，读写都可以 <strong>可选</strong></li></ol><pre class="line-numbers language-none"><code class="language-none">read-only=0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="8"><li>设置不要复制的数据库 <strong>可选</strong></li></ol><pre class="line-numbers language-none"><code class="language-none">binlog-ignore-db=mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="9"><li>设置需要复制的数据库 <strong>可选</strong></li></ol><pre class="line-numbers language-none"><code class="language-none">binlog-do-db=需要复制的主数据库名字<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>完整的配置为：</p><pre class="line-numbers language-none"><code class="language-none">[mysqld]port=3306server-id=1log-bin=/var/local/mysql-server5.7/data/mysqlbinlog-err=/var/local/mysql-server5.7/data/mysqlerrbasedir="/var/local/mysql-server5.7/"tmpdir="/var/local/mysql-server5.7/"datadir="/var/local/mysql-server5.7/"read-only=0binlog-ignore-db=mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="从数据库配置，修改-etc-my-cnf-配置文件"><a href="#从数据库配置，修改-etc-my-cnf-配置文件" class="headerlink" title="从数据库配置，修改 /etc/my.cnf 配置文件"></a>从数据库配置，修改 /etc/my.cnf 配置文件</h4><ol><li>从服务器唯一 ID <strong>必须</strong></li></ol><pre class="line-numbers language-none"><code class="language-none"># 默认配置文件中将此行注释掉了，可以直接取消注释即可，如果没有找到，也可以自己添加server-id=2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>启用二进制日志 <strong>必须</strong></li></ol><pre class="line-numbers language-none"><code class="language-none"># 默认配置文件中将此行注释掉了，可以直接取消注释即可，如果没有找到，也可以自己添加log-bin=mysql-bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>主从机器都关闭掉防火墙</li><li>在主数据库上建立账户并授权 slave</li></ul><pre class="line-numbers language-none"><code class="language-none"># 从数据库用于拷贝的账号为：alex# 从数据库用于拷贝的密码为：123456# 从数据库所在服务器的 ip 地址为：127.0.0.12grant replication slave on *.* to 'alex'@'127.0.0.12' identified by '123456';# 刷新权限flush privileges;# 查询 master 的状态，并记录下 File 和 Position 的值show master status;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在从数据库上配置</li></ul><pre class="line-numbers language-none"><code class="language-none"># 主数据库所在服务器的 ip 地址为：127.0.0.1# 在主数据库建立用于从数据库拷贝的账号为：alex# 在主数据库建立用于从数据库拷贝的密码为：123456# 主数据库中查询出的 File 值为：mysqlbin.000035# 主数据库中查询出的 Position 的值为：341change master to master_host='127.0.0.1', master_user='alex',master_password='123456',master_log_file='mysqlbin.000035',master_log_pos=341; # 启动从服务器复制功能start slave;# 执行以下命令，当 Slave_IO_Running: Yes 和 Slave_SQL_Running: Yes 同时为 yes 时，表示主从复制已经打通了show slave status\G<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>测试主从复制是否成功？</p><ul><li>主数据库新建一个库、新建表、插入一条记录，从数据库去查询是否含有以上数据即可</li></ul></li><li><p>如何停止从数据库复制功能？</p></li></ul><pre class="line-numbers language-none"><code class="language-none"># 从数据库上stop slave;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>当 Slave_IO_Running 和 Slave_SQL_Running 参数不同时为 yes 时？</li></ul><pre class="line-numbers language-none"><code class="language-none"># 先停止从数据库复制功能（从数据库上执行）stop slave;# 查询 master 的状态，并记录下 File 和 Position 的值 （主数据库上执行，这次会有新的 File 值和 Position 值）show master status;change master to master_host='主数据库所在服务器的 ip 地址', master_user='alex',master_password='123456',master_log_file='新的 File 值',master_log_pos=新的Position 值;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 主从复制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启 redis 远程连接</title>
      <link href="posts/a15ba792.html"/>
      <url>posts/a15ba792.html</url>
      
        <content type="html"><![CDATA[<h1 id="开启-redis-远程连接"><a href="#开启-redis-远程连接" class="headerlink" title="开启 redis 远程连接"></a>开启 redis 远程连接</h1><ol><li>编辑 redis 配置文件 redis.conf</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 如果需要开启连个访问连接时，一个是本地连接，一个是远程连接</span><span class="token builtin class-name">bind</span> <span class="token number">127.0</span>.0.1 <span class="token number">192.168</span>.174.174<span class="token comment"># 如果是希望任何一台主机都可以连接，那么可以直接注释以下这一行，比如</span><span class="token comment"># bind 127.0.0.1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>开启公网连接 redis</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">protected-mode no<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>重启 redis</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> /etc/init.d/redis restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Cache </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis 的持久化</title>
      <link href="posts/6d929828.html"/>
      <url>posts/6d929828.html</url>
      
        <content type="html"><![CDATA[<h1 id="Redis-的持久化"><a href="#Redis-的持久化" class="headerlink" title="Redis 的持久化"></a>Redis 的持久化</h1><h2 id="两种持久化方式"><a href="#两种持久化方式" class="headerlink" title="两种持久化方式"></a>两种持久化方式</h2><ul><li>RDB 指定的时间间隔内保存数据快照</li><li>AOF 先把命令追加到操作日志的尾部，保存所有历史操作命令</li></ul><h3 id="RDB-模式"><a href="#RDB-模式" class="headerlink" title="RDB 模式"></a>RDB 模式</h3><ul><li><strong>优点</strong></li></ul><ol><li>适合用于进行备份</li><li>fork 出子进程进行备份，主进程没有任何 IO 操作</li><li>恢复大数据集时的速度快</li></ol><ul><li><strong>缺点</strong></li></ul><ol><li>特定条件下进行一次持久化，易丢失数据</li><li>庞大数据时，保存时会出现性能问题</li></ol><p>设置方式</p><p>配置文件路径： sudo vim /etc/redis/redis.conf</p><pre class="line-numbers language-none"><code class="language-none"># 备份的频次save 900 1    # 900 秒内，有 1 次更新操作，就将数据同步到数据文件save 300 10save 60 10000# 备份的文件名 253 dbfilename dump.rdb# 备份的目录路径 263 dir /var/lib/redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认的备份文件为： vim /var/lib/redis/dump.rdb</p><h3 id="AOF-模式"><a href="#AOF-模式" class="headerlink" title="AOF 模式"></a>AOF 模式</h3><ul><li><strong>优点</strong></li></ul><ol><li>数据非常完整，故障恢复丢失数据少</li><li>可对历史操作进行处理</li></ol><ul><li><strong>缺点</strong></li></ul><ol><li>文件的体积大</li><li>速度低于 RDB 且故障恢复速度慢</li></ol><p>设置方式</p><p>配置文件路径： sudo vim /etc/redis/redis.conf</p><pre class="line-numbers language-none"><code class="language-none"># 当 appendonly 参数为 yes 时，则开启 AOF 模式 672 appendonly yes# 备份的文件名 676 appendfilename "appendonly.aof"# 同步的方式 701 # appendfsync always  // 同步持久化，每次数据变更都会立刻保存到磁盘上，需要实时记录，因此效率不高，但是数据十分完整 702 appendfsync everysec  // 异步持久化，每隔 1s 记录一次 703 # appendfsync no  // 不同步<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认的备份文件为： vim /var/lib/redis/appendonly.aof</p><blockquote><p>两种模式可以同时开启，同时开启的时候会优先执行 AOF 模式的备份文件，进行 AOF 模式恢复，同时开启的时候，需要注意在 redis 使用之初就要先开启 AOF 模式，以免 AOF 模式，只会记录部分命令，导致恢复数据不完整。</p></blockquote><h2 id="合理地使用-Redis"><a href="#合理地使用-Redis" class="headerlink" title="合理地使用 Redis"></a>合理地使用 Redis</h2><ul><li>防止内存占满：</li></ul><ol><li>设置超时时间</li><li>不存放过大文件（最好不要超过 500 字节）</li><li>不存放不常用数据</li></ol><ul><li>提高使用效率</li></ul><ol><li>合理使用不同的数据结构类型</li><li>慎用正则处理或者批量操作 Hash、Set 等。（因为 redis 是单线程，如果正则匹配 key 的话，可能会影响其他命令的使用）</li></ol>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Cache </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis Cluster 集群解决方案</title>
      <link href="posts/663a091e.html"/>
      <url>posts/663a091e.html</url>
      
        <content type="html"><![CDATA[<h1 id="Redis-Cluster-集群解决方案"><a href="#Redis-Cluster-集群解决方案" class="headerlink" title="Redis Cluster 集群解决方案"></a>Redis Cluster 集群解决方案</h1><ul><li>多个 Redis 实例协同进行</li><li>采用 slot （槽）分割数据，是 CRC16 与 16384 取模后分散</li><li>主从结构和选举算法，保证每个节点的可靠性</li><li>客户端可以连接任意一个 node 进行操作</li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-a6ad3bca1885917a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="主从协同进行"></p><ul><li>所有的 redis 节点彼此互联（PING-PONG 机制），内部使用二进制协议优化传输速度和带宽。</li><li>节点的 fail 是通过集群中超过半数的节点检测失效时才生效。</li><li>客户端与 redis 节点直连，不需要中间 proxy 层，客户端不需要连接集群所有节点，连接集群中任何一个可用节点即可。</li><li>redis-cluster 把所有的物理节点映射到 [0-16383] slot 上，cluster 负责维护 node &lt;-&gt; slot &lt;-&gt; value</li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-51f56d899218929f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="当有一台服务器出现故障时"></p><h2 id="Redis-Cluster-注意事项"><a href="#Redis-Cluster-注意事项" class="headerlink" title="Redis Cluster 注意事项"></a>Redis Cluster 注意事项</h2><ul><li>不完全支持批量操作：mset、mget</li><li>事务不能跨节点支持</li><li>不支持多实例</li><li>key 是最小粒度</li><li>最少 6 个才能保证组成完整高可用的集群</li><li>连接的时候只需要连接 1 台服务器即可。</li><li>如果 1 个主从连接宕机的话，那么集群就宕机了。</li></ul><h2 id="Redis-Cluster-配置步骤"><a href="#Redis-Cluster-配置步骤" class="headerlink" title="Redis Cluster 配置步骤"></a>Redis Cluster 配置步骤</h2><p><em><strong>（建议使用官方安装包的方式安装 redis，不要使用 apt-get install 或者 yum 直接安装）</strong></em></p><ol><li>分别安装 <strong>6 台</strong> 服务器，三个主节点，三个从节点</li></ol><p>我这里采用的是虚拟机，相应的 ip 地址分别为：</p><ul><li>192.168.174.128  （28 号服务器）</li><li>192.168.174.129  （29 号服务器）</li><li>192.168.174.130  （30 号服务器）</li><li>192.168.174.131  （31 号服务器）</li><li>192.168.174.132  （32 号服务器）</li><li>192.168.174.133  （33 号服务器）</li></ul><ol start="2"><li>配置 <code>redis.conf</code> 配置文件 <em><strong>（在所有的服务器上操作）</strong></em></li></ol><p>vim /etc/redis/redis.conf</p><ul><li>第一步：</li></ul><pre class="line-numbers language-none"><code class="language-none"># 默认为本地 ip 地址，需要改成当前服务器的 ip 地址，以便其他服务器可以正常访问  69 bind 127.0.0.1 ::1  # 比如 28 号服务器更改为以下 ip 地址bind 192.168.174.128<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第二步：</li></ul><pre class="line-numbers language-none"><code class="language-none"># 这个参数的含义是指：禁止公网连接 redis 缓存，这样可以加强 redis 安全性。如果是在线上环境的话，我们不需要更改此参数值，然后需要进行设置账号密码，进行 auth 认证。这里为了测试方便，我们直接改成 no  89 protected-mode yes  # 需要更改为以下protected-mode no<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第三步：开启集群相关参数</li></ul><pre class="line-numbers language-none"><code class="language-none"># 默认集群是关闭的 815 # cluster-enabled yes# 需要更改为以下（去除掉 # 号注释即可） 815 cluster-enabled yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第四步：开启集群配置文件</li></ul><pre class="line-numbers language-none"><code class="language-none"># 默认集群配置文件是关闭的 823 # cluster-config-file nodes-6379.conf # 需要更改为以下（去除掉 # 号注释即可）  823 cluster-config-file nodes-6379.conf  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第五步：开启集群超时时间</li></ul><pre class="line-numbers language-none"><code class="language-none"># 当一个节点出现问题的时候，最大超时连接时间为 15s ，当超过 15s 还没有连接的时候，就会认为该节点出现故障了，就会通过选举算法，将从服务器提升为主服务器。该参数默认是关闭的。 829 # cluster-node-timeout 15000 # 需要更改为以下（去除掉 # 号注释即可） 829 cluster-node-timeout 15000 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>安装 <code>ruby</code> 组件。如果不安装这个软件，集群的时候，会报组件错误。你需要在那台服务器上面做集群，你就需要在哪台服务器上安装这个组件，并不是每台服务器上面都安装。这里采用第一台服务器做集群，因此在第一台服务器上安装 <code>ruby</code> 组件。<em><strong>（在 28 号服务器上操作）</strong></em></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> ruby<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>安装其他组件  <em><strong>（在 28 号服务器上操作）</strong></em></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> gem <span class="token function">install</span> redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>配置集群  <em><strong>（在 28 号服务器上操作）</strong></em></li></ol><p>因为我是直接采用的 <code>apt-get install</code> 的方式安装的 <code>redis</code> 因此，服务器上面的 <code>redis</code> 工具 <code>redis-trib.rb</code> 在 <code>/usr/share/doc/redis-tools/examples</code> 目录下。如果你是通过安装包安装的 <code>redis</code> 那么请直接到 <code>redis</code> 解压目录中执行命令，如： <code>~/redis-4.0.9/src/redis-trib.rb</code></p><pre class="line-numbers language-none"><code class="language-none">/usr/share/doc/redis-tools/examples/redis-trib.rb create --replicas 1 192.168.174.128:6379 192.168.174.129:6379 192.168.174.130:6379 192.168.174.131:6379 192.168.174.132:6379 192.168.174.133:6379<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-d756993ee1a78b0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置集群"></p><h3 id="如果出现如下报错时"><a href="#如果出现如下报错时" class="headerlink" title="如果出现如下报错时"></a>如果出现如下报错时</h3><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-398cfd78326a863f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="插槽节点被占用"></p><p><strong>问题原因：</strong><br>slot 插槽被占用了（这是搭建集群前时，以前 redis 的旧数据和配置信息没有清理干净。）<br><strong>解决方案如下：</strong><br>用 redis-cli 登录到每个节点执行  flushall  和 cluster reset  就可以了</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-460623a9e0c0186b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="解决方案如图所示"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-f2ae4a85d4fd0304.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="再次设置集群，则可以连接成功"></p><ol start="6"><li>连接集群 <em><strong>（在任意一台服务器上操作）</strong></em></li></ol><p>这里我挑选的是 ip 地址为 ： 192.168.174.131 的服务器，特别说明下，当执行 <code>keys</code> 命令的时候，只针对于当前服务器</p><pre class="line-numbers language-none"><code class="language-none"># 带 -c 参数表示连接集群redis-cli -h 192.168.174.131 -c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="7"><li>测试</li></ol><pre class="line-numbers language-none"><code class="language-none">alex@alex-virtual-machine:~$ redis-cli -h 192.168.174.131 -c    # 连接的 31 号服务器192.168.174.131:6379&gt; keys *  # 这里的 keys 也只能查看所有在 31 号服务器上面的 keys(empty list or set)192.168.174.131:6379&gt; set aa 111  # 随便设置一个 key-&gt; Redirected to slot [1180] located at 192.168.174.128:6379  # 数据却在 28 号服务器上被保存OK192.168.174.128:6379&gt;   # 并且此时的状态直接跳到了 28 号服务器上面<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-1f41460e9f146d8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="连接 31 号服务器，数据存到了 28 号服务器上"></p><pre class="line-numbers language-none"><code class="language-none">alex@alex-virtual-machine:~$ redis-cli -h 192.168.174.129 -c  # 通过 29 号服务器连接集群192.168.174.129:6379&gt; get aa  # 从 29 号服务器中去取值-&gt; Redirected to slot [1180] located at 192.168.174.128:6379  # 会直接从 28 号服务器中返回值"111"192.168.174.128:6379&gt;   # 并且此时的状态直接跳到了 28 号服务器上面<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-56e8e278da0250a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="从 30 号服务器上面取刚刚设置的值，会直接跳到 28 号服务器返回值"></p><pre class="line-numbers language-none"><code class="language-none">alex@alex-virtual-machine:~$ redis-cli -h 192.168.174.130 -c  # 通过 30 号服务器连接集群192.168.174.130:6379&gt; keys *  # 30 号服务器中并没有设置过 key，如果 30 号服务器可以取出值，证明可以跨服务器取出 keys，但是并没有数据，证明 keys 只能取出当前服务器中的 keys(empty list or set)192.168.174.130:6379&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-a8098e86eba5fc31.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="keys 只能取出当前服务器中的所有 key"></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Cache </tag>
            
            <tag> 分布式集群 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Memcached 实现分布式算法</title>
      <link href="posts/aa516918.html"/>
      <url>posts/aa516918.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用-Memcached-实现分布式算法"><a href="#使用-Memcached-实现分布式算法" class="headerlink" title="使用 Memcached 实现分布式算法"></a>使用 Memcached 实现分布式算法</h1><h2 id="分布式算法"><a href="#分布式算法" class="headerlink" title="分布式算法"></a>分布式算法</h2><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-e26290372bf4ec4b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="需要通过应用程序来实现分布式算法"></p><h3 id="余数计算分散法"><a href="#余数计算分散法" class="headerlink" title="余数计算分散法"></a>余数计算分散法</h3><blockquote><p>根据 key 来计算 CRC，然后结果对服务器数进行取模得到 memcached 服务器节点。  服务器无法连接的时候，将尝试的连接次数加到 key 后面重新计算。</p></blockquote><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-6e626d05ecb0cb98.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="余数计算分散法"></p><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><p>添加或移除服务器时，几乎所有缓存要重建，还需要考虑雪崩式崩溃问题。</p><p>16 个 Key、5 个服务器</p><table><thead><tr><th>服务器</th><th>key 值</th><th>key 值</th><th>key 值</th><th>key 值</th></tr></thead><tbody><tr><td>S0</td><td></td><td>5</td><td>10</td><td>15</td></tr><tr><td>S1</td><td>1</td><td>6</td><td>11</td><td>16</td></tr><tr><td>S2</td><td>2</td><td>7</td><td>12</td><td></td></tr><tr><td>S3</td><td>3</td><td>8</td><td>13</td><td></td></tr><tr><td>S4</td><td>4</td><td>9</td><td>14</td><td></td></tr></tbody></table><p>举个例子来说：如果 S3 服务器直接挂掉的话，那么 S3 服务器的流量会全部并给 S4 服务器，也就是说 S4 服务器要承受之前一倍的压力，如果此时 S4 服务器已经无法承受，直接崩掉的话，那么也就是会将原本 S3、S4 的流量全部在并给 S0 服务器</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-b39308b35ba20703.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="余数计算分散法"></p><table><thead><tr><th>服务器</th><th>key 值</th><th>key 值</th><th>key 值</th><th>key 值</th><th>key 值</th></tr></thead><tbody><tr><td>S0</td><td></td><td>4</td><td>8</td><td>12</td><td>16</td></tr><tr><td>S1</td><td>1</td><td>5</td><td>9</td><td>13</td><td></td></tr><tr><td>S2</td><td>2</td><td>6</td><td>10</td><td>14</td><td></td></tr><tr><td>S3（假设移除了 S3 服务器）</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>S4(3)</td><td>3</td><td>7</td><td>11</td><td>15</td><td></td></tr></tbody></table><p>以上例子说明：当移除一台服务器之后，基本上所有的缓存都需要重建，key 值，除了 S1 服务器的 1 和 S2 服务器的 2，剩下的全部都乱套了</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-d57efed81911e414.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="余数计算分散法"></p><h3 id="一致性哈希算法"><a href="#一致性哈希算法" class="headerlink" title="一致性哈希算法"></a>一致性哈希算法</h3><ul><li>求出服务器节点的哈希值分配到 0~2^32 的圆上</li><li>求出存储数据键的哈希值映射到圆上</li><li>从数据映射到的位置开始顺时针查找，将数据保存到找到的第一个服务器上</li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-e59269f6a1f321ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="一致性哈希算法"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-27ffaa9971199a33.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="一致性哈希算法"></p><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><ul><li>冗余少</li><li>负载均衡</li><li>过渡平滑</li><li>存储均衡</li></ul><h4 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h4><p>依然无法解决雪崩问题</p>]]></content>
      
      
      <categories>
          
          <category> Cache </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cache </tag>
            
            <tag> 缓存 </tag>
            
            <tag> Memcached </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>memcached 简单使用</title>
      <link href="posts/afc71251.html"/>
      <url>posts/afc71251.html</url>
      
        <content type="html"><![CDATA[<h1 id="memcached-简单使用"><a href="#memcached-简单使用" class="headerlink" title="memcached 简单使用"></a>memcached 简单使用</h1><h2 id="Memcached-工作原理和内存管理"><a href="#Memcached-工作原理和内存管理" class="headerlink" title="Memcached 工作原理和内存管理"></a>Memcached 工作原理和内存管理</h2><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-9d44ed2ff2c9251a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Memcached 工作原理和内存管理"></p><blockquote><p>memcache 的回收机制会采用 <strong>最近最少算法</strong> 将很久没有使用的数据进行清除</p></blockquote><ul><li>Ubuntu 下安装</li></ul><blockquote><p>如果需要编译安装的话，需要先安装 libmemcached 组件才可以</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装 memcached</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> memcached<span class="token comment"># 安装 php-memcached 扩展</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> php-memcached<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>进入 memecached 环境，直接使用 telnet 访问 11211 端口</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">telnet <span class="token number">127.0</span>.0.1 <span class="token number">11211</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>测试</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置键名为 user1 对值不进行压缩 过期时间为 900s 长度为 8 字节</span><span class="token builtin class-name">set</span> user1 <span class="token number">0</span> <span class="token number">900</span> <span class="token number">8</span>   <span class="token operator">&lt;</span>直接回车<span class="token operator">&gt;</span>alex   <span class="token operator">&lt;</span>直接回车<span class="token operator">&gt;</span>get user1  <span class="token operator">&lt;</span>直接回车<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>另外还需要去 phpinfo() 中去查询一下 memcached 扩展是否安装完毕！</p></blockquote><ul><li>清空 memcached 中所有数据</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 直接重启 memcached 服务即可</span><span class="token function">service</span> memcached restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Cache </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cache </tag>
            
            <tag> 缓存 </tag>
            
            <tag> Memcached </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Memcached 实现 Session 共享</title>
      <link href="posts/af14a477.html"/>
      <url>posts/af14a477.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用-Memcached-实现-Session-共享"><a href="#使用-Memcached-实现-Session-共享" class="headerlink" title="使用 Memcached 实现 Session 共享"></a>使用 Memcached 实现 Session 共享</h1><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-7b30b73812fde12f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="实现 Session 共享"></p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><blockquote><p>当有很多用户的时候，这些用户的登录位置在各个不同的服务器上，因为 session 是生成在服务器上的，当用户互访的时候，有的时候发现自己有权限，有时候发现自己没有权限。因为缓存是集中式的，所有的缓存都在一起，那么就可以把 session 放到 memcached 缓存中。所有服务器都可以在公用的服务器上面来取 session，这样无论用户在哪一台服务器上面登录，都有正确的 session。这样的话，有两个优点，第一，解决了 session 共享的问题。第二，当用户量很大的时候，session 是存放在服务器上面的，因此就会增加了磁盘的 IO，但是如果放在缓存中，性质则完全不一样。</p></blockquote><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><ul><li><h3 id="设置-php-ini-配置文件"><a href="#设置-php-ini-配置文件" class="headerlink" title="设置 php.ini 配置文件"></a>设置 php.ini 配置文件</h3></li></ul><p>vim /etc/php/7.2/fpm/php.ini</p><ol><li>将 seesion 存储方式改为 memcached</li></ol><p>默认 php 是以文件的形式存放 session 的</p><pre class="line-numbers language-none"><code class="language-none">1337 session.save_handler = files<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>因此需要修改成 memcached</p><pre class="line-numbers language-none"><code class="language-none">session.save_handler = "memcached"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>修改 session 存放位置</li></ol><p>默认 php 注释掉了</p><pre class="line-numbers language-none"><code class="language-none">1366 ;session.save_path = "/var/lib/php/sessions"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改为</p><blockquote><p>注意：192.168.174.128 是我虚拟机的 ip 地址，这里需要修改成你 memcached 服务器的 ip 地址</p></blockquote><pre class="line-numbers language-none"><code class="language-none"># 对于 php 5.6 及以下，需要写成如下session.save_path = "tcp://192.168.174.128:11211"# 对于 php 7 以上可以直接写成session.save_path = "192.168.174.128:11211"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h3 id="如果只想单个-php-文件，取-session-的时候直接取缓存中取的话，可以如下设置"><a href="#如果只想单个-php-文件，取-session-的时候直接取缓存中取的话，可以如下设置" class="headerlink" title="如果只想单个 php 文件，取 session 的时候直接取缓存中取的话，可以如下设置"></a>如果只想单个 php 文件，取 session 的时候直接取缓存中取的话，可以如下设置</h3></li></ul><p>vim test.php</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"session.save_hander"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"memcached"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"session.save_path"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"192.168.174.128:11211"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><h3 id="另外还可以采用-apache-或者-nginx-的方式设置"><a href="#另外还可以采用-apache-或者-nginx-的方式设置" class="headerlink" title="另外还可以采用 apache 或者 nginx 的方式设置"></a>另外还可以采用 apache 或者 nginx 的方式设置</h3></li></ul><h2 id="将-session-放到-memcached-中的缺点："><a href="#将-session-放到-memcached-中的缺点：" class="headerlink" title="将 session 放到 memcached 中的缺点："></a>将 session 放到 memcached 中的缺点：</h2><p>集群错误会导致用户无法登陆、memcached 的回收机制可能会导致用户掉线</p>]]></content>
      
      
      <categories>
          
          <category> Cache </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cache </tag>
            
            <tag> 缓存 </tag>
            
            <tag> Memcached </tag>
            
            <tag> Session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件缓存（模板缓存）</title>
      <link href="posts/8a518969.html"/>
      <url>posts/8a518969.html</url>
      
        <content type="html"><![CDATA[<h1 id="文件缓存（模板缓存）"><a href="#文件缓存（模板缓存）" class="headerlink" title="文件缓存（模板缓存）"></a>文件缓存（模板缓存）</h1><h2 id="从页面片段缓存到-facebook-的-BigPipe-技术"><a href="#从页面片段缓存到-facebook-的-BigPipe-技术" class="headerlink" title="从页面片段缓存到 facebook 的 BigPipe 技术"></a>从页面片段缓存到 facebook 的 BigPipe 技术</h2><ul><li>将页面划分成一个个小块</li><li>利用 ob_flush() 与 flush() 将缓冲区的内容提前输出给浏览器</li><li>浏览器在一个请求中不断接收并渲染到页面，逐个小块显示。<ul><li>注：JS 部分，不需要立刻执行的部分，可以最后再 eval 进来</li></ul></li></ul><p>程序执行的流程为：<br>program data -&gt; php buffer -&gt; tcp buffer -&gt; client browers</p><table><thead><tr><th>方法</th><th>作用</th><th>解释</th></tr></thead><tbody><tr><td>ob_start()</td><td>打开输出缓冲区</td><td></td></tr><tr><td>ob_flush()</td><td>将 PHP buffer 中的内容，送出到 Tcp buffer 中</td><td>调用 ob_flush() 之后缓冲区内容将被丢弃。</td></tr><tr><td>flush()</td><td>将当前为止 Tcp buffer 中内容发送到用户的浏览器。</td><td>flush() 函数不会对服务器或客户端浏览器的缓存模式产生影响。因此，必须同时使用 ob_flush() 和 flush() 函数来刷新输出缓冲。</td></tr><tr><td>ob_get_contents()</td><td>返回内部缓冲区的内容</td><td>只是得到输出缓冲区的内容，但不清除它，没有激活，则返回 false</td></tr><tr><td>ob_end_clean()</td><td>删除内部缓冲区的内容，并且关闭内部缓冲区。</td><td></td></tr><tr><td>ob_end_flush()</td><td>发送内部缓冲区的内容到浏览器，并且关闭输出缓冲区</td><td></td></tr><tr><td>ob_get_length()</td><td>返回内部缓冲区的长度</td><td></td></tr></tbody></table><h2 id="如何使用这门技术？"><a href="#如何使用这门技术？" class="headerlink" title="如何使用这门技术？"></a>如何使用这门技术？</h2><ul><li>nginx 需要设置</li></ul><p>sudo vim /etc/nginx/nginx.conf</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">proxy_buffering</span> <span class="token boolean">off</span></span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">fastcgi_keep_conn</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">gzip</span> <span class="token boolean">off</span></span><span class="token punctuation">;</span>  // 默认是开启了压缩，需要关闭<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>php 需要设置</li></ul><p>sudo vim /etc/php/7.0/fpm/php.ini</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">;</span>output_buffering <span class="token operator">=</span> <span class="token number">4096</span>output_buffering <span class="token operator">=</span> off<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>重启 nginx 和 php</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> nginx restart<span class="token function">sudo</span> <span class="token function">service</span> php7.0-fpm restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>模板中使用</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">// 开启缓冲区</span><span class="token function">ob_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">// 模拟程序执行缓慢</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将 php 执行过的东西发送给 nginx 或者 apache</span><span class="token function">ob_flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// nginx 或 apache 将内容发送给客户端</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">// 关闭之前也需要将最后的内容发送给客户端</span><span class="token function">ob_flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 清理缓冲区</span><span class="token function">ob_end_clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现的效果及优势"><a href="#实现的效果及优势" class="headerlink" title="实现的效果及优势"></a>实现的效果及优势</h2><blockquote><p>页面中有很多分块内容的时候，可以将许多个分块内容分批次的刷给客户端，使得客户端不需要等待所有的内容加载完毕才能看到内容。并且这种技术只有一次请求，如果采用 ajax 的话，可能会想到的是，每个分块内容使用 ajax 请求一次，这样的话就会有多个请求。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Cache </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cache </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器应用程序程序缓存</title>
      <link href="posts/4230d41e.html"/>
      <url>posts/4230d41e.html</url>
      
        <content type="html"><![CDATA[<h1 id="服务器应用程序程序缓存"><a href="#服务器应用程序程序缓存" class="headerlink" title="服务器应用程序程序缓存"></a>服务器应用程序程序缓存</h1><h2 id="Web-Server-服务器之-Apache"><a href="#Web-Server-服务器之-Apache" class="headerlink" title="Web Server 服务器之 Apache"></a>Web Server 服务器之 Apache</h2><ol><li>Apache 的过期模块 mod_expires.so</li></ol><p>通过配置文件控制 HTTP 的 “Expires:” 和 “Cache-Control:” 头内容</p><pre class="line-numbers language-apache" data-language="apache"><code class="language-apache"># 启用 expires_module 模块LoadModule expires_module modules/mod_expires.so# 启用有效期控制ExpiresActive On# GIF 有效期为 1 个月，2592000 秒为 1 个月ExpiresByType image/gif A2592000# HTML 文档的有效期是最后修改时刻后的一星期ExpiresByType text/html M604800# 以下的含义类似ExpiresByType text/css "now plus 2 months"ExpiresByType image/jpeg "access plus 2 months"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>详细解释 <code>ExpiresByType image/jpeg "access plus 2 months"</code> 的含义为：<br><code>ExpiresByType</code> 表示为：由 mime 决定过期配置<br><code>image/jpeg</code> 表示为：具体文件的 mime 类型<br><code>access</code> 表示：过期时间从访问时开始计算，等同于 <code>now</code> 和 <code>A</code> 参数，还可以设置为 <code>modification</code> 或者 <code>M</code> 参数，表示为，被访问文件的最后修改时间开始计算。<br><code>months</code> 表示月份，可用的参数有：<code>years</code> 、<code>months</code> 、 <code>weeks</code> 、 <code>days</code> 、<code>hours</code> 、 <code>minutes</code> 、 <code>seconds</code></p><ol start="2"><li>Apache 的缓存模块 mod_cache</li></ol><ul><li>mod_cache: 基于 uri 键的内容动态缓冲模块，缓存响应头和正文，以便在下一个请求时快速相应它。<ul><li>mod_disk_cache (Apache2.2) / mod_cache_disk (Apache2.4) 基于磁盘的缓冲模块</li><li>mod_mem_cache.so (Apache2.2) 基于内存的缓冲模块，2.4 版本已经移除</li></ul></li><li>mod_file_cache 提供文件描述符缓存支持，加快与缓慢的文件系统服务器的文件访问，只能应用于静态文件。</li></ul><h2 id="php-的-APC-和-Opcache"><a href="#php-的-APC-和-Opcache" class="headerlink" title="php 的 APC 和 Opcache"></a>php 的 APC 和 Opcache</h2><ul><li>Opcache 是一种通过将解析的 php 脚本预编译的字节码存放在共享内存中来避免每次加载和解析 php 脚本的开销。</li><li>解析器可以直接从共享内存读取已经缓存的字节码，从而大大提高 php 的执行效率。</li><li>APC 是缓存、优化 php 中间代码的架构，可以缓存 Opcodes。</li><li>php5.5 以后，Zend Opcache 整合到 php 中，并可代替 APC 使用。此功能默认关闭。</li></ul><h3 id="如何使用-Opcache-？"><a href="#如何使用-Opcache-？" class="headerlink" title="如何使用 Opcache ？"></a>如何使用 Opcache ？</h3><ol><li>访问 phpinfo(); 页面，查看 Loaded Configuration File =&gt; /etc/php/7.0/fpm/php.ini （php 配置文件 php.ini 所在的文件路径） 和 Scan this dir for additional .ini files =&gt; /etc/php/7.0/fpm/conf.d （扩展配置文件的目录）</li><li>查看 zend_extension=opcache.so 是否开启：vim /etc/php/7.0/fpm/conf.d/10-opcache.ini （默认是开启的）</li></ol><h3 id="php-执行过程"><a href="#php-执行过程" class="headerlink" title="php 执行过程"></a>php 执行过程</h3><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-3638cd88c106c12f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="php 代码执行流程"></p><ul><li>查看 lexing</li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$source</span> <span class="token operator">=</span> <span class="token string heredoc-string"><span class="token delimiter symbol"><span class="token punctuation">&lt;&lt;&lt;</span>EOT</span>&lt;?phpecho '1111';<span class="token delimiter symbol">EOT<span class="token punctuation">;</span></span></span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">token_get_all</span><span class="token punctuation">(</span><span class="token variable">$source</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="mysql-查询缓存"><a href="#mysql-查询缓存" class="headerlink" title="mysql 查询缓存"></a>mysql 查询缓存</h2><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-dd846d00e6ebf040.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mysql 查询缓存"></p><p>查询缓存相关有两个参数设置：</p><ol><li>query_cache_size 查询缓存大小，默认为 16M</li><li>query_cache_type 有三个可用值，0 表示不使用查询缓存，1 表示缓存所有的结果，2 表示在 select 语句中使用了 sql cache 指定缓存查询的结果进行缓存，没有指定则不缓存。</li></ol><h3 id="设置查询缓存相关的配置"><a href="#设置查询缓存相关的配置" class="headerlink" title="设置查询缓存相关的配置"></a>设置查询缓存相关的配置</h3><ol><li>进入主配置文件中查看 sudo vim /etc/mysql/my.cnf</li><li>进入配置文件 sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf</li></ol><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">query_cache_size = 16M  // 默认查询缓存为 16Mquery_cache_type = 1  // 开启查询缓存，默认是没有开启的，需要手动添加这一行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>重启 mysql 服务器 sudo service mysql restart</li><li>进入数据库 mysql -u root -p</li><li>查看缓存是否开启 show variables like “%query_cache%”;</li><li>查询缓存是否正常运行了 show status like “%Qcache%”;</li></ol><h3 id="mysql-Memory-存储引擎"><a href="#mysql-Memory-存储引擎" class="headerlink" title="mysql Memory 存储引擎"></a>mysql Memory 存储引擎</h3><p>原理：</p><blockquote><p>创建表结构使用 ENGINE = MEMORY 生成内存表，表结构存在磁盘上的 <code>.frm</code> 文件中，服务器启动后，用此结构在内存中创建空白表，并默认使用哈希索引。</p></blockquote><p>优点：</p><ol><li>速度比 MyISAM 和 Innodb 存储引擎更快，适合做热点表的前置缓存。</li><li>sql 操作与存储引擎一致。</li></ol><p>使用要点：</p><ol><li>varchar 这样的可变长度类型将转换为固定长度</li><li>mysql 4.1.0 之前，不支持 auto_increment 自增列</li><li>不能包含 blob 或 text 列</li><li>重启数据丢失，如果有备份，会导致数据与备份不一致</li><li>内存表数据大于 max_heap_table_size 设定值，超出数据会存储到磁盘上</li><li>高负载时扩展性和混合写操作的并发处理性能不佳</li></ol>]]></content>
      
      
      <categories>
          
          <category> Cache </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cache </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器缓存</title>
      <link href="posts/be7c79f7.html"/>
      <url>posts/be7c79f7.html</url>
      
        <content type="html"><![CDATA[<h1 id="浏览器缓存"><a href="#浏览器缓存" class="headerlink" title="浏览器缓存"></a>浏览器缓存</h1><ul><li>浏览器处理网页的方式</li></ul><ol><li>走到协商缓存会返回 304</li><li>走到强缓存会返回 200</li></ol><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-f123261940f40366.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="浏览器缓存执行流程"></p><ul><li>合理使用浏览器缓存</li></ul><ol><li>页面连接的请求无须做长时间缓存</li><li>敏感数据像订单等不宜做缓存</li><li>静态资源部分，通常会设定一个较长的缓存时间</li><li>冷热数据分离，减少请求量</li><li>不要随意修改文件，建议使用 ?version=** 调用多版本</li><li>不建议使用 ETag,尤其是分布式</li></ol><ul><li>header 字段输出方式</li></ul><ol><li>html 输出方式</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Cache-Control<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>max-age=7200<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>php 输出方式</li></ol><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Cache-Control:max-age=7200'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><strong>强缓存阶段的 header 字段</strong></li></ul><p>启用强缓存的状态为 200 (from disk cache)</p><p>执行到强缓存的时机为：</p><pre class="line-numbers language-none"><code class="language-none">graph TDA[浏览器] --&gt; B[是否有缓存]B --&gt; C{Yes or No?}C --&gt; |yes| D[是否过期]D --&gt; |no| E[就使用缓存中的内容]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Pragma (HTTP 1.0)</li><li>Expires (HTTP 1.0)  （设定的是一个精确的时间）</li><li>Cache-control (HTTP 1.1)<ul><li>max-age （缓存最大的秒数）</li><li>Public \ private （当设置为 public 且采用 https 协议的时候，也会转换成 private）</li><li>no-cache \ no-store （不允许存放在用户的硬盘里） \ must-revalidate （必须请求认证）</li></ul></li></ul><blockquote><p>如果这三个参数同时出现的话：那么优先顺序为，1、Cache-control 2、Pragma 3、Expires</p></blockquote><ul><li><strong>协商缓存阶段的 header 字段</strong></li></ul><p>启用协商缓存的状态为 304 Not Modified</p><ol><li>Last-Modified：末次更新标记，文件最后一次更新的具体时间（下行 response）</li><li>If-Modified-Since ：资源上次的修改时间（上行 request）</li><li>E-Tag ： 实体与标记（下行）</li><li>If-None-Match ：资源内容标识（上行）</li></ol><p>协商缓存的执行流程如下：</p><pre class="line-numbers language-none"><code class="language-none">graph TDA[浏览器第一次请求服务器] --&gt; B[服务器 Response Headers 携带 last-modified: Mon, 21 Oct 2019 00:44:35 GMT 返回给浏览器]B --&gt; C[浏览器第二次请求服务器 Request Headers 携带 If-Modified-Since: Mon, 21 Oct 2019 00:44:35 GMT]C --&gt; D{If-Modified-Since 和文件的 Last-Modified 作比较}D --&gt; |yes| E[文件的最后修改时间没有变化]E --&gt; F[Status Code: 304 Not Modified]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为 Last-Modified 和  If-Modified-Since 字段的最小颗粒度为秒 （Mon, 21 Oct 2019 00:44:35 GMT） ，那么就会出现一个问题：当某个文件在 1s 中更改 n 次时，服务器就完全不知道是否需要执行强制缓存。这就引入了 E-Tag 的概念。当文件只要修改时，E-Tag 就会重新生成一个字符串，之后浏览器第二次请求的时候，重新生成的字符串被 If-None-Match 字段携带。「E-Tag」、「If-None-Match」 和 「Last-Modified」、「If-Modified-Since」执行流程完全一致。</p>]]></content>
      
      
      <categories>
          
          <category> Cache </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cache </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows10 专业版 64位系统安装docker并使用 laradock 搭建 laravel 环境</title>
      <link href="posts/f59f8f31.html"/>
      <url>posts/f59f8f31.html</url>
      
        <content type="html"><![CDATA[<h1 id="windows10-专业版-64-位系统安装-docker-并使用-laradock-搭建-laravel-环境"><a href="#windows10-专业版-64-位系统安装-docker-并使用-laradock-搭建-laravel-环境" class="headerlink" title="windows10 专业版 64 位系统安装 docker 并使用 laradock 搭建 laravel 环境"></a>windows10 专业版 64 位系统安装 docker 并使用 laradock 搭建 laravel 环境</h1><blockquote><p><a href="https://www.docker.com/">docker官网</a><br><a href="https://docs.docker.com/install/">docker官网安装文档</a></p></blockquote><h2 id="安装说明"><a href="#安装说明" class="headerlink" title="安装说明"></a>安装说明</h2><ul><li><h3 id="windows-10-系统需要开启-Hyper-V"><a href="#windows-10-系统需要开启-Hyper-V" class="headerlink" title="windows 10 系统需要开启 Hyper-V"></a>windows 10 系统需要开启 Hyper-V</h3></li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-1c2cfe770c1a9c08.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="官方文档中有写到，必须开启 Hyper-V"></p><p>开启方式如下图：</p><ol><li><p>打开控制面板-程序-程序和功能-启用或关闭 windows 功能<br><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-8c02d2b070ab1bfd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="启用或关闭 windows 功能"></p></li><li><p>找到有关  Hyper-V  的项，全部选中<br><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-4a53340ebf3d7ebc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="有关 Hyper-V 的选项，全部勾选"></p></li><li><p>如果发现关于 Hyper-V 的选项无法开启，那么就需要进入 bios 开启虚拟化。开启方法见如下链接：</p></li></ol><blockquote><p><a href="https://www.windows10.pro/how-to-see-if-the-computer-can-run-hyper-v-virtual-machines/">如何查看自己的Win10电脑是否能运行Hyper-V虚拟机</a></p></blockquote><blockquote><p>查看 Hyper-V 固件中启用的虚拟化是否开启的步骤：Win + R 输入 “msinfo32 ” 即可看到“系统信息”窗口。<br>进入 bios 开启固件虚拟化的方法步骤：进入 bios 设置界面，切换到 Advanced 标签，选中 CPU Configuration 设置 Intel Virtualization Technology 为 Enabled。（不同的主板可能会有不同的设置方法，主要是将 Intel Virtualization Technology 设置为 Enabled 即可）</p></blockquote><ol start="4"><li>再次打开【启用或关闭 windows 功能界面】开启 Hyper-V 所有选项。<br><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-0aded33529879bf5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="不管怎样，主要的步骤是开启 Hyper-V 所有选项"></li></ol><ul><li><h3 id="下载-Docker-Desktop-for-Windows-desktop-app"><a href="#下载-Docker-Desktop-for-Windows-desktop-app" class="headerlink" title="下载 Docker Desktop for Windows desktop app"></a>下载 Docker Desktop for Windows desktop app</h3></li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-f853b71da33b32c7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="官方文档详细步骤"></p><ol><li><p>下载 Docker Desktop for Windows app</p><blockquote><p><a href="https://download.docker.com/win/stable/Docker%20for%20Windows%20Installer.exe">Docker Desktop Installer.exe 下载安装地址</a></p></blockquote></li><li><p>下载完成之后，直接双击安装<br><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-901ae0bb45645f92.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="安装过程图01"></p></li></ol><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-922d3317a0152afc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="安装过程图02"></p><ol start="3"><li><p>开启 docker<br>直接可以通过小娜助手搜 docker 关键词，然后启动 Docker Desktop，不管怎样，主要是找到 Docker Desktop 应用，打开就好。<br><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-e6b8377c984ee245.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="本图通过小娜助手搜 docker 关键词打开"></p></li><li><p>查看 docker 开启状态。<br><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-54e121b6e4f24813.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="桌面右下角会出现 docker 的图标，鼠标移到图标上面会出现 Docker Desktop is running 字样，即为打开"></p></li></ol><blockquote><p>初次安装时，可能会提示你登录 docker 的账号，如果没有 docker 账号的话，可以去 docker 官网注册一下。</p></blockquote><ol start="5"><li>测试安装。<br>任意位置打开 Windows PowerShell<pre class="line-numbers language-none"><code class="language-none">// 查看 docker 版本docker --version docker-compose --versiondocker run hello-world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-e644b75b3cb1da7b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="使用 PowerShell 和 cmd是一样的"></li></ol><ul><li><h3 id="使用-laradock-搭建项目"><a href="#使用-laradock-搭建项目" class="headerlink" title="使用 laradock 搭建项目"></a>使用 laradock 搭建项目</h3></li></ul><ol><li>将 laradock 项目代码克隆到本地：<pre class="line-numbers language-none"><code class="language-none">git clone https://github.com/Laradock/laradock.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-22cb4a41faae8ed0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="下载 laradock 项目到本地"></p><ol start="2"><li>进入 <code>laradock</code> 目录将 <code>env-example</code> 复制一份并命名为 <code>.env</code><pre class="line-numbers language-none"><code class="language-none">cp env-example .env<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-2ba18bf82bcb896a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="复制配置文件"></p><ol start="3"><li>运行容器 （此时在 laradock 目录下）<pre class="line-numbers language-none"><code class="language-none">docker-compose up -d nginx mysql redis workspace<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>如果指定端口已经被占用，运行上述命令会报错，关闭相应的服务再重新运行上述命令即可。</li></ol><blockquote><p>注：安装过程中，由于某些资源需要翻墙才能下载，建议安装并启用 VPN 后再执行上述命令。如果出现需要认证的下载资源无权下载，可以通过 Docker ID/密码 登录到 Docker 应用（点击状态栏 Docker 应用小图标就能看到登录菜单），注意这里必须用 Docker ID，不能用注册邮箱。在 Windows 下如果出现目录挂载失败，可以尝试在 Docker 设置中重新设置 Shared Drives。</p></blockquote><ol start="4"><li><p>打开项目的 <code>.env</code> 文件并添加如下配置：</p><pre class="line-numbers language-none"><code class="language-none">DB_HOST=mysqlREDIS_HOST=redisQUEUE_HOST=beanstalkd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>在和 laradock 同级目录下新建 wwwroot 目录，用于存放代码<br><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-ec64df8bf3dd4e16.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="新建 wwwroot 目录"></p></li></ol><p>新建 demo 文件夹，并写入 phpinfo(); 到 index.php 作为测试。<br><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-95be36bbd3077799.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="新建测试文件"></p><ol start="6"><li>此时需要再次在 <code>.env</code> 文件中修改 <code>APPLICATION</code> 配置项（新版本的 laradock 对应的配置项是 <code>APP_CODE_PATH_HOST</code>）</li></ol><pre class="line-numbers language-none"><code class="language-none">APPLICATION=../wwwroot/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-826d4ee6853f37e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置项目路径"></p><p>这样就相当于为 wwwroot 与 Docker 的 /var/www 目录建立了软连接，然后我们修改 nginx 的配置文件，建立映射关系。</p><pre class="line-numbers language-none"><code class="language-none">// 复制一份配置文件 demo.confcp ./laradock/nginx/sites/default.conf ./laradock/nginx/sites/demo.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改成以下内容</p><pre class="line-numbers language-none"><code class="language-none">server {    listen 80;    listen [::]:80;    server_name demo.test;    root /var/www/demo;    index index.php index.html index.htm;    location / {         try_files $uri $uri/ /index.php$is_args$args;    }    location ~ \.php$ {        try_files $uri /index.php =404;        fastcgi_pass php-upstream;        fastcgi_index index.php;        fastcgi_buffers 16 16k;        fastcgi_buffer_size 32k;        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;        #fixes timeouts        fastcgi_read_timeout 600;        include fastcgi_params;    }    location ~ /\.ht {        deny all;    }    location /.well-known/acme-challenge/ {        root /var/www/letsencrypt/;        log_not_found off;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启 Docker 的 Nginx</p><pre class="line-numbers language-none"><code class="language-none">docker-compose up -d nginx <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="7"><li><p>在 hosts 文件中添加 （Windows 下对应文件路径是 <code>C:\Windows\System32\drivers\etc\hosts</code>）</p><pre class="line-numbers language-none"><code class="language-none">127.0.0.1 demo.test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在浏览器中访问 demo.test<br><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-af86d3cc7ce05b58.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="如图所示，则表示 php 环境搭建成功！"></p></li><li><p>安装多项目。比如搭建 laravel 项目<br>在 wwwroot 目录下执行 composer 命令 （需要提前在 Windows 环境中安装 composer）<br>可以查看我写的这篇文章 <a href="https://www.jianshu.com/p/8eea56dbd246">Windows安装composer</a></p></li></ol><pre class="line-numbers language-none"><code class="language-none">composer create-project laravel/laravel blog --prefer-dist<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-0a826d3e36db460a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="搭建 laravel 项目 blog"></p><p>目录结构如下：<br><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-5a4382fac6349a5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="项目都在 wwwroot 目录下"></p><ol start="10"><li><p>添加 nginx 配置文件追加 hosts 配置<br><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-cea8ec0325dba714.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="重新复制一份 default.conf 配置文件，并作相应的配置修改"></p></li><li><p>重启 docker 中的 nginx</p><pre class="line-numbers language-none"><code class="language-none">docker-compose up -d nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>彩蛋</p></li></ol><ul><li>进入Workspace 容器, 执行比如(Artisan, Composer, PHPUnit, Gulp, …)等命令</li></ul><pre class="line-numbers language-none"><code class="language-none">docker-compose exec workspace bash 或者 docker exec -it laradock_workspace_1 bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>列出正在运行中的容器</li></ul><pre class="line-numbers language-none"><code class="language-none">docker ps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>关闭所有正在运行的容器</li></ul><pre class="line-numbers language-none"><code class="language-none">docker-compose stop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>进入 mysql 容器</li></ul><pre class="line-numbers language-none"><code class="language-none">docker-compose exec mysql bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>退出容器</li></ul><pre class="line-numbers language-none"><code class="language-none">exit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Laradock </tag>
            
            <tag> Laravel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laradock 笔记</title>
      <link href="posts/17c35873.html"/>
      <url>posts/17c35873.html</url>
      
        <content type="html"><![CDATA[<h1 id="laradock-笔记"><a href="#laradock-笔记" class="headerlink" title="laradock 笔记"></a>laradock 笔记</h1><ul><li><a href="http://laradock.io/documentation/">官方文档</a></li><li><a href="https://laradock.linganmin.cn/zh/getting-started/">中文文档</a></li></ul><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><ol><li>首先将 Laradock 项目代码克隆到本地：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/Laradock/laradock.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>进入 laradock 目录将 env-example 重命名为 .env：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> env-example .env<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在 .env 中修改镜像构建过程中 Linux 软件源为国内镜像以免镜像构建过程中出现网络超时问题：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">CHANGE_SOURCE<span class="token comment"># If you need to change the sources (i.e. to China), set CHANGE_SOURCE to true</span><span class="token assign-left variable">CHANGE_SOURCE</span><span class="token operator">=</span>true<span class="token comment"># Set CHANGE_SOURCE and UBUNTU_SOURCE option if you want to change the Ubuntu system sources.list file.</span><span class="token assign-left variable">UBUNTU_SOURCE</span><span class="token operator">=</span>aliyun<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>构建镜像 &amp; 启动容器：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span> nginx mysql redis beanstalkd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>nginx 镜像构建在 php-fpm 之上，php-fpm 构建在 workspace 之上，所以启动 nginx 会先启动 workspace 和 php-fpm。</p><p>如果指定端口已经被占用，运行上述命令会报错，关闭相应的服务再重新运行上述命令即可。</p><p>如果在 Windows 系统中上述指令构建镜像过程中报错：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/tmp/sources.sh: not found<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可参考这个 issue 解决：<a href="https://github.com/laradock/laradock/issues/2450%E3%80%82">https://github.com/laradock/laradock/issues/2450。</a></p><ol start="4"><li>打开 Laravel 项目的 .env 文件并添加如下配置：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">DB_HOST</span><span class="token operator">=</span>mysql<span class="token comment"># 这里填写容器的名称（比如：laradock_redis_1）或者容器的 ip 地址（比如：172.28.0.5）也可以</span><span class="token assign-left variable">REDIS_HOST</span><span class="token operator">=</span>redis<span class="token assign-left variable">QUEUE_HOST</span><span class="token operator">=</span>beanstalkd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><ul><li>构建镜像 &amp; 启动容器</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span> nginx mysql redis beanstalkd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><a href="https://laradock.linganmin.cn/zh/documentation/#%E6%9E%84%E5%BB%BA%E6%88%96%E9%87%8D%E6%9E%84%E5%AE%B9%E5%99%A8">重新构建容器</a></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 比如：重新构建 mysql 容器</span><span class="token function">docker-compose</span> build mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>增加一个项目之后,重启 Docker 的 nginx</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>列出容器</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 列出正在运行的容器</span><span class="token function">docker</span> <span class="token function">ps</span><span class="token comment"># 如果你只想看当前这个项目的容器，你也可以执行下面这个命令</span><span class="token function">docker-compose</span> <span class="token function">ps</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>重启当前这个项目中的所有容器（如果你不想一个一个的开启每一个容器，可以方便的执行这条命令）</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>关闭容器</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 关闭所有正在运行的容器</span><span class="token function">docker-compose</span> stop<span class="token comment"># 停止单个容器</span><span class="token function">docker-compose</span> stop <span class="token punctuation">{</span>container-name<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>进入容器</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用下面的命令进入任意容器</span><span class="token function">docker-compose</span> <span class="token builtin class-name">exec</span> <span class="token punctuation">{</span>container-name<span class="token punctuation">}</span> <span class="token function">bash</span><span class="token comment"># 进入 mysql 容器</span><span class="token function">docker-compose</span> <span class="token builtin class-name">exec</span> mysql <span class="token function">bash</span><span class="token comment"># 进入 mysql 并在 mysql 容器中使用命令提示符</span><span class="token function">docker-compose</span> <span class="token builtin class-name">exec</span> mysql mysql <span class="token parameter variable">-u</span> homestead <span class="token parameter variable">-psecret</span><span class="token comment"># 进入 workspace 容器,执行比如(Artisan, Composer, PHPUnit, Gulp, ...)等命令</span><span class="token function">docker-compose</span> <span class="token builtin class-name">exec</span> workspace <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>删除所有现有容器</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> down<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看日志文件<br>NGINX 日志文件存储在logs/nginx目录中<br>但是要查看其他容器（Mysql，PHP-FPM,…）的日志，可以运行以下命令</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> logs <span class="token punctuation">{</span>container-name<span class="token punctuation">}</span><span class="token function">docker-compose</span> logs <span class="token parameter variable">-f</span> <span class="token punctuation">{</span>container-name<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="在-laradock-中安装-swoole"><a href="#在-laradock-中安装-swoole" class="headerlink" title="在 laradock 中安装 swoole"></a>在 laradock 中安装 swoole</h2><p>在本地安装的话，以 Laradock 为例，需要在 laradock 目录下的 .env 中将下面两行配置值设置为 true：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">WORKSPACE_INSTALL_SWOOLE</span><span class="token operator">=</span>true<span class="token assign-left variable">PHP_FPM_INSTALL_SWOOLE</span><span class="token operator">=</span>true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后运行 <code>docker-compose build php-fpm workspace</code> 重新构建 Docker 容器，构建完成后重启这两个容器，进入 workspace 容器，运行 <code>php -m</code> 查看 Swoole 是否安装成功，如果扩展列表包含 swoole 则表示安装成功。</p><h2 id="其他需要注意事项"><a href="#其他需要注意事项" class="headerlink" title="其他需要注意事项"></a>其他需要注意事项</h2><h3 id="在-laravel-框架中，如果配置不生效，请注意清理下-laravel-的缓存"><a href="#在-laravel-框架中，如果配置不生效，请注意清理下-laravel-的缓存" class="headerlink" title="在 laravel 框架中，如果配置不生效，请注意清理下 laravel 的缓存"></a>在 <code>laravel</code> 框架中，如果配置不生效，请注意清理下 <code>laravel</code> 的缓存</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">php artisan config:clear<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="检查下是否开启了-5200-端口"><a href="#检查下是否开启了-5200-端口" class="headerlink" title="检查下是否开启了 5200 端口"></a>检查下是否开启了 5200 端口</h3><blockquote><p>安装 netstat 命令，查看端口<br>apt-get update<br>apt-get install net-tools<br>netstat -ntlp</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> <span class="token parameter variable">-ant</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">5200</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="端口映射开启方式"><a href="#端口映射开启方式" class="headerlink" title="端口映射开启方式"></a>端口映射开启方式</h3><ol><li>进入 <code>laradock/docker-compose.yml</code></li></ol><p>在 <code>workspace</code> 下的 <code>ports</code> 中新增</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ports:  - <span class="token string">"<span class="token variable">${WORKSPACE_SSH_PORT}</span>:22"</span>  - <span class="token string">"<span class="token variable">${WORKSPACE_VUE_CLI_SERVE_HOST_PORT}</span>:8080"</span>  - <span class="token string">"<span class="token variable">${WORKSPACE_VUE_CLI_UI_HOST_PORT}</span>:8000"</span>  - <span class="token string">"<span class="token variable">${WORKSPACE_PORT}</span>:5200"</span>     /**这一行为新增的行，也可以直接在这里加 <span class="token number">5200</span>:5200 这样加了之后，就不再需要在 .env 中设置变量了**/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>进入 <code>.env</code> 在 <code>WORKSPACE</code> 下最后一行增加</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">WORKSPACE_AST_VERSION</span><span class="token operator">=</span><span class="token number">1.0</span>.3<span class="token assign-left variable">WORKSPACE_VUE_CLI_SERVE_HOST_PORT</span><span class="token operator">=</span><span class="token number">8080</span><span class="token assign-left variable">WORKSPACE_VUE_CLI_UI_HOST_PORT</span><span class="token operator">=</span><span class="token number">8001</span><span class="token assign-left variable">WORKSPACE_INSTALL_GIT_PROMPT</span><span class="token operator">=</span>false<span class="token assign-left variable">WORKSPACE_PORT</span><span class="token operator">=</span><span class="token number">5200</span>  /**这一行为新增的行，其实就是设置步骤 <span class="token number">1</span> 中的变量**/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>有些博客说还需要在 laradock/workspace/Dockerfile 文件的最后添加一行，申明开放端口： EXPOSE 5200，这里，我并没有做这一步，同样也成功了，如果你没有成功，你加上去之后再试试看吧</p></blockquote><ol start="3"><li>强制重新创建 workspace 容器</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> up <span class="token parameter variable">-d</span> --force-recreate workspace<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>重启 <code>docker-compose</code></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker-compose</span> restart <span class="token function">docker</span> <span class="token function">ps</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="5"><li>测试端口是否开通成功</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">telnet <span class="token number">127.0</span>.0.1 <span class="token number">5200</span><span class="token comment"># 或者直接查看容器的端口列表中是否含有你所需要开通的端口</span><span class="token function">docker</span> port <span class="token punctuation">{</span>container-name<span class="token punctuation">}</span><span class="token comment"># 比如，如下</span><span class="token function">docker</span> port laradock_workspace_1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
            <tag> Laradock </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker 常见命令</title>
      <link href="posts/59b529b7.html"/>
      <url>posts/59b529b7.html</url>
      
        <content type="html"><![CDATA[<h1 id="docker-常见命令"><a href="#docker-常见命令" class="headerlink" title="docker 常见命令"></a>docker 常见命令</h1><ul><li>查看版本</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看详细版本</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看 docker 基本信息</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> info<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h2 id="镜像相关的命令"><a href="#镜像相关的命令" class="headerlink" title="镜像相关的命令"></a>镜像相关的命令</h2><p>镜像仓库地址：<a href="https://hub.docker.com/">https://hub.docker.com</a></p><ul><li>查看本地已经安装的镜像</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> images<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>搜索指定镜像</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> search <span class="token operator">&lt;</span>image-name<span class="token operator">&gt;</span><span class="token comment"># 比如搜索 centos 镜像</span><span class="token function">docker</span> search centos<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>拉取镜像</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull <span class="token operator">&lt;</span>image-name<span class="token operator">&gt;</span><span class="token comment"># 比如拉取 centos 镜像（将会拉取最新版本的镜像，即 latest 版本）</span><span class="token function">docker</span> pull centos<span class="token comment"># 拉取指定版本的镜像</span><span class="token function">docker</span> pull ubuntu:16.04<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>删除镜像</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> rmi <span class="token operator">&lt;</span>image-name<span class="token operator">&gt;</span><span class="token comment"># 比如删除 centos 镜像</span><span class="token function">docker</span> rmi centos<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>删除所有的镜像</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> rmi <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> images <span class="token parameter variable">-q</span><span class="token variable">)</span></span><span class="token comment"># 查看所有镜像的镜像 id</span><span class="token function">docker</span> images <span class="token parameter variable">-q</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>更新镜像</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 更新镜像前，需要使用镜像创建一个容器</span><span class="token function">docker</span> run <span class="token parameter variable">-it</span> ubuntu:15.10 <span class="token function">bash</span><span class="token comment"># 在运行的容器内部使用 apt-get update 更新</span><span class="token comment"># 更新完毕之后，输入 exit 命令退出容器</span><span class="token comment"># 使用 docker commit 来提交容器副本</span><span class="token function">docker</span> commit <span class="token parameter variable">-m</span><span class="token operator">=</span><span class="token string">"has update"</span> <span class="token parameter variable">-a</span><span class="token operator">=</span><span class="token string">"alex"</span> e218edb10161 alex/ubuntu:v2<span class="token comment"># -m 表示提交的描述信息</span><span class="token comment"># -a 表示提交的镜像作者</span><span class="token comment"># e218edb10161 表示容器的 id</span><span class="token comment"># alex/ubuntu:v2 表示指定要创建的目标镜像名</span><span class="token comment"># 查看新的镜像</span><span class="token function">docker</span> images<span class="token comment"># 使用新镜像 alex/ubuntu:v2 来启动一个容器</span><span class="token function">docker</span> run <span class="token parameter variable">-it</span> alex/ubuntu:v2 <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>构建镜像</li></ul><ol><li>vim  ~/glory/codes/book/demo/Dockerfile 填充以下内容，构建一个 centos 8 系统</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 指定使用哪个镜像源</span>FROM centos:8<span class="token comment"># 如果写了 3 次 RUN 那么将会在 docker 上新建 3 层，会导致镜像膨胀过大，下面这种方式只会创建 1 层镜像</span>RUN /bin/echo <span class="token string">'root:123456'</span> <span class="token operator">|</span> chpasswd<span class="token punctuation">;</span> <span class="token punctuation">\</span><span class="token function">useradd</span> alex<span class="token punctuation">;</span> <span class="token punctuation">\</span>/bin/echo <span class="token string">'alex:123456'</span> <span class="token operator">|</span> chpasswd<span class="token punctuation">;</span> <span class="token punctuation">\</span>/bin/echo <span class="token parameter variable">-e</span> <span class="token string">"LANG=<span class="token entity" title="\&quot;">\"</span>en_US.UTF-8<span class="token entity" title="\&quot;">\"</span>"</span> <span class="token operator">&gt;</span> /etc/default/localEXPOSE <span class="token number">22</span>EXPOSE <span class="token number">80</span>CMD /usr/sbin/sshd <span class="token parameter variable">-D</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>开始构建镜像，注意不要在 <code>~/glory/codes/book/demo</code> 目录下放无用的文件，因为会打包所有该目录下的文件然后发送给 docker 引擎，如果文件过多会造成 build 过程缓慢</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -t 表示指定要创建的目标镜像名</span><span class="token comment"># ~/glory/codes/book/demo 表示 Dockerfile 文件所在的目录</span><span class="token function">docker</span> build <span class="token parameter variable">-t</span> alex/centos:8.0 ~/glory/codes/book/demo<span class="token comment"># 查看已经构建好的镜像信息</span><span class="token function">docker</span> images<span class="token comment"># 使用新的镜像来创建新容器</span><span class="token function">docker</span> run <span class="token parameter variable">-it</span> alex/centos:8.0 <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>设置镜像标签</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 先查看镜像</span>$ <span class="token function">docker</span> images                                                                   REPOSITORY            TAG                       IMAGE ID       CREATED          SIZEalex/centos           <span class="token number">8.0</span>                       594ab4747ed4   <span class="token number">14</span> minutes ago   210MB<span class="token comment"># 设置镜像标签</span>$ <span class="token function">docker</span> tag 594ab4747ed4 alex1/centos1:8.1.1<span class="token comment"># 再次查看镜像信息会多一个标签</span>$ <span class="token function">docker</span> imagesREPOSITORY            TAG                       IMAGE ID       CREATED          SIZEalex/centos           <span class="token number">8.0</span>                       594ab4747ed4   <span class="token number">14</span> minutes ago   210MBalex1/centos1         <span class="token number">8.1</span>.1                     594ab4747ed4   <span class="token number">14</span> minutes ago   210MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="容器相关的命令"><a href="#容器相关的命令" class="headerlink" title="容器相关的命令"></a>容器相关的命令</h2><ul><li>查看容器的系统版本信息</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入容器后执行</span><span class="token function">cat</span> /proc/version<span class="token comment"># 比如会输出以下内容</span>Linux version <span class="token number">4.19</span>.121-linuxkit <span class="token punctuation">(</span>root@18b3f92ade35<span class="token punctuation">)</span> <span class="token punctuation">(</span>gcc version <span class="token number">9.2</span>.0 <span class="token punctuation">(</span>Alpine <span class="token number">9.2</span>.0<span class="token punctuation">))</span> <span class="token comment">#1 SMP Thu Jan 21 15:36:34 UTC 2021</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查看所有的容器</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span><span class="token comment"># 或者使用以下命令，是一样的效果</span><span class="token function">docker</span> container <span class="token function">ls</span> <span class="token parameter variable">-a</span><span class="token comment"># 查看最后一次创建的容器</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-l</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查看所有已经运行的容器</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">ps</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看容器端口映射</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> port <span class="token operator">&lt;</span>container-name or container-id<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看 docker 底层信息（比如：查看指定容器的 ip 地址）</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看 docker 容器的配置和状态信息</span><span class="token function">docker</span> inspect <span class="token operator">&lt;</span>container-name or container-id<span class="token operator">&gt;</span> <span class="token comment"># 查看容器的 ip 地址</span><span class="token function">docker</span> inspect <span class="token operator">&lt;</span>container-name or container-id<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token function">grep</span> IPAddress<span class="token comment"># 比如查看容器 id 为 66204be9fe65 的容器所对应的 ip 地址</span><span class="token function">docker</span> inspect 66204be9fe65 <span class="token operator">|</span> <span class="token function">grep</span> IPAddress<span class="token comment"># 比如查看容器名称为 alex 所对应的 ip 地址</span><span class="token function">docker</span> inspect alex <span class="token operator">|</span> <span class="token function">grep</span> IPAddress<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建容器并把镜像恢复到容器当中，且启动容器</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token punctuation">[</span>-i<span class="token punctuation">]</span><span class="token punctuation">[</span>-t<span class="token punctuation">]</span><span class="token punctuation">[</span>-v<span class="token punctuation">]</span><span class="token punctuation">[</span>--name<span class="token punctuation">]</span><span class="token punctuation">[</span>-d<span class="token punctuation">]</span><span class="token punctuation">[</span>-p<span class="token punctuation">]</span><span class="token comment"># -i 表示 interactive 交互式</span><span class="token comment"># -t 表示得到一个 terminal</span><span class="token comment"># --name 表示修改容器名称</span><span class="token comment"># -d 表示以守护进程的方式运行（默认不会进入容器，想要进入容器则需要使用 docker exec 命令）</span><span class="token comment"># -p 表示 **指定** 映射端口</span><span class="token comment"># -P （大写的字母 p ） 表示 **随机** 映射端口</span><span class="token comment"># /bin/bash 和 bash 等效</span><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token operator">&lt;</span>image-name<span class="token operator">&gt;</span> /bin/bash<span class="token comment"># 比如创建一个新容器并且进入 ubuntu:16.04 镜像</span><span class="token function">docker</span> run <span class="token parameter variable">-it</span> ubuntu:16.04 <span class="token function">bash</span><span class="token comment"># 或者</span><span class="token function">docker</span> run <span class="token parameter variable">-it</span> ubuntu:16.04 /bin/bash<span class="token comment"># 或者</span><span class="token function">docker</span> run <span class="token parameter variable">-it</span> ubuntu:16.04<span class="token comment"># 以 centos 镜像创建一个新容器，并修改新容器名称为 alex-container</span><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--name</span> alex-container centos <span class="token function">bash</span>  <span class="token comment"># 以守护进程的方式运行 （后台运行）</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--name</span> alex-container centos  <span class="token comment"># 或者</span><span class="token function">docker</span> run <span class="token parameter variable">-di</span> <span class="token parameter variable">--name</span> alex-container centos<span class="token comment"># 指定容器绑定的网络地址，这样我们就可以通过访问 127.0.0.1:5001 来访问容器的 5000 端口（默认绑定的都是 tcp 端口）</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">127.0</span>.0.1:5001:5000 centos:8.0 <span class="token function">bash</span><span class="token comment"># 如果需要绑定 udp 端口，则</span><span class="token comment"># （还可以进入容器就直接执行 python app.py 命令）</span><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">127.0</span>.0.1:5001:5000/udp centos:8.0 python app.py<span class="token comment"># 比如，安装 hyperf 镜像并启动容器</span><span class="token comment"># 如果 docker 启动时开启了 selinux-enabled 选项，容器内访问宿主机资源就会受限，所以启动容器时可以增加 --privileged -u root 选项</span><span class="token function">docker</span> run <span class="token parameter variable">--name</span> hyperf <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /workspace/skeleton:/data/project <span class="token punctuation">\</span><span class="token parameter variable">-p</span> <span class="token number">9501</span>:9501 <span class="token parameter variable">-it</span> <span class="token punctuation">\</span><span class="token parameter variable">--privileged</span> <span class="token parameter variable">-u</span> root <span class="token punctuation">\</span><span class="token parameter variable">--entrypoint</span> /bin/sh <span class="token punctuation">\</span>hyperf/hyperf:7.4-alpine-v3.11-swoole<span class="token comment"># 如果需要开通多个端口时，可以参考</span><span class="token function">docker</span> run <span class="token parameter variable">--name</span> api_dfo_hyperf_ws <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /Users/pudongping/glory/codes/dfo/api_dfo_hyperf:/api_dfo_hyperf <span class="token punctuation">\</span><span class="token parameter variable">-p</span> <span class="token number">9502</span>:9502 <span class="token punctuation">\</span><span class="token parameter variable">-p</span> <span class="token number">9503</span>:9503 <span class="token punctuation">\</span><span class="token parameter variable">-p</span> <span class="token number">9504</span>:9504 <span class="token punctuation">\</span><span class="token parameter variable">-p</span> <span class="token number">9505</span>:9505 <span class="token parameter variable">-it</span> <span class="token punctuation">\</span><span class="token parameter variable">--entrypoint</span> /bin/sh <span class="token punctuation">\</span>alex/alex_api_dfo:v1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>启动容器</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> start <span class="token operator">&lt;</span>container-name or container-id<span class="token operator">&gt;</span><span class="token comment"># 比如启动容器名称为 redis-alex 的容器</span><span class="token function">docker</span> start redis-alex<span class="token comment"># 比如启动容器 id 为 c8c0c770ac5b 的容器</span><span class="token function">docker</span> start c8c0c770ac5b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>直接进入已经创建的容器（不会启动容器）</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> start <span class="token parameter variable">-i</span> <span class="token operator">&lt;</span>container-name or container-id<span class="token operator">&gt;</span><span class="token comment"># 比如进入容器 id 为 66204be9fe65 的容器</span><span class="token function">docker</span> start <span class="token parameter variable">-i</span> 66204be9fe65<span class="token comment"># 比如进入容器名称为 alex 的容器</span><span class="token function">docker</span> start <span class="token parameter variable">-i</span> alex<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>重启容器</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> restart <span class="token operator">&lt;</span>container-name or container-id<span class="token operator">&gt;</span><span class="token comment"># 比如重启容器名称为 redis-alex 的容器</span><span class="token function">docker</span> restart redis-alex<span class="token comment"># 比如重启容器 id 为 c8c0c770ac5b 的容器</span><span class="token function">docker</span> restart c8c0c770ac5b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>进入已经运行中的容器</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token operator">&lt;</span>container-name or container-id<span class="token operator">&gt;</span> <span class="token function">bash</span><span class="token comment"># 比如进入容器名称为 redis-alex 的容器</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> redis-alex <span class="token function">bash</span><span class="token comment"># 比如进入容器 id 为 c8c0c770ac5b 的容器</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> c8c0c770ac5b <span class="token function">bash</span><span class="token comment"># 进入容器之后执行 shell 命令或者执行 shell 脚本</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span>  <span class="token operator">&lt;</span>container-name or container-id<span class="token operator">&gt;</span> /bin/sh <span class="token parameter variable">-c</span> <span class="token string">"while true; do echo hello world; sleep 1; done"</span><span class="token comment"># 比如进入容器 id 为 c8c0c770ac5b 的容器，并且进入容器后执行 `bash /portal_api_dfo_hyperf/server.sh restart` 脚本</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> c8c0c770ac5b /bin/sh <span class="token parameter variable">-c</span> <span class="token string">"bash /portal_api_dfo_hyperf/server.sh restart"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>停止容器</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> stop <span class="token operator">&lt;</span>container-name or container-id<span class="token operator">&gt;</span><span class="token comment"># 比如停止容器名称为 redis-alex 的容器</span><span class="token function">docker</span> stop redis-alex<span class="token comment"># 比如停止容器 id 为 c8c0c770ac5b 的容器</span><span class="token function">docker</span> stop c8c0c770ac5b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>退出容器</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>删除容器</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">rm</span> <span class="token operator">&lt;</span>container-name or container-id<span class="token operator">&gt;</span><span class="token comment"># 也可以加入 -f 参数，强制移除正在运行中的容器</span><span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> 1e560fca3906<span class="token comment"># 清理掉所有处于终止状态的容器</span><span class="token function">docker</span> container prune<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>修改容器名称</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">rename</span> <span class="token operator">&lt;</span>container-name or container-id<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>new-container-name<span class="token operator">&gt;</span><span class="token comment"># 比如将容器 redis-alex 改名为 redis-tt</span><span class="token function">docker</span> <span class="token function">rename</span> redis-alex redis-tt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查看容器的标准输出</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> logs <span class="token operator">&lt;</span>container-name or container-id<span class="token operator">&gt;</span><span class="token comment"># 比如查看容器 id 为 c8c0c770ac5b 的容器标准输出内容</span><span class="token function">docker</span> logs c8c0c770ac5b<span class="token comment"># 也可以加入 -f 参数，像使用 tail -f 一样来输出容器内部的标准输出</span><span class="token function">docker</span> logs <span class="token parameter variable">-f</span> c8c0c770ac5b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="容器与宿主机之间的文件或者目录拷贝"><a href="#容器与宿主机之间的文件或者目录拷贝" class="headerlink" title="容器与宿主机之间的文件或者目录拷贝"></a>容器与宿主机之间的文件或者目录拷贝</h2><ul><li>从宿主机拷贝文件到容器中</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">cp</span> <span class="token operator">&lt;</span>local-directory-or-file<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>container-name<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>container-directory-or-file<span class="token operator">&gt;</span><span class="token comment"># 比如将宿主机中的 /home/alex/test.txt 文件拷贝到 centos1 容器中的 /test.txt</span><span class="token function">docker</span> <span class="token function">cp</span> /home/alex/test.txt centos1:/test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>从容器拷贝到宿主机中</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">cp</span> <span class="token operator">&lt;</span>container-name<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>container-directory-or-file<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>local-directory<span class="token operator">&gt;</span><span class="token comment"># 比如将 centos1 容器中的 /test 目录拷贝到宿主机的 /home/alex 目录下</span><span class="token function">docker</span> <span class="token function">cp</span> centos1:/test /home/alex<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="目录挂载（创建容器的时候就需要进行目录挂载）"><a href="#目录挂载（创建容器的时候就需要进行目录挂载）" class="headerlink" title="目录挂载（创建容器的时候就需要进行目录挂载）"></a>目录挂载（创建容器的时候就需要进行目录挂载）</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-di</span> <span class="token parameter variable">-v</span> <span class="token operator">&lt;</span>local-directory<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>container-directory<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>image-name<span class="token operator">&gt;</span><span class="token comment"># 在 windows 下挂载（注意路径的书写方式）</span><span class="token comment"># 比如以 centos 镜像创建一个容器，并将本地 D 盘中的 alex 目录，挂载到容器中的 /usr/local/demo 目录</span><span class="token function">docker</span> run <span class="token parameter variable">-di</span> <span class="token parameter variable">-v</span> d:<span class="token punctuation">\</span>alex:/usr/local/demo centos<span class="token comment"># 在 linux 下挂载</span><span class="token comment"># 比如以 centos 镜像创建一个容器，并将本地的 /home/alex/alex 目录，挂载到容器中的 /usr/local/demo 目录</span><span class="token function">docker</span> run <span class="token parameter variable">-di</span> <span class="token parameter variable">-v</span> /home/alex/alex:/usr/local/demo centos<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="导出和导入容器"><a href="#导出和导入容器" class="headerlink" title="导出和导入容器"></a>导出和导入容器</h2><ul><li>导出容器快照</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">export</span> <span class="token operator">&lt;</span>container-id<span class="token operator">&gt;</span> <span class="token operator">&gt;</span> <span class="token operator">&lt;</span>your-backup-name.tar<span class="token operator">&gt;</span><span class="token comment"># 比如将容器 id 为 7691a814370e 的容器导出快照为 alex.tar</span><span class="token function">docker</span> <span class="token builtin class-name">export</span> 7691a814370e <span class="token operator">&gt;</span> alex.tar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>导入容器快照</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">&lt;</span>your-backup-name.tar<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token function">docker</span> <span class="token function">import</span> - <span class="token operator">&lt;</span>image-author-name<span class="token operator">&gt;</span>/<span class="token operator">&lt;</span>your-new-image-name<span class="token operator">&gt;</span>:<span class="token operator">&lt;</span>your-new-image-version<span class="token operator">&gt;</span><span class="token comment"># 比如将容器快照文件 alex.tar 导入到 alex-demo 镜像并定义 alex-demo 镜像的作者为 alex，版本号为 v1.0</span><span class="token function">cat</span> alex.tar <span class="token operator">|</span> <span class="token function">docker</span> <span class="token function">import</span> - alex/alex-demo:v1.0<span class="token comment"># 此外，也可以通过指定 url 或者某个目录来导入</span><span class="token function">docker</span> <span class="token function">import</span> http://example.com/example-image.tgz example/image-repo:v1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 环境搭建</title>
      <link href="posts/a8b7793d.html"/>
      <url>posts/a8b7793d.html</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-环境搭建"><a href="#Docker-环境搭建" class="headerlink" title="Docker 环境搭建"></a>Docker 环境搭建</h1><h2 id="适用于-Ubuntu，Debian，Centos-等大部分-Linux（使用官方安装脚本自动安装）"><a href="#适用于-Ubuntu，Debian，Centos-等大部分-Linux（使用官方安装脚本自动安装）" class="headerlink" title="适用于 Ubuntu，Debian，Centos 等大部分 Linux（使用官方安装脚本自动安装）"></a>适用于 Ubuntu，Debian，Centos 等大部分 Linux（使用官方安装脚本自动安装）</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-sSL</span> https://get.daocloud.io/docker <span class="token operator">|</span> <span class="token function">sh</span><span class="token comment"># 或者执行</span><span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://get.docker.com <span class="token operator">|</span> <span class="token function">bash</span> <span class="token parameter variable">-s</span> <span class="token function">docker</span> <span class="token parameter variable">--mirror</span> Aliyun<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Windows-10-系统上如果不想用-docker-则需要关闭-hyper"><a href="#Windows-10-系统上如果不想用-docker-则需要关闭-hyper" class="headerlink" title="Windows 10 系统上如果不想用 docker 则需要关闭 hyper"></a>Windows 10 系统上如果不想用 docker 则需要关闭 hyper</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cmd 命令行执行： bcdedit /set hypervisorlaunchtype offpoweroff 命令行执行： Disable-WindowsOptionalFeature <span class="token parameter variable">-Online</span> <span class="token parameter variable">-FeatureName</span> Microsoft-Hyper-V<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="关于报错"><a href="#关于报错" class="headerlink" title="关于报错"></a>关于报错</h4><ul><li>container-selinux &gt;= 2.9 解决方案</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Error: Package: docker-ce-18.03.1.ce-1.el7.centos.x86_64 <span class="token punctuation">(</span>docker-ce-edge<span class="token punctuation">)</span>           Requires: container-selinux <span class="token operator">&gt;=</span> <span class="token number">2.9</span> You could try using --skip-broken to work around the problem You could try running: <span class="token function">rpm</span> <span class="token parameter variable">-Va</span> <span class="token parameter variable">--nofiles</span> <span class="token parameter variable">--nodigest</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这个报错是 container-selinux 版本低或者是没安装的原因<br>yum 安装 container-selinux 一般的 yum 源又找不到这个包<br>需要安装 epel 源，才能 yum 安装 container-selinux<br>然后在安装 docker-ce 就可以了。</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 先配置阿里云的 yum 源</span><span class="token function">wget</span> <span class="token parameter variable">-O</span> /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo<span class="token comment"># 安装阿里云上的 epel 源</span>yum <span class="token function">install</span> epel-release<span class="token comment"># 安装 container-selinux 即可</span>yum <span class="token function">install</span> container-selinux<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试安装是否成功"><a href="#测试安装是否成功" class="headerlink" title="测试安装是否成功"></a>测试安装是否成功</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看当前 docker 版本号，出现版本号即为安装成功</span><span class="token function">docker</span> <span class="token parameter variable">-v</span><span class="token comment"># 查看详细的 docker 信息</span><span class="token function">docker</span> version<span class="token comment"># 查看当前 docker 的信息</span><span class="token function">docker</span> info<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="开启-docker-守护进程"><a href="#开启-docker-守护进程" class="headerlink" title="开启 docker 守护进程"></a>开启 docker 守护进程</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start <span class="token function">docker</span>systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span><span class="token comment"># 重载配置</span>systemctl daemon-reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加国内镜像源"><a href="#添加国内镜像源" class="headerlink" title="添加国内镜像源"></a>添加国内镜像源</h3><p>centos 或者 ubuntu 系统时</p><p>sudo vim /etc/docker/daemon.json</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"registry-mirrors"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"https://registry.docker-cn.com"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="docker-国内镜像"><a href="#docker-国内镜像" class="headerlink" title="docker 国内镜像"></a>docker 国内镜像</h3><ul><li>网易加速器：<a href="http://hub-mirror.c.163.com/">http://hub-mirror.c.163.com</a></li><li>官方中国加速器：<a href="https://registry.docker-cn.com/">https://registry.docker-cn.com</a></li><li>ustc 的镜像：<a href="https://docker.mirrors.ustc.edu.cn/">https://docker.mirrors.ustc.edu.cn</a></li></ul><h3 id="安装-docker-compose"><a href="#安装-docker-compose" class="headerlink" title="安装 docker-compose"></a>安装 docker-compose</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用源码安装（推荐方式）</span><span class="token punctuation">[</span>最新发行的版本地址<span class="token punctuation">]</span><span class="token punctuation">(</span>https://github.com/docker/compose/releases<span class="token punctuation">)</span><span class="token comment"># 安装 1.27.4 版本的 docker-compose （下载了源码，并改名为 docker-compose）</span><span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-L</span> https://github.com/docker/compose/releases/download/1.27.4/docker-compose-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> <span class="token parameter variable">-s</span><span class="token variable">`</span></span>-<span class="token variable"><span class="token variable">`</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">`</span></span> <span class="token parameter variable">-o</span> /usr/local/bin/docker-compose<span class="token comment"># 增加执行权限</span><span class="token function">sudo</span> <span class="token function">chmod</span> u+x /usr/local/bin/docker-compose<span class="token comment"># 建立软连接到 /usr/bin 目录</span><span class="token function">sudo</span> <span class="token function">ln</span> <span class="token parameter variable">-s</span> /usr/local/bin/docker-compose /usr/bin/docker-compose<span class="token comment"># 查看 docker-compose 版本</span><span class="token function">docker-compose</span> version---------------------------------<span class="token comment"># 如果是在 centos 系统中</span><span class="token comment"># 安装扩展源</span><span class="token function">sudo</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> epel-release<span class="token comment"># 安装 python-pip 模块</span><span class="token function">sudo</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> python-pip<span class="token comment"># 如果是在 ubuntu 系统中</span><span class="token comment"># 安装 python-pip 模块</span><span class="token function">apt</span> <span class="token function">install</span> python-pip<span class="token comment"># 使用 pip 安装 docker-compose</span>pip <span class="token function">install</span> <span class="token function">docker-compose</span><span class="token comment"># 删除掉旧的环境变量 docker-compose</span><span class="token function">sudo</span> <span class="token function">rm</span> /usr/bin/docker-compose<span class="token function">sudo</span> <span class="token function">rm</span> /usr/local/bin/docker-compose<span class="token comment"># 或者使用 pip 命令卸载 docker-compose</span>pip uninstall <span class="token function">docker-compose</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装-redis"><a href="#安装-redis" class="headerlink" title="安装 redis"></a>安装 redis</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull redis:latest<span class="token function">docker</span> images<span class="token function">docker</span> run <span class="token parameter variable">-itd</span> <span class="token parameter variable">--name</span> alex-redis <span class="token parameter variable">-p</span> <span class="token number">6379</span>:6379 redis<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> alex-redis /bin/bash<span class="token comment"># 外部可以直接通过宿主机ip:6379 访问到 redis 服务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装-mysql"><a href="#安装-mysql" class="headerlink" title="安装 mysql"></a>安装 mysql</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull mysql:5.7.33<span class="token function">docker</span> images<span class="token function">docker</span> run <span class="token parameter variable">-itd</span> <span class="token parameter variable">--name</span> alex-mysql <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> mysql:5.7.32<span class="token comment"># docker 容器中可以使用 localhost 或者 127.0.0.1 均可</span><span class="token comment"># 外部可以直接通过宿主机ip:3306 访问到 mysql 服务，密码为 123456</span>------------<span class="token comment"># 安装 mysql 8 时</span><span class="token function">docker</span> pull mysql:8.0.23<span class="token function">docker</span> run <span class="token parameter variable">-itd</span> <span class="token parameter variable">--name</span> alex-mysql <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> mysql:8.0.23<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> alex-mysql <span class="token function">bash</span><span class="token comment"># 登录 mysql</span>mysql <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span>alter user <span class="token string">'root'</span>@<span class="token string">'localhost'</span> identified by <span class="token string">'123456'</span><span class="token punctuation">;</span><span class="token comment"># 添加远程登录用户</span>create user <span class="token string">'root'</span>@<span class="token string">'%'</span> identified with mysql_native_password by <span class="token string">'123456'</span><span class="token punctuation">;</span><span class="token comment"># 刷新权限</span>grant all privileges on *.* to <span class="token string">'root'</span>@<span class="token string">'%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 8 安装 docker</title>
      <link href="posts/de75e5f5.html"/>
      <url>posts/de75e5f5.html</url>
      
        <content type="html"><![CDATA[<h1 id="CentOS-8-安装-docker"><a href="#CentOS-8-安装-docker" class="headerlink" title="CentOS 8 安装 docker"></a>CentOS 8 安装 docker</h1><ol><li>查看系统内核</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /etc/redhat-release<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>eg：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">➜  Downloads <span class="token function">cat</span> /etc/redhat-releaseCentOS Linux release <span class="token number">8.2</span>.2004 <span class="token punctuation">(</span>Core<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>安装 gcc 相关</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> gcc<span class="token function">sudo</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> gcc-c++<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>安装需要的软件包</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token parameter variable">-y</span> yum-utils device-mapper-persistent-data lvm2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>添加阿里镜像仓库</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>更新 yum 索引</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum makecache<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>CentOS8 默认使用 podman 代替 docker</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> https://download.docker.com/linux/fedora/30/x86_64/stable/Packages/containerd.io-1.2.13-3.2.fc30.x86_64.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="7"><li>安装 docker ce （社区版）</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> docker-ce<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="8"><li>启动 docker</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl start  <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="9"><li>将 docker 添加到开机启动</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="10"><li>查看 docker 版本</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token parameter variable">-v</span><span class="token comment"># 或者使用 docker version 查看更加详细的版本信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>eg：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">➜  Downloads <span class="token function">docker</span> <span class="token parameter variable">-v</span>Docker version <span class="token number">20.10</span>.0, build 7287ab3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mitmproxy 抓包工具的使用</title>
      <link href="posts/cd811a58.html"/>
      <url>posts/cd811a58.html</url>
      
        <content type="html"><![CDATA[<h1 id="mitmproxy-抓包工具的使用"><a href="#mitmproxy-抓包工具的使用" class="headerlink" title="mitmproxy 抓包工具的使用"></a>mitmproxy 抓包工具的使用</h1><blockquote><p><a href="https://mitmproxy.org/">mitmproxy 官网</a><br><a href="https://github.com/mitmproxy/mitmproxy">mitmproxy GitHub</a><br><a href="https://docs.mitmproxy.org/stable/overview-installation/">mitmproxy 文档</a> </p></blockquote><p>mitmproxy 就是用于 MITM 的 proxy，MITM 即中间人攻击（Man-in-the-middle attack）。用于中间人攻击的代理首先会向正常的代理一样转发请求，保障服务端与客户端的通信，其次，会适时的查、记录其截获的数据，或篡改数据，引发服务端或客户端特定的行为。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>使用 <code>pip</code> 安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># --user 表示安装到用户的目录中去</span>pip3 <span class="token function">install</span> mitmproxy <span class="token parameter variable">--user</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>也可以直接使用 <code>homebrew</code> 安装，但是还是建议使用 <code>pip</code> 安装，且使用 <code>pipenv</code> 虚拟环境安装，方便管理依赖包。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> mitmproxy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看是否安装成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用以下三个命令中的任意一个即可，这三个命令返回的结果均一致</span>mitmproxy <span class="token parameter variable">--version</span>mitmdump <span class="token parameter variable">--version</span>mitmweb <span class="token parameter variable">--version</span><span class="token comment"># Mitmproxy: 6.0.2  # mitmproxy 的版本号</span><span class="token comment"># Python:    3.8.8  # python 的版本号</span><span class="token comment"># OpenSSL:   OpenSSL 1.1.1i  8 Dec 2020  # openssl 协议</span><span class="token comment"># Platform:  macOS-10.16-x86_64-i386-64bit  # 本地电脑型号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>mitmproxy 有三种启动命令：</p><ol><li>mitmweb：提供了一个 web 页面，交互界面可以通过 <code>localhost:8081</code> 去访问。</li><li>mitmproxy：提供命令行界面，可以通过命令过滤请求。</li><li>mitmdump：可以通过执行一个 <code>python</code> 脚本去运行</li></ol><p>运行在 8888 端口上运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mitmproxy <span class="token parameter variable">-p</span> <span class="token number">8888</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也可以自己写一个 python 脚本，然后通过 mitmdump 去执行这个 python 脚本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mitmdump <span class="token parameter variable">-p</span> <span class="token number">8888</span> <span class="token parameter variable">-s</span> script.py<span class="token comment"># 还可以将截获的数据保存到文件中，比如如下，保存到 outfile.txt 文件中</span>mitmdump <span class="token parameter variable">-w</span> outfile.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以通过浏览器界面去运行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mitmweb <span class="token parameter variable">-p</span> <span class="token number">8888</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="手机端配置"><a href="#手机端配置" class="headerlink" title="手机端配置"></a>手机端配置</h2><ol><li>将手机和电脑连接到同一个 Wi-Fi 中。</li><li>然后找到电脑的 ip 地址，比如我这里是：192.168.0.101</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># macOS 下可通过以下命令查看</span><span class="token function">ifconfig</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"inet"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>给手机 Wi-Fi 配置代理。</li></ol><blockquote><p>这里以 iPhone 作为演示讲解。</p></blockquote><p>在手机上找到 Wi-Fi 设置，点进去，选择 <code>配置代理</code>，改为 <code>手动</code>，修改 <code>服务器</code> 这一项，改为电脑的 ip 地址，比如我这里是 192.168.0.101，端口改成 8888，然后点右上角的 <code>存储</code>，之后在浏览器中访问 <code>mitm.it</code> 链接地址（建议使用 iPhone 自带的 Safari 浏览器），选择你自己的机型对应的 <code>Get mitmproxy-ca-cert.pem</code> 进行下载（我这里选择的是 Apple），然后去 <strong>设置-通用-描述文件</strong> 中找到刚刚下载的描述文件进行安装。</p><ol start="4"><li>开启证书</li></ol><p>打开 <strong>设置-通用-关于本机-证书信任设置</strong>，开启 mitmproxy 证书。现在就可以打开任意一个 app 尝试一下抓包啦！</p><h2 id="关闭-mitmproxy"><a href="#关闭-mitmproxy" class="headerlink" title="关闭 mitmproxy"></a>关闭 mitmproxy</h2><p>电脑端可以直接按 <code>Ctrl+c</code> 退出 mitmproxy，手机端需要关闭掉刚刚对 Wi-Fi 设置的代理。</p><h2 id="使用-mitmproxy-命令行运行-mitmproxy-时的快捷键"><a href="#使用-mitmproxy-命令行运行-mitmproxy-时的快捷键" class="headerlink" title="使用 mitmproxy 命令行运行 mitmproxy 时的快捷键"></a>使用 mitmproxy 命令行运行 mitmproxy 时的快捷键</h2><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td>j/k</td><td>上下移动</td></tr><tr><td>tab 或者方向键</td><td>进行界面切换</td></tr><tr><td>z</td><td>清屏</td></tr><tr><td>f</td><td>用来过滤请求地址</td></tr><tr><td>q</td><td>退出当前界面</td></tr></tbody></table><p>script.py 示例</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">import</span> re<span class="token keyword">from</span> mitmproxy <span class="token keyword">import</span> ctx<span class="token keyword">def</span> <span class="token function">request</span><span class="token punctuation">(</span>flow<span class="token punctuation">)</span><span class="token punctuation">:</span>    flow<span class="token punctuation">.</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'User-Agent'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'MitmProxy'</span>  <span class="token comment"># 更改请求头</span>    ctx<span class="token punctuation">.</span>log<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>flow<span class="token punctuation">.</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 白色日志</span>    ctx<span class="token punctuation">.</span>log<span class="token punctuation">.</span>warn<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>flow<span class="token punctuation">.</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 黄色日志</span>    ctx<span class="token punctuation">.</span>log<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>flow<span class="token punctuation">.</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 红色日志</span>    request <span class="token operator">=</span> flow<span class="token punctuation">.</span>request    info <span class="token operator">=</span> ctx<span class="token punctuation">.</span>log<span class="token punctuation">.</span>info    info<span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>    info<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>headers<span class="token punctuation">)</span><span class="token punctuation">)</span>    info<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>cookies<span class="token punctuation">)</span><span class="token punctuation">)</span>    info<span class="token punctuation">(</span>request<span class="token punctuation">.</span>host<span class="token punctuation">)</span>    info<span class="token punctuation">(</span>request<span class="token punctuation">.</span>method<span class="token punctuation">)</span>    info<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span>    info<span class="token punctuation">(</span>request<span class="token punctuation">.</span>scheme<span class="token punctuation">)</span>        <span class="token comment"># 可以更改请求的 url</span>    url <span class="token operator">=</span> <span class="token string">'https://httpbin.org/get'</span>    flow<span class="token punctuation">.</span>request<span class="token punctuation">.</span>url <span class="token operator">=</span> url<span class="token keyword">def</span> <span class="token function">response</span><span class="token punctuation">(</span>flow<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 提取请求的 url 地址</span>    request_url <span class="token operator">=</span> flow<span class="token punctuation">.</span>request<span class="token punctuation">.</span>url    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'请求到的地址为 =====&gt; %s'</span> <span class="token operator">%</span> request_url<span class="token punctuation">)</span>    response_body <span class="token operator">=</span> flow<span class="token punctuation">.</span>response<span class="token punctuation">.</span>text    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'返回体为 ====&gt; %s'</span> <span class="token operator">%</span> response_body<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 抓包工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 抓包工具 </tag>
            
            <tag> mitmproxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 下安装 php7.2</title>
      <link href="posts/98509b56.html"/>
      <url>posts/98509b56.html</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu-下安装-php7-2"><a href="#Ubuntu-下安装-php7-2" class="headerlink" title="Ubuntu 下安装 php7.2"></a>Ubuntu 下安装 php7.2</h1><ol><li>安装软件源拓展工具：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> software-properties-common python-software-properties<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>更新软件源缓存并且添加 <code>Ondřej Surý</code> 的 <code>PHP PPA</code> 源，需要按一次回车：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> add-apt-repository ppa:ondrej/php <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> <span class="token function">apt-get</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>安装 php7.2</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token parameter variable">-y</span> <span class="token function">install</span> php7.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>如果之前有其他版本PHP，在这边禁用掉</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 禁用掉 php5.6 的版本</span><span class="token function">sudo</span> a2dismod php5.6<span class="token comment"># 开启 php7.2 的版本</span><span class="token function">sudo</span> a2enmod php7.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>安装 php7.2 常用扩展</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt</span> <span class="token function">install</span> php7.2-fpm php7.2-mysql php7.2-curl php7.2-gd php7.2-mbstring php7.2-xml php7.2-xmlrpc php7.2-zip php7.2-opcache <span class="token parameter variable">-y</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看可以安装的扩展指令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-cache</span> search php7.2<span class="token comment"># 比如如下所示：</span>root@iZuf6aig35m8ho0xq75ijnZ:/<span class="token comment"># apt-cache search php7.2</span>php-amqp - AMQP extension <span class="token keyword">for</span> PHPphp-apcu - APC User Cache <span class="token keyword">for</span> PHPphp-geoip - GeoIP module <span class="token keyword">for</span> PHPphp-igbinary - igbinary PHP serializerphp-imagick - Provides a wrapper to the ImageMagick libraryphp7.2-fpm - server-side, HTML-embedded scripting language <span class="token punctuation">(</span>FPM-CGI binary<span class="token punctuation">)</span>php7.2-gd - GD module <span class="token keyword">for</span> PHPphp7.2-gmp - GMP module <span class="token keyword">for</span> PHPphp7.2-imap - IMAP module <span class="token keyword">for</span> PHP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>设置 php</li></ol><p>安装完成后，编辑 <code>/etc/php/7.2/fpm/php.ini</code> 替换成 <code>;cgi.fix_pathinfo=1</code> 为 <code>cgi.fix_pathinfo=0</code> 快捷命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 直接命令行输入</span><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/'</span> /etc/php/7.2/fpm/php.ini<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="7"><li>管理 php</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl restart php7.2-fpm <span class="token comment">#重启</span>systemctl start php7.2-fpm <span class="token comment">#启动</span>systemctl stop php7.2-fpm <span class="token comment">#关闭</span>systemctl status php7.2-fpm <span class="token comment">#检查状态</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="8"><li>重启 apache2</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> apache2 restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 开放指定端口</title>
      <link href="posts/ce06863f.html"/>
      <url>posts/ce06863f.html</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu-开放指定端口"><a href="#Ubuntu-开放指定端口" class="headerlink" title="Ubuntu 开放指定端口"></a>Ubuntu 开放指定端口</h1><ul><li>一般情况下 <code>ubuntu</code> 系统自带 <code>iptables</code> 防火墙，如果没有的话，就装上</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> iptables<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>开放 tcp 协议 80 端口</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">iptables <span class="token parameter variable">-I</span> INPUT <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">--dport</span> <span class="token number">80</span> <span class="token parameter variable">-j</span> ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>临时保存规则</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">iptables-save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>永久保存规则，需要借助 <code>iptables-persistent</code> 工具</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装 iptables-persistent</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> iptables-persistent<span class="token comment"># 持久化</span><span class="token function">sudo</span> iptables-persistent save<span class="token function">sudo</span> iptables-persistent reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu 16.04.4 LTS 搭建 LNMP</title>
      <link href="posts/7c353a38.html"/>
      <url>posts/7c353a38.html</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu-16-04-4-LTS-搭建-LNMP"><a href="#Ubuntu-16-04-4-LTS-搭建-LNMP" class="headerlink" title="Ubuntu 16.04.4 LTS 搭建 LNMP"></a>Ubuntu 16.04.4 LTS 搭建 LNMP</h1><ul><li><h2 id="安装-mysql"><a href="#安装-mysql" class="headerlink" title="安装 mysql"></a>安装 mysql</h2></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> mysql-server mysql-client<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>测试：mysql -u root -p</p></blockquote><p>查看 Mysql 状态：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">service</span> mysql status/start/stop/retart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看监听端口的情况：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> <span class="token parameter variable">-tunpl</span> 或 <span class="token function">netstat</span> <span class="token parameter variable">-tap</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="如果之前有装-APACHE-要改下端口-或者直接移除-apache2"><a href="#如果之前有装-APACHE-要改下端口-或者直接移除-apache2" class="headerlink" title="如果之前有装 APACHE 要改下端口,或者直接移除 apache2"></a>如果之前有装 APACHE 要改下端口,或者直接移除 apache2</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> remove apache2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><h2 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h2></li></ul><ol><li><p>为确保获取最新的 Nginx 先更新源列表（有些文档说的是更新系统）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装 nginx</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>检查 nginx 安装是否成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 方法01、 直接输入以下命令可以看到 nginx 的版本号</span>/usr/sbin/nginx <span class="token parameter variable">-v</span><span class="token comment"># 方法02、使用浏览器访问 IP 地址，出现 Nginx 的欢迎页面</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><blockquote><p>可以使用 dpkg -S nginx 命令来搜索 nginx 的相关文件<br>nginx 的配置目录位于：/etc/nginx<br>其他文档说的是 Nginx 的默认网站目录在 /usr/share/nginx/html/ 下，但是我安装的在 /var/www/html 下，和 apache2 默认的网站目录一样<br>默认Nginx网站配置文件为 /etc/nginx/sites-available/default</p></blockquote><h3 id="Nginx-其他命令"><a href="#Nginx-其他命令" class="headerlink" title="Nginx 其他命令"></a>Nginx 其他命令</h3><pre class="line-numbers language-none"><code class="language-none">/etc/init.d/nginx status|stop|start|restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Nginx-虚拟主机配置"><a href="#Nginx-虚拟主机配置" class="headerlink" title="Nginx 虚拟主机配置"></a>Nginx 虚拟主机配置</h3><ol><li><p>修改 user</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/nginx/nginx.conf<span class="token comment"># 将 user 改为 www-data 因为 php 默认是这个 user</span><span class="token comment"># 但是我看我自己的 nginx.conf 配置文件第一行直接是</span><span class="token comment"># user www-data; 因此我没有修改</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Nginx 与 php-fpm 的集成<br>这里采用UNIX domain socket方式：（这里一定要注意location的位置！！！）</p></li></ol><blockquote><p>在 /etc/nginx/sites-available/default 配置文件中（网站根目录也在是这里更改）， Nginx已经为与 PHP-FPM的整合准备好了，只需要将下面这部分改好就可以了。sock文件路径为 /run/php/php7.2-fpm.sock 。</p></blockquote><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">51</span>         location ~ \.php$</span> <span class="token punctuation">{</span><span class="token directive"><span class="token keyword">52</span>                 include snippets/fastcgi-php.conf</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">53</span> <span class="token number">54</span>                 <span class="token comment"># With php7.0-cgi alone:</span><span class="token number">55</span>                 <span class="token comment">#fastcgi_pass 127.0.0.1:9000;</span><span class="token number">56</span>                 <span class="token comment"># With php7.0-fpm:</span><span class="token number">57</span>                 fastcgi_pass unix:/run/php/php7.2-fpm.sock</span><span class="token punctuation">;</span>58         <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>然后再修改 PHP-FPM 的配置文件 vim  /etc/php/7.2/fpm/pool.d/ <a href="http://www.conf/">www.conf</a><br>，如下：</p></blockquote><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># 与 Nginx监听同一个 sock</span>36 listen = /run/php/php7.2-fpm.sock<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>端口-代码映射，方法有三种：</li></ol><ul><li>方法01：在 /etc/nginx/sites-available/default 文件末尾处直接添加以下内容<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/nginx/sites-available/default<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>提供了两种框架的配置方法</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># 以下是针对 thinkphp5.0 框架配置</span><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span>    <span class="token comment"># 如果希望二级域名指向同一个项目的话，直接在 server_name 后面添加即可</span>    <span class="token directive"><span class="token keyword">server_name</span>  www.drling.xin drling.xin</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">root</span>     /var/www/html/www.drling.xin/public</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">access_log</span>    /var/log/nginx/www.drling.xin_access.log</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">error_log</span>    /var/log/nginx/www.drling.xin_error.log</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">index</span> index.html index.php</span><span class="token punctuation">;</span><span class="token comment">## 在Nginx低版本中，是不支持PATHINFO的，但是可以通过在Nginx.conf中配置转发规则实现</span><span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">if</span> (!-e <span class="token variable">$request_filename</span>)</span> <span class="token punctuation">{</span>                <span class="token directive"><span class="token keyword">rewrite</span> ^(.*)$ /index.php?s=<span class="token variable">$1</span> last</span><span class="token punctuation">;</span>                <span class="token directive"><span class="token keyword">break</span></span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token directive"><span class="token keyword">location</span> ~ \.php?.*$</span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">fastcgi_pass</span>   unix:/run/php/php7.2-fpm.sock</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">fastcgi_param</span>  SCRIPT_FILENAME  <span class="token variable">$document_root</span><span class="token variable">$fastcgi_script_name</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">include</span>        fastcgi_params</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment"># 以下是针对 Laravel5.5 框架配置</span><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server_name</span>  test.drling.xin</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">root</span>     /var/www/html/test.drling.xin/public</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">access_log</span>    /var/log/nginx/test.drling.xin_access.log</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">error_log</span>    /var/log/nginx/test.drling.xin_error.log</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">index</span> index.html index.php</span><span class="token punctuation">;</span><span class="token comment">## 如果你使用的是 Nginx，使用如下站点配置指令就可以支持 URL 美化：</span><span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ /index.php?<span class="token variable">$query_string</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token directive"><span class="token keyword">location</span> ~ \.php?.*$</span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">fastcgi_pass</span>   unix:/run/php/php7.2-fpm.sock</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">fastcgi_param</span>  SCRIPT_FILENAME  <span class="token variable">$document_root</span><span class="token variable">$fastcgi_script_name</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">include</span>        fastcgi_params</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>方法02、直接在 /etc/nginx/sites-available 目录下，单独写自己的项目配置文件，操作方法如下</li></ul><pre class="line-numbers language-none"><code class="language-none"># 01、比如我写的文件是 www.drling.xin 不需要写 .conf 后缀名sudo vim /etc/nginx/sites-available/www.drling.xin# 02、将以上 thinkphp5.0 的配置文件放进去# 以下是针对 thinkphp5.0 框架配置server {    listen       80;    server_name  www.drling.xin;    root     /var/www/html/www.drling.xin/public;        access_log    /var/log/nginx/www.drling.xin_access.log;    error_log    /var/log/nginx/www.drling.xin_error.log;         index index.html index.php;## 在Nginx低版本中，是不支持PATHINFO的，但是可以通过在Nginx.conf中配置转发规则实现location / {        if (!-e $request_filename) {                rewrite ^(.*)$ /index.php?s=$1 last;                break;        }}    location ~ \.php?.*$ {        fastcgi_pass   unix:/run/php/php7.2-fpm.sock;        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;        include        fastcgi_params;    }}# 03、建立软连接sudo ln -s /etc/apache2/sites-available/www.drling.xin /etc/apache2/sites-enabled/www.drling.xin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>方法03、直接在 /etc/nginx/conf.d/ 目录下写以 .conf 为后缀的配置文件</li></ul><pre class="line-numbers language-none"><code class="language-none"># 01、比如我写的文件是 test.drling.xin 需要写 .conf 后缀名sudo vim /etc/nginx/conf.d/test.drling.xin.conf# 02、将以上 Laravel5.5 的配置文件放进去server {    listen       80;    server_name  test.drling.xin;    root     /var/www/html/test.drling.xin/public;    access_log    /var/log/nginx/test.drling.xin_access.log;    error_log    /var/log/nginx/test.drling.xin_error.log;        index index.html index.php;## 如果你使用的是 Nginx，使用如下站点配置指令就可以支持 URL 美化：location / {    try_files $uri $uri/ /index.php?$query_string;}    location ~ \.php?.*$ {        fastcgi_pass   unix:/run/php/php7.2-fpm.sock;        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;        include        fastcgi_params;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>其实 nginx 的配置放置位置多半可以参考 /etc/nginx/nginx.conf 文件中61行和62行<br> 61         include /etc/nginx/conf.d/<em>.conf;<br> 62         include /etc/nginx/sites-enabled/</em>;</p></blockquote><ul><li><h3 id="添加完了之后一定要重启服务器"><a href="#添加完了之后一定要重启服务器" class="headerlink" title="添加完了之后一定要重启服务器"></a>添加完了之后一定要重启服务器</h3></li></ul><pre class="line-numbers language-none"><code class="language-none">sudo service nginx restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><h3 id="Nginx-配置文件需要注意位置讲解"><a href="#Nginx-配置文件需要注意位置讲解" class="headerlink" title="Nginx 配置文件需要注意位置讲解"></a>Nginx 配置文件需要注意位置讲解</h3></li></ul><ol><li><p>如果不确定 fastcgi_pass 这一段怎么填写</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#fastcgi_pass为fpm地址，可查看/etc/php/7.2/fpm/pool.d/www.conf中的listen确定（www.conf配置文件中第36行）</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装 php 的时候一定要安装 php-fpm 扩展（也称为：PHPFastCGI管理器），要连接数据库则必须安装 php-mysql 扩展</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 我在这里安装的 php7.2 因为 Laravel5.5核心代码中需要php7.1以上</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> php7.2-fpm php7.2-mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>可以使用如下命令查看端口监听情况</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> <span class="token parameter variable">-anp</span>// 直接查看80端口可以使用命令：<span class="token function">sudo</span> <span class="token function">lsof</span> <span class="token parameter variable">-i</span> :80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>一定要在 php.ini 配置文件中修改 cgi.fix_pathinfo=0</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/php7.2/fpm/php.ini<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查找到 cgi.fix_pathinfo 字段（第776行），将值设为0</p><blockquote><p>这个参数用来对设置cgi模式下为php是否提供绝对路径信息或PATH_INFO信息</p></blockquote></li><li><p>Nginx 与 PHP-FPM 集成详细讲解</p></li></ol><blockquote><p>PHP-FPM 与 Nginx 通信方式有两种，一种是基于TCP的 Internet domain socket 方式，一种是 UNIX domain socket 方式。</p><p>UNIX domain socket 可以使同一台操作系统上的两个或多个进程进行数据通信。UNIX domain socket 的接口和 Internet domain socket 很像，但它不使用网络底层协议来通信。</p><p>服务器压力不大的情况下，这两种方式性能差别不大，但在压力比较满的时候，用UNIX domain socket方式，效果确实比较好。<br>接下来分别讲解一下两种方式的配置方式：</p></blockquote><ul><li>使用默认的 UNIX Socket方式:</li></ul><ol><li>修改 fpm 的配置文件<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/php/7.2/fpm/pool.d/www.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>修改成如下：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 第36行</span> listen <span class="token operator">=</span> /run/php/php7.2-fpm.sock<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>可以使用如下方式检查下配置文件是否有错误</p></blockquote></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> php-fpm7.2 <span class="token parameter variable">-t</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>修改完了之后重启一下 php-fpm7.2</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> php-fpm7.2 restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>修改 nginx 的配置文件</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/nginx/sites-enabled/default<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改成如下：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">51</span>         location ~ \.php$</span> <span class="token punctuation">{</span><span class="token directive"><span class="token keyword">52</span>                 include snippets/fastcgi-php.conf</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">53</span> <span class="token number">54</span>                 <span class="token comment"># With php7.0-cgi alone:</span><span class="token number">55</span>                 <span class="token comment">#fastcgi_pass 127.0.0.1:9000;</span><span class="token number">56</span>                 <span class="token comment"># With php7.0-fpm:</span><span class="token number">57</span>                 fastcgi_pass unix:/run/php/php7.2-fpm.sock</span><span class="token punctuation">;</span>58         <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>修改完了之后重启下 nginx</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> nginx restart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>再次检查 nginx 的配置文件是否正确</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> php-fpm7.2 <span class="token parameter variable">-t</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>使用 TCP 方式:</li></ul><ol><li><p>修改 fpm 的配置文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/php/7.2/fpm/pool.d/www.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改成如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 配置文件第36行</span>listen <span class="token operator">=</span> <span class="token number">127.0</span>.0.1:9000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>修改 nginx 的配置文件</p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/nginx/sites-enabled/default<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改成如下：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">51</span>         location ~ \.php$</span> <span class="token punctuation">{</span><span class="token directive"><span class="token keyword">52</span>                 include snippets/fastcgi-php.conf</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">53</span> <span class="token number">54</span>                 <span class="token comment"># With php7.0-cgi alone:</span><span class="token number">55</span>                 <span class="token comment">#fastcgi_pass 127.0.0.1:9000;</span><span class="token number">56</span>                 <span class="token comment"># With php7.0-fpm:</span><span class="token number">57</span>                 fastcgi_pass 127.0.0.1:9000</span><span class="token punctuation">;</span>58         <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LNMP </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 7.4 64位 搭建LAMP</title>
      <link href="posts/10ab7ab8.html"/>
      <url>posts/10ab7ab8.html</url>
      
        <content type="html"><![CDATA[<h1 id="CentOS-7-4-64位-搭建LAMP"><a href="#CentOS-7-4-64位-搭建LAMP" class="headerlink" title="CentOS 7.4 64位 搭建LAMP"></a>CentOS 7.4 64位 搭建LAMP</h1><ul><li><h2 id="安装php7-2"><a href="#安装php7-2" class="headerlink" title="安装php7.2"></a>安装php7.2</h2></li></ul><p>若直接采用centos中的yum安装：sudo yum -y install php，版本是5.4，远远不够，因此我们要手动更新rpm即可。</p><h3 id="1-首先获取-rpm-（添加-php-的-yum-仓库-）："><a href="#1-首先获取-rpm-（添加-php-的-yum-仓库-）：" class="headerlink" title="1. 首先获取 rpm （添加 php 的 yum 仓库 ）："></a>1. 首先获取 rpm （添加 php 的 yum 仓库 ）：</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> <span class="token parameter variable">-Uvh</span> https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm   <span class="token function">rpm</span> <span class="token parameter variable">-Uvh</span> https://mirror.webtatic.com/yum/el7/webtatic-release.rpm    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后可以利用 sudo yum list php* 查看目前都有 php 的什么版本了，可以发现从 4-7.2 的版本都有，7.2 版本名为 72w，因此安装该版本即可：</p><h3 id="2-安装-php7-2"><a href="#2-安装-php7-2" class="headerlink" title="2. 安装 php7.2"></a>2. 安装 php7.2</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token parameter variable">-y</span> <span class="token function">install</span> php72w<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但安装完毕后，输入 <code>php -v</code> 发现并没有该命令，因为 php72w 只是安装了 php 最小的库，一些应用还未安装，因此安装一些拓展包即可：</p><h3 id="3-安装-php7-2-其它扩展（安装过程中全部选-yes-即可）"><a href="#3-安装-php7-2-其它扩展（安装过程中全部选-yes-即可）" class="headerlink" title="3. 安装 php7.2 其它扩展（安装过程中全部选 yes 即可）"></a>3. 安装 php7.2 其它扩展（安装过程中全部选 yes 即可）</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 以下扩展中有部分和上面的扩展重复，安装的时候请注意区分</span><span class="token function">sudo</span> yum <span class="token function">install</span> php72w.x86_64 php72w-cli.x86_64 php72w-common.x86_64 php72w-gd.x86_64 php72w-ldap.x86_64 php72w-mbstring.x86_64 php72w-mcrypt.x86_64 php72w-mysql.x86_64 php72w-pdo.x86_64 php72w-devel.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-安装-PHP-7-2-的-fpm"><a href="#4-安装-PHP-7-2-的-fpm" class="headerlink" title="4. 安装 PHP 7.2 的 fpm"></a>4. 安装 PHP 7.2 的 fpm</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> php72w-fpm.x86_64<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><h2 id="安装-MySQL5-7-或-MySQL5-6"><a href="#安装-MySQL5-7-或-MySQL5-6" class="headerlink" title="安装 MySQL5.7 或 MySQL5.6"></a>安装 MySQL5.7 或 MySQL5.6</h2></li></ul><h3 id="1-配置-YUM-源"><a href="#1-配置-YUM-源" class="headerlink" title="1. 配置 YUM 源"></a>1. 配置 YUM 源</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm<span class="token function">sudo</span> yum localinstall mysql57-community-release-el7-8.noarch.rpm<span class="token comment"># 检查 mysql 源是否安装成功</span>yum repolist enabled <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"mysql.*-community.*"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-修改安装-mysql-版本配置（现在默认安装是-mysql5-7）"><a href="#2-修改安装-mysql-版本配置（现在默认安装是-mysql5-7）" class="headerlink" title="2. 修改安装 mysql 版本配置（现在默认安装是 mysql5.7）"></a>2. 修改安装 mysql 版本配置（现在默认安装是 mysql5.7）</h3><p>可以修改 <code>vim /etc/yum.repos.d/mysql-community.repo</code>  源，改变默认安装的 mysql 版本。比如要安装 5.7 版本，将 5.6 源的 <code>enabled=1</code> 改成 <code>enabled=0</code> 。然后再将 5.7 源的 <code>enabled=0</code> 改成 <code>enabled=1</code> 即可。改完之后的效果如下所示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">15</span> <span class="token comment"># Enable to use MySQL 5.5</span><span class="token number">16</span> <span class="token punctuation">[</span>mysql55-community<span class="token punctuation">]</span><span class="token number">17</span> <span class="token assign-left variable">name</span><span class="token operator">=</span>MySQL <span class="token number">5.5</span> Community Server<span class="token number">18</span> <span class="token assign-left variable">baseurl</span><span class="token operator">=</span>http://repo.mysql.com/yum/mysql-5.5-community/el/7/<span class="token variable">$basearch</span>/<span class="token number">19</span> <span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">0</span><span class="token number">20</span> <span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token number">21</span> <span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql<span class="token number">22</span> <span class="token number">23</span> <span class="token comment"># Enable to use MySQL 5.6</span><span class="token number">24</span> <span class="token punctuation">[</span>mysql56-community<span class="token punctuation">]</span><span class="token number">25</span> <span class="token assign-left variable">name</span><span class="token operator">=</span>MySQL <span class="token number">5.6</span> Community Server<span class="token number">26</span> <span class="token assign-left variable">baseurl</span><span class="token operator">=</span>http://repo.mysql.com/yum/mysql-5.6-community/el/7/<span class="token variable">$basearch</span>/<span class="token number">27</span> <span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">0</span><span class="token number">28</span> <span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token number">29</span> <span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql<span class="token number">30</span> <span class="token number">31</span> <span class="token punctuation">[</span>mysql57-community<span class="token punctuation">]</span><span class="token number">32</span> <span class="token assign-left variable">name</span><span class="token operator">=</span>MySQL <span class="token number">5.7</span> Community Server<span class="token number">33</span> <span class="token assign-left variable">baseurl</span><span class="token operator">=</span>http://repo.mysql.com/yum/mysql-5.7-community/el/7/<span class="token variable">$basearch</span>/<span class="token number">34</span> <span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span class="token number">35</span> <span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">1</span><span class="token number">36</span> <span class="token assign-left variable">gpgkey</span><span class="token operator">=</span>file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-安装-MySQL"><a href="#3-安装-MySQL" class="headerlink" title="3. 安装 MySQL"></a>3. 安装 MySQL</h3> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> mysql-community-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-启动-MySQL"><a href="#4-启动-MySQL" class="headerlink" title="4. 启动 MySQL"></a>4. 启动 MySQL</h3> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-配置开机启动"><a href="#5-配置开机启动" class="headerlink" title="5. 配置开机启动"></a>5. 配置开机启动</h3> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl <span class="token builtin class-name">enable</span> mysqldsystemctl daemon-reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="6-修改-root-本地登录密码"><a href="#6-修改-root-本地登录密码" class="headerlink" title="6. 修改 root 本地登录密码"></a>6. 修改 root 本地登录密码</h3><p>mysql 安装完成之后，在 /var/log/mysqld.log 文件中给 root 生成了一个默认密码。通过下面的方式找到 root 默认密码，然后登录 mysql 进行修改：</p> <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> <span class="token comment"># 查找默认生成的密码</span> <span class="token function">grep</span> <span class="token string">'temporary password'</span> /var/log/mysqld.log  <span class="token comment"># 用默认生成的密码登录 mysql</span> mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span>  <span class="token comment"># 修改新密码为 MyNewPass4! </span> <span class="token comment"># 用这种方式修改密码的时候需要把密码修改的稍微复杂一点，不然老是提示你创建的密码不安全</span>ALTER <span class="token environment constant">USER</span> <span class="token string">'root'</span>@<span class="token string">'localhost'</span> IDENTIFIED BY <span class="token string">'MyNewPass4!'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-配置默认编码为-utf8"><a href="#7-配置默认编码为-utf8" class="headerlink" title="7. 配置默认编码为 utf8"></a>7. 配置默认编码为 utf8</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 直接命令行下敲命令，不需要登录 mysql 之后</span><span class="token assign-left variable">character_set_server</span><span class="token operator">=</span>utf8<span class="token assign-left variable">init_connect</span><span class="token operator">=</span><span class="token string">'SET NAMES utf8'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><h2 id="安装-Apache"><a href="#安装-Apache" class="headerlink" title="安装 Apache"></a>安装 Apache</h2></li></ul><h3 id="1-安装-httpd"><a href="#1-安装-httpd" class="headerlink" title="1. 安装 httpd"></a>1. 安装 httpd</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token parameter variable">-y</span> <span class="token function">install</span> httpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-修改-apache-配置文件"><a href="#2-修改-apache-配置文件" class="headerlink" title="2. 修改 apache 配置文件"></a>2. 修改 apache 配置文件</h3><p>主配置文件的路径为 /etc/httpd/conf/httpd.conf<br>扩展配置文件路径为 /etc/httpd/conf.d/*.conf</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/httpd/conf.d/sample.conf<span class="token comment"># 配置文件编写如下</span> <span class="token operator">&lt;</span>VirtualHost *:8<span class="token operator"><span class="token file-descriptor important">0</span>&gt;</span>   <span class="token comment"># 项目文件目录，默认项目目录在 /var/www/html/ 下</span>   DocumentRoot /var/www/html/sample/public   <span class="token comment"># 虚拟域名</span>   ServerName test.drling.xin   <span class="token comment"># 多个虚拟域名</span>   ServerAlias sample.drling.xin   <span class="token comment"># 如果还需要配置第三个虚拟域名</span>   ServerAlias www.drling.xin   <span class="token comment"># 错误日志目录</span>   ErrorLog /var/log/httpd/sample-error_log   <span class="token comment"># 访问日志目录</span>   Customlog /var/log/httpd/sample-access_log common <span class="token operator">&lt;</span>/VirtualHost<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-启动-httpd"><a href="#3-启动-httpd" class="headerlink" title="3. 启动 httpd"></a>3. 启动 httpd</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 开启/重启/停止/状态</span>systemctl start/restart/stop/status httpd <span class="token comment"># 开机启动 httpd</span>systemctl <span class="token builtin class-name">enable</span> httpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>以下步骤我搭建服务器的时候没有操作，发现项目也运行起来了</strong></p><h3 id="4-修改-httpd-conf-配置"><a href="#4-修改-httpd-conf-配置" class="headerlink" title="4. 修改 httpd.conf 配置"></a>4. 修改 httpd.conf 配置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># line 86: 改变管理员的邮箱地址</span>ServerAdmin root@linuxprobe.org<span class="token comment"># line 95: 改变域名信息</span>ServerName www.linuxprobe.org:80<span class="token comment"># line 151: none变成All</span>AllowOverride All<span class="token comment"># line 164: 添加只能使用目录名称访问的文件名</span>DirectoryIndex index.html index.cgi index.php<span class="token comment"># add follows to the end</span><span class="token comment"># server's response header（安全性）</span>ServerTokens Prod<span class="token comment"># keepalive is ON</span>KeepAlive On<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-修改防火墙配置"><a href="#5-修改防火墙配置" class="headerlink" title="5. 修改防火墙配置"></a>5. 修改防火墙配置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">如果 Firewalld 正在运行，请允许 HTTP 服务。HTTP 使用 <span class="token number">80</span>/TCPfirewall-cmd --add-service<span class="token operator">=</span>http <span class="token parameter variable">--permanent</span>firewall-cmd <span class="token parameter variable">--reload</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="6-运行-tp5-项目的时候提示没有写-session-的权限，默认-session-文件夹如下"><a href="#6-运行-tp5-项目的时候提示没有写-session-的权限，默认-session-文件夹如下" class="headerlink" title="6. 运行 tp5 项目的时候提示没有写 session 的权限，默认 session 文件夹如下"></a>6. 运行 tp5 项目的时候提示没有写 session 的权限，默认 session 文件夹如下</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># session 文件夹路径： /var/lib/php/session/</span><span class="token comment"># 给最大权限 </span><span class="token function">chmod</span> 0777 <span class="token parameter variable">-R</span> /var/lib/php/session<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CentOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> LAMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何给已经运行中的 docker 容器添加或者修改端口映射？</title>
      <link href="posts/2a105f69.html"/>
      <url>posts/2a105f69.html</url>
      
        <content type="html"><![CDATA[<h1 id="如何给已经运行中的-docker-容器添加或者修改端口映射？"><a href="#如何给已经运行中的-docker-容器添加或者修改端口映射？" class="headerlink" title="如何给已经运行中的 docker 容器添加或者修改端口映射？"></a>如何给已经运行中的 docker 容器添加或者修改端口映射？</h1><h2 id="容器还没有构建"><a href="#容器还没有构建" class="headerlink" title="容器还没有构建"></a>容器还没有构建</h2><p>如果你的容器还没有构建时，想添加端口映射时，你只需要在创建容器的时候添加 <code>-p</code> 参数，想添加几个端口映射就追加几个 <code>-p</code> 参数。类似于如下示例：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">--name</span> api_dfo_hyperf_ws <span class="token punctuation">\</span><span class="token parameter variable">-v</span> /Users/pudongping/glory/codes/dfo/api_dfo_hyperf:/api_dfo_hyperf <span class="token punctuation">\</span><span class="token parameter variable">-p</span> <span class="token number">9502</span>:9502 <span class="token punctuation">\</span><span class="token parameter variable">-p</span> <span class="token number">9503</span>:9503 <span class="token punctuation">\</span><span class="token parameter variable">-p</span> <span class="token number">9504</span>:9504 <span class="token punctuation">\</span><span class="token parameter variable">-p</span> <span class="token number">9505</span>:9505 <span class="token parameter variable">-it</span> <span class="token punctuation">\</span><span class="token parameter variable">--entrypoint</span> /bin/sh <span class="token punctuation">\</span>alex/alex_api_dfo:v1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="容器已经构建，但是想修改或者添加端口时"><a href="#容器已经构建，但是想修改或者添加端口时" class="headerlink" title="容器已经构建，但是想修改或者添加端口时"></a>容器已经构建，但是想修改或者添加端口时</h2><h3 id="先停止掉正在运行的容器。"><a href="#先停止掉正在运行的容器。" class="headerlink" title="先停止掉正在运行的容器。"></a>先停止掉正在运行的容器。</h3><blockquote><p>以下内容都是以容器 id 为 <code>cbe26510c276</code> 进行操作的，请务必将容器 id 换成你自己需要修改的容器 id。</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> stop <span class="token punctuation">{</span>容器的名称或者 <span class="token function">id</span> <span class="token punctuation">}</span><span class="token comment"># 比如：</span><span class="token function">docker</span> stop cbe26510c276<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查看容器完整的-hash-of-the-container-数值"><a href="#查看容器完整的-hash-of-the-container-数值" class="headerlink" title="查看容器完整的 hash_of_the_container 数值"></a>查看容器完整的 <code>hash_of_the_container</code> 数值</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> inspect <span class="token punctuation">{</span>容器的名称或者 <span class="token function">id</span> <span class="token punctuation">}</span> <span class="token operator">|</span> <span class="token function">grep</span> Id<span class="token comment"># 比如：</span><span class="token function">docker</span> inspect cbe26510c276 <span class="token operator">|</span> <span class="token function">grep</span> Id<span class="token comment"># 会得到如下结果：</span><span class="token comment"># "Id": "cbe26510c276fa9a4487a8c2af8cbb49410f2a5305149d2b26eb8ce37c777d00"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="打开-hostconfig-json-配置文件"><a href="#打开-hostconfig-json-配置文件" class="headerlink" title="打开 hostconfig.json 配置文件"></a>打开 <code>hostconfig.json</code> 配置文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /var/lib/docker/containers/<span class="token punctuation">{</span>hash_of_the_container<span class="token punctuation">}</span>/hostconfig.json<span class="token comment"># 比如：</span><span class="token function">vim</span> /var/lib/docker/containers/cbe26510c276fa9a4487a8c2af8cbb49410f2a5305149d2b26eb8ce37c777d00/hostconfig.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果你不想先查看完整的容器 <code>hash_of_the_container</code> 数值，你也可以直接先切换到当前容器相关目录中 <code>cd /var/lib/docker/containers/{hash_of_the_container}*</code> ， 然后再去编辑 <code>hostconfig.json</code> 配置文件。</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /var/lib/docker/containers/<span class="token punctuation">{</span>hash_of_the_container<span class="token punctuation">}</span>*<span class="token comment"># 比如：</span><span class="token builtin class-name">cd</span> /var/lib/docker/containers/cbe26510c276*<span class="token comment"># 然后再去编辑 `hostconfig.json` 配置文件</span><span class="token function">vim</span> hostconfig.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改-hostconfig-json-配置文件"><a href="#修改-hostconfig-json-配置文件" class="headerlink" title="修改 hostconfig.json 配置文件"></a>修改 <code>hostconfig.json</code> 配置文件</h3><p>在 <code>hostconfig.json</code> 配置文件中，找到 <code>"PortBindings":{}</code> 这个配置项，然后进行修改。我这里添加了两个端口映射，分别将宿主机的 <code>8502</code> 端口以及 <code>8505</code> 端口映射到容器的 <code>8502</code> 端口和 <code>8505</code> 端口。</p><p><code>HostPort</code> 对应的端口代表 <strong>宿主机</strong> 的端口。</p><blockquote><p>建议容器使用什么端口，宿主机就映射什么端口，方便以后管理。当然，具体情况，具体分析。</p></blockquote><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"Binds"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"/data/portal_api_dfo_hyperf/:/portal_api_dfo_hyperf"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"ContainerIDFile"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token property">"LxcConf"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"Memory"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"MemorySwap"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"CpuShares"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"CpusetCpus"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token property">"Privileged"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"PortBindings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"8502/tcp"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token property">"HostIp"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>                <span class="token property">"HostPort"</span><span class="token operator">:</span> <span class="token string">"8502"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"8505/tcp"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                <span class="token property">"HostIp"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>                <span class="token property">"HostPort"</span><span class="token operator">:</span> <span class="token string">"8505"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"Links"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>    <span class="token property">"PublishAllPorts"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"Dns"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>    <span class="token property">"DnsSearch"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>    <span class="token property">"ExtraHosts"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>    <span class="token property">"VolumesFrom"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>    <span class="token property">"Devices"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"NetworkMode"</span><span class="token operator">:</span> <span class="token string">"bridge"</span><span class="token punctuation">,</span>    <span class="token property">"IpcMode"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token property">"PidMode"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token property">"CapAdd"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>    <span class="token property">"CapDrop"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>    <span class="token property">"RestartPolicy"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"Name"</span><span class="token operator">:</span> <span class="token string">"no"</span><span class="token punctuation">,</span>        <span class="token property">"MaximumRetryCount"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"SecurityOpt"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>    <span class="token property">"ReadonlyRootfs"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"Ulimits"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>    <span class="token property">"LogConfig"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"Type"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token property">"Config"</span><span class="token operator">:</span> <span class="token null keyword">null</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"CgroupParent"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="如果-config-v2-json-配置文件或者-config-json-配置文件中也记录了端口，也需要进行修改，如果没有，就不需要改。"><a href="#如果-config-v2-json-配置文件或者-config-json-配置文件中也记录了端口，也需要进行修改，如果没有，就不需要改。" class="headerlink" title="如果 config.v2.json 配置文件或者 config.json 配置文件中也记录了端口，也需要进行修改，如果没有，就不需要改。"></a>如果 <code>config.v2.json</code> 配置文件或者 <code>config.json</code> 配置文件中也记录了端口，也需要进行修改，如果没有，就不需要改。</h3><blockquote><p>只需要修改 <code>"ExposedPorts": {}</code> 相关之处。</p></blockquote><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"State"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"Running"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token property">"Paused"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token property">"Restarting"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token property">"OOMKilled"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token property">"Dead"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token property">"Pid"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"ExitCode"</span><span class="token operator">:</span> <span class="token number">137</span><span class="token punctuation">,</span>        <span class="token property">"Error"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token property">"StartedAt"</span><span class="token operator">:</span> <span class="token string">"2021-05-17T07:48:26.743090016Z"</span><span class="token punctuation">,</span>        <span class="token property">"FinishedAt"</span><span class="token operator">:</span> <span class="token string">"2021-07-02T06:05:33.025441199Z"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"ID"</span><span class="token operator">:</span> <span class="token string">"cbe26510c276fa9a4487a8c2af8cbb49410f2a5305149d2b26eb8ce37c777d00"</span><span class="token punctuation">,</span>    <span class="token property">"Created"</span><span class="token operator">:</span> <span class="token string">"2020-12-23T07:02:00.997803339Z"</span><span class="token punctuation">,</span>    <span class="token property">"Path"</span><span class="token operator">:</span> <span class="token string">"/bin/sh"</span><span class="token punctuation">,</span>    <span class="token property">"Args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"Config"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"Hostname"</span><span class="token operator">:</span> <span class="token string">"cbe26510c276"</span><span class="token punctuation">,</span>        <span class="token property">"Domainname"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token property">"User"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token property">"Memory"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"MemorySwap"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"CpuShares"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"Cpuset"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token property">"AttachStdin"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"AttachStdout"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"AttachStderr"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"PortSpecs"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>        <span class="token property">"ExposedPorts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"8502/tcp"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"8505/tcp"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"Tty"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"OpenStdin"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"StdinOnce"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"Env"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span><span class="token punctuation">,</span>            <span class="token string">"SW_VERSION=v4.5.10"</span><span class="token punctuation">,</span>            <span class="token string">"COMPOSER_VERSION=2.0.8"</span><span class="token punctuation">,</span>            <span class="token string">"PHPIZE_DEPS=autoconf dpkg-dev dpkg file g++ gcc libc-dev make php7-dev php7-pear pkgconf re2c pcre-dev pcre2-dev zlib-dev libtool automake"</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"Cmd"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>        <span class="token property">"Image"</span><span class="token operator">:</span> <span class="token string">"hyperf/hyperf:7.4-alpine-v3.11-swoole"</span><span class="token punctuation">,</span>        <span class="token property">"Volumes"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>        <span class="token property">"WorkingDir"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token property">"Entrypoint"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"/bin/sh"</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"NetworkDisabled"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token property">"MacAddress"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token property">"OnBuild"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>        <span class="token property">"Labels"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"MIT"</span><span class="token punctuation">,</span>            <span class="token property">"maintainer"</span><span class="token operator">:</span> <span class="token string">"Hyperf Developers &lt;group@hyperf.io&gt;"</span><span class="token punctuation">,</span>            <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"Image"</span><span class="token operator">:</span> <span class="token string">"f503e215646f50e5242a6bdf1c6a9a176910c99600b3472b390892f59c87c3a1"</span><span class="token punctuation">,</span>    <span class="token property">"NetworkSettings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"IPAddress"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token property">"IPPrefixLen"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"MacAddress"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token property">"LinkLocalIPv6Address"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token property">"LinkLocalIPv6PrefixLen"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"GlobalIPv6Address"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token property">"GlobalIPv6PrefixLen"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token property">"Gateway"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token property">"IPv6Gateway"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token property">"Bridge"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token property">"PortMapping"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>        <span class="token property">"Ports"</span><span class="token operator">:</span> <span class="token null keyword">null</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"ResolvConfPath"</span><span class="token operator">:</span> <span class="token string">"/var/lib/docker/containers/cbe26510c276fa9a4487a8c2af8cbb49410f2a5305149d2b26eb8ce37c777d00/resolv.conf"</span><span class="token punctuation">,</span>    <span class="token property">"HostnamePath"</span><span class="token operator">:</span> <span class="token string">"/var/lib/docker/containers/cbe26510c276fa9a4487a8c2af8cbb49410f2a5305149d2b26eb8ce37c777d00/hostname"</span><span class="token punctuation">,</span>    <span class="token property">"HostsPath"</span><span class="token operator">:</span> <span class="token string">"/var/lib/docker/containers/cbe26510c276fa9a4487a8c2af8cbb49410f2a5305149d2b26eb8ce37c777d00/hosts"</span><span class="token punctuation">,</span>    <span class="token property">"LogPath"</span><span class="token operator">:</span> <span class="token string">"/var/lib/docker/containers/cbe26510c276fa9a4487a8c2af8cbb49410f2a5305149d2b26eb8ce37c777d00/cbe26510c276fa9a4487a8c2af8cbb49410f2a5305149d2b26eb8ce37c777d00-json.log"</span><span class="token punctuation">,</span>    <span class="token property">"Name"</span><span class="token operator">:</span> <span class="token string">"/portal_api_dfo_hyperf"</span><span class="token punctuation">,</span>    <span class="token property">"Driver"</span><span class="token operator">:</span> <span class="token string">"aufs"</span><span class="token punctuation">,</span>    <span class="token property">"ExecDriver"</span><span class="token operator">:</span> <span class="token string">"native-0.2"</span><span class="token punctuation">,</span>    <span class="token property">"MountLabel"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token property">"ProcessLabel"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token property">"AppArmorProfile"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token property">"RestartCount"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"UpdateDns"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"Volumes"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"/portal_api_dfo_hyperf"</span><span class="token operator">:</span> <span class="token string">"/data/portal_api_dfo_hyperf"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"VolumesRW"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"/portal_api_dfo_hyperf"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"AppliedVolumesFrom"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="最后重启-docker，然后查看容器相关配置信息是否已经修改完毕"><a href="#最后重启-docker，然后查看容器相关配置信息是否已经修改完毕" class="headerlink" title="最后重启 docker，然后查看容器相关配置信息是否已经修改完毕"></a>最后重启 docker，然后查看容器相关配置信息是否已经修改完毕</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 重启 docker</span><span class="token function">service</span> <span class="token function">docker</span> restart <span class="token comment"># 或者</span>systemctl restart <span class="token function">docker</span><span class="token comment"># 查看容器相关配置信息</span><span class="token function">docker</span> inspect <span class="token punctuation">{</span>容器的名称或者 <span class="token function">id</span> <span class="token punctuation">}</span><span class="token comment"># 比如：</span><span class="token function">docker</span> inspect cbe26510c276<span class="token comment"># 配置符合你的要求后，再次启动容器</span><span class="token function">docker</span> start <span class="token punctuation">{</span>容器的名称或者 <span class="token function">id</span> <span class="token punctuation">}</span><span class="token comment"># 比如：</span><span class="token function">docker</span> start cbe26510c276<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="如果是使用的-Docker-Desktop-for-Mac-时"><a href="#如果是使用的-Docker-Desktop-for-Mac-时" class="headerlink" title="如果是使用的 Docker Desktop for Mac 时"></a>如果是使用的 <code>Docker Desktop for Mac</code> 时</h2><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><blockquote><p><a href="https://www.modb.pro/db/5458">How to login the VM of Docker Desktop for Mac</a></p></blockquote><p>因为在 Docker for MacOS 中，容器的宿主机并不是 MacOS 本身，而是在 MacOS 中运行的一个 VM 虚拟机<br>。虚拟机的路径可以通过查看 Docker Desktop 的配置界面 <code>Disk image location</code> 配置获得。</p><h3 id="那么我们如何进入这个虚拟机呢？"><a href="#那么我们如何进入这个虚拟机呢？" class="headerlink" title="那么我们如何进入这个虚拟机呢？"></a>那么我们如何进入这个虚拟机呢？</h3><p>最简单的方式是采用 <a href="https://github.com/justincormack/nsenter1">justincormack/nsenter1</a> 进入，这个镜像只有 101KB，已经非常小了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># –rm 表示在退出的时候就自动删除该容器；</span><span class="token comment"># –privileged 表示允许该容器访问宿主机（也就是我们想要登录的 VM ）中的各种设备；</span><span class="token comment"># –pid=host 表示允许容器共享宿主机的进程命名空间（namespace），或者通俗点儿解释就是允许容器看到宿主机中的各种进程；</span><span class="token function">docker</span> run <span class="token parameter variable">-it</span> <span class="token parameter variable">--rm</span> <span class="token parameter variable">--privileged</span> <span class="token parameter variable">--pid</span><span class="token operator">=</span>host justincormack/nsenter1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后再进入 <code>/var/lib/docker/containers</code> 目录修改 <code>config.v2.json</code> 配置文件和 <code>hostconfig.json</code> 配置文件即可。整体来说，在 MacOS 上除了进入  <code>/var/lib/docker/containers</code> 目录时，进入方式有所不同以外，修改配置文件方式和上文一样。需要注意的是，修改的时候请使用 <code>vi</code> 编辑器，因为这个镜像没有安装 <code>vim</code> 编辑器的。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 比如：</span><span class="token function">vi</span> /var/lib/docker/containers/a7377587b9f08cfe87af9a8ffa4da0f90bf07fb0a1cd6833a5ffcd9c37b842d0/config.v2.json<span class="token function">vi</span> /var/lib/docker/containers/a7377587b9f08cfe87af9a8ffa4da0f90bf07fb0a1cd6833a5ffcd9c37b842d0/hostconfig.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 7.4 64位 编译安装 LNMP</title>
      <link href="posts/2ccaa736.html"/>
      <url>posts/2ccaa736.html</url>
      
        <content type="html"><![CDATA[<h1 id="CentOS-7-4-64位-编译安装-LNMP"><a href="#CentOS-7-4-64位-编译安装-LNMP" class="headerlink" title="CentOS 7.4 64位 编译安装 LNMP"></a>CentOS 7.4 64位 编译安装 LNMP</h1><h2 id="查看-Linux-版本"><a href="#查看-Linux-版本" class="headerlink" title="查看 Linux 版本"></a>查看 Linux 版本</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /etc/redhat-release<span class="token comment"># CentOS Linux release 7.4.1708 (Core)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="1-安装-nginx"><a href="#1-安装-nginx" class="headerlink" title="1. 安装 nginx"></a>1. 安装 nginx</h2><p>1-1. 安装 nginx 源</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum localinstall http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1-2. 安装 nginx</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1-3. 启动 nginx</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-安装-MySQL"><a href="#2-安装-MySQL" class="headerlink" title="2. 安装 MySQL"></a>2. 安装 MySQL</h2><p>2-1. 安装 MySQL 源</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum localinstall  http://dev.mysql.com/get/mysql57-community-release-el7-7.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2-2. 安装 MySQL</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> mysql-community-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装 MySQL 开发包 （*）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> mysql-community-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2-3. 启动 MySQL</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl start mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2-4. 查看 MySQL 是否启动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl status mysqld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2-5. 查看 MySQL 默认密码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 首次启动,会把密码放在 /var/log/mysqld.log 里面</span><span class="token comment"># 2018-10-13T15:51:47.482124Z 1 [Note] A temporary password is generated for root@localhost: r)eS,gjku4ts</span><span class="token function">grep</span> <span class="token string">'temporary password'</span> /var/log/mysqld.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2-6. 更改 MySQL 密码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 01、登入数据库</span>mysql <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span> <span class="token comment"># 输入密码</span>r<span class="token punctuation">)</span>eS,gjku4ts<span class="token comment"># 这里的密码 r)eS,gjku4ts 是从以上 mysqld.log 中查询出来的</span><span class="token comment"># 02、修改 root 账号密码 （密码安全级别要稍微高一点，不然更新不会成功）</span>ALTER <span class="token environment constant">USER</span> <span class="token string">'root'</span>@<span class="token string">'localhost'</span> IDENTIFIED BY <span class="token string">'QAZwsx123!@#'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2-7. 将 root 用户更改为外网也可以访问</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 01、打开 mysql 数据表</span>use mysql<span class="token punctuation">;</span><span class="token comment"># 02、查看 mysql 数据表中数据</span><span class="token keyword">select</span> user,host from user<span class="token punctuation">;</span><span class="token comment"># 03、 % 代表任何 ip 都能访问</span>UPDATE user SET <span class="token function">host</span> <span class="token operator">=</span> <span class="token string">'%'</span> WHERE user <span class="token operator">=</span> <span class="token string">'root'</span><span class="token punctuation">;</span><span class="token comment"># 04、再次查看 mysql 数据表中的数据</span><span class="token keyword">select</span> user,host from user<span class="token punctuation">;</span><span class="token comment"># 05、刷新权限</span>flush privileges<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2-8. 新建一个用户并且赋予权限（因为 root 用户开放外面使用毕竟不安全）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 01、新建 mysql 账户</span>grant all privileges on *.* to  alex@<span class="token string">"%"</span> identified by <span class="token string">"QAZwsx123!@#"</span> with grant option<span class="token punctuation">;</span><span class="token comment"># grant 是授权命令，其中 alex 是我们连接用的用户名、"AZwsx123!@#"是连接密码，用户名后面的 "%" 通用符表示允许各 host 操作。</span><span class="token comment"># 上面这条命令是指</span><span class="token comment"># 自动创建用户 alex ,密码 AZwsx123!@#</span><span class="token comment"># 格式：grant 权限 on 数据库名.表名 to 用户@登录主机 identified by "用户密码"; </span><span class="token comment"># @ 后面是访问mysql的客户端IP地址（或是 主机名） % 代表任意的客户端，如果填写 localhost 为本地访问（那此用户就不能远程访问该mysql数据库了）。</span><span class="token comment"># 02、刷新权限</span>flush privileges<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-编译安装-php7-2"><a href="#3-编译安装-php7-2" class="headerlink" title="3. 编译安装 php7.2"></a>3. 编译安装 php7.2</h2><p>3-1. 下载安装包，一般情况下,我们都会下载到 /usr/local/src 下面</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 01、进入 src 目录</span><span class="token builtin class-name">cd</span> /usr/local/src<span class="token comment"># 02、下载 php7.2 源码包</span><span class="token function">wget</span> <span class="token parameter variable">-O</span> php72.tar.gz http://cn2.php.net/get/php-7.2.0.tar.gz/from/this/mirror<span class="token comment"># 03、解压安装包</span><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> php72.tar.gz<span class="token comment"># 04、进入解压后的包</span><span class="token builtin class-name">cd</span> php-7.2.0<span class="token comment"># 05、安装 php 的依赖</span>yum <span class="token function">install</span> libxml2 libxml2-devel openssl openssl-devel <span class="token function">bzip2</span> bzip2-devel libcurl libcurl-devel libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel gmp gmp-devel libmcrypt libmcrypt-devel readline readline-devel libxslt libxslt-devel<span class="token comment"># 06、新建 php 这个文件夹（编译配置会用到）</span><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /usr/local/php<span class="token comment"># 07、编译配置</span>./configure <span class="token punctuation">\</span><span class="token parameter variable">--prefix</span><span class="token operator">=</span>/usr/local/php <span class="token punctuation">\</span>--with-config-file-path<span class="token operator">=</span>/etc <span class="token punctuation">\</span>--enable-fpm <span class="token punctuation">\</span>--with-fpm-user<span class="token operator">=</span>nginx  <span class="token punctuation">\</span>--with-fpm-group<span class="token operator">=</span>nginx <span class="token punctuation">\</span>--enable-inline-optimization <span class="token punctuation">\</span>--disable-debug <span class="token punctuation">\</span>--disable-rpath <span class="token punctuation">\</span>--enable-shared  <span class="token punctuation">\</span>--enable-soap <span class="token punctuation">\</span>--with-libxml-dir <span class="token punctuation">\</span>--with-xmlrpc <span class="token punctuation">\</span>--with-openssl <span class="token punctuation">\</span>--with-mcrypt <span class="token punctuation">\</span>--with-mhash <span class="token punctuation">\</span>--with-pcre-regex <span class="token punctuation">\</span>--with-sqlite3 <span class="token punctuation">\</span>--with-zlib <span class="token punctuation">\</span>--enable-bcmath <span class="token punctuation">\</span>--with-iconv <span class="token punctuation">\</span>--with-bz2 <span class="token punctuation">\</span>--enable-calendar <span class="token punctuation">\</span>--with-curl <span class="token punctuation">\</span>--with-cdb <span class="token punctuation">\</span>--enable-dom <span class="token punctuation">\</span>--enable-exif <span class="token punctuation">\</span>--enable-fileinfo <span class="token punctuation">\</span>--enable-filter <span class="token punctuation">\</span>--with-pcre-dir <span class="token punctuation">\</span>--enable-ftp <span class="token punctuation">\</span>--with-gd <span class="token punctuation">\</span>--with-openssl-dir <span class="token punctuation">\</span>--with-jpeg-dir <span class="token punctuation">\</span>--with-png-dir <span class="token punctuation">\</span>--with-zlib-dir  <span class="token punctuation">\</span>--with-freetype-dir <span class="token punctuation">\</span>--enable-gd-native-ttf <span class="token punctuation">\</span>--enable-gd-jis-conv <span class="token punctuation">\</span>--with-gettext <span class="token punctuation">\</span>--with-gmp <span class="token punctuation">\</span>--with-mhash <span class="token punctuation">\</span>--enable-json <span class="token punctuation">\</span>--enable-mbstring <span class="token punctuation">\</span>--enable-mbregex <span class="token punctuation">\</span>--enable-mbregex-backtrack <span class="token punctuation">\</span>--with-libmbfl <span class="token punctuation">\</span>--with-onig <span class="token punctuation">\</span>--enable-pdo <span class="token punctuation">\</span>--with-mysqli<span class="token operator">=</span>mysqlnd <span class="token punctuation">\</span>--with-pdo-mysql<span class="token operator">=</span>mysqlnd <span class="token punctuation">\</span>--with-zlib-dir <span class="token punctuation">\</span>--with-pdo-sqlite <span class="token punctuation">\</span>--with-readline <span class="token punctuation">\</span>--enable-session <span class="token punctuation">\</span>--enable-shmop <span class="token punctuation">\</span>--enable-simplexml <span class="token punctuation">\</span>--enable-sockets  <span class="token punctuation">\</span>--enable-sysvmsg <span class="token punctuation">\</span>--enable-sysvsem <span class="token punctuation">\</span>--enable-sysvshm <span class="token punctuation">\</span>--enable-wddx <span class="token punctuation">\</span>--with-libxml-dir <span class="token punctuation">\</span>--with-xsl <span class="token punctuation">\</span>--enable-zip <span class="token punctuation">\</span>--enable-mysqlnd-compression-support <span class="token punctuation">\</span>--with-pear <span class="token punctuation">\</span>--enable-opcache<span class="token comment"># 08、编译与安装 （此处需要时间，耐心等待）</span><span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3-2. 到这里已经算是安装完成了，查看 php 版本，就会出现熟悉的php 7.2.0 xxxxxx</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看 php 版本</span>/usr/local/php/bin/php <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3-3. 但是这样,我们没有添加环境变量,太麻烦了,接下来把 php 放到环境变量里面</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 01、打开文件</span><span class="token function">vim</span> /etc/profile<span class="token comment"># 02、在 profile 文件最底部加入</span><span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/usr/local/php/bin<span class="token builtin class-name">export</span> <span class="token environment constant">PATH</span><span class="token comment"># 03、让修改立即生效</span><span class="token builtin class-name">source</span> /etc/profile  或者  ./etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3-3. 此时我们查看 PHP 版本 php -v 就行了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将php.ini复制到/etc/下面</span><span class="token function">cp</span> php.ini-production /etc/php.ini<span class="token function">cp</span> /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf<span class="token function">cp</span> /usr/local/php/etc/php-fpm.d/www.conf.default /usr/local/php/etc/php-fpm.d/www.conf<span class="token function">cp</span> sapi/fpm/init.d.php-fpm /etc/init.d/php-fpm<span class="token function">chmod</span> +x /etc/init.d/php-fpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3-4. 启动 php-fpm</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/etc/init.d/php-fpm start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-配置-nginx-，使得-nginx-能够解析-php"><a href="#4-配置-nginx-，使得-nginx-能够解析-php" class="headerlink" title="4. 配置 nginx ，使得 nginx 能够解析 php"></a>4. 配置 nginx ，使得 nginx 能够解析 php</h2><p>4-1. 打开 nginx 配置文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/nginx/conf.d/default.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认配置文件中的内容如下：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"> <span class="token directive"><span class="token keyword">1</span> server</span> <span class="token punctuation">{</span> <span class="token directive"><span class="token keyword">2</span>     listen       <span class="token number">80</span></span><span class="token punctuation">;</span> <span class="token directive"><span class="token keyword">3</span>     server_name  localhost</span><span class="token punctuation">;</span> <span class="token directive"><span class="token keyword">4</span>  <span class="token number">5</span>     <span class="token comment">#charset koi8-r;</span> <span class="token number">6</span>     <span class="token comment">#access_log  /var/log/nginx/host.access.log  main;</span> <span class="token number">7</span>  <span class="token number">8</span>     location /</span> <span class="token punctuation">{</span> <span class="token directive"><span class="token keyword">9</span>         root   /usr/share/nginx/html</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">10</span>         index  index.html index.htm</span><span class="token punctuation">;</span>11     <span class="token punctuation">}</span><span class="token directive"><span class="token keyword">12</span> <span class="token number">13</span>     <span class="token comment">#error_page  404              /404.html;</span><span class="token number">14</span> <span class="token number">15</span>     <span class="token comment"># redirect server error pages to the static page /50x.html</span><span class="token number">16</span>     <span class="token comment">#</span><span class="token number">17</span>     error_page   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html</span><span class="token punctuation">;</span><span class="token directive"><span class="token keyword">18</span>     location = /50x.html</span> <span class="token punctuation">{</span><span class="token directive"><span class="token keyword">19</span>         root   /usr/share/nginx/html</span><span class="token punctuation">;</span>20     <span class="token punctuation">}</span>21 22     <span class="token comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span>23     <span class="token comment">#</span>24     <span class="token comment">#location ~ \.php$ {</span>25     <span class="token comment">#    proxy_pass   http://127.0.0.1;</span>26     <span class="token comment">#}</span>27 28     <span class="token comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span>29     <span class="token comment">#</span>30     <span class="token comment">#location ~ \.php$ {</span>31     <span class="token comment">#    root           html;</span>32     <span class="token comment">#    fastcgi_pass   127.0.0.1:9000;</span>33     <span class="token comment">#    fastcgi_index  index.php;</span>34     <span class="token comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span>35     <span class="token comment">#    include        fastcgi_params;</span>36     <span class="token comment">#}</span>37 38     <span class="token comment"># deny access to .htaccess files, if Apache's document root</span>39     <span class="token comment"># concurs with nginx's one</span>40     <span class="token comment">#</span>41     <span class="token comment">#location ~ /\.ht {</span>42     <span class="token comment">#    deny  all;</span>43     <span class="token comment">#}</span>44 <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4-2. 复制 nginx 默认配置文件 default.conf ，写自定义配置文件 <code>www.drling.xin.conf</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/www.drling.xin.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4-3. 将以下内容写进 <code>www.drling.xin.conf</code> 配置文件中去</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server_name</span>  www.drling.xin</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">root</span>   /usr/share/nginx/html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">index</span> index.php index.html index.htm</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token directive"><span class="token keyword">location</span> ~ \.php$</span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">root</span>           /usr/share/nginx/html</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">fastcgi_pass</span>   127.0.0.1:9000</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">fastcgi_index</span>  index.php</span><span class="token punctuation">;</span>        <span class="token comment">#fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span>        <span class="token directive"><span class="token keyword">fastcgi_param</span>  SCRIPT_FILENAME  <span class="token variable">$document_root</span><span class="token variable">$fastcgi_script_name</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">include</span>        fastcgi_params</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4-4. 查看 nginx 配置写入是否正确</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nginx <span class="token parameter variable">-t</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4-5. 重启 nginx</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl restart nginx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4-6. 在 <code>/usr/share/nginx/html</code> 下面新建一个 index.php 文件，写入以下内容</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?</span><span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4-7. 在浏览器中访问配置文件中 server_name 后写的域名，就可以看到 phpinfo 信息了，我这里是直接在浏览器中访问 <code>www.drling.xin</code></p><p>4-8. 后续</p><p>这里提供 tp5 的 nginx 配置文件写法</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server_name</span>  www.drling.xin</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">access_log</span>    /var/log/nginx/www.drling.xin_access.log</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">error_log</span>    /var/log/nginx/www.drling.xin_error.log</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">root</span>   /var/www/my_cake_test/public</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">index</span> index.php index.html index.htm</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">if</span> (!-e <span class="token variable">$request_filename</span>)</span> <span class="token punctuation">{</span>                <span class="token directive"><span class="token keyword">rewrite</span> ^(.*)$ /index.php?s=<span class="token variable">$1</span> last</span><span class="token punctuation">;</span>                <span class="token directive"><span class="token keyword">break</span></span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token directive"><span class="token keyword">location</span> ~ \.php$</span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">root</span>           /var/www/my_cake_test/public</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">fastcgi_pass</span>   127.0.0.1:9000</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">fastcgi_index</span>  index.php</span><span class="token punctuation">;</span>        <span class="token comment">#fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span>        <span class="token directive"><span class="token keyword">fastcgi_param</span>  SCRIPT_FILENAME  <span class="token variable">$document_root</span><span class="token variable">$fastcgi_script_name</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">include</span>        fastcgi_params</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下为 laravel5.5 的 nginx 配置文件写法</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server_name</span>  sample.drling.xin</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">access_log</span>    /var/log/nginx/sample.drling.xin_access.log</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">error_log</span>    /var/log/nginx/sample.drling.xin_error.log</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">root</span>   /var/www/sample/public</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">index</span> index.php index.html index.htm</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ /index.php?<span class="token variable">$query_string</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>                       <span class="token directive"><span class="token keyword">location</span> ~ \.php$</span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">root</span>           /var/www/sample/public</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">fastcgi_pass</span>   127.0.0.1:9000</span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">fastcgi_index</span>  index.php</span><span class="token punctuation">;</span>        <span class="token comment">#fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span>        <span class="token directive"><span class="token keyword">fastcgi_param</span>  SCRIPT_FILENAME  <span class="token variable">$document_root</span><span class="token variable">$fastcgi_script_name</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">include</span>        fastcgi_params</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CentOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> LNMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 7 搭建宝塔面板并搭建 LNMP 环境</title>
      <link href="posts/199b0f07.html"/>
      <url>posts/199b0f07.html</url>
      
        <content type="html"><![CDATA[<h1 id="CentOS-7-搭建宝塔面板并搭建-LNMP-环境"><a href="#CentOS-7-搭建宝塔面板并搭建-LNMP-环境" class="headerlink" title="CentOS 7 搭建宝塔面板并搭建 LNMP 环境"></a>CentOS 7 搭建宝塔面板并搭建 LNMP 环境</h1><h2 id="本地环境为："><a href="#本地环境为：" class="headerlink" title="本地环境为："></a>本地环境为：</h2><blockquote><p>Linux 系统环境为：CentOS Linux release 7.4.1708 (Core)</p></blockquote><h2 id="常见-Web-面板"><a href="#常见-Web-面板" class="headerlink" title="常见 Web 面板"></a>常见 Web 面板</h2><p>目前市面上流行的面板很多，例如：</p><ul><li><a href="http://amh.sh/">AMH</a></li><li><a href="https://www.appnode.com/">AppNode</a></li><li><a href="https://www.bt.cn/">宝塔</a></li><li><a href="https://www.wdlinux.cn/wdcp/">WDCP</a></li></ul><h2 id="安装前准备"><a href="#安装前准备" class="headerlink" title="安装前准备"></a>安装前准备</h2><ul><li>服务器放行 8888 端口</li><li>内存：512M 以上，推荐 768M 以上（纯面板约占系统 60M 内存）</li><li>硬盘：100M 以上可用硬盘空间（纯面板约占 20M 磁盘空间）</li><li>系统：CentOS 7.1+ (Ubuntu16.04+.、Debian9.0+)，确保是干净的操作系统，没有安装过其它环境带的 Apache/Nginx/php/MySQL（已有环境不可安装）</li></ul><h2 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h2><ul><li>Linux 面板 6.9.2 安装命令：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token function">wget</span> <span class="token operator">&amp;&amp;</span> <span class="token function">wget</span> <span class="token parameter variable">-O</span> install.sh http://download.bt.cn/install/install_6.0.sh <span class="token operator">&amp;&amp;</span> <span class="token function">bash</span> install.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>Linux 面板 6.9.2 升级命令：</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> http://download.bt.cn/install/update6.sh<span class="token operator">|</span><span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-6323d664eb6f8b3c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Do you want to <span class="token function">install</span> Bt-Panel to the /www directory now?<span class="token punctuation">(</span>y/n<span class="token punctuation">)</span>:<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>意为询问你是否现在安装宝塔面板到 /www 目录？请输入 y 继续。</p><p>随后大概需要 2 分钟左右安装，会有一大堆输出，我们不必关注。</p><p>若安装成功，你将会看到如下输出：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Congratulations<span class="token operator">!</span> Installed successfully<span class="token operator">!</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>Bt-Panel: <span class="token punctuation">[</span>管理面板 URL<span class="token punctuation">]</span>username: <span class="token punctuation">[</span>宝塔面板用户名<span class="token punctuation">]</span>password: <span class="token punctuation">[</span>宝塔面板密码<span class="token punctuation">]</span>Warning:If you cannot access the panel,release the following port <span class="token punctuation">(</span><span class="token number">8888</span><span class="token operator">|</span><span class="token number">888</span><span class="token operator">|</span><span class="token number">80</span><span class="token operator">|</span><span class="token number">443</span><span class="token operator">|</span><span class="token number">20</span><span class="token operator">|</span><span class="token number">21</span><span class="token punctuation">)</span> <span class="token keyword">in</span> the security group<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>请务必记住宝塔面板的用户名和面板密码！包括管理面板 url 中 8888 端口后的安全校验码</strong></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-55813fdc1bae8e78.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-975046119cade6ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="如果没有校验码直接带 8888 端口访问后会出现如上提示"></p><p>访问完整面板 URL 之后，输入刚刚记录的账号和密码，会自动跳转到环境搭建面板。</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-8944b65ff6942fe3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>我选择的 LNMP<br><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-1c0393ac5d90113d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="以上是我自己的配置情况"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-3a9bb80ba533e012.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="安装软件时，可以看到 CPU 使用率会飙升，这个是属于正常情况"></p><p>等任务停止后，基本上 LNMP 环境就已经搭建好了，可能会花数分钟。</p><h2 id="感谢："><a href="#感谢：" class="headerlink" title="感谢："></a>感谢：</h2><blockquote><p><a href="https://learnku.com/articles/24917">来源于 laravel 社区《轻松部署宝塔面板》一文</a><br><a href="https://www.bt.cn/bbs/thread-19376-1-1.html">来源于宝塔社区《宝塔 Linux 面板安装教程 - 4月28日更新 - 6.9.2正式版》</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> CentOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打造个性化的 GitHub 主页，让别人看了眼前一亮！</title>
      <link href="posts/bd18a856.html"/>
      <url>posts/bd18a856.html</url>
      
        <content type="html"><![CDATA[<h1 id="打造个性化的-GitHub-主页，让别人看了眼前一亮！"><a href="#打造个性化的-GitHub-主页，让别人看了眼前一亮！" class="headerlink" title="打造个性化的 GitHub 主页，让别人看了眼前一亮！"></a>打造个性化的 GitHub 主页，让别人看了眼前一亮！</h1><blockquote><p>首先可以看一下我的 <a href="https://github.com/pudongping">GitHub 首页</a></p></blockquote><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-e33225263f52d150.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="首页1"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-e938fade8ae7a1c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="首页2"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-3570ccfce03fb0cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="首页3"></p><h2 id="如何构建属于自己个性化的-GitHub-首页？"><a href="#如何构建属于自己个性化的-GitHub-首页？" class="headerlink" title="如何构建属于自己个性化的 GitHub 首页？"></a>如何构建属于自己个性化的 GitHub 首页？</h2><ul><li>先创建一个和自己 GitHub 同用户名的仓库，比如我的 GitHub 账号为 <code>pudongping</code> ，我的 GitHub 地址为：<code>https://github/pudongping</code> 那么我就需要创建一个名为 <code>pudongping</code> 的仓库，如果你填写的是正确的，会出现绿色的提示框，提示你正在创建一个 GitHub profile，如下图所示。</li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-9b4928a3dc53bbd0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="当仓库名称和自己的 GitHub 同名时，会提示这是一个特别的仓库"></p><blockquote><p>需要注意的是：仓库的访问权限一定要设置为 <code>public</code> ，创建仓库的时候，你可以勾选一下 <code>Add a README file</code> 也可以不勾选，然后自己重新创建一个 <code>README.md</code> 文件，如果是勾选了的话，则默认的 <code>README.md</code> 文件中会有如下代码：</p></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">### Hi there 👋 <span class="token comment">&lt;!--**pudongping/pudongping** is a ✨ _special_ ✨ repository because its `README.md` (this file) appears on your GitHub profile.Here are some ideas to get you started:- 🔭 I’m currently working on ...- 🌱 I’m currently learning ...- 👯 I’m looking to collaborate on ...- 🤔 I’m looking for help with ...- 💬 Ask me about ...- 📫 How to reach me: ...- 😄 Pronouns: ...- ⚡ Fun fact: ...--&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-91e84d1a05fa4228.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="仓库名称需要设置成和自己 GitHub 账号同名"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-eb2d92510ffa6cb3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="访问和自己 GitHub 账号同名的仓库时内容"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-e93baf911b63ba8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="默认的 GitHub profile README.md 文件"></p><p>这时候你可以访问一下你自己的 GitHub 首页，就可以看到自己的个性化 <code>GitHub profile</code> 了，就是这么简单 ✌️</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-8da90386857abfe2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="查看自己的 GitHub profile"></p><h2 id="接下来说一说个性化定制，打造更加-炫酷-的-GitHub-profile"><a href="#接下来说一说个性化定制，打造更加-炫酷-的-GitHub-profile" class="headerlink" title="接下来说一说个性化定制，打造更加 炫酷 的 GitHub profile"></a>接下来说一说个性化定制，打造更加 <code>炫酷</code> 的 GitHub profile</h2><h3 id="每周代码统计"><a href="#每周代码统计" class="headerlink" title="每周代码统计"></a>每周代码统计</h3><p>如果你需要统计你每周的代码的话，你可以先去 <a href="https://wakatime.com/">WakaTime</a> 网站，使用 GitHub 授权登录一下，获取 <code>wakatime</code> 的密钥，然后访问 <a href="https://github.com/athul/waka-readme">waka-readme</a>  插件页面，根据说明文档设置一下就可以了。</p><blockquote><p>代码统计需要运行 <code>GitHub Action</code> ，如果你不知道如何使用 <code>GitHub Action</code> ，那么你可以参考一下阮一峰的 <a href="http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">GitHub Actions 入门教程</a> ，这里就需要用到上面获取的 <code>wakatime</code> 的密钥。</p></blockquote><p>展示效果如下：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">Week: 19 June, 2021 - 25 June, 2021Markdown   1 hr 38 mins    ███████████████████▓░░░░░   79.03 % CSS        17 mins         ███▓░░░░░░░░░░░░░░░░░░░░░   14.17 % YAML       7 mins          █▒░░░░░░░░░░░░░░░░░░░░░░░   05.74 % <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以下以截图的形式展示如何使用：<a href="https://wakatime.com/">WakaTime</a></p><p>先去 wakatime 中使用 github 注册一个账号</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-992eeba288611344.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="注册账号"></p><p>直接使用 GitHub 授权登录</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-edc612cf27e4b612.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="直接使用 GitHub 授权登录"></p><p>访问 <a href="https://wakatime.com/settings/account">https://wakatime.com/settings/account</a> 获取 wakatime 的密钥</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-9b34e7147d31b4ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="获取 wakatime 的密钥"></p><p>在 GitHub 中设置刚刚获取到的 wakatime secret，注意密钥的名称设置为 WAKATIME_API_KEY</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-1995498683c19ab5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="设置密钥"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-0659cec75b88f8c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="设置成功如下所示"></p><p>然后在自己的仓库下面创建 <code>.github/workflows/waka-time.yml</code> 文件，填入对应的配置信息，这些配置可以在 <a href="https://github.com/athul/waka-readme">waka-time</a> 仓库中找到示例。</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-e1a749790225578a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="填入配置信息"></p><p>此时，修改好配置信息后，我们将代码推送到 GitHub，然后点击 <code>Action</code> 我们可以看到有工作流，我们可以找到 <code>Waka Readme </code> 这一个工作流程，我们可以点一下 <code>Run workflow</code> 按钮手动执行一下</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-84d0a1130196df10.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="查看一下 GitHub Action"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-7b11660f35badf18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="选中指定的工作流程"></p><p>执行完毕之后，我们可以看到执行日志记录</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-762a711dcb3abda1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="可以查看到执行日志记录"></p><p>此时我们再回到自己的 GitHub 首页，查看代码统计结果，我们可以看到红色框中的内容（此时还没有统计结果，我们可以为我们的代码编辑器下载对应的 <code>wakatime</code> 插件，不知道如何下载插件的话，可以<a href="https://wakatime.com/plugins">点击这里</a>）</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-6a20665d519221fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="查看结果"></p><p><a href="https://wakatime.com/">WakaTime</a> 是一款很有用的代码统计工具，它不仅仅可以统计代码编辑器上面的活动状态，还可以统计其他的软件上面的活动，比如 <code>WPS Office</code> 、<code>Chrome</code> 等等，我这里就统计了 <code>WebStorm</code> 和 <code>PhpStorm</code> 等几个编辑器</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-bd50fe828ce3c2bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="活动统计"></p><h3 id="其他好玩且有用的个性化定制"><a href="#其他好玩且有用的个性化定制" class="headerlink" title="其他好玩且有用的个性化定制"></a>其他好玩且有用的个性化定制</h3><ul><li><a href="https://github.com/anuraghazra/github-readme-stats">展示 GitHub Stats</a></li><li><a href="https://github.com/ashutosh00710/github-readme-activity-graph">展示最近一个月的贡献统计数据</a></li><li><a href="https://shields.io/">徽章制作工具</a></li><li><a href="https://www.dute.org/weird-fonts">怪异英文生成器</a> - 生成比较好看的英文字体，支持复制粘贴</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>如果你喜欢我的 <a href="https://github.com/pudongping/pudongping">GitHub profile</a> 你可以克隆代码之后，自己自定义修改。</li><li>制作不易，很多内容都是我一步一步通过搜索引擎获取到的，比如说徽章的背景色，我都是打开各大官网吸取的背景色。如果你喜欢的话，麻烦给个 Star 哇！</li></ul>]]></content>
      
      
      <categories>
          
          <category> 开源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>samba 实现 windows 和 centos7 文件共享</title>
      <link href="posts/7c9f7082.html"/>
      <url>posts/7c9f7082.html</url>
      
        <content type="html"><![CDATA[<h1 id="samba-实现-windows-和-centos7-文件共享"><a href="#samba-实现-windows-和-centos7-文件共享" class="headerlink" title="samba 实现 windows 和 centos7 文件共享"></a>samba 实现 windows 和 centos7 文件共享</h1><ul><li>安装 samba</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token parameter variable">-y</span> <span class="token function">install</span> samba<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-edbeb855b86ab130.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="安装 samba 服务"></p><ul><li>查看 samba 主配置文件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /etc/samba/smb.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看主配置文件感觉内容太多时，可以执行以下命令过滤掉注释信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 先将主配置文件做一个备份</span><span class="token function">mv</span> /etc/samba/smb.conf /etc/samba/smb.conf.bak<span class="token comment"># 过滤掉以井号 「#」、分号 「;」 、空行，并覆盖主配置文件</span><span class="token function">cat</span> /etc/samba/smb.conf.bak <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token string">"#"</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token string">";"</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token string">"^$"</span> <span class="token operator">&gt;</span> /etc/samba/smb.conf<span class="token comment"># 再次查看主配置文件</span><span class="token function">cat</span> /etc/samba/smb.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-eb2ca8538712d808.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="查看 samba 主配置文件"></p><ul><li>配置共享资源</li></ul><ol><li>创建用于访问共享资源的账户信息</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 先创建一个系统用户 （用户名可以随意写，只要自己记得就好，这里为 sambauser）</span><span class="token comment"># Samba服务程序的数据库要求账户必须在当前系统中已经存在，否则日后创建文件时将导致文件的权限属性混乱不堪，由此引发错误。</span><span class="token function">useradd</span> sambauser<span class="token comment"># 创建 samba 服务程序的用户 （执行以下命令后会提示输入密码，这里的密码用于创建共享时验证，因此需要牢记）</span>pdbedit <span class="token parameter variable">-a</span> <span class="token parameter variable">-u</span> sambauser<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-c69f38676209f8fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建用于共享资源的账户信息"></p><ol start="2"><li>创建用于共享资源的文件目录</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 创建共享资源的文件目录，这里创建的文件名为 smb-share，文件名可以自由创建</span><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /mnt/smb-share<span class="token comment"># 设置文件夹权限</span><span class="token function">chown</span> <span class="token parameter variable">-Rf</span> sambauser:sambauser /mnt/smb-share<span class="token comment"># 设置该目录的 SELinux 安全上下文</span>semanage fcontext <span class="token parameter variable">-a</span> <span class="token parameter variable">-t</span> samba_share_t /mnt/smb-share<span class="token comment"># 执行 restorecon 命令，让应用于目录的新 SELinux 安全上下文立即生效。</span>restorecon <span class="token parameter variable">-Rv</span> /mnt/smb-share<span class="token comment"># 设置 SELinux 服务与策略</span><span class="token comment"># 先筛选出所有与Samba服务程序相关的SELinux域策略</span>getsebool <span class="token parameter variable">-a</span> <span class="token operator">|</span> <span class="token function">grep</span> samba<span class="token comment"># 根据策略的名称（和经验）选择出正确的策略条目进行开启即可：</span><span class="token comment"># eg：如果你的共享目录在家目录 /home 下，那么就需要开启</span>setsebool <span class="token parameter variable">-P</span> samba_enable_home_dirs on<span class="token comment"># 这里我使用的共享目录在 /mnt 目录下，因此暂时不需要设置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-fa8568d3e863ecbc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="创建用于共享资源的文件目录"></p><ol start="3"><li>在 Samba 服务程序的主配置文件中，写共享配置信息</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/samba/smb.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>写入以下内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 共享名称为 smb-share</span><span class="token punctuation">[</span>smb-share<span class="token punctuation">]</span><span class="token comment"># 共享信息</span>comment <span class="token operator">=</span> smb-share<span class="token comment"># 共享目录为 /mnt/smb-share</span>path <span class="token operator">=</span> /mnt/smb-share<span class="token comment"># 关闭“所有人可见”</span>public <span class="token operator">=</span> no<span class="token comment"># 允许写入操作</span>writable <span class="token operator">=</span> <span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-a6be19d4ad79f97c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="写共享配置信息"></p><ol start="4"><li>重启 samba 服务</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 重启 samba 服务</span>systemctl restart smb<span class="token comment"># 将 samba 服务加入到开启启动项中</span>systemctl <span class="token builtin class-name">enable</span> smb<span class="token comment"># 清空 iptables 防火墙</span>iptables <span class="token parameter variable">-F</span><span class="token comment"># 保存 iptables 防火墙设置信息</span><span class="token function">service</span> iptables save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，samba 服务器已经配置完毕</p><ul><li>Windows 挂载共享</li></ul><ol><li>打开 <code>运行</code>，并输入 samba 服务器的 ip 地址</li></ol><pre class="line-numbers language-none"><code class="language-none"># 这里我的虚拟机的 ip 地址为 192.168.127.3，请换成你自己的 samba 服务器的 ip 地址\\192.168.127.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-dd44e0b89a8bf325.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="打开运行，并访问 samba 服务器 ip"></p><ol start="2"><li><p>输入完毕之后，直接点击 <code>确定</code>，就会跳出需要你输入账号和密码，这里的账号需要填写你 samba 服务程序的账号和密码，我这里已经刚刚输入一次了，因此第二次打开的时候，就没有提示要我输入账号和密码。我这里应该输入的账号为：sambauser</p></li><li><p>测试</p></li></ol><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-42493846e7cac55b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="账号和密码通过之后即可看到 centos 上面的共享文件夹"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-e38dea0acf233162.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="windows 中随便写入一个文件"></p><p>进入 <code>/mnt/smb-share</code> 目录查看文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">more</span> /mnt/smb-share/fad.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-e5f789ab12d4f1a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="centos 查看文件"></p><p>还可以将共享文件夹映射为网络驱动器，这样下次就可以直接在 <code>我的电脑</code> 中打开了。<br>映射网络驱动器的方法为，直接对着共享文件夹，右键 =&gt; 映射网络驱动器 =&gt; 直接确定 即可</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-b88434639aae9732.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="映射网络驱动"></p>]]></content>
      
      
      <categories>
          
          <category> CentOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Samba </tag>
            
            <tag> 文件共享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS 配置 yum 仓库</title>
      <link href="posts/139571b4.html"/>
      <url>posts/139571b4.html</url>
      
        <content type="html"><![CDATA[<h1 id="CentOS-配置-yum-仓库"><a href="#CentOS-配置-yum-仓库" class="headerlink" title="CentOS 配置 yum 仓库"></a>CentOS 配置 yum 仓库</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/yum.repos.d/redhat.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>填写以下内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>redhat<span class="token punctuation">]</span><span class="token assign-left variable">name</span><span class="token operator">=</span>redhatyum<span class="token assign-left variable">baseurl</span><span class="token operator">=</span> yum仓库地址<span class="token assign-left variable">enabled</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">gpgcheck</span><span class="token operator">=</span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或者直接执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum-config-manager --add-repo<span class="token operator">=</span><span class="token string">"yum仓库地址"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>阿里源</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 也可以直接访问阿里源地址，下载 Centos-7.repo 文件，然后放到 /etc/yum.repos.d 目录中</span>http://mirrors.aliyun.com/repo/Centos-7.repo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>配置完之后需要执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 清除所有缓存</span>yum clean all<span class="token comment"># 建立缓存</span>yum makecache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CentOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos 7 开放及查看端口</title>
      <link href="posts/32500f0d.html"/>
      <url>posts/32500f0d.html</url>
      
        <content type="html"><![CDATA[<h1 id="Centos-7-开放及查看端口"><a href="#Centos-7-开放及查看端口" class="headerlink" title="Centos 7 开放及查看端口"></a>Centos 7 开放及查看端口</h1><ul><li>开放 5200 tcp 端口</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --add-port<span class="token operator">=</span><span class="token number">5200</span>/tcp <span class="token parameter variable">--permanent</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>关闭 5200 tcp 端口</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --remove-port<span class="token operator">=</span><span class="token number">5200</span>/tcp <span class="token parameter variable">--permanent</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>配置立即生效</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd <span class="token parameter variable">--reload</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>查看防火墙所有开放的端口</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd <span class="token parameter variable">--zone</span><span class="token operator">=</span>public --list-ports<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>关闭防火墙（慎重）</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl stop firewalld.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>查看防火墙状态</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">firewall-cmd <span class="token parameter variable">--state</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>查看所有的端口监听情况</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">netstat</span> <span class="token parameter variable">-lnpt</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CentOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MacOS 安装 homebrew</title>
      <link href="posts/6fa24dc0.html"/>
      <url>posts/6fa24dc0.html</url>
      
        <content type="html"><![CDATA[<h1 id="MacOS-安装-homebrew"><a href="#MacOS-安装-homebrew" class="headerlink" title="MacOS 安装 homebrew"></a>MacOS 安装 homebrew</h1><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>brew update</td><td>更新 Homebrew 自身</td></tr><tr><td>brew outdated</td><td>查看哪些安装包需要更新</td></tr><tr><td>brew upgrade</td><td>更新所有的包</td></tr><tr><td>brew upgrade $FORMULA</td><td>更新指定的包</td></tr><tr><td>brew cleanup</td><td>清理所有包的旧版本</td></tr><tr><td>brew cleanup $FORMULA</td><td>清理指定包的旧版本</td></tr><tr><td>brew cleanup -n</td><td>查看可清理的旧版本包，不执行实际操作</td></tr><tr><td>brew pin $FORMULA</td><td>锁定某个包</td></tr><tr><td>brew unpin $FORMULA</td><td>取消锁定</td></tr><tr><td>brew info $FORMULA</td><td>显示某个包的信息</td></tr><tr><td>brew info</td><td>显示安装了包数量，文件数量，和总占用空间</td></tr><tr><td>brew deps –installed –tree</td><td>查看已安装的包的依赖，树形显示</td></tr><tr><td>brew list</td><td>列出已安装的包</td></tr><tr><td>brew rm $FORMULA</td><td>删除某个包</td></tr><tr><td>brew uninstall –force $FORMULA</td><td>删除所有版本</td></tr></tbody></table><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><blockquote><p><a href="https://brew.sh/">Homebrew 官网地址</a><br><a href="https://github.com/homebrew/install#uninstall-homebrew">Homebrew GitHub 地址</a><br><a href="https://github.com/Homebrew/brew/releases/tag/2.7.3">官网源码下载</a><br><a href="https://github.com/homebrew/install#uninstall-homebrew">官网 GitHub 地址</a><br><a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/">清华大学开源软件镜像站 - 安装 homebrew</a><br><a href="https://www.jianshu.com/p/5822d24a651e">使用国内镜像安装 homebrew</a>  </p></blockquote><blockquote><p>如果使用官网推荐的方式下载时提示以下错误信息时，则表示网络超时，建议直接使用源码包的形式安装</p></blockquote><p>错误信息如下所示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">curl: <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> Failed to connect to raw.githubusercontent.com port <span class="token number">443</span>: Connection refused<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="直接使用包安装"><a href="#直接使用包安装" class="headerlink" title="直接使用包安装"></a>直接使用包安装</h2><ol><li>进入 <a href="https://github.com/Homebrew/brew/tags">Homebrew 的 GitHub 仓库 tag 地址</a> 下载最新的 tag</li><li>根据系统选择下载：mac、windows 可以下载 zip 文件， linux 可以下载 tar.gz 的文件。</li><li>下载后解压。</li><li>进入本地 <code>Homebrew</code> 的存放路径，如果找不到的话，可以直接在 <code>terminal</code> 下输入以下命令</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入  usr/local 目录</span><span class="token builtin class-name">cd</span> /usr/local<span class="token comment"># 使用访达(finder) 打开当前目录</span><span class="token function">open</span> <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>查看 <code>/usr/local</code> 目录下是否有 <code>Homebrew</code> 文件夹（注意大小写），如果你发现没有 <code>Homebrew</code> 文件夹，则执行以下命令创建 <code>Homebrew</code> 文件夹</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> /user/local/Homebrew<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="6"><li><p>将第三步中解压后的内容全部复制到 <code>/usr/local/Homebrew</code> 目录</p></li><li><p>重启命令行窗口，输入 <code>brew</code> 命令，出现 brew 相关的 help 页面，即表示已经安装成功</p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /user/local/Homebrew <span class="token operator">&amp;&amp;</span> brew<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>敲击 <code>brew</code> 命令时，出现以下内容时，表示已经安装 Homebrew 成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Example usage:  brew search <span class="token punctuation">[</span>TEXT<span class="token operator">|</span>/REGEX/<span class="token punctuation">]</span>  brew info <span class="token punctuation">[</span>FORMULA<span class="token punctuation">..</span>.<span class="token punctuation">]</span>  brew <span class="token function">install</span> FORMULA<span class="token punctuation">..</span>.  brew update  brew upgrade <span class="token punctuation">[</span>FORMULA<span class="token punctuation">..</span>.<span class="token punctuation">]</span>  brew uninstall FORMULA<span class="token punctuation">..</span>.  brew list <span class="token punctuation">[</span>FORMULA<span class="token punctuation">..</span>.<span class="token punctuation">]</span>Troubleshooting:  brew config  brew doctor  brew <span class="token function">install</span> <span class="token parameter variable">--verbose</span> <span class="token parameter variable">--debug</span> FORMULAContributing:  brew create <span class="token punctuation">[</span>URL <span class="token punctuation">[</span>--no-fetch<span class="token punctuation">]</span><span class="token punctuation">]</span>  brew edit <span class="token punctuation">[</span>FORMULA<span class="token punctuation">..</span>.<span class="token punctuation">]</span>Further help:  brew commands  brew <span class="token builtin class-name">help</span> <span class="token punctuation">[</span>COMMAND<span class="token punctuation">]</span>  <span class="token function">man</span> brew  https://docs.brew.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="8"><li>安装完成后，一定要下载一个软件测试下，比如下载 <code>wget</code></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token function">wget</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="9"><li>更换 brew 的下载源</li></ol><ul><li><p><a href="http://mirrors.ustc.edu.cn/help/brew.git.html">Homebrew 源</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 替换 USTC 镜像</span><span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--repo</span><span class="token variable">)</span></span>"</span><span class="token function">git</span> remote set-url origin https://mirrors.ustc.edu.cn/brew.git<span class="token comment"># 重置为官方地址</span><span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--repo</span><span class="token variable">)</span></span>"</span><span class="token function">git</span> remote set-url origin https://github.com/Homebrew/brew.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><a href="http://mirrors.ustc.edu.cn/help/homebrew-bottles.html">Homebrew Bottles 源</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 请在运行 brew 前设置环境变量 HOMEBREW_BOTTLE_DOMAIN ，值为 https://mirrors.ustc.edu.cn/homebrew-bottles</span><span class="token comment"># 对于 bash 用户</span><span class="token builtin class-name">echo</span> <span class="token string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles'</span> <span class="token operator">&gt;&gt;</span> ~/.bash_profile<span class="token builtin class-name">source</span> ~/.bash_profile<span class="token comment"># 对于 zsh 用户</span><span class="token builtin class-name">echo</span> <span class="token string">'export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles'</span> <span class="token operator">&gt;&gt;</span> ~/.zshrc<span class="token builtin class-name">source</span> ~/.zshrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><a href="http://mirrors.ustc.edu.cn/help/homebrew-core.git.html">Homebrew Core 源</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 替换 USTC 镜像</span><span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--repo</span><span class="token variable">)</span></span>/Library/Taps/homebrew/homebrew-core"</span><span class="token function">git</span> remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git<span class="token comment"># 重置为官方地址</span><span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--repo</span><span class="token variable">)</span></span>/Library/Taps/homebrew/homebrew-core"</span><span class="token function">git</span> remote set-url origin https://github.com/Homebrew/homebrew-core<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><a href="http://mirrors.ustc.edu.cn/help/homebrew-cask.git.html">Homebrew Cask 源</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 替换为 USTC 镜像</span><span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--repo</span><span class="token variable">)</span></span>"</span>/Library/Taps/homebrew/homebrew-cask<span class="token function">git</span> remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git<span class="token comment"># 重置为官方地址</span><span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--repo</span><span class="token variable">)</span></span>"</span>/Library/Taps/homebrew/homebrew-cask<span class="token function">git</span> remote set-url origin https://github.com/Homebrew/homebrew-cask<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><a href="http://mirrors.ustc.edu.cn/help/homebrew-cask-versions.git.html">Homebrew Cask Versions 源</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 替换为 USTC 镜像</span><span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--repo</span><span class="token variable">)</span></span>"</span>/Library/Taps/homebrew/homebrew-cask-versions<span class="token function">git</span> remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask-versions.git<span class="token comment"># 重置为官方地址</span><span class="token builtin class-name">cd</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>brew <span class="token parameter variable">--repo</span><span class="token variable">)</span></span>"</span>/Library/Taps/homebrew/homebrew-cask-versions<span class="token function">git</span> remote set-url origin https://github.com/Homebrew/homebrew-cask-versions.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> macOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macOS </tag>
            
            <tag> homebrew </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 管理远程会话 screen</title>
      <link href="posts/4fadf1be.html"/>
      <url>posts/4fadf1be.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-管理远程会话-screen"><a href="#Linux-管理远程会话-screen" class="headerlink" title="Linux 管理远程会话 screen"></a>Linux 管理远程会话 screen</h1><ol><li>创建一个新的会话窗口 backup</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">screen</span> <span class="token parameter variable">-S</span> backup<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>查看会话会出现 session_id</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">screen</span> <span class="token parameter variable">-ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>退出会话</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>直接使用 screen 命令执行要运行的命令，这样在命令中的一切操作也都会被记录下来，当命令执行结束后 screen 会话也会自动结束。</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">screen</span> <span class="token function">vim</span> memo.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>会话共享功能</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 终端 A：创建会话</span><span class="token function">screen</span> <span class="token parameter variable">-S</span> backup<span class="token comment"># 终端 B：同步终端信息</span><span class="token function">screen</span> <span class="token parameter variable">-x</span><span class="token comment"># 或者通过 screen-session-id 进入</span><span class="token function">screen</span> <span class="token parameter variable">-x</span> <span class="token operator">&lt;</span>screen-session-id<span class="token operator">&gt;</span><span class="token comment"># 比如</span><span class="token function">screen</span> <span class="token parameter variable">-x</span> <span class="token number">364490</span>.backup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>进入会话</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">screen</span> <span class="token parameter variable">-r</span> backup<span class="token comment"># 有时候screen异常退出可能会提示状态为Attached，可以执行：screen -D -r backup 进行恢复。</span><span class="token function">screen</span> <span class="token parameter variable">-D</span> <span class="token parameter variable">-r</span> <span class="token operator">&lt;</span>screen-name or screen-session-id<span class="token operator">&gt;</span><span class="token comment"># 比如</span><span class="token function">screen</span> <span class="token parameter variable">-D</span> <span class="token parameter variable">-r</span> backup<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Screen </tag>
            
            <tag> 会话管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Supervisor 进程管理工具使用</title>
      <link href="posts/21919295.html"/>
      <url>posts/21919295.html</url>
      
        <content type="html"><![CDATA[<h1 id="Supervisor-进程管理工具使用"><a href="#Supervisor-进程管理工具使用" class="headerlink" title="Supervisor 进程管理工具使用"></a>Supervisor 进程管理工具使用</h1><ul><li><a href="https://pypi.org/project/supervisor/">pypi 插件链接地址</a></li><li><a href="http://supervisord.org/">官方文档地址</a></li><li><a href="https://www.jianshu.com/p/3658c963d28b">supervisor 从安装到使用</a></li></ul><blockquote><p>php artisan horizon 和 php artisan queue:work 命令一样，都可以正常处理异步任务<br>php artisan horizon:terminate =&gt; Horizon 进程会等待当前正在执行的任务执行完毕，然后再退出进程。</p></blockquote><h2 id="在阿里云-CentOS-7-6-上"><a href="#在阿里云-CentOS-7-6-上" class="headerlink" title="在阿里云 CentOS 7.6 上"></a>在阿里云 CentOS 7.6 上</h2><ul><li>安装 supervisor</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> <span class="token parameter variable">-y</span> supervisor<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看主配置信息 <code>supervisord.conf</code> 留意 <code>include</code> 选项</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /etc/supervisord.conf<span class="token comment"># 这里决定了你所需要写的进程配置文件格式，这里是 ini ，因此我们也必须写成 ini 后缀的文件</span><span class="token punctuation">[</span>include<span class="token punctuation">]</span>files <span class="token operator">=</span> supervisord.d/*.ini<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>添加自定义进程配置信息</li></ul><p>vim /etc/supervisord.d/larablog.ini</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>program:larablog-horizon<span class="token punctuation">]</span><span class="token assign-left variable">process_name</span><span class="token operator">=</span>%<span class="token punctuation">(</span>program_name<span class="token punctuation">)</span>s<span class="token assign-left variable">command</span><span class="token operator">=</span>php /www/wwwroot/larablog/artisan horizon<span class="token assign-left variable">autostart</span><span class="token operator">=</span>true<span class="token assign-left variable">autorestart</span><span class="token operator">=</span>true<span class="token assign-left variable">user</span><span class="token operator">=</span>www<span class="token assign-left variable">redirect_stderr</span><span class="token operator">=</span>true<span class="token assign-left variable">stdout_logfile</span><span class="token operator">=</span>/www/wwwroot/larablog/storage/logs/worker.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>program:larablog-horizon 代表这个配置的名称是 larablog-horizon；</p></li><li><p>process_name= 代表这个进程在 Supervisor 内部的命名；</p></li><li><p>command= 代表要执行的命令；</p></li><li><p>autostart=true 代表这个进程跟随 Supervisor，只要 Supervisor 启动了，就启动这个进程；</p></li><li><p>autorestart=true 代表要求 Supervisor 监听进程状态，假如异常退出就再次启动，重启次数默认有 3 次限制；</p></li><li><p>user=www 代表以 www 身份启动进程；</p></li><li><p>redirect_stderr=true 代表输出错误信息；</p></li><li><p>stdout_logfile= 代表将进程的输出保存到日志文件中。</p></li><li><p>更新配置</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> supervisorctl update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果遇到报错 <code>error: &lt;class 'socket.error'&gt;, [Errno 2] No such file or directory: file: /usr/lib64/python2.7/socket.py line: 224</code> 则执行以下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> supervisord <span class="token parameter variable">-c</span> /etc/supervisord.conf<span class="token comment"># 再次尝试执行重载配置命令</span><span class="token function">sudo</span> supervisorctl update<span class="token function">sudo</span> supervisorctl <span class="token parameter variable">-c</span> /etc/supervisord.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查看进程状态</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> supervisorctl status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="在-ubuntu-上"><a href="#在-ubuntu-上" class="headerlink" title="在 ubuntu 上"></a>在 ubuntu 上</h2><ul><li>安装 supervisor</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> supervisor<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>添加自定义进程配置信息</li></ul><p>vim /etc/supervisor/conf.d/larablog.conf</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>program:larablog-horizon<span class="token punctuation">]</span><span class="token assign-left variable">process_name</span><span class="token operator">=</span>%<span class="token punctuation">(</span>program_name<span class="token punctuation">)</span>s<span class="token assign-left variable">command</span><span class="token operator">=</span>php /www/wwwroot/larablog/artisan horizon<span class="token assign-left variable">autostart</span><span class="token operator">=</span>true<span class="token assign-left variable">autorestart</span><span class="token operator">=</span>true<span class="token assign-left variable">user</span><span class="token operator">=</span>www<span class="token assign-left variable">redirect_stderr</span><span class="token operator">=</span>true<span class="token assign-left variable">stdout_logfile</span><span class="token operator">=</span>/www/wwwroot/larablog/storage/logs/worker.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>更新配置</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> supervisorctl update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>检查是否正常运行</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> supervisorctl status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>单独启动一个指定名称的进程</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> supervisorctl start <span class="token operator">&lt;</span>process-name<span class="token operator">&gt;</span><span class="token comment"># 比如启动名称为 larablog-horizon 的进程</span><span class="token function">sudo</span> supervisorctl start larablog-horizon<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Supervisor </tag>
            
            <tag> 进程管理工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vmware 安装 macos 原版系统</title>
      <link href="posts/17b85fe6.html"/>
      <url>posts/17b85fe6.html</url>
      
        <content type="html"><![CDATA[<h1 id="VMware-WorkStation-安装-macOS-原版系统"><a href="#VMware-WorkStation-安装-macOS-原版系统" class="headerlink" title="VMware WorkStation 安装 macOS 原版系统"></a>VMware WorkStation 安装 macOS 原版系统</h1><h2 id="文献参考"><a href="#文献参考" class="headerlink" title="文献参考"></a>文献参考</h2><ul><li><a href="https://www.bilibili.com/video/BV1a7411e7Pq">手把手教你win 10 VMware 15 安装 MAC OS 10.15原版系统</a></li><li><a href="https://github.com/paolo-projects/unlocker/releases">VMware 解锁器</a></li><li><a href="https://updates.cdn-apple.com/2020/macos/001-48329-20200924-122a4260-eb65-4492-b08e-f69dfa22c2dc/SecUpd2020-005Mojave.dmg">官方系统下载</a></li><li><a href="https://www.mediafire.com/file/7wm2251an4c2n64/macOS_Catalina_ISO_By_Techbland.iso/file">镜像下载地址</a></li><li><a href="https://www.applex.net/pages/macos/">提供各版本的苹果电脑macOS系统镜像下载 ，支持百度网盘/独立服务器/迅雷地址下载</a></li></ul><h2 id="安装前必须要准备的软件"><a href="#安装前必须要准备的软件" class="headerlink" title="安装前必须要准备的软件"></a>安装前必须要准备的软件</h2><ul><li>VMware workstation 虚拟机</li><li>VMware 解锁器</li><li>macOS 懒人包系统 （ .cdr 文件）</li></ul><p>以上软件可以通过访问我的百度网盘获取，需要注意的是，下载下来的 <code>.cdr</code> 懒人包系统，最好要通过 <code>md5</code> 校验。</p><p>以下为网盘链接</p><pre class="line-numbers language-none"><code class="language-none">链接：https://pan.baidu.com/s/1NMHD6i8FIgYaqcPVljbl8w 提取码：jcr3 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>Windows 系统下可以执行以下命令来核对 md5</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">certutil <span class="token parameter variable">-hashfile</span> <span class="token string">"cdr文件的绝对路径"</span> md5<span class="token comment"># 比如</span>certutil <span class="token parameter variable">-hashfile</span> <span class="token string">"F:\Vmware Installer macOS Mojave(18G103).cdr"</span> md5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装步骤如下"><a href="#安装步骤如下" class="headerlink" title="安装步骤如下"></a>安装步骤如下</h2><ul><li>下载 VMware 解锁器 <code>unlocker.zip</code> 并解压，并切记一定要关闭掉 VMware 的所有进程，如果不知道如何关闭掉 VMware 的所有进程，可以考虑直接关机重启，然后再进行以下操作</li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-5d55ecd7da49b4f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="解压 VMware 解锁器"></p><ul><li>对着解压后的 <code>win-install.cmd</code> 文件，右键 - 以管理员身份运行。</li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-c1094950a7bcb3ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="右键 - 以管理员身份运行"></p><ul><li>此时解锁器会自动下载相应的文件，不用去理会</li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-b55be1c48fe20e9b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="解锁器正在下载相应的解锁文件"></p><ul><li>字条走完之后会自动关闭掉 <code>cmd</code> 命令窗口</li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-1469e628bb22865d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="解锁器软件安装完毕后，会自动关闭掉 cmd 窗口"></p><ul><li>接下来我们来验证解锁器是否安装好，打开 VMware 虚拟机，尝试新建一台虚拟机</li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-dc120ff66ee2143f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li>选择稍后安装系统</li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-3bdecc977abad802.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li>选择 <code>Apple Mac OS</code> 相应的选项，此时我们可以看到能够选择相应的系统版本，此时需要注意的是 <strong>安装什么版本的系统，就要选择相应的版本，否则安装系统时，页面会直接卡死</strong></li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-c0383da1fac1d780.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li><p>此时我们能够确定解锁器已经安装好了，如果此时无法看到 <code>macOS</code> 系统相关的选项，那么就需要自己反复多次的安装解锁器，直到能够看到 <code>macOS</code> 系统相关的选项才算成功！此时，正式开启安装 <code>macOS</code> 系统之旅！</p></li><li><p>以下步骤没有太多需要说的，按照截图一步一步的来操作就好了。</p></li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-0d5e6bb7fcbf5693.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-bdf66cfcb46d334f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-470f7e95996b8e95.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li>这里需要注意的是，我们采用的系统是 <code>.cdr</code> 格式的懒人包，我们需要选择 <code>所有文件</code> 才可以看到 <code>.cdr</code> 文件。</li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-82cc62377031414c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-76561873201b4868.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-a999d47eac24da6f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li>我这里解锁之后最高只能达到 <code>10.14</code> 的版本，因此最后只能安装 <code>macOS 10.14</code> 的系统，但是操作步骤是一样的，虽然我也不知道为什么我这里最高只能是 <code>10.14</code> 的版本，如果你知道，欢迎给我留言分享一下。但是一定要切记，在这里你选择的是什么版本，你就必须得安装什么版本的系统，否则无法安装的。</li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-5db13a5dddd5913e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li>你也可以自己选择安装路径，这个没有多大影响的。</li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-32a39bb01028420a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-57a02042db810fe1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-63269f2bf437b483.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-bd5063e66c347b8b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-27ab34b1c5910913.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-4e4c3d84cd2d81d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-fcd64dfa495db579.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-8dec6384e39c5f0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-f6c011453fa32db5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li>这里的我们需要选择 <code>磁盘工具</code> 先将磁盘抹掉一下</li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-18c19147c0287b0f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li>一定要注意，只能选择刚刚我们分配给 VMware 的那块盘，其他的不要去动</li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-d6502e6942507cf8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-a56f6d65c8af8e66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li>也可以直接修改硬盘的名称</li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-29182a6ba51f3d14.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-0bb2fe22c24127fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-dc6da02e40630c46.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li>接下来就可以正式安装系统了</li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-6b4f9b0dc8dd5f59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-20a8500578e77a4f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-4a5e4d2f6f873237.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-ebf3a3aa95ad9e23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-10f3e63d7698153b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-6a29ad902ca42f85.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-858e85800375aa9d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-4f7d8621579f1e35.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-6d1be7fab284223e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-d91052596f1f6a5a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li>安装到这里之后，我们需要到物理机上面设置一下网络，这样才能够保证虚拟机能够访问网络</li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-89c913b1a93e35d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-c76b0e8d339fa9b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-5a6b3cfa2e4b5ac4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-58f85f0769d2d806.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-bb7e63edd1ea925b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-f0e5481918b08eae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-b8cbaab5b48a8f5d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-638a71f2bb30082f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-5dc33873f724a835.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-0e2db0987876efb6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-537f2118a2179f0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-0c519f187338c657.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-47342c1c550ac55e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-cc5277d7cdcd2443.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-d28b63af01954e7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li>此时我们在 VMware 中就已经将 macOS 系统安装完毕了。此时我们弹出一下我们的系统镜像</li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-b9b6a3d9fc18f1d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li>继续安装 VMware tools ，这样能够自动适配我们物理机的分辨率</li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-cc8ae8f39937e312.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-22bf2dda46ea0caf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-33acc9ad3a16c8cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-faf3da4dd22cb119.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-20f5ee8ff0c04453.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-0e0e12068dce26c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>按照以上的截图一步一步操作，我相信问题应该不会很大的。</p>]]></content>
      
      
      <categories>
          
          <category> macOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macOS </tag>
            
            <tag> 虚拟机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx/Tengine 服务器安装 SSL 证书</title>
      <link href="posts/2078b83a.html"/>
      <url>posts/2078b83a.html</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx-Tengine-服务器安装-SSL-证书"><a href="#Nginx-Tengine-服务器安装-SSL-证书" class="headerlink" title="Nginx/Tengine 服务器安装 SSL 证书"></a>Nginx/Tengine 服务器安装 SSL 证书</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><blockquote><p>使用阿里云下载免费版 DigiCert Inc 证书，并基于 Nginx web 服务器安装 SSL 证书</p></blockquote><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>在证书控制台下载 Nginx 版本证书。下载到本地的压缩文件包解压后包含：</p><ul><li><code>.crt</code> 文件：是证书文件，crt 是 pem 文件的扩展名。</li><li><code>.key</code> 文件：证书的私钥文件（申请证书时如果没有选择<code>自动创建 CSR</code>，则没有该文件）。</li></ul><p><code>友情提示：</code>  <code>.pem</code> 扩展名的证书文件采用 Base64-encoded 的 PEM 格式<code>文本文件</code>，可根据需要修改扩展名。</p><p>以 Nginx 标准配置为例，假如证书文件名是 a.pem，私钥文件是 a.key。</p><p>在 Nginx 的安装目录下创建 cert 目录，并且将下载的全部文件拷贝到 cert 目录中。如果申请证书时是自己创建的 CSR 文件，请将对应的私钥文件放到 cert 目录下并且命名为 a.key；</p><p>打开 Nginx 安装目录下 conf 目录中的 nginx.conf 文件，找到：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token comment"># HTTPS server</span><span class="token comment"># #server {</span><span class="token comment"># listen 443;</span><span class="token comment"># server_name localhost;</span><span class="token comment"># ssl on;</span><span class="token comment"># ssl_certificate cert.pem;</span><span class="token comment"># ssl_certificate_key cert.key;</span><span class="token comment"># ssl_session_timeout 5m;</span><span class="token comment"># ssl_protocols SSLv2 SSLv3 TLSv1;</span><span class="token comment"># ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;</span><span class="token comment"># ssl_prefer_server_ciphers on;</span><span class="token comment"># location / {</span><span class="token comment">#</span><span class="token comment">#</span><span class="token comment">#}</span><span class="token comment">#}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将其修改为 (以下属性中 ssl 开头的属性与证书配置有直接关系，其它属性请结合自己的实际情况复制或调整) :</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span> <span class="token directive"><span class="token keyword">listen</span> <span class="token number">443</span></span><span class="token punctuation">;</span> <span class="token comment"># 在使用宝塔面板搭建的 LNMP 环境中，推荐 `listen 443 ssl http2;` 这么写</span> <span class="token directive"><span class="token keyword">server_name</span> localhost</span><span class="token punctuation">;</span> <span class="token directive"><span class="token keyword">ssl</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span> <span class="token directive"><span class="token keyword">root</span> html</span><span class="token punctuation">;</span> <span class="token directive"><span class="token keyword">index</span> index.html index.htm</span><span class="token punctuation">;</span> <span class="token directive"><span class="token keyword">ssl_certificate</span>   cert/a.pem</span><span class="token punctuation">;</span> <span class="token comment"># 这里推荐写绝对路径</span> <span class="token directive"><span class="token keyword">ssl_certificate_key</span>  cert/a.key</span><span class="token punctuation">;</span> <span class="token comment"># 这里推荐写绝对路径</span> <span class="token directive"><span class="token keyword">ssl_session_timeout</span> <span class="token number">5m</span></span><span class="token punctuation">;</span> <span class="token directive"><span class="token keyword">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4</span><span class="token punctuation">;</span> <span class="token directive"><span class="token keyword">ssl_protocols</span> TLSv1 TLSv1.1 TLSv1.2</span><span class="token punctuation">;</span> <span class="token directive"><span class="token keyword">ssl_prefer_server_ciphers</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span> <span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">{</span>     <span class="token directive"><span class="token keyword">root</span> html</span><span class="token punctuation">;</span>     <span class="token directive"><span class="token keyword">index</span> index.html index.htm</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自己使用宝塔面板-6-9-8-免费版，搭建-LNMP-环境时的-nginx-配置文件"><a href="#自己使用宝塔面板-6-9-8-免费版，搭建-LNMP-环境时的-nginx-配置文件" class="headerlink" title="自己使用宝塔面板 6.9.8 免费版，搭建 LNMP 环境时的 nginx 配置文件"></a>自己使用宝塔面板 6.9.8 免费版，搭建 LNMP 环境时的 nginx 配置文件</h2><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span><span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>         <span class="token comment"># 宝塔中建议这么写监听 443 端口</span><span class="token directive"><span class="token keyword">listen</span> <span class="token number">443</span> ssl http2</span><span class="token punctuation">;</span>      <span class="token directive"><span class="token keyword">server_name</span> www.drling.xin</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">index</span> index.php index.html index.htm default.php default.htm default.html</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">root</span> /www/wwwroot/larablog/public</span><span class="token punctuation">;</span>            <span class="token comment"># 强制开启 https ，当访问 http 时，直接强制跳转到 https</span>    <span class="token comment">#HTTP_TO_HTTPS_START</span>    <span class="token directive"><span class="token keyword">if</span> (<span class="token variable">$server_port</span> !~ 443)</span><span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">rewrite</span> ^(/.*)$ https://<span class="token variable">$host</span><span class="token variable">$1</span> permanent</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">#HTTP_TO_HTTPS_END</span>    <span class="token directive"><span class="token keyword">limit_conn</span> perserver <span class="token number">3000</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">limit_conn</span> perip <span class="token number">25</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">limit_rate</span> <span class="token number">512k</span></span><span class="token punctuation">;</span>            <span class="token comment"># 这里直接采用宝塔面板，将 ssl 信息通过 [其他证书] 栏，导入进去，因此 nginx 配置文件由宝塔面板自行写入。</span>    <span class="token comment"># 若需要自己写入配置文件，以下参数可以这样写，如下：</span>    <span class="token comment"># ssl_certificate    /www/server/panel/vhost/aliyun-ssl/1939426_drling.xin.pem;</span>    <span class="token comment"># ssl_certificate_key    /www/server/panel/vhost/aliyun-ssl/1939426_drling.xin.key;    </span>        <span class="token comment">#SSL-START SSL相关配置，请勿删除或修改下一行带注释的404规则</span>    <span class="token comment">#error_page 404/404.html;    </span>    <span class="token directive"><span class="token keyword">ssl_certificate</span>    /www/server/panel/vhost/cert/www.drling.xin/fullchain.pem</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">ssl_certificate_key</span>    /www/server/panel/vhost/cert/www.drling.xin/privkey.pem</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">ssl_protocols</span> TLSv1 TLSv1.1 TLSv1.2 TLSv1.3</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">ssl_prefer_server_ciphers</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">ssl_session_cache</span> shared:SSL:10m</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">ssl_session_timeout</span> <span class="token number">10m</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">497</span>  https://<span class="token variable">$host</span><span class="token variable">$request_uri</span></span><span class="token punctuation">;</span>    <span class="token comment">#SSL-END</span>            <span class="token comment">#ERROR-PAGE-START  错误页配置，可以注释、删除或修改</span>    <span class="token comment">#error_page 404 /404.html;</span>    <span class="token comment">#error_page 502 /502.html;</span>    <span class="token comment">#ERROR-PAGE-END</span>        <span class="token comment">#PHP-INFO-START  PHP引用配置，可以注释或修改</span>    <span class="token directive"><span class="token keyword">include</span> enable-php-73.conf</span><span class="token punctuation">;</span>    <span class="token comment">#PHP-INFO-END</span>        <span class="token comment">#REWRITE-START URL重写规则引用,修改后将导致面板设置的伪静态规则失效</span>    <span class="token directive"><span class="token keyword">include</span> /www/server/panel/vhost/rewrite/www.drling.xin.conf</span><span class="token punctuation">;</span>    <span class="token comment">#REWRITE-END</span>        <span class="token comment">#禁止访问的文件或目录</span>    <span class="token directive"><span class="token keyword">location</span> ~ ^/(\.user.ini|\.htaccess|\.git|\.svn|\.project|LICENSE|README.md)</span>    <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">return</span> <span class="token number">404</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">#一键申请SSL证书验证目录相关设置</span>    <span class="token directive"><span class="token keyword">location</span> ~ \.well-known</span><span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">allow</span> all</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token directive"><span class="token keyword">location</span> ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$</span>    <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">expires</span>      <span class="token number">30d</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">error_log</span> <span class="token boolean">off</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">access_log</span> /dev/null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token directive"><span class="token keyword">location</span> ~ .*\.(js|css)?$</span>    <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">expires</span>      <span class="token number">12h</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">error_log</span> <span class="token boolean">off</span></span><span class="token punctuation">;</span>        <span class="token directive"><span class="token keyword">access_log</span> /dev/null</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token directive"><span class="token keyword">access_log</span>  /www/wwwlogs/www.drling.xin.log</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">error_log</span>  /www/wwwlogs/www.drling.xin.error.log</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>安装完毕之后你可以使用<a href="https://www.ssllabs.com/ssltest/index.html">SSL Server Test – 安全测试工具</a> 去测试下你的 HTTPS 是否够安全</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><blockquote><p><a href="https://help.aliyun.com/knowledge_detail/95491.html">阿里云官方介绍 Nginx 服务器安装 SSL 证书</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Linux </tag>
            
            <tag> 免费 HTTPS 证书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过 Certbot 安装 Let&#39;s Encrypt 证书，实现免费的全站 HTTPS 访问</title>
      <link href="posts/6c6ec7d4.html"/>
      <url>posts/6c6ec7d4.html</url>
      
        <content type="html"><![CDATA[<h1 id="通过-Certbot-安装-Let’s-Encrypt-证书，实现免费的全站-HTTPS-访问"><a href="#通过-Certbot-安装-Let’s-Encrypt-证书，实现免费的全站-HTTPS-访问" class="headerlink" title="通过 Certbot 安装 Let’s Encrypt 证书，实现免费的全站 HTTPS 访问"></a>通过 Certbot 安装 Let’s Encrypt 证书，实现免费的全站 HTTPS 访问</h1><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><blockquote><p><a href="https://xueyuanjun.com/post/9695">通过 Certbot 安装 Let’s Encrypt 证书，来实现全站的 HTTPS 访问</a></p><p><a href="https://xueyuanjun.com/post/9755">学院军 - 将博客应用从 HTTP 协议免费升级到 HTTPS</a></p><p><a href="https://certbot.eff.org/">certbot官网地址</a></p></blockquote><ul><li>打开首页先选择自己的系统版本 （我这里采用的 web 服务器是 nginx，系统是 centos7 ）<a href="https://certbot.eff.org/lets-encrypt/centosrhel7-nginx">传输门</a></li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-fb5a52f6ae876089.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="certbot页面选择自己的系统版本"></p><ul><li>可以按照官网提供的操作文档执行命令</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装 certbot 客户端工具</span><span class="token function">sudo</span> yum <span class="token function">install</span> certbot python2-certbot-nginx<span class="token comment"># 自动检测 nginx 配置以及确定哪些网站需要配置 ssl （会列出全部的 nginx 配置信息）</span><span class="token function">sudo</span> certbot <span class="token parameter variable">--nginx</span><span class="token comment"># 设置 crontab 计划任务，自动更新 ssl 证书</span><span class="token builtin class-name">echo</span> <span class="token string">"0 0,12 * * * root python -c 'import random; import time; time.sleep(random.random() * 3600)' &amp;&amp; certbot renew -q"</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> <span class="token parameter variable">-a</span> /etc/crontab <span class="token operator">&gt;</span> /dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="以下记录本人安装-certbot-的整个过程"><a href="#以下记录本人安装-certbot-的整个过程" class="headerlink" title="以下记录本人安装 certbot 的整个过程"></a>以下记录本人安装 certbot 的整个过程</h2><h3 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h3><blockquote><p>服务器：阿里云服务器<br>系统：  centos 7<br>web 服务器： nginx<br>安装过宝塔 （安装过宝塔后，nginx 的主配置文件位于 <code>/www/server/nginx/conf/</code>）</p></blockquote><p>整体流程是按照官网的流程来操作的，但是其中会遇到各种问题，出现的问题如下：</p><ol><li>安装 certbot 客户端工具 （此流程正常），安装过程中，该直接回车的就回车，该直接选 Yes 的输入 Y 然后回车</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> certbot python2-certbot-nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li>配置 ssl 时，一路出错，如下：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> certbot <span class="token parameter variable">--nginx</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>重要错误信息如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pkg_resources.ContextualVersionConflict: <span class="token punctuation">(</span>cryptography <span class="token number">2.1</span> <span class="token punctuation">(</span>/usr/lib64/python2.7/site-packages<span class="token punctuation">)</span>, Requirement.parse<span class="token punctuation">(</span><span class="token string">'cryptography&gt;=2.3'</span><span class="token punctuation">)</span>, set<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'PyOpenSSL'</span><span class="token punctuation">]</span><span class="token punctuation">))</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-ae7750063ab78d51.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="PyOpenSSL相关报错信息"></p><p>查看 PyOpenSSL 版本信息，发现确实是版本过低的原因</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip show PyOpenSSL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解决方案：更新相应的 python 包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> <span class="token parameter variable">-U</span> PyOpenSSLpip <span class="token function">install</span> <span class="token parameter variable">-U</span> cryptography<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>再次执行以下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> certbot <span class="token parameter variable">--nginx</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>再次发现报错，错误信息如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ImportError: cannot <span class="token function">import</span> name UnrewindableBodyError<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解决方案：安装相应的 python 包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 更新 pip</span>pip <span class="token function">install</span> <span class="token parameter variable">--upgrade</span> pip<span class="token comment"># 卸载 urllib3</span>pip uninstall urllib3<span class="token comment"># 重新再次下载</span>pip <span class="token function">install</span> urllib3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再次执行以下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> certbot <span class="token parameter variable">--nginx</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>再次发现报错，错误信息如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ImportError: No module named urllib3.exceptions  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>解决方案：直接暴力下载相应的 pyOpenSSL 包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token parameter variable">-y</span> <span class="token function">install</span> http://cbs.centos.org/kojifiles/packages/pyOpenSSL/16.2.0/3.el7/noarch/python2-pyOpenSSL-16.2.0-3.el7.noarch.rpm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>再次执行以下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> certbot <span class="token parameter variable">--nginx</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>继续报错，如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Error <span class="token keyword">while</span> running nginx <span class="token parameter variable">-c</span> /etc/nginx/nginx.conf -t.nginx: <span class="token punctuation">[</span>emerg<span class="token punctuation">]</span> open<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token string">"/etc/nginx/nginx.conf"</span> failed <span class="token punctuation">(</span><span class="token number">2</span>: No such <span class="token function">file</span> or directory<span class="token punctuation">)</span>nginx: configuration <span class="token function">file</span> /etc/nginx/nginx.conf <span class="token builtin class-name">test</span> failedThe nginx plugin is not working<span class="token punctuation">;</span> there may be problems with your existing configuration.The error was: MisconfigurationError<span class="token punctuation">(</span><span class="token string">'Error while running nginx -c /etc/nginx/nginx.conf -t.\n\nnginx: [emerg] open() "/etc/nginx/nginx.conf" failed (2: No such file or directory)\nnginx: configuration file /etc/nginx/nginx.conf test failed\n'</span>,<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-faa86a2b9f2c5d14.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="nginx 主配置文件 /etc/nginx/nginx.conf  没有检测到"></p><p>原因是：宝塔将 nginx 的主配置文件安装在 <code>/www/server/nginx/conf/</code> 目录下，然而 <code>certbot</code> 默认在扫描 <code>/etc/nginx/nginx.conf</code> 文件，故而找不到 nginx 的配置文件</p><p>解决方案：指定 nginx 的配置目录，执行以下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> certbot <span class="token parameter variable">--nginx</span> --nginx-server-root<span class="token operator">=</span>/www/server/nginx/conf/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然而不幸的是，依然还是报错，报错信息如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">An unexpected error occurred:TypeError: from_buffer<span class="token punctuation">(</span><span class="token punctuation">)</span> cannot <span class="token builtin class-name">return</span> the address of the raw string within a str or unicode or bytearray object<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-0b79353af7a03ea3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>解决方案：更新 cffi 包，执行以下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> <span class="token parameter variable">--upgrade</span> cffi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装完毕之后，再次执行以下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> certbot <span class="token parameter variable">--nginx</span> --nginx-server-root<span class="token operator">=</span>/www/server/nginx/conf/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-41ff13f2b481d3c4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-5a8be80376cba339.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>发现还是报错，报错信息如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">An unexpected error occurred:UnicodeEncodeError: <span class="token string">'ascii'</span> codec can't encode characters <span class="token keyword">in</span> position <span class="token number">310</span>-328: ordinal not <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>关于 ascii 报错，这篇文章有详细的介绍 <a href="https://xueyuanjun.com/post/9695">通过 Certbot 安装 Let’s Encrypt 证书，来实现全站的 HTTPS 访问</a></p><p>解决方案是：检查你选择的需要配置的 nginx 配置文件中是否含有中文，将所有的中文去掉就好了</p><p>去掉之后，再次执行以下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> certbot <span class="token parameter variable">--nginx</span> --nginx-server-root<span class="token operator">=</span>/www/server/nginx/conf/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-f400a34f94d751c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>大功告成！</p><h3 id="对比一下没有配置-ssl-之前的-nginx-配置"><a href="#对比一下没有配置-ssl-之前的-nginx-配置" class="headerlink" title="对比一下没有配置 ssl 之前的 nginx 配置"></a>对比一下没有配置 ssl 之前的 nginx 配置</h3><p>没有配置 ssl 之前的 nginx 信息</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span><span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">server_name</span> www.pudongping.com</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">index</span> index.php index.html index.htm default.php default.htm default.html</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">root</span> /www/wwwroot/www.pudongping.com</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">location</span> ~ ^/(\.user.ini|\.htaccess|\.git|\.svn|\.project|LICENSE|README.md)</span>    <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">return</span> <span class="token number">404</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置 ssl 之后的配置信息 （现在配置文件中，默认强制性重定向了 https）</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">server</span></span><span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">server_name</span> www.pudongping.com</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">index</span> index.php index.html index.htm default.php default.htm default.html</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">root</span> /www/wwwroot/www.pudongping.com</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">location</span> ~ ^/(\.user.ini|\.htaccess|\.git|\.svn|\.project|LICENSE|README.md)</span>    <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">return</span> <span class="token number">404</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">443</span> ssl</span><span class="token punctuation">;</span> <span class="token comment"># managed by Certbot</span>    <span class="token directive"><span class="token keyword">ssl_certificate</span> /etc/letsencrypt/live/www.pudongping.com/fullchain.pem</span><span class="token punctuation">;</span> <span class="token comment"># managed by Certbot</span>    <span class="token directive"><span class="token keyword">ssl_certificate_key</span> /etc/letsencrypt/live/www.pudongping.com/privkey.pem</span><span class="token punctuation">;</span> <span class="token comment"># managed by Certbot</span>    <span class="token directive"><span class="token keyword">include</span> /etc/letsencrypt/options-ssl-nginx.conf</span><span class="token punctuation">;</span> <span class="token comment"># managed by Certbot</span>    <span class="token directive"><span class="token keyword">ssl_dhparam</span> /etc/letsencrypt/ssl-dhparams.pem</span><span class="token punctuation">;</span> <span class="token comment"># managed by Certbot</span><span class="token punctuation">}</span><span class="token directive"><span class="token keyword">server</span></span><span class="token punctuation">{</span>    <span class="token directive"><span class="token keyword">if</span> (<span class="token variable">$host</span> = www.pudongping.com)</span> <span class="token punctuation">{</span>        <span class="token directive"><span class="token keyword">return</span> <span class="token number">301</span> https://<span class="token variable">$host</span><span class="token variable">$request_uri</span></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token comment"># managed by Certbot</span>    <span class="token directive"><span class="token keyword">listen</span> <span class="token number">80</span></span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">server_name</span> www.pudongping.com</span><span class="token punctuation">;</span>    <span class="token directive"><span class="token keyword">return</span> <span class="token number">404</span></span><span class="token punctuation">;</span> <span class="token comment"># managed by Certbot</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自动更新证书"><a href="#自动更新证书" class="headerlink" title="自动更新证书"></a>自动更新证书</h3><p>由于 Let’s Encrypt 默认的有效期是 90 天，所以如果你的应用需要在生产环境长期提供服务，还要在证书到期之后更新证书，我们可以通过 <code>certbot renew</code> 命令来更新证书，你可以通过如下命令来测试该命令是否生效：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> certbot renew --dry-run<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果在输出中看到如下字样，则表示生效：</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-2da74afeee104f94.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Congratulations"></p><p>当然，真实环境中通过手动维护是不现实的，我们可以借助 Crontab 来编写一个定时任务，每个月都强制更新一个这个证书，然后重启 Nginx：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> * * certbot renew<span class="token number">5</span> <span class="token number">0</span> <span class="token number">1</span> * * <span class="token function">service</span> nginx restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>或者直接执行官方提供的命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token string">"0 0,12 * * * root python -c 'import random; import time; time.sleep(random.random() * 3600)' &amp;&amp; certbot renew -q"</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> <span class="token parameter variable">-a</span> /etc/crontab <span class="token operator">&gt;</span> /dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="关于目录"><a href="#关于目录" class="headerlink" title="关于目录"></a>关于目录</h3><ul><li>Certbot 的配置文件目录在 <code>/etc/letsencrypt</code></li><li>Certbot 的 log 预设路径在 <code>/var/log/letsencrypt</code></li><li>网站对应的 <code>.pem </code> 文件路径在 <code>/etc/letsencrypt/live/网站名称/privkey.pem</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Linux </tag>
            
            <tag> 免费 HTTPS 证书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ngrok 内网穿透神器</title>
      <link href="posts/5bd7101b.html"/>
      <url>posts/5bd7101b.html</url>
      
        <content type="html"><![CDATA[<h1 id="Ngrok-的使用"><a href="#Ngrok-的使用" class="headerlink" title="Ngrok 的使用"></a>Ngrok 的使用</h1><ul><li><a href="https://dashboard.ngrok.com/user/signup">ngrok 注册地址</a></li><li><a href="https://dashboard.ngrok.com/get-started/setup">ngrok 安装方法</a> 这里我是直接使用的 GitHub 账号注册的。</li></ul><h2 id="ngrok-安装方法"><a href="#ngrok-安装方法" class="headerlink" title="ngrok 安装方法"></a>ngrok 安装方法</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载 zip 安装包（这里我是 mac 环境，因此下载的为 mac 版本的软件，其他环境需要下载对应环境版本的软件）</span><span class="token function">wget</span> https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-darwin-amd64.zip<span class="token comment"># 解压 zip 包</span><span class="token function">unzip</span> ngrok-stable-darwin-amd64.zip<span class="token comment"># 将解压后的执行文件添加到环境变量中</span><span class="token function">mv</span> ./ngrok /usr/local/bin<span class="token comment"># 测试环境变量是否添加成功</span>ngrok <span class="token builtin class-name">help</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ngrok-使用方法"><a href="#ngrok-使用方法" class="headerlink" title="ngrok 使用方法"></a>ngrok 使用方法</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 设置 authtoken</span><span class="token comment"># 查看你的 authtoken 地址为：https://dashboard.ngrok.com/get-started/your-authtoken</span>ngrok authtoken <span class="token operator">&lt;</span>your-authtoken<span class="token operator">&gt;</span><span class="token comment"># 查看是否已经设置好了</span><span class="token function">cat</span> ~/.ngrok2/ngrok.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="启动-ngrok-客户端"><a href="#启动-ngrok-客户端" class="headerlink" title="启动 ngrok 客户端"></a>启动 ngrok 客户端</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ngrok http -host-header<span class="token operator">=</span>larablog.test <span class="token parameter variable">-region</span> us <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><code>http</code> 代表我们要映射的是 http 协议</li><li><code>-host-header</code> 代表本地站点的域名</li><li><code>- region us</code> 代表我们要使用的是美国的公共节点，au =&gt; 澳大利亚，eu =&gt; 欧洲</li><li><code>80</code> 代表映射到我们本机的 80 端口</li></ul><p>执行以上命令后，会出现如下内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Session Status                onlineAccount                       pudongping <span class="token punctuation">(</span>Plan: Free<span class="token punctuation">)</span>Version                       <span class="token number">2.3</span>.37Region                        Europe <span class="token punctuation">(</span>eu<span class="token punctuation">)</span>Web Interface                 http://127.0.0.1:4040Forwarding                    http://fff1bccb7070.eu.ngrok.io -<span class="token operator">&gt;</span> http://localhost:80Forwarding                    https://fff1bccb7070.eu.ngrok.io -<span class="token operator">&gt;</span> http://localhost:80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>Forwarding</code> 代表 ngrok 分配给你的域名，对于免费账号来说，每次启动 ngrok 都会重新分配一个随机的域名，无法固定</li><li><code>Web Interface</code> 是 ngrok 内置的一个管理面板，它可以展示所有通过 ngrok 进来的请求信息以及返回的数据</li></ul><p>此时可以直接在浏览器中访问 <code>http://fff1bccb7070.eu.ngrok.io</code> 即可看到和访问 <code>larablog.test</code> 是一样的内容，此外还可以打开 <code>http://127.0.0.1:4040</code> ngrok 面板查看请求信息</p>]]></content>
      
      
      <categories>
          
          <category> Ngrok </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网穿透 </tag>
            
            <tag> 本地调试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RHEL 7 重置 root 密码</title>
      <link href="posts/f41190ff.html"/>
      <url>posts/f41190ff.html</url>
      
        <content type="html"><![CDATA[<h1 id="RHEL-7-重置-root-密码"><a href="#RHEL-7-重置-root-密码" class="headerlink" title="RHEL 7 重置 root 密码"></a>RHEL 7 重置 root 密码</h1><ul><li>查看是否为 RHEL7 系统</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看内核版本</span><span class="token function">cat</span> /etc/redhat-release<span class="token comment"># 如果信息为以下内容，则可以采用此方法重置 root 密码</span>Red Hat Enterprise Linux Server release <span class="token number">7.0</span> <span class="token punctuation">(</span>Maipo<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>重启 Linux 系统主机，并出现引导界面时，按下键盘上的 <code>e</code> 键进入内核编辑界面</li></ul><p><img src="/medias/loading.gif" data-original="https://www.linuxprobe.com/wp-content/uploads/2015/02/%E7%AC%AC1%E6%AD%A5%EF%BC%9A%E5%BC%80%E6%9C%BA%E5%90%8E%E5%9C%A8%E5%86%85%E6%A0%B8%E4%B8%8A%E6%95%B2%E5%87%BB%E2%80%9Ce%E2%80%9D.png" alt="图片来源于 www.linuxprobe.com 网站"></p><ul><li>在 <code>linux16</code> 参数这行的最后面（即<code>LANG=en_US.UTF-8</code>尾部）先敲一个 <code>空格</code> 然后添加 <code>\rd.break</code> 参数，然后按下 <code>Ctrl + X</code> 组合键来运行修改过的内核程序</li></ul><blockquote><p>这里需要注意的是：</p><ol><li>页面内容一般情况下是显示不全的，需要按住上下箭头滚动。</li><li>添加 \rd.break 参数的时候，你也可以不用添加 ‘\反斜杠’ 但是必须要先在 linux16 末尾处敲击一个空格之后写入 rd.break 参数</li></ol></blockquote><p><img src="/medias/loading.gif" data-original="https://www.linuxprobe.com/wp-content/uploads/2015/02/%E7%AC%AC2%E6%AD%A5%EF%BC%9A%E5%9C%A8linux16%E8%BF%99%E8%A1%8C%E7%9A%84%E5%90%8E%E9%9D%A2%E8%BE%93%E5%85%A5%E2%80%9Crd.break%E2%80%9D%E5%B9%B6%E6%95%B2%E5%87%BB%E2%80%9Cctrl-x%E2%80%9C.png" alt="图片来源于 www.linuxprobe.com 网站"></p><ul><li>稍后即可进入系统的紧急救援模式</li></ul><p><img src="/medias/loading.gif" data-original="https://www.linuxprobe.com/wp-content/uploads/2015/02/%E7%AC%AC3%E6%AD%A5%EF%BC%9A%E8%BF%9B%E5%85%A5%E5%88%B0%E4%BA%86%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%B4%A7%E6%80%A5%E6%B1%82%E6%8F%B4%E6%A8%A1%E5%BC%8F.png" alt="图片来源于 www.linuxprobe.com 网站"></p><ul><li>依次输入以下命令，等待系统重启操作完毕，然后就可以使用新密码来登录 Linux 系统了。</li></ul><ol><li>以可读写的权限重新挂载硬盘上真实系统根目录（ /sysroot ）目录</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># -o remount：将一个已经挂下的档案系统重新用不同的方式挂上。</span><span class="token comment"># 例如原先是唯读的系统，现在用可读写的模式重新挂上。</span><span class="token comment"># -o rw：用可读写模式挂上。</span><span class="token comment"># 可以合并参数写，即 mount -o remount,rw</span><span class="token function">mount</span> <span class="token parameter variable">-o</span> remount,rw / /sysroot<span class="token comment"># 同样也可以直接写成这样 （直接省略掉根目录 / ）</span><span class="token function">mount</span> <span class="token parameter variable">-o</span> remount,rw /sysroot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>把环境切换到真实系统根目录 /sysroot</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chroot</span> /sysroot<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>修改 root 账户密码</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 输入 passwd 命令时，是交互式界面。  </span><span class="token comment"># 同样也可以直接输入 echo "redhat" | passwd --stdin root 命令，直接将 root 密码，修改为 redhat</span><span class="token function">passwd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>告诉系统下次启动将对文件进行 selinux 上下文重新打标。这也就造成了下次重启的时候时间会很长，autorelabel 是一个隐藏文件，需要注意的是前面有一个点</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> /.autorelabel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>退出真实系统根目录环境</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="6"><li>重启系统</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">reboot</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://www.linuxprobe.com/wp-content/uploads/2015/02/%E7%AC%AC4%E6%AD%A5%EF%BC%9A%E4%BE%9D%E6%AC%A1%E8%BE%93%E5%85%A5%E4%BB%A5%E4%B8%8B%E5%91%BD%E4%BB%A4.png"></p><ul><li>修改密码后，首次重启的时间将会比较长，因为系统将对所有文件进行 SeLinux 打标，请耐心等待，整个过程并非死机，请勿在打标过程中手动强制再次重启，否则系统将会永久性损坏导致无法开机。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hyperf 使用模型写较为复杂 union 子查询并做分页</title>
      <link href="posts/7dec67c2.html"/>
      <url>posts/7dec67c2.html</url>
      
        <content type="html"><![CDATA[<h1 id="hyperf-使用模型写-union-子查询并做分页"><a href="#hyperf-使用模型写-union-子查询并做分页" class="headerlink" title="hyperf 使用模型写 union 子查询并做分页"></a>hyperf 使用模型写 union 子查询并做分页</h1><h2 id="最终需要实现的-sql-语句为如下所示："><a href="#最终需要实现的-sql-语句为如下所示：" class="headerlink" title="最终需要实现的 sql 语句为如下所示："></a>最终需要实现的 sql 语句为如下所示：</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span><span class="token identifier"><span class="token punctuation">`</span>dfo_al<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">FROM</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span><span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>log_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>change_time<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>user_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>pay_points<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>change_type<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>from_user_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>u<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>user_id<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> <span class="token identifier"><span class="token punctuation">`</span>u_user_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>u<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>username<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>u<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>head_pic<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>u<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>vip_time<span class="token punctuation">`</span></span> <span class="token keyword">FROM</span><span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span><span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> <span class="token identifier"><span class="token punctuation">`</span>dfo_users<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> <span class="token identifier"><span class="token punctuation">`</span>u<span class="token punctuation">`</span></span> <span class="token keyword">ON</span> <span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>user_id<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token identifier"><span class="token punctuation">`</span>u<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>user_id<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span><span class="token punctuation">(</span> <span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>user_id<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token number">3649</span> <span class="token operator">AND</span> <span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>pay_points<span class="token punctuation">`</span></span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token operator">AND</span> <span class="token punctuation">(</span> <span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>from_user_id<span class="token punctuation">`</span></span> <span class="token operator">IS</span> <span class="token boolean">NULL</span> <span class="token operator">OR</span> <span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>from_user_id<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">UNION</span><span class="token punctuation">(</span><span class="token keyword">SELECT</span><span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>log_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>change_time<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>user_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>pay_points<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>change_type<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>from_user_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>u<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>user_id<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> <span class="token identifier"><span class="token punctuation">`</span>u_user_id<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>u<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>username<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>u<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>head_pic<span class="token punctuation">`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">`</span>u<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>vip_time<span class="token punctuation">`</span></span> <span class="token keyword">FROM</span><span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span><span class="token keyword">LEFT</span> <span class="token keyword">JOIN</span> <span class="token identifier"><span class="token punctuation">`</span>dfo_users<span class="token punctuation">`</span></span> <span class="token keyword">AS</span> <span class="token identifier"><span class="token punctuation">`</span>u<span class="token punctuation">`</span></span> <span class="token keyword">ON</span> <span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>from_user_id<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token identifier"><span class="token punctuation">`</span>u<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>user_id<span class="token punctuation">`</span></span> <span class="token keyword">WHERE</span><span class="token punctuation">(</span> <span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>user_id<span class="token punctuation">`</span></span> <span class="token operator">=</span> <span class="token number">3649</span> <span class="token operator">AND</span> <span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>pay_points<span class="token punctuation">`</span></span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token operator">AND</span> <span class="token punctuation">(</span> <span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>from_user_id<span class="token punctuation">`</span></span> <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token operator">OR</span> <span class="token identifier"><span class="token punctuation">`</span>a<span class="token punctuation">`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">`</span>from_user_id<span class="token punctuation">`</span></span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">AS</span> dfo_al <span class="token keyword">ORDER</span> <span class="token keyword">BY</span><span class="token identifier"><span class="token punctuation">`</span>log_id<span class="token punctuation">`</span></span> <span class="token keyword">DESC</span> <span class="token keyword">LIMIT</span> <span class="token number">2</span> <span class="token keyword">OFFSET</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="hyperf-代码为"><a href="#hyperf-代码为" class="headerlink" title="hyperf 代码为"></a>hyperf 代码为</h2><blockquote><p>以下代码仅为示例代码，仅提供参考使用，具体实现请根据你自己的业务逻辑实现。</p></blockquote><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$where</span> <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string single-quoted-string">'a.user_id'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'='</span><span class="token punctuation">,</span> <span class="token function">auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token property">user_id</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string single-quoted-string">'a.pay_points'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'&gt;'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$fields</span> <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string single-quoted-string">'a.log_id'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'a.change_time'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'a.user_id'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'a.pay_points'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'a.change_type'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'a.from_user_id'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'u.user_id AS u_user_id'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'u.username'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'u.head_pic'</span><span class="token punctuation">,</span>    <span class="token string single-quoted-string">'u.vip_time'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$table1</span> <span class="token operator">=</span> <span class="token class-name static-context">AccountLog</span><span class="token operator">::</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">-&gt;</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'account_log as a'</span><span class="token punctuation">)</span>    <span class="token operator">-&gt;</span><span class="token function">leftJoin</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'users as u'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'a.user_id'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'='</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'u.user_id'</span><span class="token punctuation">)</span>    <span class="token operator">-&gt;</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token variable">$fields</span><span class="token punctuation">)</span>    <span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token variable">$where</span><span class="token punctuation">)</span>    <span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$query</span><span class="token operator">-&gt;</span><span class="token function">whereNull</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'a.from_user_id'</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">orWhere</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'a.from_user_id'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$table2</span> <span class="token operator">=</span> <span class="token class-name static-context">AccountLog</span><span class="token operator">::</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">-&gt;</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'account_log as a'</span><span class="token punctuation">)</span>    <span class="token operator">-&gt;</span><span class="token function">leftJoin</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'users as u'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'a.from_user_id'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'='</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'u.user_id'</span><span class="token punctuation">)</span>    <span class="token operator">-&gt;</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token variable">$fields</span><span class="token punctuation">)</span>    <span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token variable">$where</span><span class="token punctuation">)</span>    <span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$query</span><span class="token operator">-&gt;</span><span class="token function">whereNotNull</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'a.from_user_id'</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">orWhere</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'a.from_user_id'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'&gt;'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$table</span> <span class="token operator">=</span> <span class="token variable">$table1</span><span class="token operator">-&gt;</span><span class="token function">union</span><span class="token punctuation">(</span><span class="token variable">$table2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$tablePrefix</span> <span class="token operator">=</span> <span class="token class-name static-context">Db</span><span class="token operator">::</span><span class="token function">connection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">getTablePrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取数据表前缀 =&gt; 或者使用  $tablePrefix = Db::getConfig('prefix'); 都可以</span><span class="token variable">$model</span> <span class="token operator">=</span> <span class="token class-name static-context">AccountLog</span><span class="token operator">::</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">-&gt;</span><span class="token function">mergeBindings</span><span class="token punctuation">(</span><span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">getQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token operator">-&gt;</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'al.*'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token operator">-&gt;</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token class-name static-context">Db</span><span class="token operator">::</span><span class="token function">raw</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"(<span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$table</span><span class="token operator">-&gt;</span><span class="token function">toSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span>) as <span class="token interpolation"><span class="token punctuation">{</span><span class="token variable">$tablePrefix</span><span class="token punctuation">}</span></span>"</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'al'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token variable">$model</span><span class="token operator">-&gt;</span><span class="token function">orderBy</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'log_id'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'desc'</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">paginate</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hyperf </tag>
            
            <tag> Swoole </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>针对 hyperf 框架实现简单限流器，类似 laravel 框架 throttle 中间件功能</title>
      <link href="posts/f2f7e2ee.html"/>
      <url>posts/f2f7e2ee.html</url>
      
        <content type="html"><![CDATA[<h1 id="针对-hyperf-框架实现简单限流器，类似-laravel-框架-throttle-中间件功能"><a href="#针对-hyperf-框架实现简单限流器，类似-laravel-框架-throttle-中间件功能" class="headerlink" title="针对 hyperf 框架实现简单限流器，类似 laravel 框架 throttle 中间件功能"></a>针对 hyperf 框架实现简单限流器，类似 laravel 框架 throttle 中间件功能</h1><p><strong>注意</strong>：以下功能已经单独迁移到 <a href="https://github.com/pudongping/hyperf-throttle-requests">pudongping/hyperf-throttle-requests</a> 插件包中，并支持了 hyperf 2.2 和 3.0 版本。</p><h2 id="限流器的概念"><a href="#限流器的概念" class="headerlink" title="限流器的概念"></a>限流器的概念</h2><p>所谓限流器，指的是限制访问指定服务/路由的流量，通俗点说，就是限制单位时间内访问指定服务/路由的次数（频率），<br>从系统架构角度看，通过限流器可以有效避免短时间内的异常高并发请求导致系统负载过高，从而达到保护系统的目的，<br>另外对于一些日常的业务功能，也可以通过限流器避免垃圾流量，比如发送短信服务、用户注册、文章发布、用户评论等，<br>通过限流可以有效阻止垃圾用户的批量注册和发布。</p><h2 id="简单实现方案"><a href="#简单实现方案" class="headerlink" title="简单实现方案"></a>简单实现方案</h2><blockquote><p>这里采用了 <code>redis</code> 作为存储器，以下内容全部基于 <code>redis</code> 而言。</p></blockquote><ul><li>通过 <code>setex</code> 指令初始化限流器的键（基于用户 ID、IP 地址等标识来源的变量进行拼接）、并设置有效期（作为一个计时器）；</li><li>首次访问某个服务/路由时，通过 <code>increment</code> 指令初始化一个新的统计键值对（作为一个计数器），后续在计时器有效期内访问同一个服务/路由，通过 <code>increment</code> 指令对键值做自增操作；</li><li>当该服务/路由的访问次数超过限流器设置的访问上限，则拒绝后续访问。</li></ul><h2 id="注意-⚠️"><a href="#注意-⚠️" class="headerlink" title="注意 ⚠️"></a>注意 ⚠️</h2><blockquote><p>以下功能实现代码中使用到了很多助手函数，建议首先参考我的 <a href="https://pudongping.github.io/posts/79e7b1a4.html">hyperf 框架常用的助手函数</a> 一文，查看具体的助手函数。<br>其中 <code>auth()</code> 方法为获取当前登录的用户信息。</p></blockquote><h2 id="Talk-is-cheap-show-me-the-code-😜"><a href="#Talk-is-cheap-show-me-the-code-😜" class="headerlink" title="Talk is cheap, show me the code. 😜"></a>Talk is cheap, show me the code. 😜</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/** * 节流处理 * 用途：限制访问频率 * 做法：限制单位时间内访问指定服务/路由的次数（频率） */</span><span class="token keyword">declare</span><span class="token punctuation">(</span>strict_types<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\</span>Helper</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Carbon<span class="token punctuation">\</span>Carbon</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Psr<span class="token punctuation">\</span>Http<span class="token punctuation">\</span>Message<span class="token punctuation">\</span>ResponseInterface</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Hyperf<span class="token punctuation">\</span>Utils<span class="token punctuation">\</span>Context</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Exception<span class="token punctuation">\</span>ApiException</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\</span>Constants<span class="token punctuation">\</span>ErrorCode</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ThrottleRequestsHelper</span><span class="token punctuation">{</span>    <span class="token comment">/**     * 用于做计时器的缓存key后缀     *     * @var string     */</span>    <span class="token keyword">protected</span> <span class="token variable">$keySuffix</span> <span class="token operator">=</span> <span class="token string single-quoted-string">':timer'</span><span class="token punctuation">;</span>    <span class="token comment">/**     * 处理节流     *     * @param int $maxAttempts  在指定时间内允许的最大请求次数     * @param int $decaySeconds  单位时间（s）     * @param string $prefix  计数器缓存key前缀     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">handle</span><span class="token punctuation">(</span><span class="token keyword type-hint">int</span> <span class="token variable">$maxAttempts</span> <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$decaySeconds</span> <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$prefix</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'dfo:throttle'</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token variable">$prefix</span> <span class="token operator">.</span> <span class="token string single-quoted-string">':'</span> <span class="token operator">.</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">resolveRequestSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 计数器的缓存key</span>        <span class="token comment">// 单位时间内已经超过了访问次数时</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">tooManyAttempts</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$maxAttempts</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">buildException</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$maxAttempts</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">hit</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$decaySeconds</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">setHeaders</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$maxAttempts</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 生成缓存 key     *     * @return string     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">resolveRequestSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'|'</span> <span class="token operator">.</span> <span class="token function">getClientIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$user</span> <span class="token operator">=</span> <span class="token function">auth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$str</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">'|'</span> <span class="token operator">.</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span><span class="token variable">$user</span><span class="token operator">-&gt;</span><span class="token property">user_id</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 在指定时间内增加指定键的计数器     *     * @param string $key  计数器的缓存key     * @param int $decaySeconds  指定时间（S）     * @return int  计数器具体增加到多少值     */</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">hit</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$decaySeconds</span> <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">int</span>    <span class="token punctuation">{</span>        <span class="token variable">$timerKey</span> <span class="token operator">=</span> <span class="token variable">$key</span> <span class="token operator">.</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">keySuffix</span><span class="token punctuation">;</span>        <span class="token comment">// 计时器的有效期时间戳</span>        <span class="token variable">$expirationTime</span> <span class="token operator">=</span> <span class="token class-name static-context">Carbon</span><span class="token operator">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">addRealSeconds</span><span class="token punctuation">(</span><span class="token variable">$decaySeconds</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">getTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 计时器</span>        <span class="token function">redis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token variable">$timerKey</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span><span class="token variable">$expirationTime</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'EX'</span> <span class="token operator">=&gt;</span> <span class="token variable">$decaySeconds</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'NX'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 计数器</span>        <span class="token variable">$added</span> <span class="token operator">=</span> <span class="token function">redis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'0'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'EX'</span> <span class="token operator">=&gt;</span> <span class="token variable">$decaySeconds</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'NX'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 自增（返回增加到多少的具体数字）</span>        <span class="token variable">$hits</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">int</span><span class="token punctuation">)</span><span class="token function">redis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">incr</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$added</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$hits</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 证明是初始化</span>            <span class="token function">redis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'1'</span><span class="token punctuation">,</span> <span class="token variable">$decaySeconds</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$hits</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 判断访问次数是否已经达到了临界值     *     * @param string $key  计数器的缓存key     * @param int $maxAttempts  在指定时间内允许的最大请求次数     * @return bool     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">tooManyAttempts</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$maxAttempts</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">// 获取计数器的值，如果计数器不存在，则初始化计数器的值为 0</span>        <span class="token comment">// 获取一个不存在的键时，会直接返回 false</span>        <span class="token variable">$counterNumber</span> <span class="token operator">=</span> <span class="token function">redis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span> <span class="token operator">?</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// 判断计时器是否存在，如果计时器不存在，则对应的计数器没有存在的意义（存在过多的计数器会占用 redis 空间）</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">redis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token variable">$key</span> <span class="token operator">.</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">keySuffix</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 存在缓存key时返回 int =&gt; 1，不存在时返回 int =&gt; 0</span>            <span class="token comment">// 有该键名且删除成功返回 int =&gt; 1，无该键名时返回 int =&gt; 0</span>            <span class="token function">redis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 删除计数器缓存，防止计时器失效后，下一次用户访问时不是从 1 开始计数</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$counterNumber</span> <span class="token operator">&gt;=</span> <span class="token variable">$maxAttempts</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 判断计数器在单位时间内是否达到了临界值</span>                <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 超过访问次数限制时，构建异常信息     *     * @param string $key  计数器的缓存key     * @param int $maxAttempts  在指定时间内允许的最大请求次数     * @return ApiException     */</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">buildException</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$maxAttempts</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">// 距离允许下一次请求还有多少秒</span>        <span class="token variable">$retryAfter</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getTimeUntilNextRetry</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">setHeaders</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$maxAttempts</span><span class="token punctuation">,</span> <span class="token variable">$retryAfter</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 429 Too Many Requests</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiException</span><span class="token punctuation">(</span><span class="token class-name static-context">ErrorCode</span><span class="token operator">::</span><span class="token constant">REQUEST_FREQUENTLY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 设置返回头数据     *     * @param string $key  计数器的缓存key     * @param int $maxAttempts  在指定时间内允许的最大请求次数     * @param int|null $retryAfter  距离下次重试请求需要等待的时间（s）     */</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">setHeaders</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$maxAttempts</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token keyword type-hint">int</span> <span class="token variable">$retryAfter</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">// 设置返回头数据</span>        <span class="token variable">$headers</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">getHeaders</span><span class="token punctuation">(</span>            <span class="token variable">$maxAttempts</span><span class="token punctuation">,</span>            <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">calculateRemainingAttempts</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$maxAttempts</span><span class="token punctuation">,</span> <span class="token variable">$retryAfter</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment">// 计算剩余访问次数</span>            <span class="token variable">$retryAfter</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 添加返回头数据到请求头中</span>        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">addHeaders</span><span class="token punctuation">(</span><span class="token variable">$headers</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 获取返回头数据     *     * @param int $maxAttempts  在指定时间内允许的最大请求次数     * @param int $remainingAttempts  在指定时间段内剩下的请求次数     * @param int|null $retryAfter  距离下次重试请求需要等待的时间（s）     * @return int[]     */</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">getHeaders</span><span class="token punctuation">(</span><span class="token keyword type-hint">int</span> <span class="token variable">$maxAttempts</span><span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$remainingAttempts</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token keyword type-hint">int</span> <span class="token variable">$retryAfter</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$headers</span> <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string single-quoted-string">'X-RateLimit-Limit'</span> <span class="token operator">=&gt;</span> <span class="token variable">$maxAttempts</span><span class="token punctuation">,</span>  <span class="token comment">// 在指定时间内允许的最大请求次数</span>            <span class="token string single-quoted-string">'X-RateLimit-Remaining'</span> <span class="token operator">=&gt;</span> <span class="token variable">$remainingAttempts</span><span class="token punctuation">,</span>  <span class="token comment">// 在指定时间段内剩下的请求次数</span>        <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$retryAfter</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 只有当用户访问频次超过了最大频次之后才会返回以下两个返回头字段</span>            <span class="token variable">$headers</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'Retry-After'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$retryAfter</span><span class="token punctuation">;</span>  <span class="token comment">// 距离下次重试请求需要等待的时间（s）</span>            <span class="token variable">$headers</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'X-RateLimit-Reset'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name static-context">Carbon</span><span class="token operator">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">addRealSeconds</span><span class="token punctuation">(</span><span class="token variable">$retryAfter</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">getTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 距离下次重试请求需要等待的时间戳（s）</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$headers</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 添加请求头数据     *     * @param array $headers     */</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">addHeaders</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$headers</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token class-name static-context">Context</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name static-context">ResponseInterface</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$headers</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=&gt;</span> <span class="token variable">$header</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$response</span><span class="token operator">-&gt;</span><span class="token function">withHeader</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$header</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name static-context">Context</span><span class="token operator">::</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name static-context">ResponseInterface</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token variable">$response</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 计算距离允许下一次请求还有多少秒     *     * @param string $key     * @return false|int|mixed|string     */</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">getTimeUntilNextRetry</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$key</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment">// 在 $this-&gt;tooManyAttempts() 方法中已经判断了计时器的缓存 key 是否存在，因此在这里毋需再次累赘判断</span>        <span class="token comment">// 计时器的有效期减去当前时间戳</span>        <span class="token keyword">return</span> <span class="token function">redis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$key</span> <span class="token operator">.</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">keySuffix</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token class-name static-context">Carbon</span><span class="token operator">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">getTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 计算剩余访问次数     *     * @param string $key 计数器的缓存key     * @param int $maxAttempts  在指定时间内允许的最大请求次数     * @param int|null $retryAfter  距离下次重试请求需要等待的时间（s）     * @return false|int|mixed|string     */</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">calculateRemainingAttempts</span><span class="token punctuation">(</span><span class="token keyword type-hint">string</span> <span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$maxAttempts</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token keyword type-hint">int</span> <span class="token variable">$retryAfter</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$retryAfter</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 获取一个不存在的键时，会直接返回 false</span>            <span class="token variable">$counterNumber</span> <span class="token operator">=</span> <span class="token function">redis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span> <span class="token operator">?</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token variable">$maxAttempts</span> <span class="token operator">-</span> <span class="token variable">$counterNumber</span><span class="token punctuation">;</span>  <span class="token comment">// 剩余访问次数</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hyperf </tag>
            
            <tag> Swoole </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hyperf 框架常用的助手函数</title>
      <link href="posts/79e7b1a4.html"/>
      <url>posts/79e7b1a4.html</url>
      
        <content type="html"><![CDATA[<p>以下列出部分 hyperf 常用的助手函数</p><blockquote><p>其中要是想获取当前请求的路由所对应的控制器和方法，请直接调用 <code>get_current_action()</code> 方法</p></blockquote><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">declare</span><span class="token punctuation">(</span>strict_types<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 自定义助手函数 */</span><span class="token keyword">use</span> <span class="token package">Hyperf<span class="token punctuation">\</span>Utils<span class="token punctuation">\</span>ApplicationContext</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Hyperf<span class="token punctuation">\</span>Redis<span class="token punctuation">\</span>Redis</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Hyperf<span class="token punctuation">\</span>Contract<span class="token punctuation">\</span>StdoutLoggerInterface</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Hyperf<span class="token punctuation">\</span>Logger<span class="token punctuation">\</span>LoggerFactory</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Hyperf<span class="token punctuation">\</span>HttpServer<span class="token punctuation">\</span>Contract<span class="token punctuation">\</span>RequestInterface</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Hyperf<span class="token punctuation">\</span>HttpServer<span class="token punctuation">\</span>Contract<span class="token punctuation">\</span>ResponseInterface</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Hyperf<span class="token punctuation">\</span>HttpServer<span class="token punctuation">\</span>Router<span class="token punctuation">\</span>Dispatched</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Hyperf<span class="token punctuation">\</span>Server<span class="token punctuation">\</span>ServerFactory</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Swoole<span class="token punctuation">\</span>Websocket<span class="token punctuation">\</span>Frame</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Swoole<span class="token punctuation">\</span>WebSocket<span class="token punctuation">\</span>Server</span> <span class="token keyword">as</span> WebSocketServer<span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Psr<span class="token punctuation">\</span>SimpleCache<span class="token punctuation">\</span>CacheInterface</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'container'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 获取容器对象     *     * @return \Psr\Container\ContainerInterface     */</span>    <span class="token keyword">function</span> <span class="token function-definition function">container</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name static-context">ApplicationContext</span><span class="token operator">::</span><span class="token function">getContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'redis'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">/**     *  获取 Redis 协程客户端     *     * @return Redis|mixed     */</span>    <span class="token keyword">function</span> <span class="token function-definition function">redis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name static-context">Redis</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'std_out_log'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 控制台日志     *     * @return StdoutLoggerInterface|mixed     */</span>    <span class="token keyword">function</span> <span class="token function-definition function">std_out_log</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name static-context">StdoutLoggerInterface</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'logger'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 文件日志     *     * @return \Psr\Log\LoggerInterface     */</span>    <span class="token keyword">function</span> <span class="token function-definition function">logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name static-context">LoggerFactory</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'request'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * request 实例     *     * @return RequestInterface|mixed     */</span>    <span class="token keyword">function</span> <span class="token function-definition function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name static-context">RequestInterface</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'response'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * response 实例     *     * @return ResponseInterface|mixed     */</span>    <span class="token keyword">function</span> <span class="token function-definition function">response</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name static-context">ResponseInterface</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'server'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 基于 swoole server 的 server 实例     *     * @return \Swoole\Coroutine\Server|\Swoole\Server     */</span>    <span class="token keyword">function</span> <span class="token function-definition function">server</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name static-context">ServerFactory</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">getServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">getServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'frame'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * websocket frame 实例     *     * @return mixed|Frame     */</span>    <span class="token keyword">function</span> <span class="token function-definition function">frame</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name static-context">Frame</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'websocket'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * websocket 实例     *     * @return mixed|WebSocketServer     */</span>    <span class="token keyword">function</span> <span class="token function-definition function">websocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name static-context">WebSocketServer</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'cache'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 简单的缓存实例     *     * @return mixed|CacheInterface     */</span>    <span class="token keyword">function</span> <span class="token function-definition function">cache</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">container</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name static-context">CacheInterface</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'get_current_action'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 获取当前请求的控制器和方法     *     * @return array     */</span>    <span class="token keyword">function</span> <span class="token function-definition function">get_current_action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">array</span>    <span class="token punctuation">{</span>        <span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name static-context">Dispatched</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">property_exists</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'handler'</span><span class="token punctuation">)</span>            <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token operator">-&gt;</span><span class="token property">handler</span><span class="token punctuation">)</span>            <span class="token operator">&amp;&amp;</span> <span class="token function">property_exists</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token operator">-&gt;</span><span class="token property">handler</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'callback'</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$action</span> <span class="token operator">=</span> <span class="token variable">$obj</span><span class="token operator">-&gt;</span><span class="token property">handler</span><span class="token operator">-&gt;</span><span class="token property">callback</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>Exception</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'The route is undifined! Please check!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$errMsg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'The controller and method are not found! Please check!'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$action</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">list</span><span class="token punctuation">(</span><span class="token variable">$controller</span><span class="token punctuation">,</span> <span class="token variable">$method</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token variable">$action</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$action</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token variable">$action</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'::'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">list</span><span class="token punctuation">(</span><span class="token variable">$controller</span><span class="token punctuation">,</span> <span class="token variable">$method</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'::'</span><span class="token punctuation">,</span> <span class="token variable">$action</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token variable">$action</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'@'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">list</span><span class="token punctuation">(</span><span class="token variable">$controller</span><span class="token punctuation">,</span> <span class="token variable">$method</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'@'</span><span class="token punctuation">,</span> <span class="token variable">$action</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">list</span><span class="token punctuation">(</span><span class="token variable">$controller</span><span class="token punctuation">,</span> <span class="token variable">$method</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token function">logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token variable">$errMsg</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">std_out_log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token variable">$errMsg</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">list</span><span class="token punctuation">(</span><span class="token variable">$controller</span><span class="token punctuation">,</span> <span class="token variable">$method</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">logger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token variable">$errMsg</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">std_out_log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token variable">$errMsg</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">compact</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'controller'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'method'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hyperf </tag>
            
            <tag> Swoole </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用亚马逊云 AWS 配置服务器并使用 xshell 远程连接</title>
      <link href="posts/34efcb18.html"/>
      <url>posts/34efcb18.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用亚马逊云-AWS-配置服务器并使用-xshell-远程连接"><a href="#使用亚马逊云-AWS-配置服务器并使用-xshell-远程连接" class="headerlink" title="使用亚马逊云 AWS 配置服务器并使用 xshell 远程连接"></a>使用亚马逊云 AWS 配置服务器并使用 xshell 远程连接</h1><h2 id="如果之前使用亚马逊云配置服务器没有配置成功，那么请按照下面的方式删除掉实例"><a href="#如果之前使用亚马逊云配置服务器没有配置成功，那么请按照下面的方式删除掉实例" class="headerlink" title="如果之前使用亚马逊云配置服务器没有配置成功，那么请按照下面的方式删除掉实例"></a>如果之前使用亚马逊云配置服务器没有配置成功，那么请按照下面的方式删除掉实例</h2><ul><li><a href="https://us-east-2.console.aws.amazon.com/ec2/home?region=us-east-2#Instances:">打开当前实例列表</a></li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-bd64bb68e37736b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="你自己的实例列表"></p><ul><li>终止你想要删除的实例（我看文档说的是，终止实例其实就表示删除了实例，终止实例会删除掉服务器中的文件，但是停止实例不会）</li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-fa7c851c14f1977f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="终止实例"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-688dde3c0f03d746.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="终止实例会删除掉服务器中的所有文件"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-6d0c8540ccaaf4e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="终止后的状态"></p><ul><li>如果想彻底删除掉实例，还需要删除掉 「卷」（不手动删除的话，亚马逊云也会过一段时间自动删除）</li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-16fbeb3feda581a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="选择卷组"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-8273f1d73ddf2641.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="实例列表也会过一段时间自动删除"></p><h2 id="接下来开始配置新的服务器"><a href="#接下来开始配置新的服务器" class="headerlink" title="接下来开始配置新的服务器"></a>接下来开始配置新的服务器</h2><ul><li><p>创建一个新的实例<br><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-94887efe4899baba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="直接在实例控制台上面启动一个新的实例"></p></li><li><p>配置服务器<br><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-a0a7f77087175125.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="按照这些步骤一步一步的来，选择你自己的自定义配置就可以了"></p></li><li><p>选择硬盘空间大小（按需选择就好，如果超过了套餐外的硬盘空间会收费，建议还是先检查自己的套餐最大硬盘空间）</p></li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-15d94915c460e4bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="设置硬盘空间大小"></p><ul><li>最最最重要的步骤就是，一定要选择密钥对或者直接在这里生成密钥对，并且一定要下载密钥对，因为密钥对只允许下载一次，错过了，等于你这个实例就无法登录了。亚马逊云默认关闭了账号密码连接 ssh 服务，初次连接只允许密钥对。</li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-e95c5b055cfa982b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="选择已生成的密钥对或者直接在这里生成"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-b0479e4003995376.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="我没有提前生成密钥对，因此我在这里直接生成一个密钥对"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-7a22bfdf90b62c72.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="下载密钥对"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-b4845a5e820c5f57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="打开实例"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-bc31ca359b59438a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="已经安装好了服务器"></p><h2 id="接下来讲解使用-xshell-连接亚马逊云服务器"><a href="#接下来讲解使用-xshell-连接亚马逊云服务器" class="headerlink" title="接下来讲解使用 xshell 连接亚马逊云服务器"></a>接下来讲解使用 xshell 连接亚马逊云服务器</h2><blockquote><p>建议还是先看一下文档：<a href="https://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/managing-users.html">https://docs.aws.amazon.com/zh_cn/AWSEC2/latest/UserGuide/managing-users.html</a></p></blockquote><ul><li>根据你选择的系统寻找到亚马逊云默认给你创建的账户名</li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-1bfd9833871ee335.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="我选择的是 redhat 系统，因此用户名是 ec2-user 或 root"></p><ul><li>打开 xshell ，配置用户身份验证</li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-a62480d370da6f50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置用户身份验证"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-7823047ee33c0a5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="导入密钥对"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-d8f8286d1d98330a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="选中密钥对"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-78459d37d9fa3827.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果如下"></p><ul><li>配置连接</li></ul><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-46b2bcf9a3277ade.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="复制共有 DNS"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-3125ba8d0bec81fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="配置连接"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-6eee19e6b21804b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="连接成功"></p><h2 id="亚马逊云默认关闭了-root-连接-ssh，接下来讲解如何使用-root-用户登录-ssh"><a href="#亚马逊云默认关闭了-root-连接-ssh，接下来讲解如何使用-root-用户登录-ssh" class="headerlink" title="亚马逊云默认关闭了 root 连接 ssh，接下来讲解如何使用 root 用户登录 ssh"></a>亚马逊云默认关闭了 root 连接 ssh，接下来讲解如何使用 root 用户登录 ssh</h2><ol><li>更改 root 用户密码</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">passwd</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>切换到 root 用户</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">su</span> - 或者<span class="token function">su</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-31aaa46c330d2e75.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="修改 root 用户密码"></p><ol start="3"><li>修改 sshd_config 配置文件</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/ssh/sshd_config<span class="token comment"># 如果提示没有 vim 编辑器，则可以直接使用 vi 编辑器</span><span class="token function">vi</span> /etc/ssh/sshd_config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-2e587674dfadf7b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="编辑 sshd 服务主配置文件"></p><ol start="4"><li>开启密码验证</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PasswordAuthentication <span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-0cd7175dbad6da90.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="查看是否允许密码验证"></p><ol start="5"><li>设定是否允许root管理员直接登录</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">PermitRootLogin <span class="token function">yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-76801d3921d2d1b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="查看是否允许 root 管理员直接登录"></p><ol start="6"><li>重启 sshd 服务</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 重启 sshd 服务</span>systemctl restart sshd<span class="token comment"># 将 sshd 服务加入到开机启动项中</span>systemctl <span class="token builtin class-name">enable</span> sshd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="7"><li>测试连接</li></ol><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-096bb85b62b21053.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="使用公网 ip 和 root 用户连接 ssh"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-8bdb83fbbe69a83e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="使用 root 账号密码连接 ssh"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-d29f7e82e877c3e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="至此，使用 root 用户连接成功"></p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 python3 写的文档格式转换小工具</title>
      <link href="posts/6cc526bb.html"/>
      <url>posts/6cc526bb.html</url>
      
        <content type="html"><![CDATA[<h1 id="document-converter-（文档格式互转工具）"><a href="#document-converter-（文档格式互转工具）" class="headerlink" title="document-converter （文档格式互转工具）"></a>document-converter （文档格式互转工具）</h1><h2 id="项目发起初衷"><a href="#项目发起初衷" class="headerlink" title="项目发起初衷"></a>项目发起初衷</h2><p>近期有朋友要我帮忙将 pdf 格式文档数据提取成 docx 格式，平时我自己要么就通过编辑器转换了，要么就通过命令行转换，但这种方式对于一些朋友来说不是很友好，故此有此项目。</p><p>目前只支持 docx 和 pdf 互转，后续有时间了，会考虑支持多种常用文档格式互转，如果你对这感兴趣，欢迎提 PR ！</p><h2 id="项目特性"><a href="#项目特性" class="headerlink" title="项目特性"></a>项目特性</h2><ul><li>使用 python3 编写的 docx、pdf 互转工具。</li><li>支持多线程。</li><li>支持跨平台（macOS、Windows、Linux）。</li><li>批量 docx 文档转 pdf 格式（效果良好）。</li><li>批量 pdf 文档转 docx 格式（尝试过多个扩展库，遗憾的是均不支持图片提取）。</li><li>后续有时间了，会考虑支持多种常用的文档格式互转。</li></ul><h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p>命令行提示</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-155e22f797a6ee6f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="文档简介"></p><p>批量 docx 转 pdf</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-3df6914674c7e060.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="docx转pdf"></p><p>批量 pdf 转 docx</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-800ff9980abdb59a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="pdf转docx"></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ol><li>克隆源代码</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># GitHub</span><span class="token function">git</span> clone https://github.com/pudongping/document-converter.git<span class="token comment"># gitee</span><span class="token function">git</span> clone https://gitee.com/pudongping/document-converter.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>进入项目根目录，并安装相关依赖扩展</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> document-converter <span class="token operator">&amp;&amp;</span> <span class="token function">sudo</span> pip <span class="token function">install</span> <span class="token parameter variable">-r</span> requirements.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>使用文档格式转换</li></ol><p>举个例子来说，如果此时我想将 <code>n</code> 个 <code>.docx</code> 格式的文档转换成 <code>.pdf</code> 格式的文档，那么我需要这么操作：</p><ul><li>将这 <code>n</code> 个 <code>.docx</code> 文档复制到此项目的 <code>data/input/docxs</code> 目录（如果想转 <code>.pdf</code> 格式的文档，则需要将文档复制到 <code>data/input/pdfs</code> 目录）</li><li>在项目根目录执行 <code>python3 main.py --docx-to-pdf</code> 命令，且等待命令执行结束（你可以去泡杯咖啡，之后静静等待，一般来说会很快，因为支持多线程）</li><li>之后在 <code>data/output/pdfs</code> 目录查看已经转换好的文档。至此，完毕！</li></ul><ol start="4"><li>命令介绍</li></ol><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>python3 main.py –version</td><td>显示当前应用的版本号</td></tr><tr><td>python3 main.py –help 或者 python3 main.py -h</td><td>显示帮助文档</td></tr><tr><td>python3 main.py –docx-to-pdf</td><td>执行 docx 文档转成 pdf 格式的文档</td></tr><tr><td>python3 main.py –pdf-to-docx</td><td>执行 pdf 文档转成 docx 格式的文档</td></tr></tbody></table><h2 id="项目目录介绍"><a href="#项目目录介绍" class="headerlink" title="项目目录介绍"></a>项目目录介绍</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">├── LICENSE├── Pipfile├── README.md  项目介绍文档├── app  代码目录│   ├── __init__.py│   ├── config  配置文件目录│   │   ├── __init__.py│   │   └── app.py  配置相关│   ├── converter  转换相关代码目录│   │   ├── __init__.py│   │   ├── converter_docx.py  *文档转 docx 格式相关代码│   │   └── converter_pdf.py   *文档转 pdf 格式相关代码│   └── helper.py  助手函数├── data  数据相关│   ├── input  需要转换的文档目录│   │   ├── docxs  如果需要将 docx 文档转换成其他格式，则默认需要将文档放入此目录下│   │   │   ├── 文档1.docx│   │   │   └── 文档2.docx│   │   └── pdfs  如果需要将 pdf 文档转换成其他格式，则默认需要将文档放入此目录下│   │       ├── alex1.pdf│   │       └── sample.pdf│   └── output  文档转换后存放的文档目录│       ├── docxs  所有经过转换后的 docx 文档默认会放到此目录下│       │   ├── alex1.pdf.docx│       │   └── sample.pdf.docx│       └── pdfs  所有经过转换后的 pdf 文档默认会放到此目录下│           ├── 文档1.docx.pdf│           └── 文档2.docx.pdf├── main.py  项目入口文件├── requirements.txt  项目依赖关系清单└── runtime  项目运行相关    └── logs  日志目录        └── <span class="token number">202104</span>            └── converter-2021-04-24.log  以天为单位记录的操作日志<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>源代码基于 <a href="https://opensource.org/licenses/MIT">MIT</a> 协议发布。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubiquitous-nodejs</title>
      <link href="posts/6b5490ac.html"/>
      <url>posts/6b5490ac.html</url>
      
        <content type="html"><![CDATA[<p align="center">    </p><h1 align="center"><a href="https://pudodngping.com">ubiquitous-nodejs</a></h1>    <p align="center">⚡ ubiquity-nodejs 是一个基于 node.js 的 web 脚手架。😘 支持模版渲染、Restful API、ORM 等特性，遵循 MVC 架构。</p><p></p><h2 id="如何部署项目？"><a href="#如何部署项目？" class="headerlink" title="如何部署项目？"></a>如何部署项目？</h2><p>仓库地址：</p><ul><li><a href="https://github.com/pudongping/ubiquitous-nodejs.git">GitHub</a></li><li><a href="https://gitee.com/pudongping/ubiquitous-nodejs.git">Gitee</a></li></ul><p>本地部署</p><ol><li>直接使用 git 拉取项目源码，并进入项目根目录</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://gitee.com/pudongping/ubiquitous-nodejs.git ubiquitous <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> ./ubiquitous<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>安装项目依赖包</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>填写配置信息</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 复制开发环境配置文件</span><span class="token function">cp</span> ./config/development.js.example ./config/development.js<span class="token comment"># 复制生产环境配置文件</span><span class="token function">cp</span> ./config/production.js.example ./config/production.js<span class="token comment"># 复制测试环境配置文件</span><span class="token function">cp</span> ./config/test.js.example ./config/test.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>导入初始数据表<blockquote><p>这里只是为了演示 restful api 的 CRUD 功能，故此创建了一个初始数据库。</p></blockquote></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 连接数据库</span>mysql <span class="token parameter variable">-h</span> <span class="token operator">&lt;</span>your-mysql-host<span class="token operator">&gt;</span> <span class="token parameter variable">-u</span> <span class="token operator">&lt;</span>your-mysql-account<span class="token operator">&gt;</span> <span class="token parameter variable">-p</span> <span class="token operator">&lt;</span>your-mysql-password<span class="token operator">&gt;</span><span class="token punctuation">;</span><span class="token comment"># 导入初始数据表</span><span class="token builtin class-name">source</span> ./database/ubiquitous.sql<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>启动项目<blockquote><p>以下方式执行任意一条命令即可</p></blockquote></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 直接使用 node 执行项目入口文件的方式</span><span class="token function">node</span> <span class="token parameter variable">--use_strict</span> app.js<span class="token comment"># 使用 npm 执行</span><span class="token comment"># 运行开发环境</span><span class="token function">npm</span> start<span class="token comment"># 或者</span><span class="token function">npm</span> run dev<span class="token comment"># 运行生产环境</span><span class="token function">npm</span> run prod<span class="token comment"># 运行测试环境</span><span class="token function">npm</span> run <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="6"><li>搭建完毕！enjoy it! ✌️<blockquote><p>可以打开浏览器访问 <code>localhost:9500</code> 或者 <code>127.0.0.1:9500</code> 进行访问，即可看到首页欢迎语。</p></blockquote></li></ol><h2 id="关于项目目录"><a href="#关于项目目录" class="headerlink" title="关于项目目录"></a>关于项目目录</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">├── LICENSE  License├── README.md  项目说明文档├── app.js  项目入口文件├── bootstrap  项目启动目录│   ├── boot.js  启动文件│   ├── db.js  数据库封装│   ├── rest.js  restful api 方法封装│   ├── static-files.js  静态文件处理方法封装│   └── templating.js  模版处理方法封装├── config  配置文件目录│   ├── development.js  开发环境配置文件│   ├── development.js.example  开发环境配置文件模版│   ├── production.js.example  生产环境配置文件模版│   └── test.js.example  测试环境配置文件模板├── constants  常量文件│   └── ErrorCode.js  api 错误码常量├── controllers  控制器目录│   ├── auth  auth 模块目录│   │   └── user_controller.js  用户控制器（这里作为演示 restful api 写的 demo）│   └── home_controller.js  首页控制器 （这里作为演示模版调用写的 demo）├── database  数据文件目录│   └── ubiquitous.sql  初始化数据库文件├── lib  工具目录│   ├── api_error.js  自定义错误异常类│   └── helper.js  助手函数├── loader.js  项目加载文件（这里定义项目全局变量）├── models  模型目录│   ├── WebSite.js  站点模型文件│   ├── auth  auth 模块模型目录│   │   └── User.js  用户模型文件│   └── model.js  自动化扫描加载所有的模型├── package-lock.json  插件包描述锁文件├── package.json  插件包描述文件├── routes  路由目录│   ├── api.js  restful api 路由目录│   └── web.js  web 路由目录├── services  服务层目录│   └── auth  auth 模块服务层目录│       └── user_service.js  用户服务层文件├── static  静态文件目录│   ├── css  样式文件目录│   │   ├── googleapis-fonts.css│   │   └── iview.css│   ├── fonts  字体文件目录│   └── js  js 文件目录│       ├── iview.min.js│       └── vue.min.js└── views  视图层文件目录    ├── base.html  视图基础文件    ├── home  home 模块视图文件目录    │   └── hello.html    └── home.html  首页视图文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="项目所使用依赖包"><a href="#项目所使用依赖包" class="headerlink" title="项目所使用依赖包"></a>项目所使用依赖包</h2><table><thead><tr><th>插件包</th><th>作用</th></tr></thead><tbody><tr><td><a href="https://koa.bootcss.com/">koa</a></td><td>使用 Koa2 作为 web 框架</td></tr><tr><td><a href="https://github.com/koajs/router">koa-router</a></td><td>处理 url</td></tr><tr><td><a href="https://github.com/koajs/bodyparser">koa-bodyparser</a></td><td>解析原始 request 的 body</td></tr><tr><td><a href="https://mozilla.github.io/nunjucks/cn/templating.html">nunjucks</a></td><td>模版引擎</td></tr><tr><td><a href="https://github.com/kentcdodds/cross-env#readme">cross-env</a></td><td>环境脚本的跨平台设置</td></tr><tr><td><a href="https://github.com/normalize/mz#readme">mz</a></td><td>支持 Promise 的 fs 模块</td></tr><tr><td><a href="https://github.com/broofa/mime#readme">mime</a></td><td>读取文件的 mime</td></tr><tr><td><a href="https://github.com/sidorares/node-mysql2#readme">mysql2</a></td><td>Node.js 的 mysql 驱动程序</td></tr><tr><td><a href="https://www.sequelize.com.cn/">sequelize</a></td><td>Node.js 的 ORM 框架</td></tr><tr><td><a href="http://momentjs.cn/">moment</a></td><td>日期处理</td></tr></tbody></table><h2 id="使用演示"><a href="#使用演示" class="headerlink" title="使用演示"></a>使用演示</h2><ul><li>如果需要使用模版引擎的方式，请查看 <code>controllers/home_controller.js</code> 文件。</li><li>如果需要使用 api 的方式，请查看 <code>controllers/auth/user_controller.js</code> 文件。</li></ul><h2 id="感谢支持"><a href="#感谢支持" class="headerlink" title="感谢支持"></a>感谢支持</h2><p>如果你觉得本项目对你有所帮助,请帮忙给个 <code>Star</code>。<br>如果你想贡献一份力量,欢迎提交 <code>Pull Request</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 开源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>weather composer 插件</title>
      <link href="posts/d2a0cef0.html"/>
      <url>posts/d2a0cef0.html</url>
      
        <content type="html"><![CDATA[<h1 align="center">Weather</h1><p align="center"><span class="github-emoji"><span>🌈</span><img src="/medias/loading.gif" data-original="https://github.githubassets.com/images/icons/emoji/unicode/1f308.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 基于高德开放平台的 PHP 天气信息组件。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">composer</span> require pudongping/weather <span class="token parameter variable">-vvv</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在使用本扩展之前，你需要去 <a href="https://lbs.amap.com/dev/id/newuser">高德开放平台</a> 注册账号，然后创建应用，获取应用的 API Key。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">use</span> <span class="token package">Pudongping<span class="token punctuation">\</span>Weather<span class="token punctuation">\</span>Weather</span><span class="token punctuation">;</span><span class="token variable">$key</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'xxxxxxxxxxxxxxxxxxxxxxxxxxx'</span><span class="token punctuation">;</span><span class="token variable">$weather</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Weather</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取实时天气"><a href="#获取实时天气" class="headerlink" title="获取实时天气"></a>获取实时天气</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$weather</span><span class="token operator">-&gt;</span><span class="token function">getLiveWeather</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'上海'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回值示例：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"status"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>    <span class="token property">"count"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>    <span class="token property">"info"</span><span class="token operator">:</span> <span class="token string">"OK"</span><span class="token punctuation">,</span>    <span class="token property">"infocode"</span><span class="token operator">:</span> <span class="token string">"10000"</span><span class="token punctuation">,</span>    <span class="token property">"lives"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"province"</span><span class="token operator">:</span> <span class="token string">"上海"</span><span class="token punctuation">,</span>            <span class="token property">"city"</span><span class="token operator">:</span> <span class="token string">"上海市"</span><span class="token punctuation">,</span>            <span class="token property">"adcode"</span><span class="token operator">:</span> <span class="token string">"310000"</span><span class="token punctuation">,</span>            <span class="token property">"weather"</span><span class="token operator">:</span> <span class="token string">"阴"</span><span class="token punctuation">,</span>            <span class="token property">"temperature"</span><span class="token operator">:</span> <span class="token string">"10"</span><span class="token punctuation">,</span>            <span class="token property">"winddirection"</span><span class="token operator">:</span> <span class="token string">"东"</span><span class="token punctuation">,</span>            <span class="token property">"windpower"</span><span class="token operator">:</span> <span class="token string">"≤3"</span><span class="token punctuation">,</span>            <span class="token property">"humidity"</span><span class="token operator">:</span> <span class="token string">"73"</span><span class="token punctuation">,</span>            <span class="token property">"reporttime"</span><span class="token operator">:</span> <span class="token string">"2021-03-17 09:31:44"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取近期天气预报"><a href="#获取近期天气预报" class="headerlink" title="获取近期天气预报"></a>获取近期天气预报</h3><pre class="line-numbers language-none"><code class="language-none">$response = $weather-&gt;getForecastsWeather('上海');<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回值示例：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"status"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>    <span class="token property">"count"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>    <span class="token property">"info"</span><span class="token operator">:</span> <span class="token string">"OK"</span><span class="token punctuation">,</span>    <span class="token property">"infocode"</span><span class="token operator">:</span> <span class="token string">"10000"</span><span class="token punctuation">,</span>    <span class="token property">"forecasts"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"city"</span><span class="token operator">:</span> <span class="token string">"上海市"</span><span class="token punctuation">,</span>            <span class="token property">"adcode"</span><span class="token operator">:</span> <span class="token string">"310000"</span><span class="token punctuation">,</span>            <span class="token property">"province"</span><span class="token operator">:</span> <span class="token string">"上海"</span><span class="token punctuation">,</span>            <span class="token property">"reporttime"</span><span class="token operator">:</span> <span class="token string">"2021-03-17 10:03:15"</span><span class="token punctuation">,</span>            <span class="token property">"casts"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                    <span class="token property">"date"</span><span class="token operator">:</span> <span class="token string">"2021-03-17"</span><span class="token punctuation">,</span>                    <span class="token property">"week"</span><span class="token operator">:</span> <span class="token string">"3"</span><span class="token punctuation">,</span>                    <span class="token property">"dayweather"</span><span class="token operator">:</span> <span class="token string">"小雨"</span><span class="token punctuation">,</span>                    <span class="token property">"nightweather"</span><span class="token operator">:</span> <span class="token string">"小雨"</span><span class="token punctuation">,</span>                    <span class="token property">"daytemp"</span><span class="token operator">:</span> <span class="token string">"12"</span><span class="token punctuation">,</span>                    <span class="token property">"nighttemp"</span><span class="token operator">:</span> <span class="token string">"9"</span><span class="token punctuation">,</span>                    <span class="token property">"daywind"</span><span class="token operator">:</span> <span class="token string">"东北"</span><span class="token punctuation">,</span>                    <span class="token property">"nightwind"</span><span class="token operator">:</span> <span class="token string">"东北"</span><span class="token punctuation">,</span>                    <span class="token property">"daypower"</span><span class="token operator">:</span> <span class="token string">"4"</span><span class="token punctuation">,</span>                    <span class="token property">"nightpower"</span><span class="token operator">:</span> <span class="token string">"4"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                    <span class="token property">"date"</span><span class="token operator">:</span> <span class="token string">"2021-03-18"</span><span class="token punctuation">,</span>                    <span class="token property">"week"</span><span class="token operator">:</span> <span class="token string">"4"</span><span class="token punctuation">,</span>                    <span class="token property">"dayweather"</span><span class="token operator">:</span> <span class="token string">"小雨"</span><span class="token punctuation">,</span>                    <span class="token property">"nightweather"</span><span class="token operator">:</span> <span class="token string">"小雨"</span><span class="token punctuation">,</span>                    <span class="token property">"daytemp"</span><span class="token operator">:</span> <span class="token string">"13"</span><span class="token punctuation">,</span>                    <span class="token property">"nighttemp"</span><span class="token operator">:</span> <span class="token string">"10"</span><span class="token punctuation">,</span>                    <span class="token property">"daywind"</span><span class="token operator">:</span> <span class="token string">"东"</span><span class="token punctuation">,</span>                    <span class="token property">"nightwind"</span><span class="token operator">:</span> <span class="token string">"东"</span><span class="token punctuation">,</span>                    <span class="token property">"daypower"</span><span class="token operator">:</span> <span class="token string">"4"</span><span class="token punctuation">,</span>                    <span class="token property">"nightpower"</span><span class="token operator">:</span> <span class="token string">"4"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                    <span class="token property">"date"</span><span class="token operator">:</span> <span class="token string">"2021-03-19"</span><span class="token punctuation">,</span>                    <span class="token property">"week"</span><span class="token operator">:</span> <span class="token string">"5"</span><span class="token punctuation">,</span>                    <span class="token property">"dayweather"</span><span class="token operator">:</span> <span class="token string">"小雨"</span><span class="token punctuation">,</span>                    <span class="token property">"nightweather"</span><span class="token operator">:</span> <span class="token string">"小雨"</span><span class="token punctuation">,</span>                    <span class="token property">"daytemp"</span><span class="token operator">:</span> <span class="token string">"14"</span><span class="token punctuation">,</span>                    <span class="token property">"nighttemp"</span><span class="token operator">:</span> <span class="token string">"9"</span><span class="token punctuation">,</span>                    <span class="token property">"daywind"</span><span class="token operator">:</span> <span class="token string">"北"</span><span class="token punctuation">,</span>                    <span class="token property">"nightwind"</span><span class="token operator">:</span> <span class="token string">"北"</span><span class="token punctuation">,</span>                    <span class="token property">"daypower"</span><span class="token operator">:</span> <span class="token string">"4"</span><span class="token punctuation">,</span>                    <span class="token property">"nightpower"</span><span class="token operator">:</span> <span class="token string">"4"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                    <span class="token property">"date"</span><span class="token operator">:</span> <span class="token string">"2021-03-20"</span><span class="token punctuation">,</span>                    <span class="token property">"week"</span><span class="token operator">:</span> <span class="token string">"6"</span><span class="token punctuation">,</span>                    <span class="token property">"dayweather"</span><span class="token operator">:</span> <span class="token string">"阴"</span><span class="token punctuation">,</span>                    <span class="token property">"nightweather"</span><span class="token operator">:</span> <span class="token string">"阴"</span><span class="token punctuation">,</span>                    <span class="token property">"daytemp"</span><span class="token operator">:</span> <span class="token string">"15"</span><span class="token punctuation">,</span>                    <span class="token property">"nighttemp"</span><span class="token operator">:</span> <span class="token string">"8"</span><span class="token punctuation">,</span>                    <span class="token property">"daywind"</span><span class="token operator">:</span> <span class="token string">"西北"</span><span class="token punctuation">,</span>                    <span class="token property">"nightwind"</span><span class="token operator">:</span> <span class="token string">"西北"</span><span class="token punctuation">,</span>                    <span class="token property">"daypower"</span><span class="token operator">:</span> <span class="token string">"4"</span><span class="token punctuation">,</span>                    <span class="token property">"nightpower"</span><span class="token operator">:</span> <span class="token string">"4"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取-XML-格式返回值"><a href="#获取-XML-格式返回值" class="headerlink" title="获取 XML 格式返回值"></a>获取 XML 格式返回值</h3><p>以上两个方法第二个参数为返回值类型，可选 <code>json</code> 与 <code>xml</code>，默认 <code>json</code>：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$weather</span><span class="token operator">-&gt;</span><span class="token function">getLiveWeather</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'上海'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'xml'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>返回值示例：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>response</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>status</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>status</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>count</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>count</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>info</span><span class="token punctuation">&gt;</span></span>OK<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>info</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>infocode</span><span class="token punctuation">&gt;</span></span>10000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>infocode</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lives</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>live</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>province</span><span class="token punctuation">&gt;</span></span>上海<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>province</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>city</span><span class="token punctuation">&gt;</span></span>上海市<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>city</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>adcode</span><span class="token punctuation">&gt;</span></span>310000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>adcode</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>weather</span><span class="token punctuation">&gt;</span></span>小雨<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>weather</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>temperature</span><span class="token punctuation">&gt;</span></span>10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>temperature</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>winddirection</span><span class="token punctuation">&gt;</span></span>东北<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>winddirection</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>windpower</span><span class="token punctuation">&gt;</span></span>≤3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>windpower</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>humidity</span><span class="token punctuation">&gt;</span></span>73<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>humidity</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>reporttime</span><span class="token punctuation">&gt;</span></span>2021-03-17 10:03:15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>reporttime</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>live</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lives</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>response</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><pre class="line-numbers language-none"><code class="language-none">array | string   getLiveWeather(string $city, string $format = 'json')array | string   getForecastsWeather(string $city, string $format = 'json')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><ul><li><code>$city</code> - 城市名/<a href="https://lbs.amap.com/api/webservice/guide/api/district">高德地址位置 adcode</a>，比如：“上海” 或者（adcode：310000）；</li><li><code>$format</code>  - 输出的数据格式，默认为 json 格式，当 format 设置为 “<code>xml</code>” 时，输出的为 XML 格式的数据。</li></ul></blockquote><h3 id="在-Laravel-中使用"><a href="#在-Laravel-中使用" class="headerlink" title="在 Laravel 中使用"></a>在 Laravel 中使用</h3><blockquote><p>laravel version &gt;= 8.x 或者直接使用以上通用方法，以上方法适用于任意 php 框架</p></blockquote><p>执行 <code>artisan</code> 命令，发布配置文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">php artisan vendor:publish <span class="token parameter variable">--provider</span><span class="token operator">=</span><span class="token string">"Pudongping\Weather\ServiceProvider"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 Laravel 中使用也是同样的安装方式，配置写在 <code>config/weather.php</code> 中，或者自己在 <code>config</code> 目录下新建 <code>weather.php</code> 文件，填写以下内容亦可。</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">return</span> <span class="token punctuation">[</span>    <span class="token string single-quoted-string">'key'</span> <span class="token operator">=&gt;</span> <span class="token function">env</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'WEATHER_API_KEY'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在 <code>.env</code> 中配置 <code>WEATHER_API_KEY</code> ：</p><pre class="line-numbers language-env" data-language="env"><code class="language-env">WEATHER_API_KEY=xxxxxxxxxxxxxxxxxxxxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以用两种方式来获取 <code>Pudongping\Weather\Weather</code> 实例：</p><h4 id="方法参数注入"><a href="#方法参数注入" class="headerlink" title="方法参数注入"></a>方法参数注入</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">showWeather</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Weather</span> <span class="token variable">$weather</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token variable">$weather</span><span class="token operator">-&gt;</span><span class="token function">getLiveWeather</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'上海'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 或者直接使用城市的 adcode 传参</span>    <span class="token comment">// $response = $weather-&gt;getLiveWeather('310000');</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="服务名访问"><a href="#服务名访问" class="headerlink" title="服务名访问"></a>服务名访问</h4><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">showWeather</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token function">app</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'weather'</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">getLiveWeather</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'上海'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 或者直接使用城市的 adcode 传参</span>    <span class="token comment">// $response = app('weather')-&gt;getLiveWeather('310000');</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://lbs.amap.com/api/webservice/guide/api/weatherinfo/">高德开放平台天气接口</a></li></ul><h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>MIT</p>]]></content>
      
      
      <categories>
          
          <category> 开源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
            <tag> Composer </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>larablog 博客开源</title>
      <link href="posts/b6f184c0.html"/>
      <url>posts/b6f184c0.html</url>
      
        <content type="html"><![CDATA[<h1 id="基于-Laravel6-x-构建的博客应用，支持-Markdown，支持图片拖拽上传，基于-RBAC-权限管理系统"><a href="#基于-Laravel6-x-构建的博客应用，支持-Markdown，支持图片拖拽上传，基于-RBAC-权限管理系统" class="headerlink" title="基于 Laravel6.x 构建的博客应用，支持 Markdown，支持图片拖拽上传，基于 RBAC 权限管理系统"></a>基于 Laravel6.x 构建的博客应用，支持 Markdown，支持图片拖拽上传，基于 RBAC 权限管理系统</h1><p>首页</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-f32ef21d42b702c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="首页.png"></p><p>基于 RBAC 的权限管理后台，Dashboard 页面统计了用户总数、文章发布总数、评论率、评论总数、文章支持按天、按月、按年统计、支持按分类、按标签统计……</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-74c132c165d20aae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="后台首页.png"></p><p>登录页面</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-93885ee50879719e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="登录页面.png"></p><p>注册页面</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-a883ff409344f8c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="注册页面.png"></p><p>支持 GitHub 授权登录</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-f87b0926873bdfd0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="GitHub授权登录页面.png"></p><p>支持邮箱重置密码</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-11fbe50ac341bf7e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="重置密码页面.png"></p><p>同时兼容 HTML 编辑器和 Markdown 编辑器</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-537e03bdc254a951.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="富文本编辑器.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-c1c8018845d986ba.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="markdown 编辑器.png"></p><p>Markdown 编辑器：支持拖拽粘贴上传图片、预览、全屏、分屏预览</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-092682db5e3cec7a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="markdown 编辑器预览效果.png"></p><p>支持代码高亮</p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-5263abf6268ddf98.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="文章详情.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-9db84df41d52c0a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="后台用户.png"></p><h2 id="项目概述"><a href="#项目概述" class="headerlink" title="项目概述"></a>项目概述</h2><ul><li>项目名称：larablog</li><li>项目简介：基于 laravel6.x 开发的博客项目</li><li>访问地址：<a href="https://blog.pudongping.com/">https://blog.pudongping.com/</a></li></ul><h2 id="功能如下"><a href="#功能如下" class="headerlink" title="功能如下"></a>功能如下</h2><ul><li>用户认证 —— 注册、登录、退出；</li><li>个人中心 —— 用户个人中心，编辑资料；</li><li>用户授权 —— 作者才能删除自己的内容；</li><li>上传图片 —— 修改头像和编辑文章时上传图片；</li><li>表单验证 —— 使用表单验证类；</li><li>重置密码 —— 通过邮箱找回密码</li><li>文章支持分类、多标签、访问量统计；</li><li>编辑文章支持 markdown 编辑器 、html 编辑器；</li><li>markdown 编辑器支持拖拽上传图片、截屏粘贴上传图片、语法高亮、预览、全屏、分屏实时预览；</li><li>文章发布时自动 Slug 翻译，支持使用队列方式以提高响应；</li><li>站点『活跃用户』计算，一小时计算一次；</li><li>多角色权限管理 —— 允许站长，管理员权限的存在；</li><li>后台管理 —— 基于 RBAC 后台数据模型管理；</li><li>邮件通知 —— 发送新回复邮件通知，队列发送邮件；</li><li>站内通知 —— 文章有新回复；</li><li>自定义 Artisan 命令行 —— 自定义活跃用户计算命令；</li><li>自定义 Trait —— 活跃用户的业务逻辑实现；</li><li>自定义中间件 —— 记录用户的最后登录时间；</li><li>XSS 安全防御；</li><li>第三方授权登录，目前支持 GitHub，兼容 Facebook，Twitter，LinkedIn，Google，GitHub，GitLab 和 Bitbucket 的身份验证；</li><li>支持自定义 meta title、description、keywords；</li><li>支持友链</li><li>站点地图</li><li>RSS 订阅</li></ul><h2 id="运行环境要求"><a href="#运行环境要求" class="headerlink" title="运行环境要求"></a>运行环境要求</h2><ul><li>Nginx 1.8+</li><li>PHP 7.0+</li><li>Mysql 5.7+</li><li>Redis 3.0+</li></ul><h2 id="开发环境部署和安装"><a href="#开发环境部署和安装" class="headerlink" title="开发环境部署和安装"></a>开发环境部署和安装</h2><p>本项目代码使用 PHP 框架 laravel6.x 开发，本地开发环境使用 <a href="https://xueyuanjun.com/post/19915.html">Laravel Homestead</a>。</p><h2 id="基础安装"><a href="#基础安装" class="headerlink" title="基础安装"></a>基础安装</h2><ol><li>克隆源代码</li></ol><p>克隆 <code>larablog</code> 源代码到本地：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// gitee<span class="token function">git</span> clone git@gitee.com:pudongping/larablog.git// GitHub<span class="token function">git</span> clone git@github.com:pudongping/larablog.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>安装扩展包依赖</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 先切换到 larablog 项目根目录<span class="token builtin class-name">cd</span> larablog// 执行安装命令，并忽略掉开发环境才需要的插件包<span class="token function">composer</span> <span class="token function">install</span> --no-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>生成配置文件</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> .env.example .env<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>你可以根据情况修改 .env 文件里的内容，如数据库连接、缓存、邮件设置、第三方授权登录等：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">DB_HOST</span><span class="token operator">=</span>localhost<span class="token assign-left variable">DB_DATABASE</span><span class="token operator">=</span>larablog<span class="token assign-left variable">DB_USERNAME</span><span class="token operator">=</span>homestead<span class="token assign-left variable">DB_PASSWORD</span><span class="token operator">=</span>secret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>生成数据表及生成测试数据</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 需要生成测试数据则执行：php artisan migrate <span class="token parameter variable">--seed</span>// 不需要生成测试数据则执行：php artisan migrate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>生成秘钥</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">php artisan key:generate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="6"><li>创建 storage 软连接</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">php artisan storage:link<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="7"><li>赋予 storage 相应权限</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 建议在 Linux 系统中新建一个 www 用户，并设置该用户不可登录系统<span class="token function">useradd</span> <span class="token parameter variable">-s</span> /sbin/nologin www// 将项目目录所有权赋予 www 用户<span class="token function">chown</span> <span class="token parameter variable">-Rf</span> www:www larablog// 给 storage 目录赋权限<span class="token function">chmod</span> <span class="token parameter variable">-Rf</span> 0755 larablog/storage/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="8"><li>配置 hosts 文件  （如果直接想部署在线上环境，则跳过此步骤）</li></ol><p>如果开发环境没有采用 Laravel Homestead 则 ip 映射以你实际为主，一般为 127.0.0.1。我这里使用的 Laravel Homestead 虚拟机的 ip 地址为：192.168.10.10</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// Linux 或 MacOS 环境<span class="token builtin class-name">echo</span> <span class="token string">"192.168.10.10   larablog.test"</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> <span class="token parameter variable">-a</span> /etc/hosts// Windows 环境需要打开 C:/Windows/System32/Drivers/etc/hosts  文件，然后新增一行<span class="token number">192.168</span>.10.10 larablog.test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="前端安装"><a href="#前端安装" class="headerlink" title="前端安装"></a>前端安装</h2><ol><li>安装 npm 和 yarn</li></ol><p><strong>CentOS / Fedora / RHEL 环境下</strong></p><blockquote><p>文档地址：<a href="https://yarn.bootcss.com/docs/install/#centos-stable">https://yarn.bootcss.com/docs/install/#centos-stable</a></p></blockquote><ul><li>配置相应的 yum 源</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">--silent</span> <span class="token parameter variable">--location</span> https://dl.yarnpkg.com/rpm/yarn.repo <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/yum.repos.d/yarn.repo<span class="token function">curl</span> <span class="token parameter variable">--silent</span> <span class="token parameter variable">--location</span> https://rpm.nodesource.com/setup_8.x <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">bash</span> -<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>之后执行以下任意一条命令，就可以了</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token function">yarn</span><span class="token comment">## OR ##</span><span class="token function">sudo</span> dnf <span class="token function">install</span> <span class="token function">yarn</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Windows 环境下</strong></p><ul><li>安装 node.js</li></ul><p>直接去官网 <a href="https://nodejs.org/en/">https://nodejs.org/en</a> 下载安装最新版本。</p><ul><li>安装 Yarn</li></ul><p>请安装最新版本的 Yarn —— <a href="https://nodejs.org/en/">http://yarnpkg.cn/zh-Hans/docs/install</a></p><ol start="2"><li>为 NPM 和 Yarn 配置淘宝镜像，加速安装包下载</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token builtin class-name">set</span> <span class="token assign-left variable">registry</span><span class="token operator">=</span>https://registry.npm.taobao.org<span class="token function">yarn</span> config <span class="token builtin class-name">set</span> registry https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>使用 Yarn 安装前端依赖包</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">yarn</span> <span class="token function">install</span>或者<span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>监控 resources 文件夹下的资源文件是否有发生改变。在 watch-poll 命令运行的情况下，一旦资源文件发生变化，Webpack 会自动重新编译。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> run watch-poll// 如果遇到报错，尝试先执行以下命令更新 <span class="token function">npm</span> 到最新版本，之后再次执行监控命令<span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> <span class="token function">npm</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>编译前端内容</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 运行所有 Mix 任务<span class="token function">npm</span> run dev// 运行所有 Mix 任务并缩小输出<span class="token function">npm</span> run production// 或者执行<span class="token function">yarn</span> production<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="访问入口"><a href="#访问入口" class="headerlink" title="访问入口"></a>访问入口</h2><ul><li>首页地址： <a href="http://larablog.test/">http://larablog.test</a></li><li>后台管理：<a href="http://larablog.test/admin">http://larablog.test/admin</a></li></ul><p>管理员账号密码如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">username: <span class="token number">1414818093</span>@qq.compassword: <span class="token number">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>默认网站第一位用户为站长角色，第二位用户为管理员角色。如果填充了测试数据，则默认所有用户的密码为：123456</p><p>==至此，安装完成^_^。enjoy yourself……==</p><h2 id="后端扩展包使用情况"><a href="#后端扩展包使用情况" class="headerlink" title="后端扩展包使用情况"></a>后端扩展包使用情况</h2><table><thead><tr><th>扩展包</th><th>简介描述</th><th>本项目应用场景</th></tr></thead><tbody><tr><td><a href="https://packagist.org/packages/laravel/ui">laravel/ui</a></td><td>laravel 6.x UI 脚手架</td><td>前端页面框架</td></tr><tr><td><a href="https://github.com/barryvdh/laravel-ide-helper">barryvdh/laravel-ide-helper</a></td><td>能让你的 IDE (PHPStorm, Sublime) 实现自动补全、代码智能提示和代码跟踪等功能</td><td>代码补全和智能提示</td></tr><tr><td><a href="https://github.com/barryvdh/laravel-debugbar">barryvdh/laravel-debugbar</a></td><td>页面调试工具栏 (对 phpdebugbar 的封装)</td><td>开发环境中的 DEBUG</td></tr><tr><td><a href="https://github.com/overtrue/laravel-lang">overtrue/laravel-lang</a></td><td>支持 52 个国家的语言包</td><td>翻译 Laravel 自带模板</td></tr><tr><td><a href="https://github.com/mewebstudio/captcha">mews/captcha</a></td><td>图片验证码</td><td>注册页面图片验证码</td></tr><tr><td><a href="https://github.com/Intervention/image">intervention/image</a></td><td>图片处理功能库</td><td>用于图片裁剪</td></tr><tr><td><a href="https://github.com/summerblue-ext-forks/active">summerblue/laravel-active</a></td><td>方便设置 active 类</td><td>文章排序添加 active 类</td></tr><tr><td><a href="https://github.com/mewebstudio/Purifier">mews/purifier</a></td><td>用户提交的 Html 白名单过滤</td><td>文章内容的 Html 安全过滤，防止 XSS 攻击</td></tr><tr><td><a href="https://github.com/guzzle/guzzle">guzzlehttp/guzzle</a></td><td>HTTP 请求套件</td><td>请求百度翻译 API，翻译文章标题，做 SEO 优化</td></tr><tr><td><a href="https://github.com/overtrue/pinyin">overtrue/pinyin</a></td><td>基于 CC-CEDICT 词典的中文转拼音工具</td><td>翻译文章标题的备用方案</td></tr><tr><td><a href="https://github.com/nrk/predis">predis/predis</a></td><td>Redis 官方首推的 PHP 客户端开发包</td><td>缓存驱动 Redis 基础扩展包</td></tr><tr><td><a href="https://learnku.com/docs/laravel/6.x/horizon/5190">laravel/horizon</a></td><td>队列监控</td><td>队列监控命令与页面控制台 /horizon</td></tr><tr><td><a href="https://github.com/spatie/laravel-permission">spatie/laravel-permission</a></td><td>角色权限管理</td><td>角色和权限控制</td></tr><tr><td><a href="https://github.com/viacreative/sudo-su">viacreative/sudo-su</a></td><td>用户切换</td><td>调试环境中快速切换登录账号</td></tr><tr><td><a href="https://github.com/erusev/parsedown">erusev/parsedown</a></td><td>markdown 转换 html 工具</td><td>文章模块解析 markdown 语法</td></tr><tr><td><a href="https://github.com/thephpleague/html-to-markdown">thephpleague/html-to-markdown</a></td><td>html 转换成 markdown 工具</td><td>文章编辑采用 markdown 编辑器时</td></tr><tr><td><a href="https://socialiteproviders.netlify.com/providers/git-hub.html">laravel/socialite</a></td><td>laravel 官方推荐社会化登录</td><td>Github 登录</td></tr><tr><td><a href="https://packagist.org/packages/suin/php-rss-writer">suin/php-rss-writer</a></td><td>rss 订阅生成</td><td>生成 rss 订阅代码</td></tr><tr><td><a href="https://github.com/hhxsv5/laravel-s/blob/master/README-CN.md">hhxsv5/laravel-s</a></td><td>LaravelS 是 Swoole 和 Laravel/Lumen 之间开箱即用的适配器</td><td>优化访问速度</td></tr></tbody></table><h2 id="前端扩展包使用情况"><a href="#前端扩展包使用情况" class="headerlink" title="前端扩展包使用情况"></a>前端扩展包使用情况</h2><table><thead><tr><th>扩展包</th><th>简介描述</th><th>本项目应用场景</th></tr></thead><tbody><tr><td><a href="https://fontawesome.com/">yarn add @fortawesome/fontawesome-free</a></td><td>Font Awesome 提供了可缩放的矢量图标</td><td>字体图标库</td></tr><tr><td><a href="https://github.com/BlackrockDigital/startbootstrap-sb-admin-2">npm i startbootstrap-sb-admin-2</a></td><td>界面简洁美观的皮肤</td><td>cms 后台模板</td></tr><tr><td><a href="https://simplemde.com/">npm install simplemde</a></td><td>markdown 编辑器</td><td>文章编辑器</td></tr><tr><td><a href="https://highlightjs.org/">npm install highlight.js</a></td><td>语法高亮工具</td><td>markdown 编辑器代码语法高亮</td></tr><tr><td><a href="https://github.com/Rovak/InlineAttachment">npm install inline-attachment</a></td><td>文本框拖动上传图片工具</td><td>markdown 文本框图片拖动上传</td></tr><tr><td><a href="http://loudev.com/">multiselect.js</a></td><td>多选下拉框</td><td>文章多选标签</td></tr><tr><td><a href="https://www.chartjs.org/">chartjs</a></td><td>图表插件</td><td>后台管理界面图表</td></tr></tbody></table><h2 id="邮箱认证"><a href="#邮箱认证" class="headerlink" title="邮箱认证"></a>邮箱认证</h2><ul><li>开发环境时将 <code>.ENV</code> 文件设置为如下所示，将邮箱认证邮件发送至当前日志中，以便调试  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">MAIL_DRIVER</span><span class="token operator">=</span>log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>生产环境时，建议将 <code>.ENV</code> 文件中相关邮件设置为自己所需配置，以下为默认配置  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">MAIL_DRIVER</span><span class="token operator">=</span>smtp<span class="token assign-left variable">MAIL_HOST</span><span class="token operator">=</span>smtp.mailtrap.io<span class="token assign-left variable">MAIL_PORT</span><span class="token operator">=</span><span class="token number">2525</span><span class="token assign-left variable">MAIL_USERNAME</span><span class="token operator">=</span>null<span class="token assign-left variable">MAIL_PASSWORD</span><span class="token operator">=</span>null<span class="token assign-left variable">MAIL_ENCRYPTION</span><span class="token operator">=</span>null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="翻译队列"><a href="#翻译队列" class="headerlink" title="翻译队列"></a>翻译队列</h2><ul><li>修改 <code>.ENV</code> 文件设置为</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 如果是开发环境的话，就把队列驱动改回 sync 同步模式，也就是说不使用任何队列，实时执行：</span><span class="token assign-left variable">QUEUE_CONNECTION</span><span class="token operator">=</span>redis<span class="token assign-left variable">REDIS_CLIENT</span><span class="token operator">=</span>predis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>启动队列系统，队列在启动完成后会进入监听状态</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">php artisan queue:listen或者使用php artisan horizon<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="文章标题翻译"><a href="#文章标题翻译" class="headerlink" title="文章标题翻译"></a>文章标题翻译</h2><blockquote><p><a href="http://api.fanyi.baidu.com/api/trans/product/apidoc">使用了百度翻译 api</a>，请将 <code>.ENV</code>中的百度 api 相关信息换成你自己的<a href="http://api.fanyi.baidu.com/api/trans/product/desktop?req=developer">开发者信息</a></p></blockquote><p>如果不采用百度翻译翻译文章标题的话，那么不用配置 <code>.ENV</code> 文件中以下配置项</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 百度翻译 APP ID</span><span class="token assign-left variable">BAIDU_TRANSLATE_APPID</span><span class="token operator">=</span><span class="token comment"># 百度翻译密钥 KEY</span><span class="token assign-left variable">BAIDU_TRANSLATE_KEY</span><span class="token operator">=</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>并且也不需要更改</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">QUEUE_CONNECTION</span><span class="token operator">=</span>redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>默认保持为</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">QUEUE_CONNECTION</span><span class="token operator">=</span>sync<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这样将会每发一篇文章时，将文章标题直接翻译成拼音达到 slug 的效果。</p><h2 id="邮件通知"><a href="#邮件通知" class="headerlink" title="邮件通知"></a>邮件通知</h2><blockquote><p>如果不想要，发表文章评论时有邮件通知，可以不用配置，直接忽略，功能上没有任何影响</p></blockquote><ol><li>需要先开启 QQ 邮箱的 SMTP 支持</li></ol><p><a href="https://service.mail.qq.com/cgi-bin/help?subtype=1&amp;id=28&amp;no=166">如何打开 POP3/SMTP/IMAP 功能？</a></p><ol start="2"><li>邮箱发送配置 （请将以下配置换成你自己的邮箱配置）</li></ol><blockquote><p>如果你是使用的阿里云 ECS，那么一定要注意，阿里云的 ECS 默认禁用了 25 端口，需要单独申请解封25端口，<a href="https://yundun.console.aliyun.com/?spm=5176.2020520101.console-base-top.duser-0.33bf4df5FEFEdS&amp;p=sc#/sc/port">点我解封阿里云 ECS 25端口</a>，如果你不知道如何解封，请查看 <a href="https://help.aliyun.com/knowledge_detail/56130.html">解封步骤</a>。当然替代方案，你可以采用 465 端口，如果你打算采用 465 端口，那么需要将以下配置中的 <code>MAIL_PORT</code> 修改为 465,并且也需要将加密类型 <code>MAIL_ENCRYPTION</code> 修改为 ssl 即可，这里我使用的是 qq 邮箱，可能其他的邮箱服务有差异，视情况而定吧。</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用支持 ESMTP 的 SMTP 服务器发送邮件</span><span class="token assign-left variable">MAIL_DRIVER</span><span class="token operator">=</span>smtp<span class="token comment"># QQ 邮箱的 SMTP 服务器地址，必须为此值</span><span class="token assign-left variable">MAIL_HOST</span><span class="token operator">=</span>smtp.qq.com<span class="token comment"># QQ 邮箱的 SMTP 服务器端口，必须为此值</span><span class="token assign-left variable">MAIL_PORT</span><span class="token operator">=</span><span class="token number">25</span><span class="token comment"># 请将此值换为你的 QQ + @qq.com</span><span class="token assign-left variable">MAIL_USERNAME</span><span class="token operator">=</span>xxxxxxxxxxxxxx@qq.com<span class="token comment"># 密码是我们第一步拿到的授权码</span><span class="token assign-left variable">MAIL_PASSWORD</span><span class="token operator">=</span>xxxxxxxxx<span class="token comment"># 加密类型，选项 null 表示不使用任何加密，其他选项还有 ssl，这里我们使用 tls 即可，如果出现报错的话，多半是因为这个 smtp 主机不支持 TLS，那么只需要将此项设置为 null 即可。</span><span class="token assign-left variable">MAIL_ENCRYPTION</span><span class="token operator">=</span>tls<span class="token comment"># 此值必须同 MAIL_USERNAME 一致</span><span class="token assign-left variable">MAIL_FROM_ADDRESS</span><span class="token operator">=</span>xxxxxxxxxxxxxx@qq.com<span class="token comment"># 用来作为邮件的发送者名称</span><span class="token assign-left variable">MAIL_FROM_NAME</span><span class="token operator">=</span>番茄炖土豆的个人博客<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>如果需要支持队列，请将 <code>.ENV</code> 配置文件中，设置成</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">QUEUE_CONNECTION</span><span class="token operator">=</span>redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="用户切换调试"><a href="#用户切换调试" class="headerlink" title="用户切换调试"></a>用户切换调试</h2><p>默认只在调试模式 <code>.ENV</code> 文件中</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">APP_DEBUG</span><span class="token operator">=</span>true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>时启用，且 <code>config/sudosu.php</code> 文件中</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">// 允许使用的顶级域名</span><span class="token string single-quoted-string">'allowed_tlds'</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'dev'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'local'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>顶级域名（Top Level Domain）加入你域名的顶级域名</p><h2 id="第三方授权登录"><a href="#第三方授权登录" class="headerlink" title="第三方授权登录"></a>第三方授权登录</h2><p>目前项目中只支持 github 授权登录，因为只申请了 GitHub 的 OAuth application，如果你也需要使用 GitHub 作为第三方授权登录，那么需要按照以下步骤进行：</p><ol><li>在 GitHub 上注册一个 <a href="https://github.com/settings/applications/new">OAuth application</a></li></ol><ul><li>Application name：你可以填写你自己的应用名称，比如：myWebBlog</li><li>Homepage URL：首页连接地址需要添加你自己的，比如：<a href="http://larablog.test/">http://larablog.test</a></li><li>Application description：应用描述可以随便填写，比如：自己的博客</li><li>Authorization callback URL：授权回调地址，一定要填写成： <your domain="">/login/github/callback  ，比如，我这里则需要填写成：<a href="http://larablog.test/login/github/callback">http://larablog.test/login/github/callback</a></your></li></ul><ol start="2"><li>注册成功之后，需要在 <code>.ENV</code> 配置文件中填写申请成功的 Client ID 和 Client Secret。填写好之后，直接访问  <a href="http://larablog.test/login/github">http://larablog.test/login/github</a>  即可支持 GitHub 第三方授权登录，如果不设置 <code>.ENV</code> 配置文件，则登录、注册页面不会显示 GitHub 第三方授权登录入口。</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Github Client ID</span><span class="token assign-left variable">GITHUB_CLIENT_ID</span><span class="token operator">=</span><span class="token comment"># Github Client Secret</span><span class="token assign-left variable">GITHUB_CLIENT_SECRET</span><span class="token operator">=</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>扩展其它第三方授权登录。<blockquote><p>Socialite 目前支持 Facebook，Twitter，LinkedIn，Google，GitHub，GitLab 和 Bitbucket 的身份验证。本项目已经对以上支持的第三方登录做了兼容性处理，如果我们需要支持以上除 GitHub 以外的应用（因为目前已经设置好了 GitHub 相关的配置），那么我们只需要按照以下的步骤配置即可。这里以 Google 为例子。</p></blockquote></li></ol><ul><li>第一步：申请 <code>google</code> 的 Client ID 和 Client Secret。</li><li>第二步：将申请的 Client ID 和 Client Secret 填写入 <code>.ENV</code> 配置文件中</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">GOOGLE_CLIENT_ID</span><span class="token operator">=</span><span class="token string">"your google client id"</span><span class="token assign-left variable">GOOGLE_CLIENT_SECRET</span><span class="token operator">=</span><span class="token string">"your google client secret"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>第三步：配置 app/services.php</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token string">'google'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>    <span class="token string">'client_id'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> env<span class="token punctuation">(</span><span class="token string">'GOOGLE_CLIENT_ID'</span><span class="token punctuation">)</span>,  // google 客户端授权 ID    <span class="token string">'client_secret'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> env<span class="token punctuation">(</span><span class="token string">'GOOGLE_CLIENT_SECRET'</span><span class="token punctuation">)</span>,  // google 客户端授权密钥    <span class="token string">'redirect'</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token string">'/login/google/callback'</span>,  // 授权回调链接 如果 redirect 配置项包含的是相对路径，系统会自动将其转化为完整 URL<span class="token punctuation">]</span>,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>第四步：将第三方服务添加到 <code>app/Models/Auth/User.php</code> =&gt; <code>$allowedProviders</code> 数组中</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">public static <span class="token variable">$allowedProviders</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'github'</span>, <span class="token string">'google'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>第五步：直接访问 <your domain="">/login/google 即可</your></li></ul><h2 id="自定义-Artisan-命令"><a href="#自定义-Artisan-命令" class="headerlink" title="自定义 Artisan 命令"></a>自定义 Artisan 命令</h2><table><thead><tr><th>命令</th><th>说明</th><th>Cron</th></tr></thead><tbody><tr><td>php artisan larablog:calculate-active-user</td><td>生成活跃用户</td><td>一个小时运行一次</td></tr><tr><td>php artisan larablog:sync-article-view-count</td><td>同步文章的访问量</td><td>每天早上 0 点准时</td></tr><tr><td>php artisan larablog:sync-user-actived-at</td><td>从 Redis 中同步最后登录时间到数据库中</td><td>每天早上 0 点准时</td></tr></tbody></table><h2 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h2><p>当前计划任务主要是计算主页右侧 「活跃用户」</p><p><code>artisan</code> 命令为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">php artisan larablog:calculate-active-user<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同步文章的访问量</p><p><code>artisan</code> 命令为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">php artisan larablog:sync-article-view-count<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>和同步 「用户最后活跃时间」 到数据库</p><p><code>artisan</code> 命令为：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">php artisan larablog:sync-user-actived-at<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>并且已经在 <code>调度器</code> 中设置好了相关代码。（调度器在 app/Console/Kernel.php 文件的 schedule 方法中定义）</p><p>使用 Linux 系统的 Cron 计划任务需执行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">EDITOR</span><span class="token operator">=</span>vi <span class="token operator">&amp;&amp;</span> <span class="token function">crontab</span> <span class="token parameter variable">-e</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后填入以下内容（注意将项目根目录换成你自己的）<br>这里我的项目根目录为：<code>/home/vagrant/Code/larablog</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">* * * * * php /home/vagrant/Code/larablog/artisan schedule:run <span class="token operator">&gt;&gt;</span> /dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>如果不设定计划任务的话，直接执行以上 Artisan 命令的话会是如下情况：<br>「活跃用户」将每 65 分钟重新生成一次，设定计划任务的话，默认一个小时重新生成一次。<br>「用户最后活跃时间」将不会同步到数据库中，将会直接从 Redis 中获取，如果 Redis 中不存在，则以用户注册时间替代。</p></blockquote><h2 id="队列清单"><a href="#队列清单" class="headerlink" title="队列清单"></a>队列清单</h2><table><thead><tr><th>文件路径</th><th>说明</th><th>调用时机</th></tr></thead><tbody><tr><td>app\Notifications\ArticleReplied.php</td><td>通知文章作者有新评论回复</td><td>文章被评论以后 App\Observers\Portal\Article\ReplyObserver@created</td></tr><tr><td>app\Jobs\TranslateSlug.php</td><td>将文章标题翻译为 Slug</td><td>文章保存时 App\Observers\Portal\Article\ArticleObserver@saved</td></tr></tbody></table><h2 id="线上部署"><a href="#线上部署" class="headerlink" title="线上部署"></a>线上部署</h2><p>如果需要优化网站打开速度，可依次进行如下步骤：</p><ul><li>压缩前端代码</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> run prod<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>缓存路由</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 缓存路由</span>php artisan route:cache<span class="token comment"># 清空路由缓存</span>php artisan route:clear<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>缓存配置文件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 缓存配置文件</span>php artisan config:cache<span class="token comment"># 清空配置文件缓存</span>php artisan cache:clear<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>composer 优化</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">composer</span> dump-autoload <span class="token parameter variable">--optimize</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>类映射加载优化</li></ul><p>在 <code>laravel 6.x</code> 中，会生成 <code>bootstrap/cache/config.php</code> 和 <code>bootstrap/cache/packages.php</code> 和 <code>bootstrap/cache/routes.php</code> 和 <code>bootstrap/cache/services.php</code> 这四个文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">php artisan optimize<span class="token comment"># 清空类映射</span>php artisan optimize:clear<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>使用 swoole 加速网站</li></ul><p>在项目根目录下执行以下命令，以守护进程的方式运行 <a href="https://github.com/hhxsv5/laravel-s/blob/master/README-CN.md">laravelS</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">php bin/laravels start <span class="token parameter variable">-d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参考以下内容配置 nginx 配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">upstream swoole <span class="token punctuation">{</span>    <span class="token comment"># 如果是使用 laradock ，请将 127.0.0.1 更改为 workspace</span>    server <span class="token number">127.0</span>.0.1:5200 <span class="token assign-left variable">weight</span><span class="token operator">=</span><span class="token number">5</span> <span class="token assign-left variable">max_fails</span><span class="token operator">=</span><span class="token number">3</span> <span class="token assign-left variable">fail_timeout</span><span class="token operator">=</span>30s<span class="token punctuation">;</span>    keepalive <span class="token number">16</span><span class="token punctuation">;</span><span class="token punctuation">}</span>server <span class="token punctuation">{</span>    listen <span class="token number">80</span><span class="token punctuation">;</span>    server_name pudongping.com blog.pudongping.com<span class="token punctuation">;</span>    root /www/wwwroot/larablog/public<span class="token punctuation">;</span>    index index.html index.htm index.php<span class="token punctuation">;</span>    charset utf-8<span class="token punctuation">;</span>    location / <span class="token punctuation">{</span>        try_files <span class="token variable">$uri</span> @laravels<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    location <span class="token operator">=</span> /favicon.ico <span class="token punctuation">{</span> access_log off<span class="token punctuation">;</span> log_not_found off<span class="token punctuation">;</span> <span class="token punctuation">}</span>    location <span class="token operator">=</span> /robots.txt  <span class="token punctuation">{</span> access_log off<span class="token punctuation">;</span> log_not_found off<span class="token punctuation">;</span> <span class="token punctuation">}</span>    access_log  /www/wwwlogs/pudongping.com.log<span class="token punctuation">;</span>    error_log  /www/wwwlogs/pudongping.com.error.log<span class="token punctuation">;</span>    sendfile off<span class="token punctuation">;</span>    client_max_body_size 100m<span class="token punctuation">;</span>    location @laravels <span class="token punctuation">{</span>        <span class="token comment"># proxy_connect_timeout 60s;</span>        <span class="token comment"># proxy_send_timeout 60s;</span>        <span class="token comment"># proxy_read_timeout 120s;</span>        proxy_http_version <span class="token number">1.1</span><span class="token punctuation">;</span>        proxy_set_header Connection <span class="token string">""</span><span class="token punctuation">;</span>        proxy_set_header X-Real-IP <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>        proxy_set_header X-Real-PORT <span class="token variable">$remote_port</span><span class="token punctuation">;</span>        proxy_set_header X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>        proxy_set_header Host <span class="token variable">$http_host</span><span class="token punctuation">;</span>        proxy_set_header Scheme <span class="token variable">$scheme</span><span class="token punctuation">;</span>        proxy_set_header Server-Protocol <span class="token variable">$server_protocol</span><span class="token punctuation">;</span>        proxy_set_header Server-Name <span class="token variable">$server_name</span><span class="token punctuation">;</span>        proxy_set_header Server-Addr <span class="token variable">$server_addr</span><span class="token punctuation">;</span>        proxy_set_header Server-Port <span class="token variable">$server_port</span><span class="token punctuation">;</span>        <span class="token comment"># “swoole”是指upstream</span>        proxy_pass http://swoole<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    location ~ /<span class="token punctuation">\</span>.ht <span class="token punctuation">{</span>        deny all<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果是使用 laradock 的话，还需要将 <code>.env</code> 添加监听地址为 <code>workspace</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">LARAVELS_LISTEN_IP</span><span class="token operator">=</span>workspace<span class="token comment"># 设置后台启动 laravelS 服务，如果需要查看则执行 ps -ef|grep laravels 命令</span><span class="token assign-left variable">LARAVELS_DAEMONIZE</span><span class="token operator">=</span>true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><p>遵循 <a href="https://www.php-fig.org/psr/psr-2/">PSR-2</a> 编码风格规范<br>遵循 <a href="https://learnku.com/docs/psr/psr-12-extended-coding-style-guide/5789">PSR-12</a> 编码规范扩充</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>代码中涵盖了丰富的注释，如果仍有不清楚之处，可以给我留言。<br>如果你觉得还不错，请帮我点一下  Star，不胜感激 ！❤(❤´艸｀❤)</p><p><a href="https://github.com/pudongping/larablog">GitHub</a> 地址<br><a href="https://gitee.com/pudongping/larablog">码云</a> 地址</p><h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>源代码基于 <a href="https://opensource.org/licenses/MIT">MIT</a> 协议发布。</p>]]></content>
      
      
      <categories>
          
          <category> 开源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Laravel </tag>
            
            <tag> GitHub </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用 gitbook 快速编写个人书籍或笔记？</title>
      <link href="posts/b00f410f.html"/>
      <url>posts/b00f410f.html</url>
      
        <content type="html"><![CDATA[<h1 id="GitBook-使用"><a href="#GitBook-使用" class="headerlink" title="GitBook 使用"></a><a href="https://github.com/GitbookIO">GitBook</a> 使用</h1><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><blockquote><p><a href="https://www.gitbook.com/">GitBook 官网</a><br><a href="https://github.com/GitbookIO/gitbook">GitBook 文档</a><br><a href="https://blankj.com/gitbook/gitbook/">GitBook 使用教程</a><br><a href="https://juejin.im/post/6844903865146441741">推荐12个实用的gitbook插件</a><br><a href="http://jartto.wang/2020/02/02/about-gitbook/">GitBook 和它有趣的插件</a></p></blockquote><h2 id="示例图"><a href="#示例图" class="headerlink" title="示例图"></a>示例图</h2><p><img src="/medias/loading.gif" data-original="https://pudongping.github.io/notes/resources/images/sample/page.png" alt="页面截图"></p><h2 id="在线访问"><a href="#在线访问" class="headerlink" title="在线访问"></a>在线访问</h2><p><a href="https://pudongping.github.io/notes">蒲东平的编程笔记</a> 或者 <a href="https://pudongping.github.io/notes">蒲东平的编程笔记-GitHub Pages</a></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>安装</li></ul><blockquote><p>安装 GitBook 之前需要安装 <code>Node.js</code> ， <code>GitBook</code> 是一个基于 <code>Node.js</code> 的命令行工具，因此需要先下载安装 <a href="https://nodejs.org/en">Node.js</a></p></blockquote><pre class="line-numbers language-none"><code class="language-none"># 查看 node.js 是否安装成功node -v# 安装 GitBook npm install gitbook-cli -g# 查看 GitBook 是否安装成功gitbook -V （大写的 V ）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更多详情可以参考 <a href="https://github.com/GitbookIO/gitbook/blob/master/docs/setup.md">GitBook 官方安装文档</a> 来安装 GitBook</p><ul><li>创建项目</li></ul><pre class="line-numbers language-none"><code class="language-none"># 切换到项目文件夹并创建项目mkdir project-directory &amp;&amp; cd project-directory &amp;&amp; gitbook init# 或者直接使用以下命令gitbook init ./project-directory<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>启动项目</li></ul><pre class="line-numbers language-none"><code class="language-none">cd project-directory &amp;&amp; gitbook serve// 如果不想使用 4000 端口，想要使用 9520 端口时gitbook serve -p 9520<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在浏览器地址栏中输入 <code>http://localhost:4000</code> 便可预览书籍，至此，gitbook 安装完毕。</p><ul><li>编译项目 （生成网页而不开启服务器）</li></ul><pre class="line-numbers language-none"><code class="language-none">cd project-directory &amp;&amp; gitbook build<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>查看所有可用的 gitbook 版本</li></ul><pre class="line-numbers language-none"><code class="language-none">gitbook ls-remote<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>安装指定的 gitbook 版本</li></ul><pre class="line-numbers language-none"><code class="language-none">gitbook fetch beta（版本号）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>编译时，输出目录详细的记录包括 debug</li></ul><pre class="line-numbers language-none"><code class="language-none">gitbook build ./ --log=debug --debug<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="关于配置"><a href="#关于配置" class="headerlink" title="关于配置"></a>关于配置</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>需要在项目根目录下手动创建 <code>book.json</code> 或者 <code>book.js</code> 文件</p><h3 id="配置文件变量"><a href="#配置文件变量" class="headerlink" title="配置文件变量"></a>配置文件变量</h3><p>可以参考这篇文章中的介绍：<a href="https://chrisniael.gitbooks.io/gitbook-documentation/content/format/templating.html">GitBook文档（中文版）</a></p><h3 id="如果需要导出-pdf-等文件"><a href="#如果需要导出-pdf-等文件" class="headerlink" title="如果需要导出 pdf 等文件"></a>如果需要导出 pdf 等文件</h3><p>可以参考这篇文章中的介绍： <a href="https://snowdreams1006.github.io/myGitbook/advance/export.html">导出电子书</a></p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>安装插件有两种方式： <a href="https://www.npmjs.com/search?q=gitbook-plugin">点我搜索更多 gitbook 插件</a></p><ol><li>在 <code>/book.json</code> 配置文件中写入相应的插件和配置后，使用 <code>gitbook install</code> 命令安装插件</li><li>直接使用 <code>npm install gitbook-plugin-pluginname</code> 命令安装指定的插件，然后在 <code>/book.json</code> 配置文件中写入配置，比如安装 <code>highlight</code> 插件时，需要执行 <code>npm install gitbook-plugin-highlight</code></li></ol><pre class="line-numbers language-npm" data-language="npm"><code class="language-npm">npm install gitbook-plugin-search-pro --registry=https://registry.npm.taobao.org/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="GitBook-初始化时，会默认自动下载-7-个插件"><a href="#GitBook-初始化时，会默认自动下载-7-个插件" class="headerlink" title="GitBook 初始化时，会默认自动下载 7 个插件"></a>GitBook 初始化时，会默认自动下载 7 个插件</h3><ol><li><a href="https://github.com/GitbookIO/plugin-highlight">highlight</a>  ： 代码高亮</li><li><a href="https://github.com/GitbookIO/plugin-search">search</a>  ： 导航栏查询功能 （不支持中文）</li><li><a href="https://www.npmjs.com/package/gitbook-plugin-lunr">lunr</a>  ：  为 <code>search</code> 插件提供后端支持</li><li><a href="https://github.com/GitbookIO/plugin-sharing">sharing</a>  ： 右上角分享功能</li><li><a href="https://github.com/GitbookIO/plugin-fontsettings">fontsettings</a>  ： 字体设置（最上方的 “A” 符号）</li><li><a href="https://github.com/GitbookIO/plugin-livereload">livereload</a>  ： 为 GitBook 实时重新加载</li><li><a href="https://www.npmjs.com/package/gitbook-plugin-theme-default">theme-default</a>  ：  默认的 3.0.0 版本之后的主题插件</li></ol><h3 id="推荐插件"><a href="#推荐插件" class="headerlink" title="推荐插件"></a>推荐插件</h3><ul><li><a href="https://github.com/codeclou/gitbook-plugin-advanced-emoji">advanced-emoji</a>  ： 支持 emoji 表情包  <a href="https://www.webfx.com/tools/emoji-cheat-sheet/">emoji 表情包地址</a></li><li><a href="https://github.com/zq99299/gitbook-plugin-anchor-navigation-ex/blob/master/doc/config.md">anchor-navigation-ex</a>  ： 悬浮按钮目录  （在页面中增加 <extoc></extoc> 标签，会在此处生成 TOC 目录）、还会增加标题锚</li><li><a href="https://www.npmjs.com/package/gitbook-plugin-auto-scroll-table">auto-scroll-table</a>  ：  表格滚动条</li><li><a href="https://www.npmjs.com/package/gitbook-plugin-audio_image">audio_image</a>  ： 播放音频</li><li><a href="https://github.com/stuebersystems/gitbook-plugin-back-to-top-button">back-to-top-button</a> ： 返回顶部</li><li><a href="https://snowdreams1006.github.io/gitbook-plugin-baidu-tongji-with-multiple-channel/">baidu-tongji-with-multiple-channel</a>  ：  百度统计插件,支持多渠道独立统计,一份源码多处部署独立统计</li><li><a href="https://www.npmjs.com/package/gitbook-plugin-chapter-fold">chapter-fold</a>  ： 左侧目录可折叠，建议和 <code>expandable-chapters</code> 插件一起使用可以互补相互的 bug</li><li><a href="https://github.com/TGhoul/gitbook-plugin-code">code</a> ： 代码添加行号和复制按钮</li><li><a href="https://github.com/zhenchao125/gitbook-plugin-change_girls">change_girls</a>  ： 可自动切换背景</li><li><a href="https://github.com/c4software/gitbook-plugin-click-reveal">click-reveal</a>  ： 点击显示内容，默认把内容已经隐藏</li><li><a href="https://github.com/Bandwidth/gitbook-plugin-custom-favicon">custom-favicon</a>  ：  修改标题栏图标</li><li><a href="https://www.npmjs.com/package/gitbook-plugin-copyright">copyright</a>  ：  用于复制内容时追加版权信息以及文章末尾添加版权小尾巴</li><li><a href="https://github.com/willin/gitbook-plugin-donate">donate</a> ： 打赏功能</li><li><a href="https://github.com/snowdreams1006/gitbook-plugin-diff/blob/HEAD/README_zh.md">diff</a>  ： 在 markdown 文档中显示代码之间的差异</li><li><a href="https://github.com/chrisjake/gitbook-plugin-expandable-chapters-small">expandable-chapters</a>  ： 左侧目录可折叠，和 <code>expandable-chapters-small</code> 的区别是： <code>expandable-chapters-small</code> 的折叠图标要小一些 （建议和 <code>chapter-fold</code> 插件一起使用可以互补相互的 bug）</li><li><a href="https://www.npmjs.com/package/gitbook-plugin-edit-link-plus">edit-link-plus</a>  ： 在线编辑文件</li><li><a href="https://github.com/fzankl/gitbook-plugin-flexible-alerts">flexible-alerts</a> ：警告提示框</li><li><a href="https://github.com/menduo/gitbook-plugin-favicon">favicon</a>  ： 修改网站的 favicon.ico  <a href="http://www.bitbug.net/">点我在线制作ico图标，建议尺寸32*32</a></li><li><a href="https://www.npmjs.com/package/gitbook-plugin-ga">ga</a> ： Google 分析</li><li><a href="https://github.com/GitbookIO/plugin-github">github</a> ： 右上角添加 Github 图标</li><li><a href="https://github.com/azu/gitbook-plugin-github-buttons">github-buttons</a>  ： 右上角添加 GitHub 的按钮</li><li><a href="https://www.npmjs.com/package/gitbook-plugin-charts">gitbook-plugin-charts</a>  ：  在 gitbook 中使用图表插件，目前支持 echarts</li><li><a href="https://github.com/snowdreams1006/gitbook-plugin-google-tongji-with-multiple-channel">google-tongji-with-multiple-channel</a>  ：  Google 统计插件,支持多渠道独立统计,一份源码多处部署独立统计</li><li><a href="https://www.npmjs.com/package/gitbook-plugin-hide-element">hide-element</a>  ：  隐藏元素</li><li><a href="https://github.com/todvora/gitbook-plugin-image-captions">image-captions</a> ： 将图片的 alt 或 title 属性转换为标题</li><li><a href="https://github.com/matusnovak/gitbook-plugin-insert-logo">insert-logo</a> ： 插入 Logo</li><li><a href="https://github.com/snowdreams1006/gitbook-plugin-icp/blob/HEAD/README_zh.md">icp</a>  ：  在首页页脚区域添加 icp 网站备案信息</li><li><a href="https://github.com/brian-dawn/gitbook-plugin-klipse">klipse</a>  ： 嵌入类似 IDE 的功能</li><li><a href="https://www.npmjs.com/package/gitbook-plugin-lightbox">lightbox</a>  ：  页面弹窗查看图片 （支持在弹层切换上下图）</li><li><a href="https://github.com/PacktPublishing/gitbook-local-video">local-video</a>  ：  播放本地视频，<a href="http://gitbook.zhangjikai.com/plugins.html#local-video">点我查看使用教程</a></li><li><a href="https://www.npmjs.com/package/gitbook-plugin-multipart">multipart</a> ： 将左侧的目录分章节展示</li><li><a href="https://www.npmjs.com/package/gitbook-plugin-mygitalk">mygitalk</a>  ：  通过 GitHub issues 添加评论框</li><li><a href="https://www.npmjs.com/package/gitbook-plugin-mermaid-gb3">mermaid-gb3</a>  ： 支持 markdown 的流程图</li><li><a href="https://www.npmjs.com/package/gitbook-plugin-meta">meta</a>  ： 添加 meta 头部信息</li><li><a href="https://www.npmjs.com/package/gitbook-plugin-page-copyright">page-copyright</a> ： 页脚版权</li><li><a href="https://github.com/tinys/gitbook-plugin-pageview-count#readme">pageview-count</a> ： 阅读统计</li><li><a href="https://github.com/somax/gitbook-plugin-popup#readme">popup</a>  ：  打开新的页面查看图片</li><li><a href="https://github.com/gaearon/gitbook-plugin-prism">prism</a>  ：  代码块颜色插件 （使用的时候需要禁用掉 gitbook 自带的 <code>highlight</code> 插件并且和 <code>code</code> 插件一起使用时，需要放到 <code>code</code> 插件后，否则样式会被覆盖掉）</li><li><a href="https://www.npmjs.com/package/gitbook-plugin-rss">rss</a>  ： 生成 rss <a href="https://www.ruanyifeng.com/blog/2006/01/rss.html">如何使用 RSS </a></li><li><a href="https://www.npmjs.com/package/gitbook-plugin-readmore">readmore</a>  ： 实现博客的每一篇文章自动增加阅读更多效果,关注公众号后方可解锁全站文章</li><li><a href="https://github.com/GitbookIO/plugin-sharing">sharing-plus</a> ： 分享当前页面</li><li><a href="https://github.com/yoshidax/gitbook-plugin-splitter">splitter</a> ： 侧边栏宽度可调节</li><li><a href="https://github.com/gitbook-plugins/gitbook-plugin-search-pro">search-pro</a> ： 高级搜索，支持中文 （使用的时候需要禁用掉 <code>lunr</code> 和 <code>search</code> 插件）</li><li><a href="https://github.com/manchiyiu/gitbook-plugin-sectionx">sectionx</a>  ： 折叠模块(页面内容可折叠)</li><li><a href="https://github.com/CyberZHG/gitbook-plugin-sitemap-general">sitemap-general</a>  ： 生成站点地图</li><li><a href="https://snowdreams1006.github.io/gitbook-plugin-simple-mind-map/zh/">simple-mind-map</a>  ：  在 markdown 中生成并导出思维导图</li><li><a href="https://github.com/ly-tools/gitbook-plugin-todo">todo</a> ： 待做项</li><li><a href="https://github.com/tonyyls/gitbook-plugin-theme-fexa">theme-fexa</a>  :  网站主题，使用这个主题之后不能够在页面上进行上下文翻页</li><li><a href="https://www.npmjs.com/package/gitbook-plugin-theme-comscore">theme-comscore</a>  ： 标题和正文颜色有所区分的主题，表格也有颜色</li><li><a href="https://github.com/zhj3618/gitbook-plugin-tbfed-pagefooter">tbfed-pagefooter</a>  ： 添加页脚版权信息，这个感觉没有 <code>page-copyright</code> 好用</li></ul><h2 id="我自己的-book-json-配置信息"><a href="#我自己的-book-json-配置信息" class="headerlink" title="我自己的 book.json 配置信息"></a>我自己的 book.json 配置信息</h2><blockquote><p>注意：需要删除掉所有的注释信息</p></blockquote><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Alex's Notes"</span><span class="token punctuation">,</span>  <span class="token comment">// 设置书本的标题</span>    <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">"Alex"</span><span class="token punctuation">,</span>  <span class="token comment">// 作者的相关信息</span>    <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"live and learn"</span><span class="token punctuation">,</span>  <span class="token comment">// 本书的简单描述</span>    <span class="token property">"language"</span><span class="token operator">:</span> <span class="token string">"zh-hans"</span><span class="token punctuation">,</span>  <span class="token comment">// 可使用的语言：en, ar, bn, cs, de, en, es, fa, fi, fr, he, it, ja, ko, no, pl, pt, ro, ru, sv, uk, vi, zh-hans, zh-tw 这里我选择的是简体中文 zh-hans</span>    <span class="token property">"gitbook"</span><span class="token operator">:</span> <span class="token string">"3.2.3"</span><span class="token punctuation">,</span>  <span class="token comment">// 指定使用的 gitbook 版本</span>    <span class="token property">"styles"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">// 自定义页面样式</span>        <span class="token property">"website"</span><span class="token operator">:</span> <span class="token string">"./resources/styles/website.css"</span><span class="token punctuation">,</span>  <span class="token comment">// 当此时的 gitbook 输出为站点模式时使用的 css 样式</span>        <span class="token comment">// "ebook": "styles/ebook.css",  // 当此时的 gitbook 输出为 ebook 时使用的 css 样式</span>        <span class="token comment">// "pdf": "styles/pdf.css",  // 当此时的 gitbook 输出为 pdf 时使用的 css 样式</span>        <span class="token comment">// "mobi": "styles/mobi.css",</span>        <span class="token comment">// "epub": "styles/epub.css"        </span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"structure"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">// 指定 Readme、Summary、Glossary 和 Languages 对应的文件名</span>        <span class="token property">"readme"</span><span class="token operator">:</span> <span class="token string">"README.md"</span><span class="token punctuation">,</span>  <span class="token comment">// 该书的介绍 （默认会创建）</span>        <span class="token property">"summary"</span><span class="token operator">:</span> <span class="token string">"SUMMARY.md"</span><span class="token punctuation">,</span>  <span class="token comment">// 该书的章节结构 （默认会创建）</span>        <span class="token comment">// "glossary": "GLOSSARY.md",  // 多语言书籍</span>        <span class="token comment">// "languages": "LANGS.md",  // 术语描述的清单</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"links"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">// 在左侧导航栏添加链接信息</span>        <span class="token property">"sidebar"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"我的博客"</span><span class="token operator">:</span> <span class="token string">"https://drling.xin/"</span><span class="token punctuation">,</span>            <span class="token property">"GitHub"</span><span class="token operator">:</span> <span class="token string">"https://github.com/pudongping"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token comment">// 需要使用的插件列表，注释插件的时候直接在插件名称前加 “横杠 -”，比如注释 “highlight” 插件为 “-highlight”</span>        <span class="token string">"-highlight"</span><span class="token punctuation">,</span>        <span class="token string">"-lunr"</span><span class="token punctuation">,</span>        <span class="token string">"-search"</span><span class="token punctuation">,</span>        <span class="token string">"search-pro"</span><span class="token punctuation">,</span>        <span class="token string">"-sharing"</span><span class="token punctuation">,</span>        <span class="token string">"sharing-plus"</span><span class="token punctuation">,</span>        <span class="token string">"fontsettings"</span><span class="token punctuation">,</span>        <span class="token string">"livereload"</span><span class="token punctuation">,</span>        <span class="token string">"expandable-chapters-small"</span><span class="token punctuation">,</span>        <span class="token string">"chapter-fold"</span><span class="token punctuation">,</span>        <span class="token string">"splitter"</span><span class="token punctuation">,</span>        <span class="token string">"hide-element"</span><span class="token punctuation">,</span>        <span class="token string">"back-to-top-button"</span><span class="token punctuation">,</span>        <span class="token string">"favicon"</span><span class="token punctuation">,</span>        <span class="token string">"insert-logo"</span><span class="token punctuation">,</span>        <span class="token string">"pageview-count"</span><span class="token punctuation">,</span>        <span class="token string">"code"</span><span class="token punctuation">,</span>        <span class="token string">"prism"</span><span class="token punctuation">,</span>        <span class="token string">"lightbox"</span><span class="token punctuation">,</span>        <span class="token string">"github"</span><span class="token punctuation">,</span>        <span class="token string">"github-buttons"</span><span class="token punctuation">,</span>        <span class="token string">"donate"</span><span class="token punctuation">,</span>        <span class="token string">"anchor-navigation-ex"</span><span class="token punctuation">,</span>        <span class="token string">"meta"</span><span class="token punctuation">,</span>        <span class="token string">"mygitalk"</span><span class="token punctuation">,</span>        <span class="token string">"change_girls"</span><span class="token punctuation">,</span>        <span class="token string">"simple-mind-map"</span><span class="token punctuation">,</span>        <span class="token string">"image-captions"</span><span class="token punctuation">,</span>        <span class="token string">"todo"</span><span class="token punctuation">,</span>        <span class="token string">"edit-link-plus"</span><span class="token punctuation">,</span>        <span class="token string">"sitemap-general"</span><span class="token punctuation">,</span>        <span class="token string">"rss"</span><span class="token punctuation">,</span>        <span class="token string">"icp"</span><span class="token punctuation">,</span>        <span class="token string">"theme-comscore"</span><span class="token punctuation">,</span>        <span class="token string">"page-copyright"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"pluginsConfig"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"sharing"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"douban"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token property">"facebook"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"google"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token property">"hatenaBookmark"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"instapaper"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"line"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"linkedin"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"messenger"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"pocket"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"qq"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token property">"qzone"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token property">"stumbleupon"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"twitter"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"viber"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"vk"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"weibo"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token property">"whatsapp"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"all"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"douban"</span><span class="token punctuation">,</span>                <span class="token string">"facebook"</span><span class="token punctuation">,</span>                <span class="token string">"google"</span><span class="token punctuation">,</span>                <span class="token string">"hatenaBookmark"</span><span class="token punctuation">,</span>                <span class="token string">"instapaper"</span><span class="token punctuation">,</span>                <span class="token string">"line"</span><span class="token punctuation">,</span>                <span class="token string">"linkedin"</span><span class="token punctuation">,</span>                <span class="token string">"messenger"</span><span class="token punctuation">,</span>                <span class="token string">"pocket"</span><span class="token punctuation">,</span>                <span class="token string">"qq"</span><span class="token punctuation">,</span>                <span class="token string">"qzone"</span><span class="token punctuation">,</span>                <span class="token string">"stumbleupon"</span><span class="token punctuation">,</span>                <span class="token string">"twitter"</span><span class="token punctuation">,</span>                <span class="token string">"viber"</span><span class="token punctuation">,</span>                <span class="token string">"vk"</span><span class="token punctuation">,</span>                <span class="token string">"weibo"</span><span class="token punctuation">,</span>                <span class="token string">"whatsapp"</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"hide-element"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"elements"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"a.gitbook-link[href='https://www.gitbook.com']"</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"favicon"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"shortcut"</span><span class="token operator">:</span> <span class="token string">"./resources/images/favicon.ico"</span><span class="token punctuation">,</span>            <span class="token property">"bookmark"</span><span class="token operator">:</span> <span class="token string">"./resources/images/favicon.ico"</span><span class="token punctuation">,</span>            <span class="token property">"appleTouch"</span><span class="token operator">:</span> <span class="token string">"./resources/images/favicon.png"</span><span class="token punctuation">,</span>            <span class="token property">"appleTouchMore"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"120x120"</span><span class="token operator">:</span> <span class="token string">"./resources/images/apple-touch-icon-120x120.png"</span><span class="token punctuation">,</span>                <span class="token property">"180x180"</span><span class="token operator">:</span> <span class="token string">"./resources/images/apple-touch-icon-180x180.png"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"insert-logo"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"/resources/images/favicon.png"</span><span class="token punctuation">,</span>            <span class="token property">"style"</span><span class="token operator">:</span> <span class="token string">"background: none; max-height: 30px; min-height: 30px"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"prism"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"css"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"prismjs/themes/prism-solarizedlight.css"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"lang"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"shell"</span><span class="token operator">:</span> <span class="token string">"bash"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"lightbox"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"sameUuid"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token comment">// 开启了这个属性之后支持在弹层，左右切换图片</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"github"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://github.com/pudongping"</span>  <span class="token comment">// 在右上角会显示很小的 github 的官方图标</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"github-buttons"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token comment">// 在右上角会显示 github 图标的 button</span>            <span class="token property">"buttons"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                    <span class="token property">"user"</span><span class="token operator">:</span> <span class="token string">"pudongping"</span><span class="token punctuation">,</span>                    <span class="token property">"repo"</span><span class="token operator">:</span> <span class="token string">"glory"</span><span class="token punctuation">,</span>                    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"star"</span><span class="token punctuation">,</span>                    <span class="token property">"count"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                    <span class="token property">"size"</span><span class="token operator">:</span> <span class="token string">"small"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"donate"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"alipay"</span><span class="token operator">:</span> <span class="token string">"/resources/images/donate.png"</span><span class="token punctuation">,</span>            <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"\"若有共鸣，留言足矣，若有赞赏，何以复加？\""</span><span class="token punctuation">,</span>            <span class="token property">"button"</span><span class="token operator">:</span> <span class="token string">"赞赏"</span><span class="token punctuation">,</span>            <span class="token property">"alipayText"</span><span class="token operator">:</span> <span class="token string">"微信/支付宝/QQ"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"anchor-navigation-ex"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"showLevel"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment">// 右上角浮层目录显示序号</span>            <span class="token property">"showGoTop"</span><span class="token operator">:</span> <span class="token boolean">false</span>  <span class="token comment">// 不显示回到顶部的图标，不建议开启这个属性，因为这个图标总是显示，不像 “back-to-top-button” 插件还可以自动显示和隐藏</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"meta"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"referrer"</span><span class="token punctuation">,</span>                    <span class="token property">"content"</span><span class="token operator">:</span> <span class="token string">"never"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"mygitalk"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"clientID"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token comment">// GitHub 开发者设置，客户端连接标识</span>            <span class="token property">"clientSecret"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token comment">// GitHub 开发者设置，客户端秘钥</span>            <span class="token property">"repo"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token comment">// GitHub 仓库名</span>            <span class="token property">"owner"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token comment">// GitHub 仓库所有者</span>            <span class="token property">"admin"</span><span class="token operator">:</span> <span class="token punctuation">[</span>  <span class="token comment">// GitHub 仓库管理者，支持多个管理者</span>                <span class="token string">"admin-1"</span><span class="token punctuation">,</span>                <span class="token string">"admin-2"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"distractionFreeMode"</span><span class="token operator">:</span> <span class="token boolean">false</span>  <span class="token comment">// 类似 Facebook 评论框的全屏遮罩效果,默认值: false</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"change_girls"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"time"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token comment">// 每 5 秒切换一次背景</span>            <span class="token property">"urls"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1605033246957&amp;di=d6170f1a9f0466f270ad1baee847eab9&amp;imgtype=0&amp;src=http%3A%2F%2Fpic1.win4000.com%2Fwallpaper%2Fe%2F55f26f55e9138.jpg"</span><span class="token punctuation">,</span>                <span class="token string">"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1605033334002&amp;di=4ef73db6c98fb737f5a3068670160056&amp;imgtype=0&amp;src=http%3A%2F%2Fww3.sinaimg.cn%2Flarge%2Fd2e27164gw1fbmwbgf0mij21hc0u0487.jpg"</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"simple-mind-map"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"markdown"</span><span class="token punctuation">,</span>            <span class="token property">"preset"</span><span class="token operator">:</span> <span class="token string">"colorful"</span><span class="token punctuation">,</span>            <span class="token property">"linkShape"</span><span class="token operator">:</span> <span class="token string">"diagonal"</span><span class="token punctuation">,</span>            <span class="token property">"autoFit"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"image-captions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"caption"</span><span class="token operator">:</span> <span class="token string">"sugaryesp 的笔记 - _PAGE_LEVEL_._PAGE_IMAGE_NUMBER_ - _CAPTION_"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"edit-link-plus"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"base"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"edit-link-name-1"</span><span class="token operator">:</span> <span class="token string">"edit-link-1"</span><span class="token punctuation">,</span>                <span class="token property">"edit-link-name-2"</span><span class="token operator">:</span> <span class="token string">"edit-link-2"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"defaultBase"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token comment">// 这里填写链接地址</span>            <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"编辑本页"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"sitemap-general"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"prefix"</span><span class="token operator">:</span> <span class="token string">"http://notes.drling.xin/"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"rss"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"sugaryesp 的笔记"</span><span class="token punctuation">,</span>            <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"削个椰子皮_给个梨的笔记"</span><span class="token punctuation">,</span>            <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">"Alex"</span><span class="token punctuation">,</span>            <span class="token property">"site_url"</span><span class="token operator">:</span> <span class="token string">"http://notes.drling.xin"</span><span class="token punctuation">,</span>            <span class="token property">"feed_url"</span><span class="token operator">:</span> <span class="token string">"http://notes.drling.xin/rss"</span><span class="token punctuation">,</span>            <span class="token property">"managingEditor"</span><span class="token operator">:</span> <span class="token string">"276558492@qq.com (Alex Pu)"</span><span class="token punctuation">,</span>            <span class="token property">"webMaster"</span><span class="token operator">:</span> <span class="token string">"276558492@qq.com (Alex Pu)"</span><span class="token punctuation">,</span>            <span class="token property">"categories"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"markdown"</span><span class="token punctuation">,</span>                <span class="token string">"git"</span><span class="token punctuation">,</span>                <span class="token string">"gitee"</span><span class="token punctuation">,</span>                <span class="token string">"github"</span><span class="token punctuation">,</span>                <span class="token string">"php"</span><span class="token punctuation">,</span>                <span class="token string">"python"</span><span class="token punctuation">,</span>                <span class="token string">"vue.js"</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"icp"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"number"</span><span class="token operator">:</span> <span class="token string">"鄂ICP备18004705号"</span><span class="token punctuation">,</span>            <span class="token property">"link"</span><span class="token operator">:</span> <span class="token string">"https://beian.miit.gov.cn/"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"page-copyright"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"modified at:"</span><span class="token punctuation">,</span>            <span class="token property">"signature"</span><span class="token operator">:</span> <span class="token string">"Alex"</span><span class="token punctuation">,</span>            <span class="token property">"wisdom"</span><span class="token operator">:</span> <span class="token string">"Artisan, Backend Developer &amp; overall web enthusiast"</span><span class="token punctuation">,</span>            <span class="token property">"format"</span><span class="token operator">:</span> <span class="token string">"YYYY-MM-dd hh:mm:ss"</span><span class="token punctuation">,</span>            <span class="token property">"copyright"</span><span class="token operator">:</span> <span class="token string">"Copyright &amp;#169; Alex"</span><span class="token punctuation">,</span>            <span class="token property">"timeColor"</span><span class="token operator">:</span> <span class="token string">"#666"</span><span class="token punctuation">,</span>            <span class="token property">"copyrightColor"</span><span class="token operator">:</span> <span class="token string">"#666"</span><span class="token punctuation">,</span>            <span class="token property">"utcOffset"</span><span class="token operator">:</span> <span class="token string">"8"</span><span class="token punctuation">,</span>            <span class="token property">"style"</span><span class="token operator">:</span> <span class="token string">"normal"</span><span class="token punctuation">,</span>            <span class="token property">"noPowered"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token property">"baseUri"</span><span class="token operator">:</span> <span class="token string">"http://notes.drling.xin/"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="如果使用-gitbook-install-安装插件太慢，可以使用-npm-init-初始化项目，然后再使用-npm-install-安装插件"><a href="#如果使用-gitbook-install-安装插件太慢，可以使用-npm-init-初始化项目，然后再使用-npm-install-安装插件" class="headerlink" title="如果使用 gitbook install 安装插件太慢，可以使用 npm init 初始化项目，然后再使用 npm install 安装插件"></a>如果使用 gitbook install 安装插件太慢，可以使用 npm init 初始化项目，然后再使用 npm install 安装插件</h2><pre class="line-numbers language-none"><code class="language-none">cd project-directory &amp;&amp; npm init// 比如安装 livereload 插件npm install gitbook-plugin-livereload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="这是我的-package-json"><a href="#这是我的-package-json" class="headerlink" title="这是我的 package.json"></a>这是我的 package.json</h3><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"glory"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Alex's notes"</span><span class="token punctuation">,</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">" "</span><span class="token punctuation">,</span>  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"gitbook-plugin-anchor-navigation-ex"</span><span class="token operator">:</span> <span class="token string">"^1.0.14"</span><span class="token punctuation">,</span>    <span class="token property">"gitbook-plugin-back-to-top-button"</span><span class="token operator">:</span> <span class="token string">"^0.1.4"</span><span class="token punctuation">,</span>    <span class="token property">"gitbook-plugin-change_girls"</span><span class="token operator">:</span> <span class="token string">"^2.2.1"</span><span class="token punctuation">,</span>    <span class="token property">"gitbook-plugin-chapter-fold"</span><span class="token operator">:</span> <span class="token string">"^0.0.4"</span><span class="token punctuation">,</span>    <span class="token property">"gitbook-plugin-code"</span><span class="token operator">:</span> <span class="token string">"^0.1.0"</span><span class="token punctuation">,</span>    <span class="token property">"gitbook-plugin-donate"</span><span class="token operator">:</span> <span class="token string">"^1.0.2"</span><span class="token punctuation">,</span>    <span class="token property">"gitbook-plugin-edit-link-plus"</span><span class="token operator">:</span> <span class="token string">"^0.1.1"</span><span class="token punctuation">,</span>    <span class="token property">"gitbook-plugin-expandable-chapters-small"</span><span class="token operator">:</span> <span class="token string">"^0.1.7"</span><span class="token punctuation">,</span>    <span class="token property">"gitbook-plugin-favicon"</span><span class="token operator">:</span> <span class="token string">"^0.0.2"</span><span class="token punctuation">,</span>    <span class="token property">"gitbook-plugin-fontsettings"</span><span class="token operator">:</span> <span class="token string">"^2.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"gitbook-plugin-github"</span><span class="token operator">:</span> <span class="token string">"^2.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"gitbook-plugin-github-buttons"</span><span class="token operator">:</span> <span class="token string">"^3.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"gitbook-plugin-hide-element"</span><span class="token operator">:</span> <span class="token string">"^0.0.4"</span><span class="token punctuation">,</span>    <span class="token property">"gitbook-plugin-icp"</span><span class="token operator">:</span> <span class="token string">"^0.1.2"</span><span class="token punctuation">,</span>    <span class="token property">"gitbook-plugin-image-captions"</span><span class="token operator">:</span> <span class="token string">"^3.1.0"</span><span class="token punctuation">,</span>    <span class="token property">"gitbook-plugin-insert-logo"</span><span class="token operator">:</span> <span class="token string">"^0.1.5"</span><span class="token punctuation">,</span>    <span class="token property">"gitbook-plugin-lightbox"</span><span class="token operator">:</span> <span class="token string">"^1.2.0"</span><span class="token punctuation">,</span>    <span class="token property">"gitbook-plugin-livereload"</span><span class="token operator">:</span> <span class="token string">"0.0.1"</span><span class="token punctuation">,</span>    <span class="token property">"gitbook-plugin-meta"</span><span class="token operator">:</span> <span class="token string">"^0.1.12"</span><span class="token punctuation">,</span>    <span class="token property">"gitbook-plugin-mygitalk"</span><span class="token operator">:</span> <span class="token string">"^0.2.6"</span><span class="token punctuation">,</span>    <span class="token property">"gitbook-plugin-page-copyright"</span><span class="token operator">:</span> <span class="token string">"^1.0.8"</span><span class="token punctuation">,</span>    <span class="token property">"gitbook-plugin-pageview-count"</span><span class="token operator">:</span> <span class="token string">"^1.0.1"</span><span class="token punctuation">,</span>    <span class="token property">"gitbook-plugin-prism"</span><span class="token operator">:</span> <span class="token string">"^2.4.0"</span><span class="token punctuation">,</span>    <span class="token property">"gitbook-plugin-rss"</span><span class="token operator">:</span> <span class="token string">"^3.0.2"</span><span class="token punctuation">,</span>    <span class="token property">"gitbook-plugin-search-pro"</span><span class="token operator">:</span> <span class="token string">"^2.0.2"</span><span class="token punctuation">,</span>    <span class="token property">"gitbook-plugin-sharing-plus"</span><span class="token operator">:</span> <span class="token string">"^0.0.2"</span><span class="token punctuation">,</span>    <span class="token property">"gitbook-plugin-simple-mind-map"</span><span class="token operator">:</span> <span class="token string">"^0.2.4"</span><span class="token punctuation">,</span>    <span class="token property">"gitbook-plugin-sitemap-general"</span><span class="token operator">:</span> <span class="token string">"^0.1.1"</span><span class="token punctuation">,</span>    <span class="token property">"gitbook-plugin-splitter"</span><span class="token operator">:</span> <span class="token string">"^0.0.8"</span><span class="token punctuation">,</span>    <span class="token property">"gitbook-plugin-theme-comscore"</span><span class="token operator">:</span> <span class="token string">"0.0.3"</span><span class="token punctuation">,</span>    <span class="token property">"gitbook-plugin-todo"</span><span class="token operator">:</span> <span class="token string">"^0.1.3"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">" "</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"repository"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"git"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"git+https://github.com/pudongping/glory.git"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"Artisan"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">"Alex"</span><span class="token punctuation">,</span>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"MIT"</span><span class="token punctuation">,</span>  <span class="token property">"bugs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://github.com/pudongping/glory/issues"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"homepage"</span><span class="token operator">:</span> <span class="token string">"https://github.com/pudongping/glory#readme"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 开源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> 博客 </tag>
            
            <tag> GitBook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019 年 9 月 6 日魔都上海静安考红帽 rhcsa、rhce 记录</title>
      <link href="posts/8dcd0c17.html"/>
      <url>posts/8dcd0c17.html</url>
      
        <content type="html"><![CDATA[<h1 id="2019-09-06-魔都上海静安考红帽rhce记录"><a href="#2019-09-06-魔都上海静安考红帽rhce记录" class="headerlink" title="2019-09-06 魔都上海静安考红帽rhce记录"></a>2019-09-06 魔都上海静安考红帽rhce记录</h1><h3 id="发文申明"><a href="#发文申明" class="headerlink" title="发文申明"></a>发文申明</h3><blockquote><ol><li>本文仅对自己练习 rhce 题目做一个记录，同时纪念自己考试经历。不涉及任何推广或广告。</li><li>文中题库来源于“淘宝环境”（一般参考朋友都明白指的是哪一套环境，如果确实不知道，可以给我留言，我可以贡献一份。当天去考场的时候，我们在静安考场发现考场使用的练习环境也是“淘宝环境”，不得不说题库还是比较准确的）</li><li>“淘宝环境”前 1-6 题，因为大部分可以直接使用图形化界面答题，避免通篇都是图片，前 1-6 题，只会罗列出关键步骤，具体步骤请参考“淘宝环境”配套提供的教学视频解题。本文将从第 7 题开始详细提供参考解答方案。</li></ol></blockquote><h3 id="关于练题心态"><a href="#关于练题心态" class="headerlink" title="关于练题心态"></a>关于练题心态</h3><ul><li>刚开始练题的时候，肯定会有很多不熟悉的地方，建议可以针对性的练习，可以先针对自己觉得比较难的题目练习，但一定要切记注意题与题之间的依赖关系。</li><li>一定要注意，向他人请教解题的方法仅供自己参考，寻找适合自己的方式方法，最为重要！</li><li>少听一些考生抱怨考场环境之类的，你要相信，只要是你自己练的好，再垃圾的环境，你都能够保证你可以考过。当然你也可以发现，喜欢抱怨的考生自身本来就练的不怎么样。</li><li>CE 练题，一定要让自己达到扫一眼题目就知道该题目的解题步骤这样的境界，先在脑海中思考一下答题步骤，再答题。</li><li>考试时一条命令敲完之后，强烈建议不要马上就敲回车，再检查一下自己敲的命令，确认无误之后再回车。你要相信排错比你检查要花时间多得多，并且有时候你一旦命令敲错了，可能会导致剩下的题目无法继续下去。比如：分区时，你一不小心分了 4 个主分区，然而你又不会删除分区，这样就直接导致你后面关于分区的题目无法进行。得不偿失！</li><li>考试做完之后，强烈建议先敲击 <code>sync</code> 命令强制同步数据到硬盘中，然后先关闭 system2 （客户端）再关闭 system1（服务端），开机的时候先开启 system1 （服务端）再开启 system2 （客户端），原因：system1 提供服务，system2 挂载服务，开关机顺序不正确，极大可能性会导致挂载失败！</li><li>另外，挂载 iscsi 网络存储时，一定要注意添加 <code>_netdev</code> 参数，防止因为网络原因，导致挂载失败！</li><li>习武之人，不怕练千万招，就怕一招练千万遍！祝大家考试顺利！</li></ul><h3 id="考试背景"><a href="#考试背景" class="headerlink" title="考试背景"></a>考试背景</h3><blockquote><p>考试地点：上海静安考场（上海静安区也就那么一个考场，为避免广告之嫌，具体位置请自己查询，或直接给我留言）<br>考场环境：系统为 redhat 7.0 64 位，使用 kvm 虚拟机，因此需注意硬盘为 <code>/dev/vd*</code><br>考试时间：2019 年 9 月 6 日</p></blockquote><h3 id="题库分类"><a href="#题库分类" class="headerlink" title="题库分类"></a>题库分类</h3><p>如果把 RHCE 题库做一个分类，那么我做的分类如下：</p><ul><li>postfix 邮件服务类</li><li>samba 共享服务类</li><li>nfs 共享服务类</li><li>Apache web 服务类</li><li>脚本类</li><li>iscsi 网络存储类</li><li>MariaDB 数据库类</li></ul><h3 id="本人解题整体步骤为"><a href="#本人解题整体步骤为" class="headerlink" title="本人解题整体步骤为"></a>本人解题整体步骤为</h3><ol><li>需要安装服务，则优先安装服务</li><li>如果需要创建文件夹，则优先创建文件夹（并且设置 selinux 上下文）</li><li>如果需要创建服务账号，则优先创建服务账号</li><li>写配置文件</li><li>重启服务，并将服务加入开机启动项</li><li>设置相应的防火墙（优先使用防火墙中的富规则过滤，因为富规则的优先级最高）</li><li>简单测试一下</li></ol><p>RHCE 考试步骤较多，如果完全靠自己死记硬背，基本上很难通过考试，但是如果能够按照以上的解题步骤来，多半情况下不会忘记步骤，下文我将提供本人的解题步骤，以供各位参考。</p><h2 id="淘宝题库"><a href="#淘宝题库" class="headerlink" title="淘宝题库"></a>淘宝题库</h2><p>环境说明：</p><blockquote><p>system1.group8.example.com ： 172.24.8.11/24   作为服务器<br>system2.group8.example.com ： 172.24.8.12/24   作为客户端<br>server.group8.example.com 提供了YUM软件仓库，URL是 <a href="http://server.group8.example.com/yum">http://server.group8.example.com/yum</a></p></blockquote><ul><li><h5 id="system1-和-system2-需要先配置-yum-仓库"><a href="#system1-和-system2-需要先配置-yum-仓库" class="headerlink" title="system1 和 system2 需要先配置 yum 仓库"></a>system1 和 system2 需要先配置 yum 仓库</h5></li></ul><p><code>system1</code> 和 <code>system2</code></p><pre class="line-numbers language-none"><code class="language-none">[root@system1 Desktop]# vim /etc/yum.repos.d/rhce.repo[root@system1 Desktop]# yum clean all[root@system1 Desktop]# yum makecache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-2b14dc0d49d4280f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>rhce.repo 文件中内容</p><pre class="line-numbers language-none"><code class="language-none">[rhce]name=rhcebaseurl=http://server.group8.example.com/yumenabled=1gpgcheck=0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-0b49bcdc721261dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><hr><ul><li><h5 id="第一题：设定-SELinux"><a href="#第一题：设定-SELinux" class="headerlink" title="第一题：设定 SELinux"></a>第一题：设定 SELinux</h5></li></ul><p>在 system1 和 system2 上要求 SELinux 的工作模式为 enforcing :<br>1.要求系统重启后依然生效。</p><p><code>参考解题步骤：</code></p><p><code>system1</code> 和 <code>system2</code></p><pre class="line-numbers language-none"><code class="language-none">[root@system1 Desktop]# vim /etc/selinux/config <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><ul><li><h5 id="第二题：配置防火墙"><a href="#第二题：配置防火墙" class="headerlink" title="第二题：配置防火墙"></a>第二题：配置防火墙</h5></li></ul><p>请按下列要求在 system1 和 system2 上设定防火墙系统：</p><ol><li>允许 group8.example.com 域的客户对 system1 和 system2 进行 ssh 访问。</li><li>禁止 my133t.org 域的客户对 system1 和 system2 进行 ssh 访问。</li><li>备注： my133t.org 是在 172.13.8.0/24 网络</li></ol><p><code>参考解题步骤：</code></p><p><code>system1</code> 和 <code>system2</code></p><pre class="line-numbers language-none"><code class="language-none">[root@system1 Desktop]# firewall-config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-685c1f39cb89e302.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><hr><ul><li><h5 id="第三题：自定义用户环境"><a href="#第三题：自定义用户环境" class="headerlink" title="第三题：自定义用户环境"></a>第三题：自定义用户环境</h5></li></ul><p>在系统system1和system2上创建自定义命令为qstat ，要求：</p><ol><li>此自定义命令将执行以下命令：/bin/ps -Ao pid,tt,user,fname,rsz</li><li>此命令对系统中的所有用户有效</li></ol><p><code>参考解题步骤：</code></p><p><code>system1</code> 和 <code>system2</code></p><pre class="line-numbers language-none"><code class="language-none">[root@system1 Desktop]# vim /etc/profile[root@system1 Desktop]# source /etc/profile[root@system1 Desktop]# qstat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>/etc/profile 配置文件中内容</p><pre class="line-numbers language-none"><code class="language-none">alias qstat='/bin/ps -Ao pid,tt,user,fname,rsz'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-d5e1ff3426c65c08.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><hr><ul><li><h5 id="第四题：配置端口转发"><a href="#第四题：配置端口转发" class="headerlink" title="第四题：配置端口转发"></a>第四题：配置端口转发</h5></li></ul><p>在系统 system1 设定端口转发，要求：</p><ol><li>在 172.24.8.0/24 网络中的系统，访问 system1 的本地端口 5423 将被转发到 80</li><li>此设置必须永久有效</li></ol><p><code>参考解题步骤：</code></p><p><code>system1</code></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-263777cf2f595092.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-ffcd889ca6555d28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-e3b7e7f525b14f0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><hr><ul><li><h5 id="第五题：配置链路聚合"><a href="#第五题：配置链路聚合" class="headerlink" title="第五题：配置链路聚合"></a>第五题：配置链路聚合</h5></li></ul><p>在 system2 和 system1 之间按以下要求设定一个链路：</p><ol><li>此链路使用接口 eth1 和 eth2</li><li>此链路在一个接口失效时仍然能工作</li><li>此链路在 system1 使用下面的地址 172.16.3.40/255.255.255.0</li><li>此链路在 system2 使用下面的地址 172.16.3.45/255.255.255.0</li><li>此链路在系统重启之后依然保持正常状态</li></ol><p><code>参考解题步骤：</code></p><p><code>system1</code></p><pre class="line-numbers language-none"><code class="language-none">[root@system1 Desktop]# nm-connection-editor[root@system1 Desktop]# systemctl restart network[root@system1 Desktop]# ping 172.16.3.40[root@system1 Desktop]# ping 172.16.3.45<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-2d8890e00f7e7a04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-938e1da1dc07f101.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><code>system2</code></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-e7b8bebe398a150b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><pre class="line-numbers language-none"><code class="language-none">[root@system2 Desktop]# nm-connection-editor[root@system2 Desktop]# systemctl restart network[root@system2 Desktop]# ping 172.16.3.45[root@system2 Desktop]# ping 172.16.3.40<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">{"runner":{"name":"activebackup"}}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><ul><li><h5 id="第六题：配置-IPV6-地址"><a href="#第六题：配置-IPV6-地址" class="headerlink" title="第六题：配置 IPV6 地址"></a>第六题：配置 IPV6 地址</h5></li></ul><p>在考试系统上设定接口 eth0 使用下列 IPV6 地址：</p><ol><li>system1 上的地址应该是 2003:ac18::305/64</li><li>system2 上的地址应该是 2003:ac18::30a/64</li><li>两个系统必须能与网络 2003:ac18/64 内的系统通信</li><li>地址必须在重启后依然生效</li><li>两个系统必须保持当前的 IPV4 地址并能通信</li></ol><p><code>参考解题步骤：</code></p><p><code>system1</code></p><pre class="line-numbers language-none"><code class="language-none">[root@system1 Desktop]# nm-connection-editor[root@system1 Desktop]# systemctl restart network[root@system1 Desktop]# ping6 2003:ac18::305[root@system1 Desktop]# ping6 2003:ac18::30a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-77f2dedf4521b751.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-ba079898f48dc40d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><code>system2</code></p><pre class="line-numbers language-none"><code class="language-none">[root@system2 Desktop]# nm-connection-editor[root@system2 Desktop]# systemctl restart network[root@system2 Desktop]# ping6 2003:ac18::30a[root@system2 Desktop]# ping6 2003:ac18::305<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-96fb85bc8b4f6eb9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><hr><ul><li><h5 id="第七题：配置本地邮件服务"><a href="#第七题：配置本地邮件服务" class="headerlink" title="第七题：配置本地邮件服务"></a>第七题：配置本地邮件服务</h5></li></ul><p>在系统 system2 和 system1 上配置邮件服务，要求：</p><ol><li>这些系统不接受外部发送来的邮件</li><li>在这些系统上本地发送的任何邮件都会自动路由到 mail.group8.example.com<br>从这些系统上发送的邮件显示来自于 server.group8.example.com</li><li>您可以通过发送邮件到本地用户 dave 来测试您的配置,系统 server.group8.example.com 已经配置把此用户的邮件转到URL <a href="http://server.group8.example.com/pub/received_mail/8">http://server.group8.example.com/pub/received_mail/8</a></li></ol><p><code>参考解题步骤：</code></p><p><code>system1</code> 和 <code>system2</code></p><pre class="line-numbers language-none"><code class="language-none">[root@system1 Desktop]# vim /etc/postfix/main.cf [root@system1 Desktop]# systemctl restart postfix[root@system1 Desktop]# systemctl enable postfix[root@system1 Desktop]# firewall-cmd --permanent --add-service=smtp[root@system1 Desktop]# firewall-cmd --reload[root@system1 Desktop]# echo "test content" | mail -s "testobject" dave[root@system1 Desktop]# curl http://server.group8.example.com/pub/received_mail/8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">98 local_transport = error:local    （需单独添加）99 myorigin = server.group8.example.com314 relayhost = mail.group8.example.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-39805ba385d89d4a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-63dc4393dec4e855.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-6b036d5df79504c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li><h5 id="第八题：通过-SMB-共享目录"><a href="#第八题：通过-SMB-共享目录" class="headerlink" title="第八题：通过 SMB 共享目录"></a>第八题：通过 SMB 共享目录</h5></li></ul><p>在 system1 上配置 SMB 服务 ，要求：</p><ol><li>您的 SMB 服务器必须是 STAFF 工作组的一个成员</li><li>共享 /common 目录，共享名必须为 common</li><li>只有 group8.example.com 域内的客户端可以访问 common 共享</li><li>common 必须是可以浏览的</li><li>用户 andy 必须能够读取共享中的内容，如果需要的话，验证密码是 redhat</li></ol><p><code>参考解题步骤：</code></p><p><code>system1</code></p><pre class="line-numbers language-none"><code class="language-none">[root@system1 Desktop]# yum -y install samba samba-client[root@system1 Desktop]# mkdir /common[root@system1 Desktop]# chcon -R -t samba_share_t /common[root@system1 Desktop]# id andy[root@system1 Desktop]# smbpasswd -a andy[root@system1 Desktop]# vim /etc/samba/smb.conf [root@system1 Desktop]# setsebool -P samba_enable_home_dirs on[root@system1 Desktop]# systemctl restart smb nmb[root@system1 Desktop]# systemctl enable smb nmb[root@system1 Desktop]# firewall-config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置防火墙</p><pre class="line-numbers language-none"><code class="language-none">[root@system1 Desktop]# firewall-cmd --permanent --add-service=samba[root@system1 Desktop]# firewall-cmd --permanent --add-service=mountd[root@system1 Desktop]# firewall-cmd --reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>配置文件填写内容</p><pre class="line-numbers language-none"><code class="language-none"> 89         workgroup = STAFF321 [common]322 path = /common323 hosts allow = 172.24.8.324 browseable = yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-3e11066974a205bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-f1e0a54d16e2d6e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-fb8ea5538214efd9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-f24588e22d80a04a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>验证：</p><p><code>system2</code></p><pre class="line-numbers language-none"><code class="language-none">[root@system2 Desktop]# yum -y install samba-client cifs-utils[root@system2 Desktop]# smbclient -L //172.24.8.11 -U andy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-b16cc12affa9a5a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><hr><ul><li><h5 id="第九题：配置多用户-SMB-挂载"><a href="#第九题：配置多用户-SMB-挂载" class="headerlink" title="第九题：配置多用户 SMB 挂载"></a>第九题：配置多用户 SMB 挂载</h5></li></ul><p>在 system1 通过 SMB 共享目录 /devops ,并满足下列要求：</p><ol><li>共享名为 devops</li><li>共享目录 devops 只能 group8.example.com 域中的客户端使用</li><li>共享目录 devops 必须可以被浏览</li><li>用户 silene 必须能以读的方式访问此共享，访问密码是redhat</li><li>用户 akira 必须能以读写的方式访问此共享，访问密码是redhat</li><li>此共享永久挂载在 system2.group8.example.com 上的 /mnt/dev 目录，并使用用户 silene 作为认证任何用户，可以通过用户 akira 来临时获取写的权限</li></ol><p><code>参考解题步骤：</code></p><p><code>system1</code></p><pre class="line-numbers language-none"><code class="language-none">[root@system1 Desktop]# ls -ald /devops[root@system1 Desktop]# mkdir /devops[root@system1 Desktop]# chmod o+w /devops[root@system1 Desktop]# chcon -R -t samba_share_t /devops[root@system1 Desktop]# id silene[root@system1 Desktop]# smbpasswd -a silene[root@system1 Desktop]# id akira[root@system1 Desktop]# smbpasswd -a akira[root@system1 Desktop]# vim /etc/samba/smb.conf[root@system1 Desktop]# systemctl restart smb nmb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置文件填写内容</p><pre class="line-numbers language-none"><code class="language-none">325 [devops]326 path = devops327 hosts allow = 172.24.8.328 browseable = yes329 writable = no330 write list = akira<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-c70f323e9ffbf6fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><code>system2</code></p><pre class="line-numbers language-none"><code class="language-none">[root@system2 Desktop]# yum -y install cifs*[root@system2 Desktop]# smbclient -L //172.24.8.11 -U silene[root@system2 Desktop]# smbclient -L //172.24.8.12 -U akira[root@system2 Desktop]# ls -ald /mnt/dev[root@system2 Desktop]# mkdir -p /mnt/dev[root@system2 Desktop]# vim /etc/fstab [root@system2 Desktop]# mount -a[root@system2 Desktop]# df -hT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>/etc/fstab 挂载配置文件中填写内容</p><pre class="line-numbers language-none"><code class="language-none">//172.24.8.11/devops /mnt/dev cifs defaults,multiuser,username=silene,password=redhat,sec=ntlmssp 0 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-fb7fd346bbe27159.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-2d02e76c2d839096.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><hr><ul><li><h5 id="第十题：配置-NFS-服务"><a href="#第十题：配置-NFS-服务" class="headerlink" title="第十题：配置 NFS 服务"></a>第十题：配置 NFS 服务</h5></li></ul><p>在 system1 配置 NFS 服务，要求如下：</p><ol><li>以只读的方式共享目录 /public ，同时只能被 group8.example.com 域中的系统访问</li><li>以读写的方式共享目录 /protected ，同时只能被 group8.example.com 域中的系统访问</li><li>访问 /protected 需要通过 Kerberos 安全加密，您可以使用下面 URL 提供的密钥<br><a href="http://server.group8.example.com/pub/keytabs/system1.keytab">http://server.group8.example.com/pub/keytabs/system1.keytab</a></li><li>目录 /protected 应该包含名为 project 拥有人为 andres 的子目录</li><li>用户 andres 能以读写方式访问 /protected/project</li></ol><p><code>参考解题步骤：</code></p><p><code>system1</code></p><pre class="line-numbers language-none"><code class="language-none">[root@system1 Desktop]# ls -ald /public[root@system1 Desktop]# mkdir /public[root@system1 Desktop]# ls -ald /protected[root@system1 Desktop]# mkdir -p /protected/project[root@system1 Desktop]# chown andres /protected/project[root@system1 Desktop]# ls -ald /protected/project[root@system1 Desktop]# chcon -R -t public_content_t /public[root@system1 Desktop]# chcon -R -t public_content_t /protected[root@system1 Desktop]# wget -O /etc/krb5.keytab http://server.group8.example.com/pub/keytabs/system1.keytab[root@system1 Desktop]# vim /etc/sysconfig/nfs [root@system1 Desktop]# vim /etc/exports[root@system1 Desktop]# systemctl restart nfs-server nfs-secure-server[root@system1 Desktop]# systemctl enable nfs-server nfs-secure-server[root@system1 Desktop]# firewall-config [root@system1 Desktop]# exportfs -r<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>/etc/sysconfig/nfs 配置文件中填写的内容</p><pre class="line-numbers language-none"><code class="language-none">13 RPCNFSDARGS="-V 4.2"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-4913def5d21efda0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>/etc/exports 配置文件中填写内容</p><pre class="line-numbers language-none"><code class="language-none">1 /public 172.24.8.0/24(ro)2 /protected 172.24.8.0/24(rw,sec=krb5p)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>设置防火墙</p><pre class="line-numbers language-none"><code class="language-none">[root@system1 Desktop]# firewall-cmd --permanent --add-service=nfs[root@system1 Desktop]# firewall-cmd --permanent --add-service=rpc-bind[root@system1 Desktop]# firewall-cmd --reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><ul><li><h5 id="第十一题：挂载一个-NFS-共享"><a href="#第十一题：挂载一个-NFS-共享" class="headerlink" title="第十一题：挂载一个 NFS 共享"></a>第十一题：挂载一个 NFS 共享</h5></li></ul><p>在 system2 上挂载一个来自 system1.group8.example.com 的 NFS 共享,并符合下列要求：</p><ol><li>/public 挂载在下面的目录上 /mnt/nfsmount</li><li>/protected 挂载在下面的目录上 /mnt/nfssecure 并使用安全的方式，密钥下载 URL 如下：<a href="http://server.group8.example.com/pub/keytabs/system2.keytab">http://server.group8.example.com/pub/keytabs/system2.keytab</a></li><li>用户 andres 能够在 /mnt/nfssecure/project 上创建文件</li><li>这些文件系统在系统启动时自动挂载</li></ol><p><code>参考解题步骤：</code></p><p><code>system2</code></p><pre class="line-numbers language-none"><code class="language-none">[root@system2 Desktop]# showmount -e 172.24.8.11[root@system2 Desktop]# systemctl restart nfs-secure[root@system2 Desktop]# systemctl enable nfs-secure[root@system2 Desktop]# ls -ald /mnt/nfsmount[root@system2 Desktop]# mkdir -p /mnt/nfsmount[root@system2 Desktop]# ls -ald /mnt/nfssecure[root@system2 Desktop]# mkdir -p /mnt/nfssecure[root@system2 Desktop]# wget -O /etc/krb5.keytab http://server.group8.example.com/pub/keytabs/system2.keytab[root@system2 Desktop]# vim /etc/fstab [root@system2 Desktop]# mount -a[root@system2 Desktop]# df -hT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>/etc/fstab 挂载配置文件填写的内容</p><pre class="line-numbers language-none"><code class="language-none">172.24.8.11:/public /mnt/nfsmount nfs defaults 0 0172.24.8.11:/protected /mnt/nfssecure nfs defaults,sec=krb5p,v4.2 0 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-24db5060b6f9e1e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><hr><ul><li><h5 id="第十二题：实现一个-web-服务器"><a href="#第十二题：实现一个-web-服务器" class="headerlink" title="第十二题：实现一个 web 服务器"></a>第十二题：实现一个 web 服务器</h5></li></ul><p>在 system1 上配置一个站点 <a href="http://system1.group8.example.com/%EF%BC%8C%E7%84%B6%E5%90%8E%E6%89%A7%E8%A1%8C%E4%B8%8B%E8%BF%B0%E6%AD%A5%E9%AA%A4%EF%BC%9A">http://system1.group8.example.com/，然后执行下述步骤：</a></p><ol><li>从 <a href="http://server.group8.example.com/pub/system1.html">http://server.group8.example.com/pub/system1.html</a> 下载文件，并且将文件重名为 index.html 不要修改此文件的内容</li><li>将文件 index.html 拷贝到您的 web 服务器的 DocumentRoot 目录下</li><li>来自于 group8.example.com 域的客户端可以访问此 web 服务</li><li>来自于 my133t.org 域的客户端拒绝访问此 web 服务</li></ol><p><code>参考解题步骤：</code></p><p><code>system1</code></p><pre class="line-numbers language-none"><code class="language-none">[root@system1 Desktop]# yum -y install httpd[root@system1 Desktop]# cp /usr/share/doc/httpd-2.4.6/httpd-vhosts.conf /etc/httpd/conf.d/[root@system1 Desktop]# cd /var/www/html[root@system1 html]# wget -O index.html http://server.group8.example.com/pub/system1.html[root@system1 html]# vim /etc/httpd/conf.d/httpd-vhosts.conf[root@system1 html]# systemctl restart httpd[root@system1 html]# systemctl enable httpd[root@system1 html]# firewall-config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-1dfde17bdf2ad2be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>/etc/httpd/conf.d/httpd-vhosts.conf 网站配置文件中应该写的内容</p><pre class="line-numbers language-none"><code class="language-none">&lt;VirtualHost *:80&gt;    DocumentRoot "/var/www/html"    ServerName system1.group8.example.com&lt;/VirtualHost&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-ee2ee212b0c01df7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-b369ae9ea1b88007.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><hr><ul><li><h5 id="第十三题：配置安全-web-服务"><a href="#第十三题：配置安全-web-服务" class="headerlink" title="第十三题：配置安全 web 服务"></a>第十三题：配置安全 web 服务</h5></li></ul><p>为站点 <a href="http://system1.group8.example.com/">http://system1.group8.example.com</a> 配置 TLS 加密：</p><ol><li>一个已签名证书从 <a href="http://server.group8.example.com/pub/tls/certs/system1.crt">http://server.group8.example.com/pub/tls/certs/system1.crt</a> 获取</li><li>此证书的密钥从 <a href="http://server.group8.example.com/pub/tls/private/system1.key">http://server.group8.example.com/pub/tls/private/system1.key</a> 获取</li><li>此证书的签名授权信息从 <a href="http://server.group8.example.com/pub/tls/certs/ssl-ca.crt">http://server.group8.example.com/pub/tls/certs/ssl-ca.crt</a> 获取</li></ol><p><code>参考解题步骤：</code></p><p><code>system1</code></p><pre class="line-numbers language-none"><code class="language-none">[root@system1 Desktop]# yum -y install mod_ssl[root@system1 Desktop]# cd /var/www/html[root@system1 html]# wget http://server.group8.example.com/pub/tls/certs/system1.crt[root@system1 html]# wget http://server.group8.example.com/pub/tls/private/system1.key[root@system1 html]# wget http://server.group8.example.com/pub/tls/certs/ssl-ca.crt[root@system1 html]# vim /etc/httpd/conf.d/ssl.conf    （用于参考的配置文件）[root@system1 html]# vim /etc/httpd/conf.d/httpd-vhosts.conf[root@system1 html]# setsebool -P httpd_read_user_content=on[root@system1 html]# systemctl restart httpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>/etc/httpd/conf.d/httpd-vhosts.conf 网站配置文件中应该写的内容</p><pre class="line-numbers language-none"><code class="language-none">&lt;VirtualHost *:443&gt;SSLEngine onSSLProtocol all -SSLv2SSLCipherSuite HIGH:MEDIUM:!aNULL:!MD5SSLHonorCipherOrder on    DocumentRoot "/var/www/html"    ServerName system1.group8.example.comSSLCertificateFile /var/www/html/system1.crtSSLCertificateKeyFile /var/www/html/system1.keySSLCACertificateFile /var/www/html/ssl-ca.crt&lt;/VirtualHost&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-99e658186dfb348a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="/etc/httpd/conf.d/ssl.conf 参考的配置文件"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-1368eb4ebabcab95.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><hr><ul><li><h5 id="第十四题：配置虚拟主机"><a href="#第十四题：配置虚拟主机" class="headerlink" title="第十四题：配置虚拟主机"></a>第十四题：配置虚拟主机</h5></li></ul><p>在 system1 上扩展您的 web 服务器，为站点 <a href="http://www8.group8.example.com/">http://www8.group8.example.com</a> 创建一个虚拟主机，然后执行下述步骤：</p><ol><li>设置 DocumentRoot 为 /var/www/virtual</li><li>从 <a href="http://server.group8.example.com/pub/www8.html">http://server.group8.example.com/pub/www8.html</a> 下载文件重名为 index.html ,不要对文件 index.html 的内容做任何修改</li><li>将文件 index.html 放到虚拟主机的 DocumentRoot 目录下</li><li>确保 andy 用户能够在 /var/www/virtual 目录下创建文件</li></ol><p>注意：原站点 <a href="http://system1.group8.example.com/">http://system1.group8.example.com</a> 必须仍然能够访问，名称服务器 server.group8.example.com 已经提供对主机名 www8.group8.example.com 的域名解析</p><p><code>参考解题步骤：</code></p><p><code>system1</code></p><pre class="line-numbers language-none"><code class="language-none">[root@system1 Desktop]# mkdir /var/www/virtual[root@system1 Desktop]# cd /var/www/virtual[root@system1 virtual]# getfacl /var/www/virtual[root@system1 virtual]# setfacl -Rm u:andy:rwx /var/www/virtual[root@system1 virtual]# getfacl /var/www/virtual[root@system1 virtual]# wget -O index.html http://server.group8.example.com/pub/www8.html[root@system1 virtual]# vim /etc/httpd/conf.d/httpd-vhosts.conf[root@system1 virtual]# systemctl restart httpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>/etc/httpd/conf.d/httpd-vhosts.conf 配置文件中填写内容</p><pre class="line-numbers language-none"><code class="language-none">&lt;VirtualHost *:80&gt;    DocumentRoot "/var/www/virtual"    ServerName www8.group8.example.com&lt;/VirtualHost&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-a5cc2d08a9cba270.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><hr><ul><li><h5 id="第十五题：配置-web-内容的访问"><a href="#第十五题：配置-web-内容的访问" class="headerlink" title="第十五题：配置 web 内容的访问"></a>第十五题：配置 web 内容的访问</h5></li></ul><p>在您的 system1 上的 web 服务器的 DocumentRoot 目录下，创建一个名为 private 的目录，要求如下：</p><ol><li>从 <a href="http://server.group8.example.com/pub/private.html">http://server.group8.example.com/pub/private.html</a> 下载一个文件副本到这个目录，并且重命名为 index.html</li><li>不要对这个文件的内容做任何修改</li><li>从 system1 上，任何人都可以浏览 private 的内容，但是从其它系统不能访问这个目录的内容。</li></ol><p><code>参考解题步骤：</code></p><p><code>system1</code></p><pre class="line-numbers language-none"><code class="language-none">[root@system1 virtual]# cd /var/www/html[root@system1 html]# mkdir private[root@system1 html]# cd private/[root@system1 private]# wget -O index.html http://server.group8.example.com/pub/private.html[root@system1 private]# vim /etc/httpd/conf/httpd.conf  （用于参考的配置文件）[root@system1 private]# vim /etc/httpd/conf.d/httpd-vhosts.conf[root@system1 private]# systemctl restart httpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>/etc/httpd/conf.d/httpd-vhosts.conf 配置文件中填写内容</p><pre class="line-numbers language-none"><code class="language-none">&lt;Directory "/var/www/html/private"&gt;    AllowOverride none    Require all denied    Require local&lt;/Directory&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-45144d1a5ab0c065.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><hr><ul><li><h5 id="第十六题：实现动态-WEB-内容"><a href="#第十六题：实现动态-WEB-内容" class="headerlink" title="第十六题：实现动态 WEB 内容"></a>第十六题：实现动态 WEB 内容</h5></li></ul><p>在 system1 上配置提供动态 web 内容，要求：</p><ol><li>动态内容由名为 wsgi.group8.example.com 的虚拟主机提供</li><li>虚拟主机侦听在端口 8909</li><li>从 <a href="http://server.group8.example.com/pub/webinfo.wsgi">http://server.group8.example.com/pub/webinfo.wsgi</a> 下载一个脚本，然后放在适当的位置，无论如何不要求修改此文件的内容</li><li>客户端访问 <a href="http://wsgi.group8.example.com:8909/">http://wsgi.group8.example.com:8909/</a> 时，应该接收到动态生成的 web 页面</li><li>此 <a href="http://wsgi.group8.example.com:8909/">http://wsgi.group8.example.com:8909/</a> 必须能被 group8.example.com 域内的所有系统访问</li></ol><p><code>参考解题步骤：</code></p><p><code>system1</code></p><pre class="line-numbers language-none"><code class="language-none">[root@system1 private]# cd /var/www/html[root@system1 html]# yum -y install mod_wsgi[root@system1 html]# wget http://server.group8.example.com/pub/webinfo.wsgi[root@system1 html]#  vim /etc/httpd/conf.d/httpd-vhosts.conf[root@system1 html]# semanage port -a -t http_port_t -p tcp 8909[root@system1 html]# systemctl restart httpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>/etc/httpd/conf.d/httpd-vhosts.conf 配置文件中填写内容</p><pre class="line-numbers language-none"><code class="language-none">listen 8909&lt;VirtualHost *:8909&gt;    WSGIScriptAlias / /var/www/html/webinfo.wsgi    ServerName wsgi.group8.example.com&lt;/VirtualHost&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-5c83ffa719496429.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-f9ba955a92c22aed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><hr><ul><li><h5 id="第十七题：创建一个脚本"><a href="#第十七题：创建一个脚本" class="headerlink" title="第十七题：创建一个脚本"></a>第十七题：创建一个脚本</h5></li></ul><p>在 system1 上创建一个名为 /root/foo.sh 的脚本，让其提供下列特性：</p><ol><li>当运行 /root/foo.sh redhat ,输出为 fedora</li><li>当运行 /root/foo.sh fedora ,输出为 redhat</li><li>当没有任何参数或者参数不是 redhat 或者 fedora 时，其错误输出产生以下的信息：<br>/root/foo.sh redhat | fedora</li></ol><p><code>参考解题步骤：</code></p><p><code>system1</code></p><pre class="line-numbers language-none"><code class="language-none">[root@system1 html]# cd ~[root@system1 ~]# vim /root/foo.sh[root@system1 ~]# chmod a+x /root/foo.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>/root/foo.sh 文件中需要填写的内容</p><pre class="line-numbers language-none"><code class="language-none">case $1 inredhat)echo 'fedora';;fedora)echo 'redhat';;*)echo '/root/foo.sh redhat | fedora';;esac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-b8c4cc35ec38c4da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><hr><ul><li><h5 id="第十八题：创建一个添加用户的脚本"><a href="#第十八题：创建一个添加用户的脚本" class="headerlink" title="第十八题：创建一个添加用户的脚本"></a>第十八题：创建一个添加用户的脚本</h5></li></ul><p>在 system1 上创建一个脚本，名为 /root/batchusers ,此脚本能实现为系统 system1 创建本地用户，并且这些用户的用户名来自一个包含用户名列表的文件，同时满足下列要求：</p><ol><li>此脚本要求提供一个参数，此参数就是包含用户名列表的的文件</li><li>如果没有提供参数，此脚本应该给出下面的提示信息 Usage: /root/batchusers userfile 然后退出并返回相应的值</li><li>如果提供一个不存在的文件名，此脚本应该给出下面的提示信息 Input file not found 然后退出并返回相应的值</li><li>创建的用户登录 shell 为 /bin/false</li><li>此脚本不需要为用户设置密码</li><li>您可以从下面的 URL 获取用户名列表作为测试用 <a href="http://server.group8.example.com/pub/userlist">http://server.group8.example.com/pub/userlist</a></li></ol><p><code>参考解题步骤：</code></p><p><code>system1</code></p><pre class="line-numbers language-none"><code class="language-none">[root@system1 ~]# cd ~[root@system1 ~]# wget http://server.group8.example.com/pub/userlist[root@system1 ~]# more userlist[root@system1 ~]# vim /root/batchusers[root@system1 ~]# chmod a+x /root/batchusers<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>/root/batchusers 文件中需要填写的内容</p><pre class="line-numbers language-none"><code class="language-none">if [ $# -eq 0 ];thenecho 'Usage: /root/batchusers userfile'exit 1fiif [ ! -f $1 ];thenecho 'Input file not found'exit 1fiwhile read linedouseradd -s /bin/false $linedone &lt; $1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><ul><li><h5 id="第十九题：配置-ISCSI-服务端"><a href="#第十九题：配置-ISCSI-服务端" class="headerlink" title="第十九题：配置 ISCSI 服务端"></a>第十九题：配置 ISCSI 服务端</h5></li></ul><p>配置 system1 提供一个 ISCSI 服务 磁盘名为 iqn.2014-08.com.example.group8:system1 ，并符合下列要求：</p><ol><li>服务端口为 3260</li><li>使用 iscsi_store 作其后端逻辑卷名称，其大小为 3G</li><li>此服务只能被 system2.group8.example.com 访问</li></ol><p><code>参考解题步骤：</code></p><p><code>system1</code></p><pre class="line-numbers language-none"><code class="language-none">[root@system1 ~]# yum -y install target*[root@system1 ~]# ls -ald /dev/sd*[root@system1 ~]# fdisk /dev/sda[root@system1 ~]# partprobe[root@system1 ~]# partprobe[root@system1 ~]# ls -ald /dev/sd*[root@system1 ~]# pvcreate /dev/sda3[root@system1 ~]# vgcreate rhce /dev/sda3[root@system1 ~]# lvcreate -l 100%VG -n iscsi_store rhce[root@system1 ~]# lvscan[root@system1 ~]# targetcli[root@system1 ~]# systemctl restart target[root@system1 ~]# systemctl enable target[root@system1 ~]# firewall-config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-57e18e04cca64462.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-763a51805201d72d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-5814e618608d527d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>targetcli 配置命令如下</p><pre class="line-numbers language-none"><code class="language-none">/&gt; ls/&gt; cd /backstores/block/backstores/block&gt; create disk0 /dev/rhce/iscsi_store/backstores/block&gt; cd /iscsi /iscsi&gt; ls/iscsi&gt; create iqn.2014-08.com.example.group8:system1/iscsi&gt; ls/iscsi&gt; cd iqn.2014-08.com.example.group8:system1/tpg1/acls /iscsi/iqn.20...em1/tpg1/acls&gt; create iqn.2014-08.com.example.group8:system2/iscsi/iqn.20...em1/tpg1/acls&gt; cd ../luns /iscsi/iqn.20...em1/tpg1/luns&gt; create /backstores/block/disk0/iscsi/iqn.20...em1/tpg1/luns&gt; cd ../portals//iscsi/iqn.20.../tpg1/portals&gt; create 172.24.8.11 3260/iscsi/iqn.20.../tpg1/portals&gt; ls/iscsi/iqn.20.../tpg1/portals&gt; delete 0.0.0.0 3260/iscsi/iqn.20.../tpg1/portals&gt; create 172.24.8.11 3260/iscsi/iqn.20.../tpg1/portals&gt; ls/iscsi/iqn.20.../tpg1/portals&gt; exit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-b42054fbaadaadd4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><hr><ul><li><h5 id="第二十题：配置-iSCISI-的客户端"><a href="#第二十题：配置-iSCISI-的客户端" class="headerlink" title="第二十题：配置 iSCISI 的客户端"></a>第二十题：配置 iSCISI 的客户端</h5></li></ul><p>配置 system2 使其能连接在 system1 上提供的 iqn.2014-08.com.example.group8:system1,并符合以下要求：</p><ol><li>iSCISI 设备在系统启动的期间自动加载</li><li>块设备 iSCISI 上包含一个大小为 2100 MiB 的分区，并格式化为 ext4</li><li>此分区挂载在 /mnt/data 上，同时在系统启动的期间自动挂载</li></ol><p><code>参考解题步骤：</code></p><p><code>system2</code></p><pre class="line-numbers language-none"><code class="language-none">[root@system2 Desktop]# yum -y install iscsi-*[root@system2 Desktop]# vim /etc/iscsi/initiatorname.iscsi [root@system2 Desktop]# systemctl restart iscsi iscsid[root@system2 Desktop]# systemctl enable iscsi iscsid[root@system2 Desktop]# lsblk[root@system2 Desktop]# iscsiadm -m discovery -t st -p 172.24.8.11[root@system2 Desktop]# iscsiadm -m node -T iqn.2014-08.com.example.group8:system1 -l[root@system2 Desktop]# lsblk[root@system2 Desktop]# ls -ald /dev/sd*[root@system2 Desktop]# fdisk /dev/sdb[root@system2 Desktop]# ls -ald /dev/sd*[root@system2 Desktop]# mkfs   （连续按两次 type 键）[root@system2 Desktop]# mkfs.ext4 /dev/sdb1[root@system2 Desktop]# blkid /dev/sdb1[root@system2 Desktop]# ls -ald /mnt/data[root@system2 Desktop]# mkdir -p /mnt/data[root@system2 Desktop]# vim /etc/fstab [root@system2 Desktop]# mount -a[root@system2 Desktop]# df -hT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>/etc/iscsi/initiatorname.iscsi 配置文件中的内容如下</p><pre class="line-numbers language-none"><code class="language-none">InitiatorName=iqn.2014-08.com.example.group8:system2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>/etc/fstab 挂载配置文件内容如下</p><pre class="line-numbers language-none"><code class="language-none">UUID="82e0d1be-f690-45e2-8dfc-7aa548df3fff" /mnt/data ext4 defaults,_netdev 0 0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-720bb16f0fdc7c93.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-3cba38302ca24aeb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><hr><ul><li><h5 id="第二十一题：配置一个数据库"><a href="#第二十一题：配置一个数据库" class="headerlink" title="第二十一题：配置一个数据库"></a>第二十一题：配置一个数据库</h5></li></ul><p>在 system1上创建一个 Maria DB 数据库，名为 Contacts，要求：</p><ol><li>数据库应该包含来自数据库复制的内容，复制文件的URL为 <a href="http://server.group8.example.com/pub/users.mdb">http://server.group8.example.com/pub/users.mdb</a> ，数据库只能被 localhost 访问</li><li>除了 root 用户，此数据库只能被用户 Mary 查询，此用户密码为 redhat</li><li>root 用户的数据库密码为 redhat ，同时不允许空密码登录</li></ol><p><code>参考解题步骤：</code></p><p><code>system1</code></p><pre class="line-numbers language-none"><code class="language-none">[root@system1 ~]# yum -y install mariadb mariadb-client mariadb-server[root@system1 ~]# wget http://server.group8.example.com/pub/users.mdb[root@system1 ~]# vim /etc/my.cnf[root@system1 ~]# systemctl restart mariadb [root@system1 ~]# systemctl enable mariadb[root@system1 ~]# mysql_secure_installation      （交互界面全部选择 y ）[root@system1 ~]# mysql -u root -p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">19 skip-networking=1    （请自行添加）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/medias/loading.gif" data-original="https://upload-images.jianshu.io/upload_images/14623749-5b4118b997756732.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>进入 MariaDB 数据库使用的命令如下</p><pre class="line-numbers language-none"><code class="language-none">MariaDB [(none)]&gt; show databases;MariaDB [(none)]&gt; create database Contacts;MariaDB [(none)]&gt; use Contacts;MariaDB [Contacts]&gt; source users.mdb;MariaDB [Contacts]&gt; show tables;MariaDB [Contacts]&gt; grant select on Contacts.* to Mary@'localhost' identified by 'redhat';MariaDB [Contacts]&gt; exit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><ul><li><h5 id="第二十一题：数据库查询"><a href="#第二十一题：数据库查询" class="headerlink" title="第二十一题：数据库查询"></a>第二十一题：数据库查询</h5></li></ul><p>在 system1 上使用数据库 Contacts ，并使用相应的 SQL 查询以回答下列问题：</p><ol><li>密码是 fadora 的人的名字是什么？</li><li>有多少人的姓名是 John ，同时居住在 Santa Clara ？</li></ol><p>直接贴出 sql 语句如下，仅供参考，考试时在这里的变数还是很大的，建议不要死记硬背。</p><pre class="line-numbers language-none"><code class="language-none">select n.firstname,n.lastname from u_name  as n left join u_passwd as p where n.userid = p.uid and p.password = 'fedora';select count(*) from u_name as n left join u_loc as l where n.userid = l.uid and n.firstname = 'John' and l.location = 'Santa Clara';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 红帽认证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-blog 博客开源</title>
      <link href="posts/e3e08109.html"/>
      <url>posts/e3e08109.html</url>
      
        <content type="html"><![CDATA[<h1 id="博客开源"><a href="#博客开源" class="headerlink" title="博客开源"></a>博客开源</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>折腾了一个星期左右，总算是把我的个人博客给完善了，为了回馈开源，我会把我自己修改后的且完善的 <code>blog</code> 网站源码开源。<br>代码都是源码，您可以直接下载我的博客源码，然后将根目录下的 <code>/_config.yml</code> 和 <code>/themes/hexo-theme-matery/_config.yml</code><br>这两个配置文件中的信息修改成您的信息就可以部署成和我一摸一样的博客了。是不是很方便？这对于一些想写博客，但是又不想太折腾，<br>并且对美观有一定要求的朋友来说，简直是爽的不要不要的。😜 <a href="https://github.com/pudongping/pudongping.github.io">点我立即下载我的博客源码</a></p><h2 id="关于我的博客项目"><a href="#关于我的博客项目" class="headerlink" title="关于我的博客项目"></a>关于我的博客项目</h2><p>这个博客，我是基于 <strong><a href="https://hexo.io/zh-cn/docs/">Hexo</a></strong> 框架搭建，并且用到 <strong><a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a></strong> 主题，<br>在此基础上做了不少的修改，增加了一些新的特性和功能。我的博客访问地址为：<a href="http://pudongping.github.io/">http://pudongping.github.io</a> 或者访问 <a href="https://pudongping.github.io/">https://pudongping.github.io</a></p><h2 id="创建项目时，各个软件版本介绍"><a href="#创建项目时，各个软件版本介绍" class="headerlink" title="创建项目时，各个软件版本介绍"></a>创建项目时，各个软件版本介绍</h2><ul><li>修改项目时间为 2021 年 6 月 5 日</li><li>使用的 node.js 版本为：v16.2.0</li><li>使用的 npm 版本为：7.13.0</li><li>使用的 hexo 版本为：5.4.0</li><li>使用的 hexo-theme-matery 皮肤版本为：v2.0.0</li><li>其他的依赖包见 package.json 文件，具体版本号见 package-lock.json 文件。</li></ul><h2 id="如何搭建和我一摸一样的博客？"><a href="#如何搭建和我一摸一样的博客？" class="headerlink" title="如何搭建和我一摸一样的博客？"></a>如何搭建和我一摸一样的博客？</h2><blockquote><p>前提你需要先安装 <code>git</code> 和 <code>node.js</code> （安装好 node.js 之后，会自动安装 npm，强烈建议使用 <a href="https://github.com/nvm-sh/nvm">nvm</a> 安装 node.js 以方便管理多个版本的 node.js）</p></blockquote><ul><li>安装 <code>hexo-cli</code></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 全局安装 hexo</span><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> hexo-cli<span class="token comment"># 局部安装 hexo</span><span class="token function">npm</span> <span class="token function">install</span> hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>直接使用 <code>git</code> 拉取项目并进入相应的文件目录</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用 GitHub 地址</span><span class="token function">git</span> clone https://github.com/pudongping/pudongping.github.io.git blog<span class="token comment"># 使用 gitee 地址 （要是代码拉取不下来的话，建议使用 gitee 地址）</span><span class="token function">git</span> clone https://gitee.com/pudongping/pudongping.git blog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>切换分支</li></ul><p>建议切换到 <code>hexo</code> 分支，方便你自定义你的博客。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 如果你想实现和我一摸一样的博客的话，你可以直接切换到 `main` 分支，这是我自己完整的博客源码分支，其中包含了我所有的博客文章</span><span class="token function">git</span> checkout main<span class="token comment"># 如果你只想获取我所有的修改，并基于此基础之上改成自己的博客的话，那么可以切换到 `hexo` 分支，这个分支上是我博客修改的基础分支，</span><span class="token comment"># 在此分支基础之上你可以添加你自己的任何修改。（不包含我所有的博客文章和我自定义的其他修改）</span><span class="token function">git</span> checkout hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>安装依赖插件</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>修改根目录下的 <code>/_config.yml</code> 和 <code>/themes/hexo-theme-matery/_config.yml</code> 的这两个配置文件，改成自己的信息</p></li><li><p>编译源代码</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 清除生成的静态文件</span>hexo cl<span class="token comment"># 生成静态页面至 public 页面 （如果只是本地预览，可不进行此步骤）</span>hexo g<span class="token comment"># 生成本地预览</span>hexo s<span class="token comment"># 如果需要生成 github-pages 的话，则执行以下命令 （需要安装 npm install hexo-deployer-git --save 插件包）</span>hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>本地访问项目</li></ul><p>直接在浏览器中访问 <a href="http://localhost:4000/]">http://localhost:4000/</a> 即可。部署完毕！</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><h3 id="hexo-theme-matery-主题特性"><a href="#hexo-theme-matery-主题特性" class="headerlink" title="hexo-theme-matery 主题特性"></a>hexo-theme-matery 主题特性</h3><ul><li>简单漂亮，文章内容美观易读</li><li><a href="https://material.io/">Material Design</a> 设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换 <code>Banner</code> 图片</li><li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li><li>时间轴式的归档页</li><li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持 <code>MathJax</code></li><li><code>TOC</code> 目录</li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li><a href="https://gitalk.github.io/">Gitalk</a>、<a href="https://imsun.github.io/gitment/">Gitment</a>、<a href="https://valine.js.org/">Valine</a> 和 <a href="https://disqus.com/">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li><li>集成了<a href="http://busuanzi.ibruce.info/">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能</li><li>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。</li><li>支持 <a href="http://www.daovoice.io/">DaoVoice</a>、<a href="https://www.tidio.com/">Tidio</a> 在线聊天功能。</li></ul><h3 id="修改或增加的特性功能"><a href="#修改或增加的特性功能" class="headerlink" title="修改或增加的特性功能"></a>修改或增加的特性功能</h3><ul><li>添加 emoji 表情支持</li><li>添加 RSS 订阅支持</li><li>添加站点地图支持</li><li>css、js资源增加 cdn 加速</li><li>底部增加备案号信息</li><li>修改了主题颜色</li><li>处理了图片因防盗链无法显示问题</li><li>添加了动态改变页面标签的功能</li><li>添加了鼠标点击烟花爆炸特效</li><li>添加了鼠标点击出现自定义文字浮层特效</li><li>添加了页面樱花飘落动态特效</li><li>添加了页面雪花飘落动态特效</li><li>优化文章的 url</li><li>图片懒加载</li><li>添加了在<strong>关于我</strong>页面写简历功能</li><li>修改了 banner 图随机轮播</li></ul><h2 id="博客截图"><a href="#博客截图" class="headerlink" title="博客截图"></a>博客截图</h2><p><img src="/medias/loading.gif" data-original="https://pudongping.github.io/medias/sample/page.png" alt="首页"><br><img src="/medias/loading.gif" data-original="https://pudongping.github.io/medias/sample/articles-list.png" alt="文章列表"><br><img src="/medias/loading.gif" data-original="https://pudongping.github.io/medias/sample/articles-list-1.png" alt="文章列表"><br><img src="/medias/loading.gif" data-original="https://pudongping.github.io/medias/sample/article-detail.png" alt="文章详情"><br><img src="/medias/loading.gif" data-original="https://pudongping.github.io/medias/sample/article-detail-1.png" alt="文章详情"><br><img src="/medias/loading.gif" data-original="https://pudongping.github.io/medias/sample/tags.png" alt="标签页"><br><img src="/medias/loading.gif" data-original="https://pudongping.github.io/medias/sample/categories.png" alt="分类页"><br><img src="/medias/loading.gif" data-original="https://pudongping.github.io/medias/sample/archives.png" alt="归档页"><br><img src="/medias/loading.gif" data-original="https://pudongping.github.io/medias/sample/about-me.png" alt="关于我页"><br><img src="/medias/loading.gif" data-original="https://pudongping.github.io/medias/sample/contact.png" alt="留言板页"></p><h2 id="感谢支持"><a href="#感谢支持" class="headerlink" title="感谢支持"></a>感谢支持</h2><p>如果你觉得对你有所帮助,请帮忙给个 <code>Star</code>。<br>如果你想贡献一份力量,欢迎提交 <code>Pull Request</code>。</p><h2 id="赞赏捐助"><a href="#赞赏捐助" class="headerlink" title="赞赏捐助"></a>赞赏捐助</h2><p>有问题可以在文章最后评论区进行 <strong>留言和评论</strong> ，如果你喜欢我的博客，请博主喝一杯冰阔乐呀^_^ 😘</p><table>  <tbody><tr>    <td>        <img width="100" src="/medias/loading.gif" data-original="https://pudongping.github.io/medias/reward/alipay.png" alt="alipay">    </td>    <td>        <img width="100" src="/medias/loading.gif" data-original="https://pudongping.github.io/medias/reward/wechat.png" alt="wechat">    </td>  </tr></tbody></table><blockquote><p>😘 若有共鸣，留言足矣，若有赞赏，何以复加？ 🤞</p></blockquote><h2 id="LICENSE"><a href="#LICENSE" class="headerlink" title="LICENSE"></a>LICENSE</h2><p>MIT</p>]]></content>
      
      
      <categories>
          
          <category> 开源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> 博客 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
